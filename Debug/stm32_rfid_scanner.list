
stm32_rfid_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006294  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b24  08006b24  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006b24  08006b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b2c  08006b2c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000da8  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dbc  20000dbc  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001950d  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f1b  00000000  00000000  00039594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001650  00000000  00000000  0003c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001195  00000000  00000000  0003db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025bcc  00000000  00000000  0003ec95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000184e9  00000000  00000000  00064861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e670c  00000000  00000000  0007cd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006108  00000000  00000000  00163458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00169560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006428 	.word	0x08006428

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08006428 	.word	0x08006428

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f001 f84b 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f825 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 fa61 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 80004fa:	f000 fa3f 	bl	800097c <MX_DMA_Init>
  MX_ETH_Init();
 80004fe:	f000 f889 	bl	8000614 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000502:	f000 f9e3 	bl	80008cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000506:	f000 fa0b 	bl	8000920 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 800050a:	f000 f9a9 	bl	8000860 <MX_TIM6_Init>
  MX_TIM1_Init();
 800050e:	f000 f905 	bl	800071c <MX_TIM1_Init>
  MX_SPI1_Init();
 8000512:	f000 f8cd 	bl	80006b0 <MX_SPI1_Init>
//
//  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)&pwmData, 10);


  MFRC rfidReader;
  rfidReader.hspi = &hspi1;
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <main+0x4c>)
 8000518:	613b      	str	r3, [r7, #16]
  MFRC522_Init(&rfidReader, GPIO_PIN_7, GPIOC, GPIO_PIN_3, GPIOB);
 800051a:	1d38      	adds	r0, r7, #4
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <main+0x50>)
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2308      	movs	r3, #8
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <main+0x54>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	f000 fe9c 	bl	8001262 <MFRC522_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 800052a:	2064      	movs	r0, #100	; 0x64
 800052c:	f001 f89e 	bl	800166c <HAL_Delay>
 8000530:	e7fb      	b.n	800052a <main+0x42>
 8000532:	bf00      	nop
 8000534:	20000258 	.word	0x20000258
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f005 ff30 	bl	80063b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b4:	23a8      	movs	r3, #168	; 0xa8
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005bc:	2307      	movs	r3, #7
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 faad 	bl	8002b24 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d0:	f000 fb1c 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2105      	movs	r1, #5
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fd0e 	bl	8003014 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fe:	f000 fb05 	bl	8000c0c <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_ETH_Init+0x84>)
 800061a:	4a20      	ldr	r2, [pc, #128]	; (800069c <MX_ETH_Init+0x88>)
 800061c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_ETH_Init+0x8c>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_ETH_Init+0x8c>)
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_ETH_Init+0x8c>)
 800062c:	22e1      	movs	r2, #225	; 0xe1
 800062e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_ETH_Init+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ETH_Init+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_ETH_Init+0x8c>)
 800063e:	2200      	movs	r2, #0
 8000640:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_ETH_Init+0x84>)
 8000644:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <MX_ETH_Init+0x8c>)
 8000646:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_ETH_Init+0x84>)
 800064a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800064e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_ETH_Init+0x84>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_ETH_Init+0x90>)
 8000654:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_ETH_Init+0x84>)
 8000658:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_ETH_Init+0x94>)
 800065a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_ETH_Init+0x84>)
 800065e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000662:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <MX_ETH_Init+0x84>)
 8000666:	f001 fc21 	bl	8001eac <HAL_ETH_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000670:	f000 facc 	bl	8000c0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000674:	2238      	movs	r2, #56	; 0x38
 8000676:	2100      	movs	r1, #0
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_ETH_Init+0x98>)
 800067a:	f005 fe9b 	bl	80063b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_ETH_Init+0x98>)
 8000680:	2221      	movs	r2, #33	; 0x21
 8000682:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_ETH_Init+0x98>)
 8000686:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800068a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_ETH_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200001a8 	.word	0x200001a8
 800069c:	40028000 	.word	0x40028000
 80006a0:	200008f8 	.word	0x200008f8
 80006a4:	20000108 	.word	0x20000108
 80006a8:	20000068 	.word	0x20000068
 80006ac:	20000030 	.word	0x20000030

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2218      	movs	r2, #24
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f002 fea7 	bl	8003454 <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 fa7e 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000258 	.word	0x20000258
 8000718:	40013000 	.word	0x40013000

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b096      	sub	sp, #88	; 0x58
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2220      	movs	r2, #32
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f005 fe2d 	bl	80063b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800075a:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <MX_TIM1_Init+0x13c>)
 800075c:	4a3f      	ldr	r2, [pc, #252]	; (800085c <MX_TIM1_Init+0x140>)
 800075e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 8000760:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <MX_TIM1_Init+0x13c>)
 8000762:	f244 129f 	movw	r2, #16799	; 0x419f
 8000766:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b3b      	ldr	r3, [pc, #236]	; (8000858 <MX_TIM1_Init+0x13c>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <MX_TIM1_Init+0x13c>)
 8000770:	f242 720f 	movw	r2, #9999	; 0x270f
 8000774:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b38      	ldr	r3, [pc, #224]	; (8000858 <MX_TIM1_Init+0x13c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800077c:	4b36      	ldr	r3, [pc, #216]	; (8000858 <MX_TIM1_Init+0x13c>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b35      	ldr	r3, [pc, #212]	; (8000858 <MX_TIM1_Init+0x13c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000788:	4833      	ldr	r0, [pc, #204]	; (8000858 <MX_TIM1_Init+0x13c>)
 800078a:	f003 fc0b 	bl	8003fa4 <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000794:	f000 fa3a 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800079e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007a2:	4619      	mov	r1, r3
 80007a4:	482c      	ldr	r0, [pc, #176]	; (8000858 <MX_TIM1_Init+0x13c>)
 80007a6:	f003 fe6f 	bl	8004488 <HAL_TIM_ConfigClockSource>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007b0:	f000 fa2c 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007b4:	4828      	ldr	r0, [pc, #160]	; (8000858 <MX_TIM1_Init+0x13c>)
 80007b6:	f003 fc44 	bl	8004042 <HAL_TIM_PWM_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007c0:	f000 fa24 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d0:	4619      	mov	r1, r3
 80007d2:	4821      	ldr	r0, [pc, #132]	; (8000858 <MX_TIM1_Init+0x13c>)
 80007d4:	f004 fa32 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80007de:	f000 fa15 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e2:	2360      	movs	r3, #96	; 0x60
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <MX_TIM1_Init+0x13c>)
 8000808:	f003 fd7c 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000812:	f000 f9fb 	bl	8000c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800082a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <MX_TIM1_Init+0x13c>)
 800083a:	f004 fa7b 	bl	8004d34 <HAL_TIMEx_ConfigBreakDeadTime>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000844:	f000 f9e2 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <MX_TIM1_Init+0x13c>)
 800084a:	f000 fbad 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 800084e:	bf00      	nop
 8000850:	3758      	adds	r7, #88	; 0x58
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200002b0 	.word	0x200002b0
 800085c:	40010000 	.word	0x40010000

08000860 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_TIM6_Init+0x64>)
 8000870:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_TIM6_Init+0x68>)
 8000872:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_TIM6_Init+0x64>)
 8000876:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800087a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_TIM6_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_TIM6_Init+0x64>)
 8000884:	f241 3288 	movw	r2, #5000	; 0x1388
 8000888:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_TIM6_Init+0x64>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <MX_TIM6_Init+0x64>)
 8000892:	f003 fb87 	bl	8003fa4 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800089c:	f000 f9b6 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_TIM6_Init+0x64>)
 80008ae:	f004 f9c5 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 f9a8 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200002f8 	.word	0x200002f8
 80008c8:	40001000 	.word	0x40001000

080008cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART3_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 8000904:	f004 fa7c 	bl	8004e00 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f97d 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200003a0 	.word	0x200003a0
 800091c:	40004800 	.word	0x40004800

08000920 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800092a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2204      	movs	r2, #4
 8000930:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2202      	movs	r2, #2
 8000936:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2202      	movs	r2, #2
 8000942:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2201      	movs	r2, #1
 8000948:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2201      	movs	r2, #1
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	f001 ffc0 	bl	80028e8 <HAL_PCD_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f94d 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200003e4 	.word	0x200003e4

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_DMA_Init+0x3c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <MX_DMA_Init+0x3c>)
 800098c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_DMA_Init+0x3c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2039      	movs	r0, #57	; 0x39
 80009a4:	f000 ff61 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009a8:	2039      	movs	r0, #57	; 0x39
 80009aa:	f000 ff7a 	bl	80018a2 <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	4b60      	ldr	r3, [pc, #384]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a5f      	ldr	r2, [pc, #380]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b5d      	ldr	r3, [pc, #372]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	4b59      	ldr	r3, [pc, #356]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a58      	ldr	r2, [pc, #352]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a51      	ldr	r2, [pc, #324]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b4b      	ldr	r3, [pc, #300]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a4a      	ldr	r2, [pc, #296]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b44      	ldr	r3, [pc, #272]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a43      	ldr	r2, [pc, #268]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b41      	ldr	r3, [pc, #260]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a3c      	ldr	r2, [pc, #240]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a35      	ldr	r2, [pc, #212]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|MFR522_RS_PIN_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f244 0189 	movw	r1, #16521	; 0x4089
 8000a9c:	482f      	ldr	r0, [pc, #188]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a9e:	f001 fef1 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	482e      	ldr	r0, [pc, #184]	; (8000b60 <MX_GPIO_Init+0x1a4>)
 8000aa8:	f001 feec 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFR522_CS_PIN_GPIO_Port, MFR522_CS_PIN_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	482c      	ldr	r0, [pc, #176]	; (8000b64 <MX_GPIO_Init+0x1a8>)
 8000ab2:	f001 fee7 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4825      	ldr	r0, [pc, #148]	; (8000b64 <MX_GPIO_Init+0x1a8>)
 8000ace:	f001 fd15 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin MFR522_RS_PIN_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|MFR522_RS_PIN_Pin|LD2_Pin;
 8000ad2:	f244 0389 	movw	r3, #16521	; 0x4089
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481c      	ldr	r0, [pc, #112]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000aec:	f001 fd06 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af0:	2340      	movs	r3, #64	; 0x40
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4816      	ldr	r0, [pc, #88]	; (8000b60 <MX_GPIO_Init+0x1a4>)
 8000b08:	f001 fcf8 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4810      	ldr	r0, [pc, #64]	; (8000b60 <MX_GPIO_Init+0x1a4>)
 8000b20:	f001 fcec 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MFR522_CS_PIN_Pin */
  GPIO_InitStruct.Pin = MFR522_CS_PIN_Pin;
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MFR522_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <MX_GPIO_Init+0x1a8>)
 8000b3c:	f001 fcde 	bl	80024fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2028      	movs	r0, #40	; 0x28
 8000b46:	f000 fe90 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b4a:	2028      	movs	r0, #40	; 0x28
 8000b4c:	f000 fea9 	bl	80018a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b50:	bf00      	nop
 8000b52:	3730      	adds	r7, #48	; 0x30
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	40021800 	.word	0x40021800
 8000b64:	40020800 	.word	0x40020800

08000b68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if(_pressed == 0 && HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET)
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d115      	bne.n	8000ba6 <HAL_GPIO_EXTI_Callback+0x3e>
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	481a      	ldr	r0, [pc, #104]	; (8000be8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b80:	f001 fe68 	bl	8002854 <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10d      	bne.n	8000ba6 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		_pressed = 1;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
		_startTick = HAL_GetTick();
 8000b90:	f000 fd60 	bl	8001654 <HAL_GetTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <HAL_GPIO_EXTI_Callback+0x84>)
 8000b98:	6013      	str	r3, [r2, #0]
		_tick = HAL_GetTick();
 8000b9a:	f000 fd5b 	bl	8001654 <HAL_GetTick>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e004      	b.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x48>
	}else{
		_tick = HAL_GetTick();
 8000ba6:	f000 fd55 	bl	8001654 <HAL_GetTick>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000bae:	6013      	str	r3, [r2, #0]
	}

	if(_tick - _startTick > 10 && HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET)
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_GPIO_EXTI_Callback+0x84>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b0a      	cmp	r3, #10
 8000bbc:	d90d      	bls.n	8000bda <HAL_GPIO_EXTI_Callback+0x72>
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	4809      	ldr	r0, [pc, #36]	; (8000be8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bc4:	f001 fe46 	bl	8002854 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d105      	bne.n	8000bda <HAL_GPIO_EXTI_Callback+0x72>
	{
		isButtonPressed = 1;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
		_pressed = 0;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000004 	.word	0x20000004
 8000be8:	40020800 	.word	0x40020800
 8000bec:	200008f4 	.word	0x200008f4
 8000bf0:	200008f0 	.word	0x200008f0
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	static int cnt = 0;

	//ledToggle(&ledYellow);

}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a55      	ldr	r2, [pc, #340]	; (8000ddc <HAL_ETH_MspInit+0x174>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	f040 80a4 	bne.w	8000dd4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
 8000c90:	4b53      	ldr	r3, [pc, #332]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a52      	ldr	r2, [pc, #328]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca4:	623b      	str	r3, [r7, #32]
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
 8000cac:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a4b      	ldr	r2, [pc, #300]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000cb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	4b45      	ldr	r3, [pc, #276]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a44      	ldr	r2, [pc, #272]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000cce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b3b      	ldr	r3, [pc, #236]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a36      	ldr	r2, [pc, #216]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <HAL_ETH_MspInit+0x178>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d50:	2332      	movs	r3, #50	; 0x32
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d60:	230b      	movs	r3, #11
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481e      	ldr	r0, [pc, #120]	; (8000de4 <HAL_ETH_MspInit+0x17c>)
 8000d6c:	f001 fbc6 	bl	80024fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d70:	2386      	movs	r3, #134	; 0x86
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d80:	230b      	movs	r3, #11
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4817      	ldr	r0, [pc, #92]	; (8000de8 <HAL_ETH_MspInit+0x180>)
 8000d8c:	f001 fbb6 	bl	80024fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da2:	230b      	movs	r3, #11
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	480f      	ldr	r0, [pc, #60]	; (8000dec <HAL_ETH_MspInit+0x184>)
 8000dae:	f001 fba5 	bl	80024fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000db2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4808      	ldr	r0, [pc, #32]	; (8000df0 <HAL_ETH_MspInit+0x188>)
 8000dd0:	f001 fb94 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3738      	adds	r7, #56	; 0x38
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40028000 	.word	0x40028000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40021800 	.word	0x40021800

08000df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_SPI_MspInit+0xc0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d149      	bne.n	8000eaa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e6a:	2360      	movs	r3, #96	; 0x60
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <HAL_SPI_MspInit+0xc8>)
 8000e86:	f001 fb39 	bl	80024fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <HAL_SPI_MspInit+0xcc>)
 8000ea6:	f001 fb29 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <HAL_TIM_Base_MspInit+0xd0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d13f      	bne.n	8000f56 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_TIM_Base_MspInit+0xd4>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a2e      	ldr	r2, [pc, #184]	; (8000f98 <HAL_TIM_Base_MspInit+0xd4>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <HAL_TIM_Base_MspInit+0xd4>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000ef4:	4a2a      	ldr	r2, [pc, #168]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000efa:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000efe:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f02:	2240      	movs	r2, #64	; 0x40
 8000f04:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f12:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f1a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f22:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f2a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000f38:	4818      	ldr	r0, [pc, #96]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f3a:	f000 fccd 	bl	80018d8 <HAL_DMA_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000f44:	f7ff fe62 	bl	8000c0c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f54:	e01a      	b.n	8000f8c <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM6)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d115      	bne.n	8000f8c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_TIM_Base_MspInit+0xd4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <HAL_TIM_Base_MspInit+0xd4>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_TIM_Base_MspInit+0xd4>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2036      	movs	r0, #54	; 0x36
 8000f82:	f000 fc72 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f86:	2036      	movs	r0, #54	; 0x36
 8000f88:	f000 fc8b 	bl	80018a2 <HAL_NVIC_EnableIRQ>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	20000340 	.word	0x20000340
 8000fa0:	40026428 	.word	0x40026428
 8000fa4:	40001000 	.word	0x40001000

08000fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <HAL_TIM_MspPostInit+0x68>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d11e      	bne.n	8001008 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_TIM_MspPostInit+0x6c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_TIM_MspPostInit+0x6c>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_TIM_MspPostInit+0x6c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_TIM_MspPostInit+0x70>)
 8001004:	f001 fa7a 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40010000 	.word	0x40010000
 8001014:	40023800 	.word	0x40023800
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <HAL_UART_MspInit+0x84>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12c      	bne.n	8001098 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_UART_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001076:	f44f 7340 	mov.w	r3, #768	; 0x300
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001088:	2307      	movs	r3, #7
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_UART_MspInit+0x8c>)
 8001094:	f001 fa32 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40004800 	.word	0x40004800
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020c00 	.word	0x40020c00

080010ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010cc:	d13f      	bne.n	800114e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HAL_PCD_MspInit+0xac>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a20      	ldr	r2, [pc, #128]	; (8001158 <HAL_PCD_MspInit+0xac>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <HAL_PCD_MspInit+0xac>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010fc:	230a      	movs	r3, #10
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <HAL_PCD_MspInit+0xb0>)
 8001108:	f001 f9f8 	bl	80024fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800110c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <HAL_PCD_MspInit+0xb0>)
 8001122:	f001 f9eb 	bl	80024fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_PCD_MspInit+0xac>)
 8001128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_PCD_MspInit+0xac>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	6353      	str	r3, [r2, #52]	; 0x34
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_PCD_MspInit+0xac>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_PCD_MspInit+0xac>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_PCD_MspInit+0xac>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 fa3e 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80011b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011bc:	f001 fb7c 	bl	80028b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM6_DAC_IRQHandler+0x10>)
 80011ca:	f002 ff93 	bl	80040f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200002f8 	.word	0x200002f8

080011d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <DMA2_Stream1_IRQHandler+0x10>)
 80011de:	f000 fc29 	bl	8001a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000340 	.word	0x20000340

080011ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001216:	490e      	ldr	r1, [pc, #56]	; (8001250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800122c:	4c0b      	ldr	r4, [pc, #44]	; (800125c <LoopFillZerobss+0x26>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800123a:	f7ff ffd7 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123e:	f005 f8c1 	bl	80063c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001242:	f7ff f951 	bl	80004e8 <main>
  bx  lr    
 8001246:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001248:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001254:	08006b34 	.word	0x08006b34
  ldr r2, =_sbss
 8001258:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800125c:	20000dbc 	.word	0x20000dbc

08001260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC_IRQHandler>

08001262 <MFRC522_Init>:
/////////////////////////////////////////////////////////////////////////////////////
// Functions for setting up the Arduino
/////////////////////////////////////////////////////////////////////////////////////

void MFRC522_Init(MFRC *dev, uint16_t chipSelectPin, GPIO_TypeDef * csPort, uint16_t resetPowerDownPin, GPIO_TypeDef * rsPDPort)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	461a      	mov	r2, r3
 800126e:	460b      	mov	r3, r1
 8001270:	817b      	strh	r3, [r7, #10]
 8001272:	4613      	mov	r3, r2
 8001274:	813b      	strh	r3, [r7, #8]
	dev->_chipSelectPin = chipSelectPin;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	897a      	ldrh	r2, [r7, #10]
 800127a:	801a      	strh	r2, [r3, #0]
	dev->_chipSelectPort = csPort;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	605a      	str	r2, [r3, #4]
	dev->_resetPowerDownPin = resetPowerDownPin;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	893a      	ldrh	r2, [r7, #8]
 8001286:	805a      	strh	r2, [r3, #2]
	dev->_resetPowerDownPort = rsPDPort;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]
	PCD_Init(dev);
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 f866 	bl	8001360 <PCD_Init>
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <PCD_WriteRegister>:
 * Writes a uint8_t to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void PCD_WriteRegister(	MFRC *dev, PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									uint8_t value			///< The value to write.
								) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
 80012a8:	4613      	mov	r3, r2
 80012aa:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);		// Select slave
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6858      	ldr	r0, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 fae4 	bl	8002884 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dev->hspi, &reg, 1, 1000);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68d8      	ldr	r0, [r3, #12]
 80012c0:	1cf9      	adds	r1, r7, #3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	2201      	movs	r2, #1
 80012c8:	f002 f94d 	bl	8003566 <HAL_SPI_Transmit>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(dev->hspi, &value, 1, 1000);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68d8      	ldr	r0, [r3, #12]
 80012d4:	1cb9      	adds	r1, r7, #2
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	2201      	movs	r2, #1
 80012dc:	f002 f943 	bl	8003566 <HAL_SPI_Transmit>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6858      	ldr	r0, [r3, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	f001 fac8 	bl	8002884 <HAL_GPIO_WritePin>

} // End PCD_WriteRegister()
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <PCD_ReadRegister>:
/**
 * Reads a uint8_t from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
uint8_t PCD_ReadRegister(	MFRC *dev, PCD_Register reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	uint8_t address = (0x80 | reg);
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6858      	ldr	r0, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	f001 fab1 	bl	8002884 <HAL_GPIO_WritePin>
				// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	HAL_SPI_Transmit(dev->hspi, &address, 1, 1000);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68d8      	ldr	r0, [r3, #12]
 8001326:	f107 010e 	add.w	r1, r7, #14
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	2201      	movs	r2, #1
 8001330:	f002 f919 	bl	8003566 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->hspi, &value, 1, 1000);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68d8      	ldr	r0, [r3, #12]
 8001338:	f107 010f 	add.w	r1, r7, #15
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	2201      	movs	r2, #1
 8001342:	f002 fa4c 	bl	80037de <HAL_SPI_Receive>

	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6858      	ldr	r0, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	2201      	movs	r2, #1
 8001350:	4619      	mov	r1, r3
 8001352:	f001 fa97 	bl	8002884 <HAL_GPIO_WritePin>
	return value;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
} // End PCD_ReadRegister()
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <PCD_Init>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void PCD_Init(MFRC *dev) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	bool hardReset = false;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]

	// Set the chipSelectPin as digital output, do not select the slave yet

	// If a valid pin number has been set, pull device out of power down / reset state.

	if (HAL_GPIO_ReadPin(dev->_resetPowerDownPort, dev->_resetPowerDownPin) == GPIO_PIN_RESET) {	// The MFRC522 chip is in power down mode.
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	885b      	ldrh	r3, [r3, #2]
 8001374:	4619      	mov	r1, r3
 8001376:	4610      	mov	r0, r2
 8001378:	f001 fa6c 	bl	8002854 <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d117      	bne.n	80013b2 <PCD_Init+0x52>

		HAL_GPIO_WritePin(dev->_resetPowerDownPort, dev->_resetPowerDownPin, GPIO_PIN_RESET);		// Make sure we have a clean LOW state.
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6898      	ldr	r0, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	885b      	ldrh	r3, [r3, #2]
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	f001 fa79 	bl	8002884 <HAL_GPIO_WritePin>
		HAL_Delay(1);				// 8.8.1 Reset timing requirements says about 100ns. Let us be generous: 2μsl
 8001392:	2001      	movs	r0, #1
 8001394:	f000 f96a 	bl	800166c <HAL_Delay>
		HAL_GPIO_WritePin(dev->_resetPowerDownPort, dev->_resetPowerDownPin, GPIO_PIN_SET);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6898      	ldr	r0, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	885b      	ldrh	r3, [r3, #2]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4619      	mov	r1, r3
 80013a4:	f001 fa6e 	bl	8002884 <HAL_GPIO_WritePin>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
		HAL_Delay(50);
 80013a8:	2032      	movs	r0, #50	; 0x32
 80013aa:	f000 f95f 	bl	800166c <HAL_Delay>
		hardReset = true;
 80013ae:	2301      	movs	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
	}


	if (!hardReset) { // Perform a soft reset if we haven't triggered a hard reset above.
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <PCD_Init+0x64>
		PCD_Reset(dev);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f8a4 	bl	800150c <PCD_Reset>
	}
	uint8_t r_val = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73bb      	strb	r3, [r7, #14]
	// Reset baud rates
	PCD_WriteRegister(dev, TxModeReg, 0x00);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2124      	movs	r1, #36	; 0x24
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff65 	bl	800129c <PCD_WriteRegister>

	r_val = PCD_ReadRegister(dev, TxModeReg);
 80013d2:	2124      	movs	r1, #36	; 0x24
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff91 	bl	80012fc <PCD_ReadRegister>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4949      	ldr	r1, [pc, #292]	; (8001508 <PCD_Init+0x1a8>)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f004 ffcd 	bl	8006384 <SEGGER_RTT_printf>


	PCD_WriteRegister(dev, RxModeReg, 0x00);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2126      	movs	r1, #38	; 0x26
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff54 	bl	800129c <PCD_WriteRegister>

	r_val = PCD_ReadRegister(dev, RxModeReg);
 80013f4:	2126      	movs	r1, #38	; 0x26
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff80 	bl	80012fc <PCD_ReadRegister>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	461a      	mov	r2, r3
 8001404:	4940      	ldr	r1, [pc, #256]	; (8001508 <PCD_Init+0x1a8>)
 8001406:	2000      	movs	r0, #0
 8001408:	f004 ffbc 	bl	8006384 <SEGGER_RTT_printf>


	// Reset ModWidthReg
	PCD_WriteRegister(dev, ModWidthReg, 0x26);
 800140c:	2226      	movs	r2, #38	; 0x26
 800140e:	2148      	movs	r1, #72	; 0x48
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff43 	bl	800129c <PCD_WriteRegister>

	r_val = PCD_ReadRegister(dev, ModWidthReg);
 8001416:	2148      	movs	r1, #72	; 0x48
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff6f 	bl	80012fc <PCD_ReadRegister>
 800141e:	4603      	mov	r3, r0
 8001420:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	461a      	mov	r2, r3
 8001426:	4938      	ldr	r1, [pc, #224]	; (8001508 <PCD_Init+0x1a8>)
 8001428:	2000      	movs	r0, #0
 800142a:	f004 ffab 	bl	8006384 <SEGGER_RTT_printf>

	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	PCD_WriteRegister(dev, TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	2154      	movs	r1, #84	; 0x54
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff32 	bl	800129c <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TModeReg);
 8001438:	2154      	movs	r1, #84	; 0x54
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff5e 	bl	80012fc <PCD_ReadRegister>
 8001440:	4603      	mov	r3, r0
 8001442:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	461a      	mov	r2, r3
 8001448:	492f      	ldr	r1, [pc, #188]	; (8001508 <PCD_Init+0x1a8>)
 800144a:	2000      	movs	r0, #0
 800144c:	f004 ff9a 	bl	8006384 <SEGGER_RTT_printf>


	PCD_WriteRegister(dev, TPrescalerReg, 0xA9);		// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
 8001450:	22a9      	movs	r2, #169	; 0xa9
 8001452:	2156      	movs	r1, #86	; 0x56
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff21 	bl	800129c <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TPrescalerReg);
 800145a:	2156      	movs	r1, #86	; 0x56
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff4d 	bl	80012fc <PCD_ReadRegister>
 8001462:	4603      	mov	r3, r0
 8001464:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001466:	7bbb      	ldrb	r3, [r7, #14]
 8001468:	461a      	mov	r2, r3
 800146a:	4927      	ldr	r1, [pc, #156]	; (8001508 <PCD_Init+0x1a8>)
 800146c:	2000      	movs	r0, #0
 800146e:	f004 ff89 	bl	8006384 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 8001472:	2203      	movs	r2, #3
 8001474:	2158      	movs	r1, #88	; 0x58
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff10 	bl	800129c <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TReloadRegH);
 800147c:	2158      	movs	r1, #88	; 0x58
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff3c 	bl	80012fc <PCD_ReadRegister>
 8001484:	4603      	mov	r3, r0
 8001486:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	461a      	mov	r2, r3
 800148c:	491e      	ldr	r1, [pc, #120]	; (8001508 <PCD_Init+0x1a8>)
 800148e:	2000      	movs	r0, #0
 8001490:	f004 ff78 	bl	8006384 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, TReloadRegL, 0xE8);
 8001494:	22e8      	movs	r2, #232	; 0xe8
 8001496:	215a      	movs	r1, #90	; 0x5a
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff feff 	bl	800129c <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TReloadRegL);
 800149e:	215a      	movs	r1, #90	; 0x5a
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff2b 	bl	80012fc <PCD_ReadRegister>
 80014a6:	4603      	mov	r3, r0
 80014a8:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80014aa:	7bbb      	ldrb	r3, [r7, #14]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4916      	ldr	r1, [pc, #88]	; (8001508 <PCD_Init+0x1a8>)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f004 ff67 	bl	8006384 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	212a      	movs	r1, #42	; 0x2a
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff feee 	bl	800129c <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TxASKReg);
 80014c0:	212a      	movs	r1, #42	; 0x2a
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff1a 	bl	80012fc <PCD_ReadRegister>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	461a      	mov	r2, r3
 80014d0:	490d      	ldr	r1, [pc, #52]	; (8001508 <PCD_Init+0x1a8>)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f004 ff56 	bl	8006384 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80014d8:	223d      	movs	r2, #61	; 0x3d
 80014da:	2122      	movs	r1, #34	; 0x22
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fedd 	bl	800129c <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, ModeReg);
 80014e2:	2122      	movs	r1, #34	; 0x22
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff09 	bl	80012fc <PCD_ReadRegister>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4905      	ldr	r1, [pc, #20]	; (8001508 <PCD_Init+0x1a8>)
 80014f4:	2000      	movs	r0, #0
 80014f6:	f004 ff45 	bl	8006384 <SEGGER_RTT_printf>

	PCD_AntennaOn(dev);						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f827 	bl	800154e <PCD_AntennaOn>
} // End PCD_Init()
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	08006440 	.word	0x08006440

0800150c <PCD_Reset>:


/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void PCD_Reset(MFRC *dev) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	PCD_WriteRegister(dev, CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 8001514:	220f      	movs	r2, #15
 8001516:	2102      	movs	r1, #2
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff febf 	bl	800129c <PCD_WriteRegister>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
	uint8_t count = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
	do {
		// Wait for the PowerDown bit in CommandReg to be cleared (max 3x50ms)
		HAL_Delay(50);
 8001522:	2032      	movs	r0, #50	; 0x32
 8001524:	f000 f8a2 	bl	800166c <HAL_Delay>
	} while ((PCD_ReadRegister(dev, CommandReg) & (1 << 4)) && (++count) < 3);
 8001528:	2102      	movs	r1, #2
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fee6 	bl	80012fc <PCD_ReadRegister>
 8001530:	4603      	mov	r3, r0
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <PCD_Reset+0x3a>
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	3301      	adds	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d9ed      	bls.n	8001522 <PCD_Reset+0x16>
} // End PCD_Reset()
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <PCD_AntennaOn>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins are disabled.
 */
void PCD_AntennaOn(MFRC *dev) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
	uint8_t value = PCD_ReadRegister(dev, TxControlReg);
 8001556:	2128      	movs	r1, #40	; 0x28
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fecf 	bl	80012fc <PCD_ReadRegister>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]
	if ((value & 0x03) != 0x03) {
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b03      	cmp	r3, #3
 800156a:	d008      	beq.n	800157e <PCD_AntennaOn+0x30>
		PCD_WriteRegister(dev, TxControlReg, value | 0x03);
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	f043 0303 	orr.w	r3, r3, #3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	2128      	movs	r1, #40	; 0x28
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fe8f 	bl	800129c <PCD_WriteRegister>
	}
} // End PCD_AntennaOn()
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <HAL_Init+0x40>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_Init+0x40>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_Init+0x40>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 f94f 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff fb2c 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f967 	bl	80018be <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f92f 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000008 	.word	0x20000008
 8001624:	20000010 	.word	0x20000010
 8001628:	2000000c 	.word	0x2000000c

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000010 	.word	0x20000010
 8001650:	20000900 	.word	0x20000900

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000900 	.word	0x20000900

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000010 	.word	0x20000010

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff29 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff3e 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff8e 	bl	80017a8 <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5d 	bl	8001754 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff31 	bl	8001718 <__NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffa2 	bl	8001810 <SysTick_Config>
 80018cc:	4603      	mov	r3, r0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff feb6 	bl	8001654 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e099      	b.n	8001a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001914:	e00f      	b.n	8001936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001916:	f7ff fe9d 	bl	8001654 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b05      	cmp	r3, #5
 8001922:	d908      	bls.n	8001936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2220      	movs	r2, #32
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2203      	movs	r2, #3
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e078      	b.n	8001a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e8      	bne.n	8001916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_DMA_Init+0x158>)
 8001950:	4013      	ands	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2b04      	cmp	r3, #4
 800198e:	d107      	bne.n	80019a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	4313      	orrs	r3, r2
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f023 0307 	bic.w	r3, r3, #7
 80019b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	4313      	orrs	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d117      	bne.n	80019fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f9e9 	bl	8001db4 <DMA_CheckFifoParam>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019f6:	2301      	movs	r3, #1
 80019f8:	e016      	b.n	8001a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f9a0 	bl	8001d48 <DMA_CalcBaseAndBitshift>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	223f      	movs	r2, #63	; 0x3f
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	f010803f 	.word	0xf010803f

08001a34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a40:	4b8e      	ldr	r3, [pc, #568]	; (8001c7c <HAL_DMA_IRQHandler+0x248>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a8e      	ldr	r2, [pc, #568]	; (8001c80 <HAL_DMA_IRQHandler+0x24c>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0a9b      	lsrs	r3, r3, #10
 8001a4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5e:	2208      	movs	r2, #8
 8001a60:	409a      	lsls	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01a      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0204 	bic.w	r2, r2, #4
 8001a86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d012      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	f043 0202 	orr.w	r2, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ada:	2204      	movs	r2, #4
 8001adc:	409a      	lsls	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d012      	beq.n	8001b0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00b      	beq.n	8001b0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	2204      	movs	r2, #4
 8001afa:	409a      	lsls	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	f043 0204 	orr.w	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2210      	movs	r2, #16
 8001b12:	409a      	lsls	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d043      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d03c      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d018      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d108      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d024      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
 8001b62:	e01f      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01b      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
 8001b74:	e016      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0208 	bic.w	r2, r2, #8
 8001b92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	2220      	movs	r2, #32
 8001baa:	409a      	lsls	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 808f 	beq.w	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8087 	beq.w	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bca:	2220      	movs	r2, #32
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d136      	bne.n	8001c4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0216 	bic.w	r2, r2, #22
 8001bec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d103      	bne.n	8001c0e <HAL_DMA_IRQHandler+0x1da>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0208 	bic.w	r2, r2, #8
 8001c1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	223f      	movs	r2, #63	; 0x3f
 8001c24:	409a      	lsls	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d07e      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	4798      	blx	r3
        }
        return;
 8001c4a:	e079      	b.n	8001d40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d01d      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10d      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d031      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
 8001c78:	e02c      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d023      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
 8001c94:	e01e      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10f      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0210 	bic.w	r2, r2, #16
 8001cb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d032      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d022      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2205      	movs	r2, #5
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d307      	bcc.n	8001d1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f2      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x2cc>
 8001d1a:	e000      	b.n	8001d1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	4798      	blx	r3
 8001d3e:	e000      	b.n	8001d42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d40:	bf00      	nop
    }
  }
}
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3b10      	subs	r3, #16
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <DMA_CalcBaseAndBitshift+0x64>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	091b      	lsrs	r3, r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d62:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d909      	bls.n	8001d8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	1d1a      	adds	r2, r3, #4
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58
 8001d88:	e007      	b.n	8001d9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d92:	f023 0303 	bic.w	r3, r3, #3
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	aaaaaaab 	.word	0xaaaaaaab
 8001db0:	08006af8 	.word	0x08006af8

08001db4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11f      	bne.n	8001e0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d856      	bhi.n	8001e82 <DMA_CheckFifoParam+0xce>
 8001dd4:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <DMA_CheckFifoParam+0x28>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001dff 	.word	0x08001dff
 8001de4:	08001ded 	.word	0x08001ded
 8001de8:	08001e83 	.word	0x08001e83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d046      	beq.n	8001e86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dfc:	e043      	b.n	8001e86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e06:	d140      	bne.n	8001e8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e0c:	e03d      	b.n	8001e8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e16:	d121      	bne.n	8001e5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d837      	bhi.n	8001e8e <DMA_CheckFifoParam+0xda>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <DMA_CheckFifoParam+0x70>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e35 	.word	0x08001e35
 8001e28:	08001e3b 	.word	0x08001e3b
 8001e2c:	08001e35 	.word	0x08001e35
 8001e30:	08001e4d 	.word	0x08001e4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
      break;
 8001e38:	e030      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d025      	beq.n	8001e92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e4a:	e022      	b.n	8001e92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e54:	d11f      	bne.n	8001e96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e5a:	e01c      	b.n	8001e96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d903      	bls.n	8001e6a <DMA_CheckFifoParam+0xb6>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d003      	beq.n	8001e70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e68:	e018      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e6e:	e015      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00e      	beq.n	8001e9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e80:	e00b      	b.n	8001e9a <DMA_CheckFifoParam+0xe6>
      break;
 8001e82:	bf00      	nop
 8001e84:	e00a      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e86:	bf00      	nop
 8001e88:	e008      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e8a:	bf00      	nop
 8001e8c:	e006      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e8e:	bf00      	nop
 8001e90:	e004      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e92:	bf00      	nop
 8001e94:	e002      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e96:	bf00      	nop
 8001e98:	e000      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e9a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06c      	b.n	8001f98 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2223      	movs	r2, #35	; 0x23
 8001ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7fe fec9 	bl	8000c68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_ETH_Init+0xf4>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a30      	ldr	r2, [pc, #192]	; (8001fa0 <HAL_ETH_Init+0xf4>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_ETH_Init+0xf4>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <HAL_ETH_Init+0xf8>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <HAL_ETH_Init+0xf8>)
 8001ef8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001efc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001efe:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_ETH_Init+0xf8>)
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4927      	ldr	r1, [pc, #156]	; (8001fa4 <HAL_ETH_Init+0xf8>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_ETH_Init+0xf8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f28:	f7ff fb94 	bl	8001654 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f2e:	e011      	b.n	8001f54 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f30:	f7ff fb90 	bl	8001654 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f3e:	d909      	bls.n	8001f54 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2204      	movs	r2, #4
 8001f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	22e0      	movs	r2, #224	; 0xe0
 8001f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e021      	b.n	8001f98 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1e4      	bne.n	8001f30 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f958 	bl	800221c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f9ff 	bl	8002370 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fa55 	bl	8002422 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2100      	movs	r1, #0
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f9bd 	bl	8002300 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2210      	movs	r2, #16
 8001f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40013800 	.word	0x40013800

08001fa8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4b51      	ldr	r3, [pc, #324]	; (8002104 <ETH_SetMACConfig+0x15c>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7c1b      	ldrb	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <ETH_SetMACConfig+0x28>
 8001fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fce:	e000      	b.n	8001fd2 <ETH_SetMACConfig+0x2a>
 8001fd0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	7c5b      	ldrb	r3, [r3, #17]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <ETH_SetMACConfig+0x38>
 8001fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fde:	e000      	b.n	8001fe2 <ETH_SetMACConfig+0x3a>
 8001fe0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fe2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fe8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7fdb      	ldrb	r3, [r3, #31]
 8001fee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ff0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ff6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	7f92      	ldrb	r2, [r2, #30]
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d102      	bne.n	8002006 <ETH_SetMACConfig+0x5e>
 8002000:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002004:	e000      	b.n	8002008 <ETH_SetMACConfig+0x60>
 8002006:	2200      	movs	r2, #0
                        macconf->Speed |
 8002008:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	7f1b      	ldrb	r3, [r3, #28]
 800200e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002010:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002016:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	791b      	ldrb	r3, [r3, #4]
 800201c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800201e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002026:	2a00      	cmp	r2, #0
 8002028:	d102      	bne.n	8002030 <ETH_SetMACConfig+0x88>
 800202a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202e:	e000      	b.n	8002032 <ETH_SetMACConfig+0x8a>
 8002030:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002032:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	7bdb      	ldrb	r3, [r3, #15]
 8002038:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800203a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002040:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002048:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800204a:	4313      	orrs	r3, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff fb02 	bl	800166c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800207e:	4013      	ands	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800208e:	2a00      	cmp	r2, #0
 8002090:	d101      	bne.n	8002096 <ETH_SetMACConfig+0xee>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	e000      	b.n	8002098 <ETH_SetMACConfig+0xf0>
 8002096:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002098:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800209e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020a6:	2a01      	cmp	r2, #1
 80020a8:	d101      	bne.n	80020ae <ETH_SetMACConfig+0x106>
 80020aa:	2208      	movs	r2, #8
 80020ac:	e000      	b.n	80020b0 <ETH_SetMACConfig+0x108>
 80020ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80020b8:	2a01      	cmp	r2, #1
 80020ba:	d101      	bne.n	80020c0 <ETH_SetMACConfig+0x118>
 80020bc:	2204      	movs	r2, #4
 80020be:	e000      	b.n	80020c2 <ETH_SetMACConfig+0x11a>
 80020c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80020ca:	2a01      	cmp	r2, #1
 80020cc:	d101      	bne.n	80020d2 <ETH_SetMACConfig+0x12a>
 80020ce:	2202      	movs	r2, #2
 80020d0:	e000      	b.n	80020d4 <ETH_SetMACConfig+0x12c>
 80020d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020d4:	4313      	orrs	r3, r2
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff fabd 	bl	800166c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	ff20810f 	.word	0xff20810f

08002108 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <ETH_SetDMAConfig+0x110>)
 8002122:	4013      	ands	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	7b1b      	ldrb	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <ETH_SetDMAConfig+0x2c>
 800212e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002132:	e000      	b.n	8002136 <ETH_SetDMAConfig+0x2e>
 8002134:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7b5b      	ldrb	r3, [r3, #13]
 800213a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800213c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	7f52      	ldrb	r2, [r2, #29]
 8002142:	2a00      	cmp	r2, #0
 8002144:	d102      	bne.n	800214c <ETH_SetDMAConfig+0x44>
 8002146:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800214a:	e000      	b.n	800214e <ETH_SetDMAConfig+0x46>
 800214c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800214e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	7b9b      	ldrb	r3, [r3, #14]
 8002154:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002156:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800215c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7f1b      	ldrb	r3, [r3, #28]
 8002162:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002164:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	7f9b      	ldrb	r3, [r3, #30]
 800216a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800216c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002172:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800217c:	4313      	orrs	r3, r2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218c:	461a      	mov	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800219e:	2001      	movs	r0, #1
 80021a0:	f7ff fa64 	bl	800166c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ac:	461a      	mov	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80021c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80021d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7ff fa35 	bl	800166c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	f8de3f23 	.word	0xf8de3f23

0800221c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a6      	sub	sp, #152	; 0x98
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800222a:	2301      	movs	r3, #1
 800222c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002230:	2300      	movs	r3, #0
 8002232:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002258:	2300      	movs	r3, #0
 800225a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002262:	2300      	movs	r3, #0
 8002264:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800227e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002288:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff fe86 	bl	8001fa8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800229c:	2301      	movs	r3, #1
 800229e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022be:	2300      	movs	r3, #0
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ff08 	bl	8002108 <ETH_SetDMAConfig>
}
 80022f8:	bf00      	nop
 80022fa:	3798      	adds	r7, #152	; 0x98
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3305      	adds	r3, #5
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	3204      	adds	r2, #4
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <ETH_MACAddressConfig+0x68>)
 8002322:	4413      	add	r3, r2
 8002324:	461a      	mov	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3303      	adds	r3, #3
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	061a      	lsls	r2, r3, #24
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3302      	adds	r3, #2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3301      	adds	r3, #1
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	4313      	orrs	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <ETH_MACAddressConfig+0x6c>)
 8002352:	4413      	add	r3, r2
 8002354:	461a      	mov	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	6013      	str	r3, [r2, #0]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40028040 	.word	0x40028040
 800236c:	40028044 	.word	0x40028044

08002370 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e03e      	b.n	80023fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68d9      	ldr	r1, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	3206      	adds	r2, #6
 80023b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d80c      	bhi.n	80023e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68d9      	ldr	r1, [r3, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	e004      	b.n	80023ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d9bd      	bls.n	800237e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	611a      	str	r2, [r3, #16]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002422:	b480      	push	{r7}
 8002424:	b085      	sub	sp, #20
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	e046      	b.n	80024be <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6919      	ldr	r1, [r3, #16]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800246c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002474:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	3212      	adds	r2, #18
 800248a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d80c      	bhi.n	80024ae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6919      	ldr	r1, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	e004      	b.n	80024b8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3301      	adds	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d9b5      	bls.n	8002430 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ee:	60da      	str	r2, [r3, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e177      	b.n	8002808 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	f040 8166 	bne.w	8002802 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d005      	beq.n	800254e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	2b02      	cmp	r3, #2
 800254c:	d130      	bne.n	80025b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 0201 	and.w	r2, r3, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d017      	beq.n	80025ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d123      	bne.n	8002640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0203 	and.w	r2, r3, #3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80c0 	beq.w	8002802 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_GPIO_Init+0x324>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a65      	ldr	r2, [pc, #404]	; (8002820 <HAL_GPIO_Init+0x324>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b63      	ldr	r3, [pc, #396]	; (8002820 <HAL_GPIO_Init+0x324>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269e:	4a61      	ldr	r2, [pc, #388]	; (8002824 <HAL_GPIO_Init+0x328>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	220f      	movs	r2, #15
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a58      	ldr	r2, [pc, #352]	; (8002828 <HAL_GPIO_Init+0x32c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d037      	beq.n	800273a <HAL_GPIO_Init+0x23e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a57      	ldr	r2, [pc, #348]	; (800282c <HAL_GPIO_Init+0x330>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d031      	beq.n	8002736 <HAL_GPIO_Init+0x23a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a56      	ldr	r2, [pc, #344]	; (8002830 <HAL_GPIO_Init+0x334>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d02b      	beq.n	8002732 <HAL_GPIO_Init+0x236>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a55      	ldr	r2, [pc, #340]	; (8002834 <HAL_GPIO_Init+0x338>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d025      	beq.n	800272e <HAL_GPIO_Init+0x232>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a54      	ldr	r2, [pc, #336]	; (8002838 <HAL_GPIO_Init+0x33c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01f      	beq.n	800272a <HAL_GPIO_Init+0x22e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a53      	ldr	r2, [pc, #332]	; (800283c <HAL_GPIO_Init+0x340>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d019      	beq.n	8002726 <HAL_GPIO_Init+0x22a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_GPIO_Init+0x344>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0x226>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a51      	ldr	r2, [pc, #324]	; (8002844 <HAL_GPIO_Init+0x348>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00d      	beq.n	800271e <HAL_GPIO_Init+0x222>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a50      	ldr	r2, [pc, #320]	; (8002848 <HAL_GPIO_Init+0x34c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <HAL_GPIO_Init+0x21e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4f      	ldr	r2, [pc, #316]	; (800284c <HAL_GPIO_Init+0x350>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d101      	bne.n	8002716 <HAL_GPIO_Init+0x21a>
 8002712:	2309      	movs	r3, #9
 8002714:	e012      	b.n	800273c <HAL_GPIO_Init+0x240>
 8002716:	230a      	movs	r3, #10
 8002718:	e010      	b.n	800273c <HAL_GPIO_Init+0x240>
 800271a:	2308      	movs	r3, #8
 800271c:	e00e      	b.n	800273c <HAL_GPIO_Init+0x240>
 800271e:	2307      	movs	r3, #7
 8002720:	e00c      	b.n	800273c <HAL_GPIO_Init+0x240>
 8002722:	2306      	movs	r3, #6
 8002724:	e00a      	b.n	800273c <HAL_GPIO_Init+0x240>
 8002726:	2305      	movs	r3, #5
 8002728:	e008      	b.n	800273c <HAL_GPIO_Init+0x240>
 800272a:	2304      	movs	r3, #4
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x240>
 800272e:	2303      	movs	r3, #3
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x240>
 8002732:	2302      	movs	r3, #2
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x240>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x240>
 800273a:	2300      	movs	r3, #0
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f002 0203 	and.w	r2, r2, #3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4093      	lsls	r3, r2
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274c:	4935      	ldr	r1, [pc, #212]	; (8002824 <HAL_GPIO_Init+0x328>)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_GPIO_Init+0x354>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277e:	4a34      	ldr	r2, [pc, #208]	; (8002850 <HAL_GPIO_Init+0x354>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002784:	4b32      	ldr	r3, [pc, #200]	; (8002850 <HAL_GPIO_Init+0x354>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_GPIO_Init+0x354>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ae:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_GPIO_Init+0x354>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_GPIO_Init+0x354>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_GPIO_Init+0x354>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <HAL_GPIO_Init+0x354>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	f67f ae84 	bls.w	8002518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40013800 	.word	0x40013800
 8002828:	40020000 	.word	0x40020000
 800282c:	40020400 	.word	0x40020400
 8002830:	40020800 	.word	0x40020800
 8002834:	40020c00 	.word	0x40020c00
 8002838:	40021000 	.word	0x40021000
 800283c:	40021400 	.word	0x40021400
 8002840:	40021800 	.word	0x40021800
 8002844:	40021c00 	.word	0x40021c00
 8002848:	40022000 	.word	0x40022000
 800284c:	40022400 	.word	0x40022400
 8002850:	40013c00 	.word	0x40013c00

08002854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	887b      	ldrh	r3, [r7, #2]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e001      	b.n	8002876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a0:	e003      	b.n	80028aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	619a      	str	r2, [r3, #24]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe f946 	bl	8000b68 <HAL_GPIO_EXTI_Callback>
  }
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40013c00 	.word	0x40013c00

080028e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ea:	b08f      	sub	sp, #60	; 0x3c
 80028ec:	af0a      	add	r7, sp, #40	; 0x28
 80028ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e10f      	b.n	8002b1a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fe fbc9 	bl	80010ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2203      	movs	r2, #3
 800291e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f002 fd84 	bl	8005446 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	687e      	ldr	r6, [r7, #4]
 8002946:	466d      	mov	r5, sp
 8002948:	f106 0410 	add.w	r4, r6, #16
 800294c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800294e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002954:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002958:	e885 0003 	stmia.w	r5, {r0, r1}
 800295c:	1d33      	adds	r3, r6, #4
 800295e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f002 fd0f 	bl	8005384 <USB_CoreInit>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0d0      	b.n	8002b1a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fd72 	bl	8005468 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e04a      	b.n	8002a20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	333d      	adds	r3, #61	; 0x3d
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	333c      	adds	r3, #60	; 0x3c
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	b298      	uxth	r0, r3
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3344      	adds	r3, #68	; 0x44
 80029c6:	4602      	mov	r2, r0
 80029c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3340      	adds	r3, #64	; 0x40
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3348      	adds	r3, #72	; 0x48
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	334c      	adds	r3, #76	; 0x4c
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3354      	adds	r3, #84	; 0x54
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d3af      	bcc.n	800298a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	e044      	b.n	8002aba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3b5      	bcc.n	8002a30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	687e      	ldr	r6, [r7, #4]
 8002acc:	466d      	mov	r5, sp
 8002ace:	f106 0410 	add.w	r4, r6, #16
 8002ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ada:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ade:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae2:	1d33      	adds	r3, r6, #4
 8002ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae6:	6838      	ldr	r0, [r7, #0]
 8002ae8:	f002 fd0a 	bl	8005500 <USB_DevInit>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00d      	b.n	8002b1a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fed5 	bl	80058c2 <USB_DevDisconnect>

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e267      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d075      	beq.n	8002c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b42:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d00c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4e:	4b85      	ldr	r3, [pc, #532]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d112      	bne.n	8002b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5a:	4b82      	ldr	r3, [pc, #520]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b66:	d10b      	bne.n	8002b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	4b7e      	ldr	r3, [pc, #504]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d05b      	beq.n	8002c2c <HAL_RCC_OscConfig+0x108>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d157      	bne.n	8002c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e242      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0x74>
 8002b8a:	4b76      	ldr	r3, [pc, #472]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a75      	ldr	r2, [pc, #468]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e01d      	b.n	8002bd4 <HAL_RCC_OscConfig+0xb0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x98>
 8002ba2:	4b70      	ldr	r3, [pc, #448]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6f      	ldr	r2, [pc, #444]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b6d      	ldr	r3, [pc, #436]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a6c      	ldr	r2, [pc, #432]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0xb0>
 8002bbc:	4b69      	ldr	r3, [pc, #420]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a68      	ldr	r2, [pc, #416]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a65      	ldr	r2, [pc, #404]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d013      	beq.n	8002c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fd3a 	bl	8001654 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe fd36 	bl	8001654 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e207      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0xc0>
 8002c02:	e014      	b.n	8002c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7fe fd26 	bl	8001654 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fd22 	bl	8001654 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e1f3      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0xe8>
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d063      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d11c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c52:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d116      	bne.n	8002c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_RCC_OscConfig+0x152>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e1c7      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4937      	ldr	r1, [pc, #220]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	e03a      	b.n	8002d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d020      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCC_OscConfig+0x244>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fcdb 	bl	8001654 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7fe fcd7 	bl	8001654 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1a8      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc0:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4925      	ldr	r1, [pc, #148]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
 8002cd4:	e015      	b.n	8002d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd6:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_OscConfig+0x244>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fcba 	bl	8001654 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7fe fcb6 	bl	8001654 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e187      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d036      	beq.n	8002d7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_RCC_OscConfig+0x248>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fc9a 	bl	8001654 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d24:	f7fe fc96 	bl	8001654 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e167      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x200>
 8002d42:	e01b      	b.n	8002d7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_OscConfig+0x248>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fc83 	bl	8001654 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d50:	e00e      	b.n	8002d70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d52:	f7fe fc7f 	bl	8001654 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d907      	bls.n	8002d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e150      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
 8002d64:	40023800 	.word	0x40023800
 8002d68:	42470000 	.word	0x42470000
 8002d6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	4b88      	ldr	r3, [pc, #544]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ea      	bne.n	8002d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8097 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8e:	4b81      	ldr	r3, [pc, #516]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10f      	bne.n	8002dba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	4b7d      	ldr	r3, [pc, #500]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a7c      	ldr	r2, [pc, #496]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b7a      	ldr	r3, [pc, #488]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dba:	4b77      	ldr	r3, [pc, #476]	; (8002f98 <HAL_RCC_OscConfig+0x474>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d118      	bne.n	8002df8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc6:	4b74      	ldr	r3, [pc, #464]	; (8002f98 <HAL_RCC_OscConfig+0x474>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a73      	ldr	r2, [pc, #460]	; (8002f98 <HAL_RCC_OscConfig+0x474>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fc3f 	bl	8001654 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dda:	f7fe fc3b 	bl	8001654 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e10c      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <HAL_RCC_OscConfig+0x474>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2ea>
 8002e00:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	4a63      	ldr	r2, [pc, #396]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0c:	e01c      	b.n	8002e48 <HAL_RCC_OscConfig+0x324>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x30c>
 8002e16:	4b5f      	ldr	r3, [pc, #380]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a5e      	ldr	r2, [pc, #376]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	4b5c      	ldr	r3, [pc, #368]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a5b      	ldr	r2, [pc, #364]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0x324>
 8002e30:	4b58      	ldr	r3, [pc, #352]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	4a57      	ldr	r2, [pc, #348]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3c:	4b55      	ldr	r3, [pc, #340]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a54      	ldr	r2, [pc, #336]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e42:	f023 0304 	bic.w	r3, r3, #4
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d015      	beq.n	8002e7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fe fc00 	bl	8001654 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7fe fbfc 	bl	8001654 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0cb      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6e:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ee      	beq.n	8002e58 <HAL_RCC_OscConfig+0x334>
 8002e7a:	e014      	b.n	8002ea6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7c:	f7fe fbea 	bl	8001654 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7fe fbe6 	bl	8001654 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e0b5      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9a:	4b3e      	ldr	r3, [pc, #248]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1ee      	bne.n	8002e84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eac:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	4a38      	ldr	r2, [pc, #224]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80a1 	beq.w	8003004 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ec2:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d05c      	beq.n	8002f88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d141      	bne.n	8002f5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCC_OscConfig+0x478>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe fbba 	bl	8001654 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe fbb6 	bl	8001654 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e087      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	019b      	lsls	r3, r3, #6
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	491b      	ldr	r1, [pc, #108]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x478>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fb8f 	bl	8001654 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe fb8b 	bl	8001654 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e05c      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x416>
 8002f58:	e054      	b.n	8003004 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_RCC_OscConfig+0x478>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe fb78 	bl	8001654 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe fb74 	bl	8001654 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e045      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x444>
 8002f86:	e03d      	b.n	8003004 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e038      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCC_OscConfig+0x4ec>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d028      	beq.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d121      	bne.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d11a      	bne.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d111      	bne.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	085b      	lsrs	r3, r3, #1
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0cc      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90c      	bls.n	8003050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800308a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d044      	beq.n	8003134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e067      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4934      	ldr	r1, [pc, #208]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7fe faa6 	bl	8001654 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7fe faa2 	bl	8001654 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e04f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20c      	bcs.n	800315c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319a:	f000 f821 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	490a      	ldr	r1, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	5ccb      	ldrb	r3, [r1, r3]
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fa06 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08006ae0 	.word	0x08006ae0
 80031d8:	20000008 	.word	0x20000008
 80031dc:	2000000c 	.word	0x2000000c

080031e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e4:	b094      	sub	sp, #80	; 0x50
 80031e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
 80031ec:	2300      	movs	r3, #0
 80031ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f0:	2300      	movs	r3, #0
 80031f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f8:	4b79      	ldr	r3, [pc, #484]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d00d      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x40>
 8003204:	2b08      	cmp	r3, #8
 8003206:	f200 80e1 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x34>
 800320e:	2b04      	cmp	r3, #4
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x3a>
 8003212:	e0db      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003214:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003218:	e0db      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800321a:	4b73      	ldr	r3, [pc, #460]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800321e:	e0d8      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003220:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800322a:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d063      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003236:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	099b      	lsrs	r3, r3, #6
 800323c:	2200      	movs	r2, #0
 800323e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003240:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003248:	633b      	str	r3, [r7, #48]	; 0x30
 800324a:	2300      	movs	r3, #0
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
 800324e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	0159      	lsls	r1, r3, #5
 8003260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003264:	0150      	lsls	r0, r2, #5
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4621      	mov	r1, r4
 800326c:	1a51      	subs	r1, r2, r1
 800326e:	6139      	str	r1, [r7, #16]
 8003270:	4629      	mov	r1, r5
 8003272:	eb63 0301 	sbc.w	r3, r3, r1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003284:	4659      	mov	r1, fp
 8003286:	018b      	lsls	r3, r1, #6
 8003288:	4651      	mov	r1, sl
 800328a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800328e:	4651      	mov	r1, sl
 8003290:	018a      	lsls	r2, r1, #6
 8003292:	4651      	mov	r1, sl
 8003294:	ebb2 0801 	subs.w	r8, r2, r1
 8003298:	4659      	mov	r1, fp
 800329a:	eb63 0901 	sbc.w	r9, r3, r1
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b2:	4690      	mov	r8, r2
 80032b4:	4699      	mov	r9, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	eb18 0303 	adds.w	r3, r8, r3
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	462b      	mov	r3, r5
 80032c0:	eb49 0303 	adc.w	r3, r9, r3
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032d2:	4629      	mov	r1, r5
 80032d4:	024b      	lsls	r3, r1, #9
 80032d6:	4621      	mov	r1, r4
 80032d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032dc:	4621      	mov	r1, r4
 80032de:	024a      	lsls	r2, r1, #9
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e6:	2200      	movs	r2, #0
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032f0:	f7fc ff7c 	bl	80001ec <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4613      	mov	r3, r2
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032fc:	e058      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	2200      	movs	r2, #0
 8003306:	4618      	mov	r0, r3
 8003308:	4611      	mov	r1, r2
 800330a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
 8003314:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	f04f 0000 	mov.w	r0, #0
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	0159      	lsls	r1, r3, #5
 8003326:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332a:	0150      	lsls	r0, r2, #5
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4641      	mov	r1, r8
 8003332:	ebb2 0a01 	subs.w	sl, r2, r1
 8003336:	4649      	mov	r1, r9
 8003338:	eb63 0b01 	sbc.w	fp, r3, r1
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003348:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800334c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003350:	ebb2 040a 	subs.w	r4, r2, sl
 8003354:	eb63 050b 	sbc.w	r5, r3, fp
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	00eb      	lsls	r3, r5, #3
 8003362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003366:	00e2      	lsls	r2, r4, #3
 8003368:	4614      	mov	r4, r2
 800336a:	461d      	mov	r5, r3
 800336c:	4643      	mov	r3, r8
 800336e:	18e3      	adds	r3, r4, r3
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	464b      	mov	r3, r9
 8003374:	eb45 0303 	adc.w	r3, r5, r3
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003386:	4629      	mov	r1, r5
 8003388:	028b      	lsls	r3, r1, #10
 800338a:	4621      	mov	r1, r4
 800338c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003390:	4621      	mov	r1, r4
 8003392:	028a      	lsls	r2, r1, #10
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339a:	2200      	movs	r2, #0
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	61fa      	str	r2, [r7, #28]
 80033a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a4:	f7fc ff22 	bl	80001ec <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3750      	adds	r7, #80	; 0x50
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	007a1200 	.word	0x007a1200

080033ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000008 	.word	0x20000008

08003404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003408:	f7ff fff0 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0a9b      	lsrs	r3, r3, #10
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	08006af0 	.word	0x08006af0

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003430:	f7ff ffdc 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0b5b      	lsrs	r3, r3, #13
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	08006af0 	.word	0x08006af0

08003454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07b      	b.n	800355e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d108      	bne.n	8003480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003476:	d009      	beq.n	800348c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
 800347e:	e005      	b.n	800348c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd fca4 	bl	8000df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	ea42 0103 	orr.w	r1, r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0104 	and.w	r1, r3, #4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f003 0210 	and.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b088      	sub	sp, #32
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_SPI_Transmit+0x22>
 8003584:	2302      	movs	r3, #2
 8003586:	e126      	b.n	80037d6 <HAL_SPI_Transmit+0x270>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003590:	f7fe f860 	bl	8001654 <HAL_GetTick>
 8003594:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d002      	beq.n	80035ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
 80035a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035aa:	e10b      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_SPI_Transmit+0x52>
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035bc:	e102      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2203      	movs	r2, #3
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003604:	d10f      	bne.n	8003626 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d007      	beq.n	8003644 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364c:	d14b      	bne.n	80036e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Transmit+0xf6>
 8003656:	8afb      	ldrh	r3, [r7, #22]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d13e      	bne.n	80036da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003680:	e02b      	b.n	80036da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d112      	bne.n	80036b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036b4:	e011      	b.n	80036da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b6:	f7fd ffcd 	bl	8001654 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d803      	bhi.n	80036ce <HAL_SPI_Transmit+0x168>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_Transmit+0x16e>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036d8:	e074      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ce      	bne.n	8003682 <HAL_SPI_Transmit+0x11c>
 80036e4:	e04c      	b.n	8003780 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_SPI_Transmit+0x18e>
 80036ee:	8afb      	ldrh	r3, [r7, #22]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d140      	bne.n	8003776 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800371a:	e02c      	b.n	8003776 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	d113      	bne.n	8003752 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003750:	e011      	b.n	8003776 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003752:	f7fd ff7f 	bl	8001654 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d803      	bhi.n	800376a <HAL_SPI_Transmit+0x204>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d102      	bne.n	8003770 <HAL_SPI_Transmit+0x20a>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003774:	e026      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1cd      	bne.n	800371c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	6839      	ldr	r1, [r7, #0]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fbcb 	bl	8003f20 <SPI_EndRxTxTransaction>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e000      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b088      	sub	sp, #32
 80037e2:	af02      	add	r7, sp, #8
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fa:	d112      	bne.n	8003822 <HAL_SPI_Receive+0x44>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10e      	bne.n	8003822 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2204      	movs	r2, #4
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f8f1 	bl	8003a00 <HAL_SPI_TransmitReceive>
 800381e:	4603      	mov	r3, r0
 8003820:	e0ea      	b.n	80039f8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_SPI_Receive+0x52>
 800382c:	2302      	movs	r3, #2
 800382e:	e0e3      	b.n	80039f8 <HAL_SPI_Receive+0x21a>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003838:	f7fd ff0c 	bl	8001654 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d002      	beq.n	8003850 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800384e:	e0ca      	b.n	80039e6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_Receive+0x7e>
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003860:	e0c1      	b.n	80039e6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2204      	movs	r2, #4
 8003866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a8:	d10f      	bne.n	80038ca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d007      	beq.n	80038e8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d162      	bne.n	80039b6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038f0:	e02e      	b.n	8003950 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d115      	bne.n	800392c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f103 020c 	add.w	r2, r3, #12
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	; 0x3e
 800392a:	e011      	b.n	8003950 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392c:	f7fd fe92 	bl	8001654 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d803      	bhi.n	8003944 <HAL_SPI_Receive+0x166>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d102      	bne.n	800394a <HAL_SPI_Receive+0x16c>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800394e:	e04a      	b.n	80039e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1cb      	bne.n	80038f2 <HAL_SPI_Receive+0x114>
 800395a:	e031      	b.n	80039c0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d113      	bne.n	8003992 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	b292      	uxth	r2, r2
 8003976:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	1c9a      	adds	r2, r3, #2
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003990:	e011      	b.n	80039b6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003992:	f7fd fe5f 	bl	8001654 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d803      	bhi.n	80039aa <HAL_SPI_Receive+0x1cc>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d102      	bne.n	80039b0 <HAL_SPI_Receive+0x1d2>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039b4:	e017      	b.n	80039e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1cd      	bne.n	800395c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	6839      	ldr	r1, [r7, #0]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fa45 	bl	8003e54 <SPI_EndRxTransaction>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
 80039e2:	e000      	b.n	80039e6 <HAL_SPI_Receive+0x208>
  }

error :
 80039e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08c      	sub	sp, #48	; 0x30
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x26>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e18a      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x33c>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a2e:	f7fd fe11 	bl	8001654 <HAL_GetTick>
 8003a32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a44:	887b      	ldrh	r3, [r7, #2]
 8003a46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d00f      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x70>
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a56:	d107      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x68>
 8003a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d003      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a6e:	e15b      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x82>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x82>
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a88:	e14e      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d003      	beq.n	8003a9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2205      	movs	r2, #5
 8003a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d007      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afa:	d178      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_TransmitReceive+0x10a>
 8003b04:	8b7b      	ldrh	r3, [r7, #26]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d166      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	881a      	ldrh	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	1c9a      	adds	r2, r3, #2
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b2e:	e053      	b.n	8003bd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d11b      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x176>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d016      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0x176>
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d113      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	1c9a      	adds	r2, r3, #2
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d119      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x1b8>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d014      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bb8:	f7fd fd4c 	bl	8001654 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d807      	bhi.n	8003bd8 <HAL_SPI_TransmitReceive+0x1d8>
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d003      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bd6:	e0a7      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1a6      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x130>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1a1      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x130>
 8003bec:	e07c      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_TransmitReceive+0x1fc>
 8003bf6:	8b7b      	ldrh	r3, [r7, #26]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d16b      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	7812      	ldrb	r2, [r2, #0]
 8003c08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c22:	e057      	b.n	8003cd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d11c      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x26c>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d017      	beq.n	8003c6c <HAL_SPI_TransmitReceive+0x26c>
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d114      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d119      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x2ae>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d014      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003caa:	2301      	movs	r3, #1
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cae:	f7fd fcd1 	bl	8001654 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d803      	bhi.n	8003cc6 <HAL_SPI_TransmitReceive+0x2c6>
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d102      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x2cc>
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cd2:	e029      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1a2      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x224>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d19d      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f917 	bl	8003f20 <SPI_EndRxTxTransaction>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d006      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d04:	e010      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10b      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	e000      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d54:	f7fd fc7e 	bl	8001654 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d64:	f7fd fc76 	bl	8001654 <HAL_GetTick>
 8003d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d6a:	4b39      	ldr	r3, [pc, #228]	; (8003e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	015b      	lsls	r3, r3, #5
 8003d70:	0d1b      	lsrs	r3, r3, #20
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7a:	e054      	b.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d050      	beq.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d84:	f7fd fc66 	bl	8001654 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d902      	bls.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d13d      	bne.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db2:	d111      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	d004      	beq.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc6:	d107      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d10f      	bne.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e017      	b.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d19b      	bne.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000008 	.word	0x20000008

08003e54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e68:	d111      	bne.n	8003e8e <SPI_EndRxTransaction+0x3a>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e72:	d004      	beq.n	8003e7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7c:	d107      	bne.n	8003e8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e96:	d12a      	bne.n	8003eee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea0:	d012      	beq.n	8003ec8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff ff49 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02d      	beq.n	8003f14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e026      	b.n	8003f16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff ff36 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01a      	beq.n	8003f14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f043 0220 	orr.w	r2, r3, #32
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e013      	b.n	8003f16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff ff23 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e000      	b.n	8003f16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <SPI_EndRxTxTransaction+0x7c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1b      	ldr	r2, [pc, #108]	; (8003fa0 <SPI_EndRxTxTransaction+0x80>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0d5b      	lsrs	r3, r3, #21
 8003f38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f3c:	fb02 f303 	mul.w	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4a:	d112      	bne.n	8003f72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff fef4 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	f043 0220 	orr.w	r2, r3, #32
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e00f      	b.n	8003f92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d0f2      	beq.n	8003f72 <SPI_EndRxTxTransaction+0x52>
 8003f8c:	e000      	b.n	8003f90 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f8e:	bf00      	nop
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000008 	.word	0x20000008
 8003fa0:	165e9f81 	.word	0x165e9f81

08003fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e041      	b.n	800403a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc ff7a 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f000 fb40 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e041      	b.n	80040d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f839 	bl	80040e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2202      	movs	r2, #2
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	4619      	mov	r1, r3
 8004080:	4610      	mov	r0, r2
 8004082:	f000 faf1 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b02      	cmp	r3, #2
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0202 	mvn.w	r2, #2
 8004120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa77 	bl	800462a <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa69 	bl	8004616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa7a 	bl	800463e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0204 	mvn.w	r2, #4
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fa4d 	bl	800462a <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa3f 	bl	8004616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fa50 	bl	800463e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0208 	mvn.w	r2, #8
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2204      	movs	r2, #4
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa23 	bl	800462a <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa15 	bl	8004616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fa26 	bl	800463e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0210 	mvn.w	r2, #16
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2208      	movs	r2, #8
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f9f9 	bl	800462a <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9eb 	bl	8004616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f9fc 	bl	800463e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0201 	mvn.w	r2, #1
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc fcc0 	bl	8000bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d10e      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d107      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fda4 	bl	8004dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d10e      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d107      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9c1 	bl	8004652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d10e      	bne.n	80042fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d107      	bne.n	80042fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0220 	mvn.w	r2, #32
 80042f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fd6e 	bl	8004dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800431e:	2302      	movs	r3, #2
 8004320:	e0ae      	b.n	8004480 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b0c      	cmp	r3, #12
 800432e:	f200 809f 	bhi.w	8004470 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	0800436d 	.word	0x0800436d
 800433c:	08004471 	.word	0x08004471
 8004340:	08004471 	.word	0x08004471
 8004344:	08004471 	.word	0x08004471
 8004348:	080043ad 	.word	0x080043ad
 800434c:	08004471 	.word	0x08004471
 8004350:	08004471 	.word	0x08004471
 8004354:	08004471 	.word	0x08004471
 8004358:	080043ef 	.word	0x080043ef
 800435c:	08004471 	.word	0x08004471
 8004360:	08004471 	.word	0x08004471
 8004364:	08004471 	.word	0x08004471
 8004368:	0800442f 	.word	0x0800442f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fa18 	bl	80047a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0208 	orr.w	r2, r2, #8
 8004386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]
      break;
 80043aa:	e064      	b.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fa68 	bl	8004888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6999      	ldr	r1, [r3, #24]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	021a      	lsls	r2, r3, #8
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	619a      	str	r2, [r3, #24]
      break;
 80043ec:	e043      	b.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fabd 	bl	8004974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0208 	orr.w	r2, r2, #8
 8004408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0204 	bic.w	r2, r2, #4
 8004418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69d9      	ldr	r1, [r3, #28]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	61da      	str	r2, [r3, #28]
      break;
 800442c:	e023      	b.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fb11 	bl	8004a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69d9      	ldr	r1, [r3, #28]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	021a      	lsls	r2, r3, #8
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	61da      	str	r2, [r3, #28]
      break;
 800446e:	e002      	b.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	75fb      	strb	r3, [r7, #23]
      break;
 8004474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800447e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0b4      	b.n	800460e <HAL_TIM_ConfigClockSource+0x186>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044dc:	d03e      	beq.n	800455c <HAL_TIM_ConfigClockSource+0xd4>
 80044de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e2:	f200 8087 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	f000 8086 	beq.w	80045fa <HAL_TIM_ConfigClockSource+0x172>
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f2:	d87f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b70      	cmp	r3, #112	; 0x70
 80044f6:	d01a      	beq.n	800452e <HAL_TIM_ConfigClockSource+0xa6>
 80044f8:	2b70      	cmp	r3, #112	; 0x70
 80044fa:	d87b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b60      	cmp	r3, #96	; 0x60
 80044fe:	d050      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004500:	2b60      	cmp	r3, #96	; 0x60
 8004502:	d877      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b50      	cmp	r3, #80	; 0x50
 8004506:	d03c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0xfa>
 8004508:	2b50      	cmp	r3, #80	; 0x50
 800450a:	d873      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d058      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d86f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b30      	cmp	r3, #48	; 0x30
 8004516:	d064      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004518:	2b30      	cmp	r3, #48	; 0x30
 800451a:	d86b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d060      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d867      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05c      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004528:	2b10      	cmp	r3, #16
 800452a:	d05a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 800452c:	e062      	b.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6899      	ldr	r1, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f000 fb5d 	bl	8004bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	609a      	str	r2, [r3, #8]
      break;
 800455a:	e04f      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6899      	ldr	r1, [r3, #8]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f000 fb46 	bl	8004bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800457e:	609a      	str	r2, [r3, #8]
      break;
 8004580:	e03c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	461a      	mov	r2, r3
 8004590:	f000 faba 	bl	8004b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2150      	movs	r1, #80	; 0x50
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fb13 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80045a0:	e02c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 fad9 	bl	8004b66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2160      	movs	r1, #96	; 0x60
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fb03 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80045c0:	e01c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 fa9a 	bl	8004b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 faf3 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80045e0:	e00c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f000 faea 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80045f2:	e003      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      break;
 80045f8:	e000      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a40      	ldr	r2, [pc, #256]	; (800477c <TIM_Base_SetConfig+0x114>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d00f      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a3d      	ldr	r2, [pc, #244]	; (8004780 <TIM_Base_SetConfig+0x118>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00b      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3c      	ldr	r2, [pc, #240]	; (8004784 <TIM_Base_SetConfig+0x11c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <TIM_Base_SetConfig+0x120>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3a      	ldr	r2, [pc, #232]	; (800478c <TIM_Base_SetConfig+0x124>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d108      	bne.n	80046ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2f      	ldr	r2, [pc, #188]	; (800477c <TIM_Base_SetConfig+0x114>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d02b      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d027      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <TIM_Base_SetConfig+0x118>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d023      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2b      	ldr	r2, [pc, #172]	; (8004784 <TIM_Base_SetConfig+0x11c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01f      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <TIM_Base_SetConfig+0x120>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01b      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a29      	ldr	r2, [pc, #164]	; (800478c <TIM_Base_SetConfig+0x124>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d017      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a28      	ldr	r2, [pc, #160]	; (8004790 <TIM_Base_SetConfig+0x128>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a27      	ldr	r2, [pc, #156]	; (8004794 <TIM_Base_SetConfig+0x12c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a26      	ldr	r2, [pc, #152]	; (8004798 <TIM_Base_SetConfig+0x130>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a25      	ldr	r2, [pc, #148]	; (800479c <TIM_Base_SetConfig+0x134>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <TIM_Base_SetConfig+0x138>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a23      	ldr	r2, [pc, #140]	; (80047a4 <TIM_Base_SetConfig+0x13c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a0a      	ldr	r2, [pc, #40]	; (800477c <TIM_Base_SetConfig+0x114>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_Base_SetConfig+0xf8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a0c      	ldr	r2, [pc, #48]	; (800478c <TIM_Base_SetConfig+0x124>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d103      	bne.n	8004768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	615a      	str	r2, [r3, #20]
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40010400 	.word	0x40010400
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800
 800479c:	40001800 	.word	0x40001800
 80047a0:	40001c00 	.word	0x40001c00
 80047a4:	40002000 	.word	0x40002000

080047a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 0302 	bic.w	r3, r3, #2
 80047f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a20      	ldr	r2, [pc, #128]	; (8004880 <TIM_OC1_SetConfig+0xd8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_OC1_SetConfig+0x64>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <TIM_OC1_SetConfig+0xdc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10c      	bne.n	8004826 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0308 	bic.w	r3, r3, #8
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <TIM_OC1_SetConfig+0xd8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_OC1_SetConfig+0x8e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <TIM_OC1_SetConfig+0xdc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d111      	bne.n	800485a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800483c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	40010000 	.word	0x40010000
 8004884:	40010400 	.word	0x40010400

08004888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0210 	bic.w	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0320 	bic.w	r3, r3, #32
 80048d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a22      	ldr	r2, [pc, #136]	; (800496c <TIM_OC2_SetConfig+0xe4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC2_SetConfig+0x68>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a21      	ldr	r2, [pc, #132]	; (8004970 <TIM_OC2_SetConfig+0xe8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10d      	bne.n	800490c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a17      	ldr	r2, [pc, #92]	; (800496c <TIM_OC2_SetConfig+0xe4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_OC2_SetConfig+0x94>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a16      	ldr	r2, [pc, #88]	; (8004970 <TIM_OC2_SetConfig+0xe8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d113      	bne.n	8004944 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800492a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40010000 	.word	0x40010000
 8004970:	40010400 	.word	0x40010400

08004974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <TIM_OC3_SetConfig+0xe0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_OC3_SetConfig+0x66>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <TIM_OC3_SetConfig+0xe4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10d      	bne.n	80049f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <TIM_OC3_SetConfig+0xe0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_OC3_SetConfig+0x92>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <TIM_OC3_SetConfig+0xe4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d113      	bne.n	8004a2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40010400 	.word	0x40010400

08004a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	031b      	lsls	r3, r3, #12
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <TIM_OC4_SetConfig+0xa4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC4_SetConfig+0x68>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a11      	ldr	r2, [pc, #68]	; (8004b04 <TIM_OC4_SetConfig+0xa8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d109      	bne.n	8004ad8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	019b      	lsls	r3, r3, #6
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40010400 	.word	0x40010400

08004b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0201 	bic.w	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 030a 	bic.w	r3, r3, #10
 8004b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f043 0307 	orr.w	r3, r3, #7
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e05a      	b.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d01d      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40010400 	.word	0x40010400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40001800 	.word	0x40001800

08004d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e03d      	b.n	8004dcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e03f      	b.n	8004e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc f8f8 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f829 	bl	8004e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b0c0      	sub	sp, #256	; 0x100
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	68d9      	ldr	r1, [r3, #12]
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	ea40 0301 	orr.w	r3, r0, r1
 8004ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ef4:	f021 010c 	bic.w	r1, r1, #12
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f02:	430b      	orrs	r3, r1
 8004f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f16:	6999      	ldr	r1, [r3, #24]
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	ea40 0301 	orr.w	r3, r0, r1
 8004f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b8f      	ldr	r3, [pc, #572]	; (8005168 <UART_SetConfig+0x2cc>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d005      	beq.n	8004f3c <UART_SetConfig+0xa0>
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b8d      	ldr	r3, [pc, #564]	; (800516c <UART_SetConfig+0x2d0>)
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d104      	bne.n	8004f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f3c:	f7fe fa76 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8004f40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f44:	e003      	b.n	8004f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f46:	f7fe fa5d 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8004f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f58:	f040 810c 	bne.w	8005174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f6e:	4622      	mov	r2, r4
 8004f70:	462b      	mov	r3, r5
 8004f72:	1891      	adds	r1, r2, r2
 8004f74:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f76:	415b      	adcs	r3, r3
 8004f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f7e:	4621      	mov	r1, r4
 8004f80:	eb12 0801 	adds.w	r8, r2, r1
 8004f84:	4629      	mov	r1, r5
 8004f86:	eb43 0901 	adc.w	r9, r3, r1
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f9e:	4690      	mov	r8, r2
 8004fa0:	4699      	mov	r9, r3
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	eb18 0303 	adds.w	r3, r8, r3
 8004fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fac:	462b      	mov	r3, r5
 8004fae:	eb49 0303 	adc.w	r3, r9, r3
 8004fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fca:	460b      	mov	r3, r1
 8004fcc:	18db      	adds	r3, r3, r3
 8004fce:	653b      	str	r3, [r7, #80]	; 0x50
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	eb42 0303 	adc.w	r3, r2, r3
 8004fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fe0:	f7fb f904 	bl	80001ec <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4b61      	ldr	r3, [pc, #388]	; (8005170 <UART_SetConfig+0x2d4>)
 8004fea:	fba3 2302 	umull	r2, r3, r3, r2
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	011c      	lsls	r4, r3, #4
 8004ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005004:	4642      	mov	r2, r8
 8005006:	464b      	mov	r3, r9
 8005008:	1891      	adds	r1, r2, r2
 800500a:	64b9      	str	r1, [r7, #72]	; 0x48
 800500c:	415b      	adcs	r3, r3
 800500e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005014:	4641      	mov	r1, r8
 8005016:	eb12 0a01 	adds.w	sl, r2, r1
 800501a:	4649      	mov	r1, r9
 800501c:	eb43 0b01 	adc.w	fp, r3, r1
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800502c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005034:	4692      	mov	sl, r2
 8005036:	469b      	mov	fp, r3
 8005038:	4643      	mov	r3, r8
 800503a:	eb1a 0303 	adds.w	r3, sl, r3
 800503e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005042:	464b      	mov	r3, r9
 8005044:	eb4b 0303 	adc.w	r3, fp, r3
 8005048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005058:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800505c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005060:	460b      	mov	r3, r1
 8005062:	18db      	adds	r3, r3, r3
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
 8005066:	4613      	mov	r3, r2
 8005068:	eb42 0303 	adc.w	r3, r2, r3
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
 800506e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005076:	f7fb f8b9 	bl	80001ec <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4611      	mov	r1, r2
 8005080:	4b3b      	ldr	r3, [pc, #236]	; (8005170 <UART_SetConfig+0x2d4>)
 8005082:	fba3 2301 	umull	r2, r3, r3, r1
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	2264      	movs	r2, #100	; 0x64
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	1acb      	subs	r3, r1, r3
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005096:	4b36      	ldr	r3, [pc, #216]	; (8005170 <UART_SetConfig+0x2d4>)
 8005098:	fba3 2302 	umull	r2, r3, r3, r2
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050a4:	441c      	add	r4, r3
 80050a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050b8:	4642      	mov	r2, r8
 80050ba:	464b      	mov	r3, r9
 80050bc:	1891      	adds	r1, r2, r2
 80050be:	63b9      	str	r1, [r7, #56]	; 0x38
 80050c0:	415b      	adcs	r3, r3
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050c8:	4641      	mov	r1, r8
 80050ca:	1851      	adds	r1, r2, r1
 80050cc:	6339      	str	r1, [r7, #48]	; 0x30
 80050ce:	4649      	mov	r1, r9
 80050d0:	414b      	adcs	r3, r1
 80050d2:	637b      	str	r3, [r7, #52]	; 0x34
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050e0:	4659      	mov	r1, fp
 80050e2:	00cb      	lsls	r3, r1, #3
 80050e4:	4651      	mov	r1, sl
 80050e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ea:	4651      	mov	r1, sl
 80050ec:	00ca      	lsls	r2, r1, #3
 80050ee:	4610      	mov	r0, r2
 80050f0:	4619      	mov	r1, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	4642      	mov	r2, r8
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050fc:	464b      	mov	r3, r9
 80050fe:	460a      	mov	r2, r1
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005114:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800511c:	460b      	mov	r3, r1
 800511e:	18db      	adds	r3, r3, r3
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
 8005122:	4613      	mov	r3, r2
 8005124:	eb42 0303 	adc.w	r3, r2, r3
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800512e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005132:	f7fb f85b 	bl	80001ec <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <UART_SetConfig+0x2d4>)
 800513c:	fba3 1302 	umull	r1, r3, r3, r2
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2164      	movs	r1, #100	; 0x64
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	3332      	adds	r3, #50	; 0x32
 800514e:	4a08      	ldr	r2, [pc, #32]	; (8005170 <UART_SetConfig+0x2d4>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	f003 0207 	and.w	r2, r3, #7
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4422      	add	r2, r4
 8005162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005164:	e106      	b.n	8005374 <UART_SetConfig+0x4d8>
 8005166:	bf00      	nop
 8005168:	40011000 	.word	0x40011000
 800516c:	40011400 	.word	0x40011400
 8005170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005178:	2200      	movs	r2, #0
 800517a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800517e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005186:	4642      	mov	r2, r8
 8005188:	464b      	mov	r3, r9
 800518a:	1891      	adds	r1, r2, r2
 800518c:	6239      	str	r1, [r7, #32]
 800518e:	415b      	adcs	r3, r3
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
 8005192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005196:	4641      	mov	r1, r8
 8005198:	1854      	adds	r4, r2, r1
 800519a:	4649      	mov	r1, r9
 800519c:	eb43 0501 	adc.w	r5, r3, r1
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	00eb      	lsls	r3, r5, #3
 80051aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ae:	00e2      	lsls	r2, r4, #3
 80051b0:	4614      	mov	r4, r2
 80051b2:	461d      	mov	r5, r3
 80051b4:	4643      	mov	r3, r8
 80051b6:	18e3      	adds	r3, r4, r3
 80051b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051bc:	464b      	mov	r3, r9
 80051be:	eb45 0303 	adc.w	r3, r5, r3
 80051c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051e2:	4629      	mov	r1, r5
 80051e4:	008b      	lsls	r3, r1, #2
 80051e6:	4621      	mov	r1, r4
 80051e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ec:	4621      	mov	r1, r4
 80051ee:	008a      	lsls	r2, r1, #2
 80051f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051f4:	f7fa fffa 	bl	80001ec <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4b60      	ldr	r3, [pc, #384]	; (8005380 <UART_SetConfig+0x4e4>)
 80051fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	011c      	lsls	r4, r3, #4
 8005206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800520a:	2200      	movs	r2, #0
 800520c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005210:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005218:	4642      	mov	r2, r8
 800521a:	464b      	mov	r3, r9
 800521c:	1891      	adds	r1, r2, r2
 800521e:	61b9      	str	r1, [r7, #24]
 8005220:	415b      	adcs	r3, r3
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005228:	4641      	mov	r1, r8
 800522a:	1851      	adds	r1, r2, r1
 800522c:	6139      	str	r1, [r7, #16]
 800522e:	4649      	mov	r1, r9
 8005230:	414b      	adcs	r3, r1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005240:	4659      	mov	r1, fp
 8005242:	00cb      	lsls	r3, r1, #3
 8005244:	4651      	mov	r1, sl
 8005246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800524a:	4651      	mov	r1, sl
 800524c:	00ca      	lsls	r2, r1, #3
 800524e:	4610      	mov	r0, r2
 8005250:	4619      	mov	r1, r3
 8005252:	4603      	mov	r3, r0
 8005254:	4642      	mov	r2, r8
 8005256:	189b      	adds	r3, r3, r2
 8005258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800525c:	464b      	mov	r3, r9
 800525e:	460a      	mov	r2, r1
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	67bb      	str	r3, [r7, #120]	; 0x78
 8005272:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005280:	4649      	mov	r1, r9
 8005282:	008b      	lsls	r3, r1, #2
 8005284:	4641      	mov	r1, r8
 8005286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528a:	4641      	mov	r1, r8
 800528c:	008a      	lsls	r2, r1, #2
 800528e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005292:	f7fa ffab 	bl	80001ec <__aeabi_uldivmod>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4611      	mov	r1, r2
 800529c:	4b38      	ldr	r3, [pc, #224]	; (8005380 <UART_SetConfig+0x4e4>)
 800529e:	fba3 2301 	umull	r2, r3, r3, r1
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2264      	movs	r2, #100	; 0x64
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	1acb      	subs	r3, r1, r3
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	3332      	adds	r3, #50	; 0x32
 80052b0:	4a33      	ldr	r2, [pc, #204]	; (8005380 <UART_SetConfig+0x4e4>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052bc:	441c      	add	r4, r3
 80052be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c2:	2200      	movs	r2, #0
 80052c4:	673b      	str	r3, [r7, #112]	; 0x70
 80052c6:	677a      	str	r2, [r7, #116]	; 0x74
 80052c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	1891      	adds	r1, r2, r2
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	415b      	adcs	r3, r3
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052dc:	4641      	mov	r1, r8
 80052de:	1851      	adds	r1, r2, r1
 80052e0:	6039      	str	r1, [r7, #0]
 80052e2:	4649      	mov	r1, r9
 80052e4:	414b      	adcs	r3, r1
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052f4:	4659      	mov	r1, fp
 80052f6:	00cb      	lsls	r3, r1, #3
 80052f8:	4651      	mov	r1, sl
 80052fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052fe:	4651      	mov	r1, sl
 8005300:	00ca      	lsls	r2, r1, #3
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	4603      	mov	r3, r0
 8005308:	4642      	mov	r2, r8
 800530a:	189b      	adds	r3, r3, r2
 800530c:	66bb      	str	r3, [r7, #104]	; 0x68
 800530e:	464b      	mov	r3, r9
 8005310:	460a      	mov	r2, r1
 8005312:	eb42 0303 	adc.w	r3, r2, r3
 8005316:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	663b      	str	r3, [r7, #96]	; 0x60
 8005322:	667a      	str	r2, [r7, #100]	; 0x64
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005330:	4649      	mov	r1, r9
 8005332:	008b      	lsls	r3, r1, #2
 8005334:	4641      	mov	r1, r8
 8005336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800533a:	4641      	mov	r1, r8
 800533c:	008a      	lsls	r2, r1, #2
 800533e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005342:	f7fa ff53 	bl	80001ec <__aeabi_uldivmod>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <UART_SetConfig+0x4e4>)
 800534c:	fba3 1302 	umull	r1, r3, r3, r2
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	2164      	movs	r1, #100	; 0x64
 8005354:	fb01 f303 	mul.w	r3, r1, r3
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	3332      	adds	r3, #50	; 0x32
 800535e:	4a08      	ldr	r2, [pc, #32]	; (8005380 <UART_SetConfig+0x4e4>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	f003 020f 	and.w	r2, r3, #15
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4422      	add	r2, r4
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800537a:	46bd      	mov	sp, r7
 800537c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005380:	51eb851f 	.word	0x51eb851f

08005384 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005384:	b084      	sub	sp, #16
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	f107 001c 	add.w	r0, r7, #28
 8005392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	2b01      	cmp	r3, #1
 800539a:	d122      	bne.n	80053e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d105      	bne.n	80053d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 faa2 	bl	8005920 <USB_CoreReset>
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]
 80053e0:	e01a      	b.n	8005418 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa96 	bl	8005920 <USB_CoreReset>
 80053f4:	4603      	mov	r3, r0
 80053f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
 800540a:	e005      	b.n	8005418 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10b      	bne.n	8005436 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f043 0206 	orr.w	r2, r3, #6
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005442:	b004      	add	sp, #16
 8005444:	4770      	bx	lr

08005446 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f023 0201 	bic.w	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d115      	bne.n	80054b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005496:	2001      	movs	r0, #1
 8005498:	f7fc f8e8 	bl	800166c <HAL_Delay>
      ms++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa2e 	bl	8005904 <USB_GetMode>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d01e      	beq.n	80054ec <USB_SetCurrentMode+0x84>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b31      	cmp	r3, #49	; 0x31
 80054b2:	d9f0      	bls.n	8005496 <USB_SetCurrentMode+0x2e>
 80054b4:	e01a      	b.n	80054ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d115      	bne.n	80054e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054c8:	2001      	movs	r0, #1
 80054ca:	f7fc f8cf 	bl	800166c <HAL_Delay>
      ms++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa15 	bl	8005904 <USB_GetMode>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <USB_SetCurrentMode+0x84>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b31      	cmp	r3, #49	; 0x31
 80054e4:	d9f0      	bls.n	80054c8 <USB_SetCurrentMode+0x60>
 80054e6:	e001      	b.n	80054ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e005      	b.n	80054f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b32      	cmp	r3, #50	; 0x32
 80054f0:	d101      	bne.n	80054f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005500:	b084      	sub	sp, #16
 8005502:	b580      	push	{r7, lr}
 8005504:	b086      	sub	sp, #24
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800550e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800551a:	2300      	movs	r3, #0
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	e009      	b.n	8005534 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	3340      	adds	r3, #64	; 0x40
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	2200      	movs	r2, #0
 800552c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	3301      	adds	r3, #1
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b0e      	cmp	r3, #14
 8005538:	d9f2      	bls.n	8005520 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d11c      	bne.n	800557a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800554e:	f043 0302 	orr.w	r3, r3, #2
 8005552:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	639a      	str	r2, [r3, #56]	; 0x38
 8005578:	e00b      	b.n	8005592 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a4:	4619      	mov	r1, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ac:	461a      	mov	r2, r3
 80055ae:	680b      	ldr	r3, [r1, #0]
 80055b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d10c      	bne.n	80055d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055be:	2100      	movs	r1, #0
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f965 	bl	8005890 <USB_SetDevSpeed>
 80055c6:	e008      	b.n	80055da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055c8:	2101      	movs	r1, #1
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f960 	bl	8005890 <USB_SetDevSpeed>
 80055d0:	e003      	b.n	80055da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055d2:	2103      	movs	r1, #3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f95b 	bl	8005890 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055da:	2110      	movs	r1, #16
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f8f3 	bl	80057c8 <USB_FlushTxFifo>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f91f 	bl	8005830 <USB_FlushRxFifo>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	461a      	mov	r2, r3
 8005604:	2300      	movs	r3, #0
 8005606:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	461a      	mov	r2, r3
 8005610:	2300      	movs	r3, #0
 8005612:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	461a      	mov	r2, r3
 800561c:	2300      	movs	r3, #0
 800561e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005620:	2300      	movs	r3, #0
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	e043      	b.n	80056ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800563c:	d118      	bne.n	8005670 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	461a      	mov	r2, r3
 8005652:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	e013      	b.n	8005682 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	461a      	mov	r2, r3
 8005668:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	e008      	b.n	8005682 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	2300      	movs	r3, #0
 8005680:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	461a      	mov	r2, r3
 8005690:	2300      	movs	r3, #0
 8005692:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	461a      	mov	r2, r3
 80056a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	3301      	adds	r3, #1
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d3b7      	bcc.n	8005626 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	e043      	b.n	8005744 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d2:	d118      	bne.n	8005706 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e6:	461a      	mov	r2, r3
 80056e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e013      	b.n	8005718 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	461a      	mov	r2, r3
 80056fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	e008      	b.n	8005718 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	2300      	movs	r3, #0
 8005716:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	461a      	mov	r2, r3
 8005726:	2300      	movs	r3, #0
 8005728:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005736:	461a      	mov	r2, r3
 8005738:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800573c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	3301      	adds	r3, #1
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	429a      	cmp	r2, r3
 800574a:	d3b7      	bcc.n	80056bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800575e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800576c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f043 0210 	orr.w	r2, r3, #16
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <USB_DevInit+0x2c4>)
 8005786:	4313      	orrs	r3, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f043 0208 	orr.w	r2, r3, #8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800579e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d107      	bne.n	80057b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ac:	f043 0304 	orr.w	r3, r3, #4
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057c0:	b004      	add	sp, #16
 80057c2:	4770      	bx	lr
 80057c4:	803c3800 	.word	0x803c3800

080057c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4a13      	ldr	r2, [pc, #76]	; (800582c <USB_FlushTxFifo+0x64>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d901      	bls.n	80057e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e01b      	b.n	8005820 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	daf2      	bge.n	80057d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	019b      	lsls	r3, r3, #6
 80057f8:	f043 0220 	orr.w	r2, r3, #32
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3301      	adds	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a08      	ldr	r2, [pc, #32]	; (800582c <USB_FlushTxFifo+0x64>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e006      	b.n	8005820 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b20      	cmp	r3, #32
 800581c:	d0f0      	beq.n	8005800 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	00030d40 	.word	0x00030d40

08005830 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a11      	ldr	r2, [pc, #68]	; (800588c <USB_FlushRxFifo+0x5c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e018      	b.n	8005880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	daf2      	bge.n	800583c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2210      	movs	r2, #16
 800585e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <USB_FlushRxFifo+0x5c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e006      	b.n	8005880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0310 	and.w	r3, r3, #16
 800587a:	2b10      	cmp	r3, #16
 800587c:	d0f0      	beq.n	8005860 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	00030d40 	.word	0x00030d40

08005890 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b0:	4313      	orrs	r3, r2
 80058b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058dc:	f023 0303 	bic.w	r3, r3, #3
 80058e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0301 	and.w	r3, r3, #1
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a13      	ldr	r2, [pc, #76]	; (8005984 <USB_CoreReset+0x64>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e01b      	b.n	8005976 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	daf2      	bge.n	800592c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f043 0201 	orr.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3301      	adds	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a09      	ldr	r2, [pc, #36]	; (8005984 <USB_CoreReset+0x64>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e006      	b.n	8005976 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b01      	cmp	r3, #1
 8005972:	d0f0      	beq.n	8005956 <USB_CoreReset+0x36>

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	00030d40 	.word	0x00030d40

08005988 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800598e:	4b26      	ldr	r3, [pc, #152]	; (8005a28 <_DoInit+0xa0>)
 8005990:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005992:	22a8      	movs	r2, #168	; 0xa8
 8005994:	2100      	movs	r1, #0
 8005996:	6838      	ldr	r0, [r7, #0]
 8005998:	f000 fd0c 	bl	80063b4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2203      	movs	r2, #3
 80059a0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2203      	movs	r2, #3
 80059a6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	4a20      	ldr	r2, [pc, #128]	; (8005a2c <_DoInit+0xa4>)
 80059ac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <_DoInit+0xa8>)
 80059b2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059ba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2200      	movs	r2, #0
 80059c6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2200      	movs	r2, #0
 80059cc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <_DoInit+0xa4>)
 80059d2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <_DoInit+0xac>)
 80059d8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2210      	movs	r2, #16
 80059de:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80059f2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	e00c      	b.n	8005a16 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1c3 030f 	rsb	r3, r3, #15
 8005a02:	4a0d      	ldr	r2, [pc, #52]	; (8005a38 <_DoInit+0xb0>)
 8005a04:	5cd1      	ldrb	r1, [r2, r3]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3301      	adds	r3, #1
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b0f      	cmp	r3, #15
 8005a1a:	d9ef      	bls.n	80059fc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005a1c:	f3bf 8f5f 	dmb	sy
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000904 	.word	0x20000904
 8005a2c:	08006ad4 	.word	0x08006ad4
 8005a30:	200009ac 	.word	0x200009ac
 8005a34:	20000dac 	.word	0x20000dac
 8005a38:	08006b00 	.word	0x08006b00

08005a3c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	; 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d905      	bls.n	8005a6c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6a:	e007      	b.n	8005a7c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	69b9      	ldr	r1, [r7, #24]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	1acb      	subs	r3, r1, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a86:	4293      	cmp	r3, r2
 8005a88:	bf28      	it	cs
 8005a8a:	4613      	movcs	r3, r2
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	bf28      	it	cs
 8005a96:	4613      	movcs	r3, r2
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	6978      	ldr	r0, [r7, #20]
 8005aaa:	f000 fcaf 	bl	800640c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005aae:	6a3a      	ldr	r2, [r7, #32]
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	4413      	add	r3, r2
 8005ab4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	4413      	add	r3, r2
 8005abc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	4413      	add	r3, r2
 8005acc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d101      	bne.n	8005adc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005adc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1b2      	bne.n	8005a52 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005aec:	6a3b      	ldr	r3, [r7, #32]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	; 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b088      	sub	sp, #32
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d911      	bls.n	8005b3e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	6938      	ldr	r0, [r7, #16]
 8005b2a:	f000 fc6f 	bl	800640c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b2e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	441a      	add	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005b3c:	e01f      	b.n	8005b7e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	6938      	ldr	r0, [r7, #16]
 8005b52:	f000 fc5b 	bl	800640c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	4413      	add	r3, r2
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6938      	ldr	r0, [r7, #16]
 8005b70:	f000 fc4c 	bl	800640c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b74:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	60da      	str	r2, [r3, #12]
}
 8005b7e:	bf00      	nop
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005b86:	b480      	push	{r7}
 8005b88:	b087      	sub	sp, #28
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d808      	bhi.n	8005bb4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad2      	subs	r2, r2, r3
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4413      	add	r3, r2
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e004      	b.n	8005bbe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005bbe:	697b      	ldr	r3, [r7, #20]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	4613      	mov	r3, r2
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	4413      	add	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005bea:	4413      	add	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d029      	beq.n	8005c4a <SEGGER_RTT_WriteNoLock+0x7e>
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d82e      	bhi.n	8005c58 <SEGGER_RTT_WriteNoLock+0x8c>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <SEGGER_RTT_WriteNoLock+0x38>
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d013      	beq.n	8005c2a <SEGGER_RTT_WriteNoLock+0x5e>
 8005c02:	e029      	b.n	8005c58 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005c04:	6978      	ldr	r0, [r7, #20]
 8005c06:	f7ff ffbe 	bl	8005b86 <_GetAvailWriteSpace>
 8005c0a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d202      	bcs.n	8005c1a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005c18:	e021      	b.n	8005c5e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	69b9      	ldr	r1, [r7, #24]
 8005c22:	6978      	ldr	r0, [r7, #20]
 8005c24:	f7ff ff67 	bl	8005af6 <_WriteNoCheck>
    break;
 8005c28:	e019      	b.n	8005c5e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005c2a:	6978      	ldr	r0, [r7, #20]
 8005c2c:	f7ff ffab 	bl	8005b86 <_GetAvailWriteSpace>
 8005c30:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4293      	cmp	r3, r2
 8005c38:	bf28      	it	cs
 8005c3a:	4613      	movcs	r3, r2
 8005c3c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	69b9      	ldr	r1, [r7, #24]
 8005c42:	6978      	ldr	r0, [r7, #20]
 8005c44:	f7ff ff57 	bl	8005af6 <_WriteNoCheck>
    break;
 8005c48:	e009      	b.n	8005c5e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	69b9      	ldr	r1, [r7, #24]
 8005c4e:	6978      	ldr	r0, [r7, #20]
 8005c50:	f7ff fef4 	bl	8005a3c <_WriteBlocking>
 8005c54:	61f8      	str	r0, [r7, #28]
    break;
 8005c56:	e002      	b.n	8005c5e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
    break;
 8005c5c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000904 	.word	0x20000904

08005c6c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <SEGGER_RTT_Write+0x48>)
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b53      	cmp	r3, #83	; 0x53
 8005c84:	d001      	beq.n	8005c8a <SEGGER_RTT_Write+0x1e>
 8005c86:	f7ff fe7f 	bl	8005988 <_DoInit>
  SEGGER_RTT_LOCK();
 8005c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c8e:	f04f 0120 	mov.w	r1, #32
 8005c92:	f381 8811 	msr	BASEPRI, r1
 8005c96:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7ff ff95 	bl	8005bcc <SEGGER_RTT_WriteNoLock>
 8005ca2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005caa:	697b      	ldr	r3, [r7, #20]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3720      	adds	r7, #32
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20000904 	.word	0x20000904

08005cb8 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d80e      	bhi.n	8005cf4 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	78fa      	ldrb	r2, [r7, #3]
 8005ce0:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d115      	bne.n	8005d2c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6918      	ldr	r0, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6819      	ldr	r1, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f7ff ffad 	bl	8005c6c <SEGGER_RTT_Write>
 8005d12:	4602      	mov	r2, r0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d004      	beq.n	8005d26 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d22:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8005d24:	e002      	b.n	8005d2c <_StoreChar+0x74>
      p->Cnt = 0u;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	; 0x28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005d46:	2301      	movs	r3, #1
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d4e:	e007      	b.n	8005d60 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005d50:	6a3a      	ldr	r2, [r7, #32]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d58:	623b      	str	r3, [r7, #32]
    Width++;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d2f3      	bcs.n	8005d50 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d901      	bls.n	8005d74 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d125      	bne.n	8005dca <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d022      	beq.n	8005dca <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <_PrintUnsigned+0x66>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <_PrintUnsigned+0x66>
        c = '0';
 8005d94:	2330      	movs	r3, #48	; 0x30
 8005d96:	76fb      	strb	r3, [r7, #27]
 8005d98:	e001      	b.n	8005d9e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005d9a:	2320      	movs	r3, #32
 8005d9c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d9e:	e00b      	b.n	8005db8 <_PrintUnsigned+0x84>
        FieldWidth--;
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	3b01      	subs	r3, #1
 8005da4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005da6:	7efb      	ldrb	r3, [r7, #27]
 8005da8:	4619      	mov	r1, r3
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff ff84 	bl	8005cb8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db07      	blt.n	8005dc8 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <_PrintUnsigned+0x96>
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d3ec      	bcc.n	8005da0 <_PrintUnsigned+0x6c>
 8005dc6:	e000      	b.n	8005dca <_PrintUnsigned+0x96>
          break;
 8005dc8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	db55      	blt.n	8005e7e <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d903      	bls.n	8005de0 <_PrintUnsigned+0xac>
        NumDigits--;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	e009      	b.n	8005df4 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d200      	bcs.n	8005df4 <_PrintUnsigned+0xc0>
          break;
 8005df2:	e005      	b.n	8005e00 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005dfe:	e7e8      	b.n	8005dd2 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8005e18:	4a1b      	ldr	r2, [pc, #108]	; (8005e88 <_PrintUnsigned+0x154>)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff ff48 	bl	8005cb8 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	db08      	blt.n	8005e42 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8005e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1df      	bne.n	8005e00 <_PrintUnsigned+0xcc>
 8005e40:	e000      	b.n	8005e44 <_PrintUnsigned+0x110>
        break;
 8005e42:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d017      	beq.n	8005e7e <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d014      	beq.n	8005e7e <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e54:	e00a      	b.n	8005e6c <_PrintUnsigned+0x138>
          FieldWidth--;
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff ff2a 	bl	8005cb8 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	db07      	blt.n	8005e7c <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <_PrintUnsigned+0x14a>
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d3ed      	bcc.n	8005e56 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8005e7a:	e000      	b.n	8005e7e <_PrintUnsigned+0x14a>
            break;
 8005e7c:	bf00      	nop
}
 8005e7e:	bf00      	nop
 8005e80:	3728      	adds	r7, #40	; 0x28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	08006b14 	.word	0x08006b14

08005e8c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfb8      	it	lt
 8005ea0:	425b      	neglt	r3, r3
 8005ea2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ea8:	e007      	b.n	8005eba <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8005eb2:	613b      	str	r3, [r7, #16]
    Width++;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	daf3      	bge.n	8005eaa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d901      	bls.n	8005ece <_PrintInt+0x42>
    Width = NumDigits;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <_PrintInt+0x5e>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	db04      	blt.n	8005ee4 <_PrintInt+0x58>
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <_PrintInt+0x5e>
    FieldWidth--;
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <_PrintInt+0x6e>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01c      	beq.n	8005f34 <_PrintInt+0xa8>
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d117      	bne.n	8005f34 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d014      	beq.n	8005f34 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f0a:	e00a      	b.n	8005f22 <_PrintInt+0x96>
        FieldWidth--;
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005f12:	2120      	movs	r1, #32
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff fecf 	bl	8005cb8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	db07      	blt.n	8005f32 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <_PrintInt+0xa8>
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d3ed      	bcc.n	8005f0c <_PrintInt+0x80>
 8005f30:	e000      	b.n	8005f34 <_PrintInt+0xa8>
          break;
 8005f32:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	db4a      	blt.n	8005fd2 <_PrintInt+0x146>
    if (v < 0) {
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da07      	bge.n	8005f52 <_PrintInt+0xc6>
      v = -v;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	425b      	negs	r3, r3
 8005f46:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8005f48:	212d      	movs	r1, #45	; 0x2d
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff feb4 	bl	8005cb8 <_StoreChar>
 8005f50:	e008      	b.n	8005f64 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8005f5c:	212b      	movs	r1, #43	; 0x2b
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff feaa 	bl	8005cb8 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	db32      	blt.n	8005fd2 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01f      	beq.n	8005fb6 <_PrintInt+0x12a>
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d11a      	bne.n	8005fb6 <_PrintInt+0x12a>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d117      	bne.n	8005fb6 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d014      	beq.n	8005fb6 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f8c:	e00a      	b.n	8005fa4 <_PrintInt+0x118>
            FieldWidth--;
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8005f94:	2130      	movs	r1, #48	; 0x30
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff fe8e 	bl	8005cb8 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db07      	blt.n	8005fb4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <_PrintInt+0x12a>
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d3ed      	bcc.n	8005f8e <_PrintInt+0x102>
 8005fb2:	e000      	b.n	8005fb6 <_PrintInt+0x12a>
              break;
 8005fb4:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	db09      	blt.n	8005fd2 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff feb1 	bl	8005d34 <_PrintUnsigned>
      }
    }
  }
}
 8005fd2:	bf00      	nop
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b0a2      	sub	sp, #136	; 0x88
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8005fe8:	f107 0310 	add.w	r3, r7, #16
 8005fec:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8005fee:	2340      	movs	r3, #64	; 0x40
 8005ff0:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	3301      	adds	r3, #1
 800600a:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 800600c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 819f 	beq.w	8006354 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 8006016:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800601a:	2b25      	cmp	r3, #37	; 0x25
 800601c:	f040 818d 	bne.w	800633a <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006020:	2300      	movs	r3, #0
 8006022:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8006024:	2301      	movs	r3, #1
 8006026:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8006030:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006034:	3b23      	subs	r3, #35	; 0x23
 8006036:	2b0d      	cmp	r3, #13
 8006038:	d83e      	bhi.n	80060b8 <SEGGER_RTT_vprintf+0xdc>
 800603a:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <SEGGER_RTT_vprintf+0x64>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	080060a9 	.word	0x080060a9
 8006044:	080060b9 	.word	0x080060b9
 8006048:	080060b9 	.word	0x080060b9
 800604c:	080060b9 	.word	0x080060b9
 8006050:	080060b9 	.word	0x080060b9
 8006054:	080060b9 	.word	0x080060b9
 8006058:	080060b9 	.word	0x080060b9
 800605c:	080060b9 	.word	0x080060b9
 8006060:	08006099 	.word	0x08006099
 8006064:	080060b9 	.word	0x080060b9
 8006068:	08006079 	.word	0x08006079
 800606c:	080060b9 	.word	0x080060b9
 8006070:	080060b9 	.word	0x080060b9
 8006074:	08006089 	.word	0x08006089
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	673b      	str	r3, [r7, #112]	; 0x70
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	3301      	adds	r3, #1
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	e01a      	b.n	80060be <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800608a:	f043 0302 	orr.w	r3, r3, #2
 800608e:	673b      	str	r3, [r7, #112]	; 0x70
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	3301      	adds	r3, #1
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	e012      	b.n	80060be <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800609a:	f043 0304 	orr.w	r3, r3, #4
 800609e:	673b      	str	r3, [r7, #112]	; 0x70
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60bb      	str	r3, [r7, #8]
 80060a6:	e00a      	b.n	80060be <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80060a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060aa:	f043 0308 	orr.w	r3, r3, #8
 80060ae:	673b      	str	r3, [r7, #112]	; 0x70
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	e002      	b.n	80060be <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 80060b8:	2300      	movs	r3, #0
 80060ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80060bc:	bf00      	nop
        }
      } while (v);
 80060be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1b1      	bne.n	8006028 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80060c4:	2300      	movs	r3, #0
 80060c6:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 80060d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80060d4:	2b2f      	cmp	r3, #47	; 0x2f
 80060d6:	d912      	bls.n	80060fe <SEGGER_RTT_vprintf+0x122>
 80060d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80060dc:	2b39      	cmp	r3, #57	; 0x39
 80060de:	d80e      	bhi.n	80060fe <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80060e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	461a      	mov	r2, r3
 80060f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80060f6:	4413      	add	r3, r2
 80060f8:	3b30      	subs	r3, #48	; 0x30
 80060fa:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 80060fc:	e7e4      	b.n	80060c8 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80060fe:	2300      	movs	r3, #0
 8006100:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 800610a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800610e:	2b2e      	cmp	r3, #46	; 0x2e
 8006110:	d11d      	bne.n	800614e <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3301      	adds	r3, #1
 8006116:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8006120:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006124:	2b2f      	cmp	r3, #47	; 0x2f
 8006126:	d912      	bls.n	800614e <SEGGER_RTT_vprintf+0x172>
 8006128:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800612c:	2b39      	cmp	r3, #57	; 0x39
 800612e:	d80e      	bhi.n	800614e <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	3301      	adds	r3, #1
 8006134:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8006136:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	461a      	mov	r2, r3
 8006142:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006146:	4413      	add	r3, r2
 8006148:	3b30      	subs	r3, #48	; 0x30
 800614a:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 800614c:	e7e4      	b.n	8006118 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8006156:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800615a:	2b6c      	cmp	r3, #108	; 0x6c
 800615c:	d003      	beq.n	8006166 <SEGGER_RTT_vprintf+0x18a>
 800615e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006162:	2b68      	cmp	r3, #104	; 0x68
 8006164:	d107      	bne.n	8006176 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	3301      	adds	r3, #1
 800616a:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8006174:	e7ef      	b.n	8006156 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006176:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800617a:	2b25      	cmp	r3, #37	; 0x25
 800617c:	f000 80d1 	beq.w	8006322 <SEGGER_RTT_vprintf+0x346>
 8006180:	2b25      	cmp	r3, #37	; 0x25
 8006182:	f2c0 80d5 	blt.w	8006330 <SEGGER_RTT_vprintf+0x354>
 8006186:	2b78      	cmp	r3, #120	; 0x78
 8006188:	f300 80d2 	bgt.w	8006330 <SEGGER_RTT_vprintf+0x354>
 800618c:	2b58      	cmp	r3, #88	; 0x58
 800618e:	f2c0 80cf 	blt.w	8006330 <SEGGER_RTT_vprintf+0x354>
 8006192:	3b58      	subs	r3, #88	; 0x58
 8006194:	2b20      	cmp	r3, #32
 8006196:	f200 80cb 	bhi.w	8006330 <SEGGER_RTT_vprintf+0x354>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <SEGGER_RTT_vprintf+0x1c4>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	08006297 	.word	0x08006297
 80061a4:	08006331 	.word	0x08006331
 80061a8:	08006331 	.word	0x08006331
 80061ac:	08006331 	.word	0x08006331
 80061b0:	08006331 	.word	0x08006331
 80061b4:	08006331 	.word	0x08006331
 80061b8:	08006331 	.word	0x08006331
 80061bc:	08006331 	.word	0x08006331
 80061c0:	08006331 	.word	0x08006331
 80061c4:	08006331 	.word	0x08006331
 80061c8:	08006331 	.word	0x08006331
 80061cc:	08006225 	.word	0x08006225
 80061d0:	0800624b 	.word	0x0800624b
 80061d4:	08006331 	.word	0x08006331
 80061d8:	08006331 	.word	0x08006331
 80061dc:	08006331 	.word	0x08006331
 80061e0:	08006331 	.word	0x08006331
 80061e4:	08006331 	.word	0x08006331
 80061e8:	08006331 	.word	0x08006331
 80061ec:	08006331 	.word	0x08006331
 80061f0:	08006331 	.word	0x08006331
 80061f4:	08006331 	.word	0x08006331
 80061f8:	08006331 	.word	0x08006331
 80061fc:	08006331 	.word	0x08006331
 8006200:	080062fd 	.word	0x080062fd
 8006204:	08006331 	.word	0x08006331
 8006208:	08006331 	.word	0x08006331
 800620c:	080062bd 	.word	0x080062bd
 8006210:	08006331 	.word	0x08006331
 8006214:	08006271 	.word	0x08006271
 8006218:	08006331 	.word	0x08006331
 800621c:	08006331 	.word	0x08006331
 8006220:	08006297 	.word	0x08006297
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	1d19      	adds	r1, r3, #4
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6011      	str	r1, [r2, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8006232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006234:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8006238:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800623c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fd38 	bl	8005cb8 <_StoreChar>
        break;
 8006248:	e073      	b.n	8006332 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	1d19      	adds	r1, r3, #4
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6011      	str	r1, [r2, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006258:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800625c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006266:	220a      	movs	r2, #10
 8006268:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800626a:	f7ff fe0f 	bl	8005e8c <_PrintInt>
        break;
 800626e:	e060      	b.n	8006332 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	1d19      	adds	r1, r3, #4
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800627e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006280:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800628e:	220a      	movs	r2, #10
 8006290:	f7ff fd50 	bl	8005d34 <_PrintUnsigned>
        break;
 8006294:	e04d      	b.n	8006332 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	1d19      	adds	r1, r3, #4
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6011      	str	r1, [r2, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80062a4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80062a6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80062aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b4:	2210      	movs	r2, #16
 80062b6:	f7ff fd3d 	bl	8005d34 <_PrintUnsigned>
        break;
 80062ba:	e03a      	b.n	8006332 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	1d19      	adds	r1, r3, #4
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 80062ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 80062d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062d4:	3301      	adds	r3, #1
 80062d6:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 80062d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 80062e0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80062e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80062e8:	4611      	mov	r1, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fce4 	bl	8005cb8 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 80062f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	dae9      	bge.n	80062ca <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 80062f6:	e01c      	b.n	8006332 <SEGGER_RTT_vprintf+0x356>
              break;
 80062f8:	bf00      	nop
        break;
 80062fa:	e01a      	b.n	8006332 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	1d19      	adds	r1, r3, #4
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6011      	str	r1, [r2, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800630a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800630c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006310:	2300      	movs	r3, #0
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	2308      	movs	r3, #8
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	2308      	movs	r3, #8
 800631a:	2210      	movs	r2, #16
 800631c:	f7ff fd0a 	bl	8005d34 <_PrintUnsigned>
        break;
 8006320:	e007      	b.n	8006332 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006322:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006326:	2125      	movs	r1, #37	; 0x25
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff fcc5 	bl	8005cb8 <_StoreChar>
        break;
 800632e:	e000      	b.n	8006332 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8006330:	bf00      	nop
      }
      sFormat++;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	3301      	adds	r3, #1
 8006336:	60bb      	str	r3, [r7, #8]
 8006338:	e007      	b.n	800634a <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 800633a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800633e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006342:	4611      	mov	r1, r2
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fcb7 	bl	8005cb8 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800634a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800634c:	2b00      	cmp	r3, #0
 800634e:	f6bf ae56 	bge.w	8005ffe <SEGGER_RTT_vprintf+0x22>
 8006352:	e000      	b.n	8006356 <SEGGER_RTT_vprintf+0x37a>
      break;
 8006354:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8006356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006358:	2b00      	cmp	r3, #0
 800635a:	dd0d      	ble.n	8006378 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800635c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635e:	2b00      	cmp	r3, #0
 8006360:	d006      	beq.n	8006370 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8006362:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006364:	f107 0310 	add.w	r3, r7, #16
 8006368:	4619      	mov	r1, r3
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff fc7e 	bl	8005c6c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8006370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006374:	4413      	add	r3, r2
 8006376:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8006378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800637a:	4618      	mov	r0, r3
 800637c:	3780      	adds	r7, #128	; 0x80
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop

08006384 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8006384:	b40e      	push	{r1, r2, r3}
 8006386:	b580      	push	{r7, lr}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 800638e:	f107 0320 	add.w	r3, r7, #32
 8006392:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8006394:	f107 0308 	add.w	r3, r7, #8
 8006398:	461a      	mov	r2, r3
 800639a:	69f9      	ldr	r1, [r7, #28]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fe1d 	bl	8005fdc <SEGGER_RTT_vprintf>
 80063a2:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80063a4:	68fb      	ldr	r3, [r7, #12]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063b0:	b003      	add	sp, #12
 80063b2:	4770      	bx	lr

080063b4 <memset>:
 80063b4:	4402      	add	r2, r0
 80063b6:	4603      	mov	r3, r0
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d100      	bne.n	80063be <memset+0xa>
 80063bc:	4770      	bx	lr
 80063be:	f803 1b01 	strb.w	r1, [r3], #1
 80063c2:	e7f9      	b.n	80063b8 <memset+0x4>

080063c4 <__libc_init_array>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	4d0d      	ldr	r5, [pc, #52]	; (80063fc <__libc_init_array+0x38>)
 80063c8:	4c0d      	ldr	r4, [pc, #52]	; (8006400 <__libc_init_array+0x3c>)
 80063ca:	1b64      	subs	r4, r4, r5
 80063cc:	10a4      	asrs	r4, r4, #2
 80063ce:	2600      	movs	r6, #0
 80063d0:	42a6      	cmp	r6, r4
 80063d2:	d109      	bne.n	80063e8 <__libc_init_array+0x24>
 80063d4:	4d0b      	ldr	r5, [pc, #44]	; (8006404 <__libc_init_array+0x40>)
 80063d6:	4c0c      	ldr	r4, [pc, #48]	; (8006408 <__libc_init_array+0x44>)
 80063d8:	f000 f826 	bl	8006428 <_init>
 80063dc:	1b64      	subs	r4, r4, r5
 80063de:	10a4      	asrs	r4, r4, #2
 80063e0:	2600      	movs	r6, #0
 80063e2:	42a6      	cmp	r6, r4
 80063e4:	d105      	bne.n	80063f2 <__libc_init_array+0x2e>
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ec:	4798      	blx	r3
 80063ee:	3601      	adds	r6, #1
 80063f0:	e7ee      	b.n	80063d0 <__libc_init_array+0xc>
 80063f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f6:	4798      	blx	r3
 80063f8:	3601      	adds	r6, #1
 80063fa:	e7f2      	b.n	80063e2 <__libc_init_array+0x1e>
 80063fc:	08006b2c 	.word	0x08006b2c
 8006400:	08006b2c 	.word	0x08006b2c
 8006404:	08006b2c 	.word	0x08006b2c
 8006408:	08006b30 	.word	0x08006b30

0800640c <memcpy>:
 800640c:	440a      	add	r2, r1
 800640e:	4291      	cmp	r1, r2
 8006410:	f100 33ff 	add.w	r3, r0, #4294967295
 8006414:	d100      	bne.n	8006418 <memcpy+0xc>
 8006416:	4770      	bx	lr
 8006418:	b510      	push	{r4, lr}
 800641a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800641e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006422:	4291      	cmp	r1, r2
 8006424:	d1f9      	bne.n	800641a <memcpy+0xe>
 8006426:	bd10      	pop	{r4, pc}

08006428 <_init>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	bf00      	nop
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr

08006434 <_fini>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	bf00      	nop
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr
