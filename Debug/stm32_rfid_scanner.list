
stm32_rfid_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007958  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08007b04  08007b04  00017b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008334  08008334  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800833c  0800833c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000e1c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e30  20000e30  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d5d7  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033a8  00000000  00000000  0003d65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001948  00000000  00000000  00040a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000140d  00000000  00000000  00042350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000264b3  00000000  00000000  0004375d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cde1  00000000  00000000  00069c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8ea4  00000000  00000000  000869f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006e98  00000000  00000000  0016f898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00176730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007aec 	.word	0x08007aec

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08007aec 	.word	0x08007aec

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <readNameFromRFIDCard>:
	  PICC_HaltA(&rfidReader); // Halt PICC
	  PCD_StopCrypto1(&rfidReader);  // Stop encryption on PCD
}


void readNameFromRFIDCard(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b090      	sub	sp, #64	; 0x40
 80004ec:	af02      	add	r7, sp, #8

  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  MIFARE_Key key;
  for (uint8_t i = 0; i < 6; i++) key.keyByte[i] = 0xFF;
 80004ee:	2300      	movs	r3, #0
 80004f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80004f4:	e00b      	b.n	800050e <readNameFromRFIDCard+0x26>
 80004f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80004fa:	3338      	adds	r3, #56	; 0x38
 80004fc:	443b      	add	r3, r7
 80004fe:	22ff      	movs	r2, #255	; 0xff
 8000500:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000504:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000508:	3301      	adds	r3, #1
 800050a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800050e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000512:	2b05      	cmp	r3, #5
 8000514:	d9ef      	bls.n	80004f6 <readNameFromRFIDCard+0xe>
//  // Select one of the cards
//  if ( ! PICC_ReadCardSerial(&rfidReader)) {
//    return;
//  }

  SEGGER_RTT_printf(0, "**Card Detected:**");
 8000516:	495b      	ldr	r1, [pc, #364]	; (8000684 <readNameFromRFIDCard+0x19c>)
 8000518:	2000      	movs	r0, #0
 800051a:	f007 fa95 	bl	8007a48 <SEGGER_RTT_printf>

  //PICC_DumpToSerial(&rfidReader, &(rfidReader.uid));      //uncomment this to see all blocks in hex

  //-------------------------------------------

  SEGGER_RTT_printf(0, "Name: ");
 800051e:	495a      	ldr	r1, [pc, #360]	; (8000688 <readNameFromRFIDCard+0x1a0>)
 8000520:	2000      	movs	r0, #0
 8000522:	f007 fa91 	bl	8007a48 <SEGGER_RTT_printf>

  uint8_t buffer1[18];

  block = 4;
 8000526:	2304      	movs	r3, #4
 8000528:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  len = 18;
 800052c:	2312      	movs	r3, #18
 800052e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  //------------------------------------------- GET FIRST NAME
  status = PCD_Authenticate(&rfidReader, PICC_CMD_MF_AUTH_KEY_A, 4, &key, &(rfidReader.uid)); //line 834 of MFRC522.cpp file
 8000532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000536:	4a55      	ldr	r2, [pc, #340]	; (800068c <readNameFromRFIDCard+0x1a4>)
 8000538:	9200      	str	r2, [sp, #0]
 800053a:	2204      	movs	r2, #4
 800053c:	2160      	movs	r1, #96	; 0x60
 800053e:	4854      	ldr	r0, [pc, #336]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 8000540:	f001 ff24 	bl	800238c <PCD_Authenticate>
 8000544:	4603      	mov	r3, r0
 8000546:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  if (status != STATUS_OK) {
 800054a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800054e:	2b00      	cmp	r3, #0
 8000550:	d010      	beq.n	8000574 <readNameFromRFIDCard+0x8c>
    SEGGER_RTT_printf(0, "Authentication failed: ");
 8000552:	4950      	ldr	r1, [pc, #320]	; (8000694 <readNameFromRFIDCard+0x1ac>)
 8000554:	2000      	movs	r0, #0
 8000556:	f007 fa77 	bl	8007a48 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 800055a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800055e:	4619      	mov	r1, r3
 8000560:	484b      	ldr	r0, [pc, #300]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 8000562:	f001 ffa9 	bl	80024b8 <GetStatusCodeName>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	494b      	ldr	r1, [pc, #300]	; (8000698 <readNameFromRFIDCard+0x1b0>)
 800056c:	2000      	movs	r0, #0
 800056e:	f007 fa6b 	bl	8007a48 <SEGGER_RTT_printf>
    return;
 8000572:	e083      	b.n	800067c <readNameFromRFIDCard+0x194>
  }

  status = MIFARE_Read(&rfidReader, block, buffer1, &len);
 8000574:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000578:	f107 0218 	add.w	r2, r7, #24
 800057c:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000580:	4843      	ldr	r0, [pc, #268]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 8000582:	f001 ff60 	bl	8002446 <MIFARE_Read>
 8000586:	4603      	mov	r3, r0
 8000588:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  if (status != STATUS_OK) {
 800058c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000590:	2b00      	cmp	r3, #0
 8000592:	d010      	beq.n	80005b6 <readNameFromRFIDCard+0xce>
    SEGGER_RTT_printf(0, "Reading failed: ");
 8000594:	4941      	ldr	r1, [pc, #260]	; (800069c <readNameFromRFIDCard+0x1b4>)
 8000596:	2000      	movs	r0, #0
 8000598:	f007 fa56 	bl	8007a48 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 800059c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005a0:	4619      	mov	r1, r3
 80005a2:	483b      	ldr	r0, [pc, #236]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 80005a4:	f001 ff88 	bl	80024b8 <GetStatusCodeName>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	493a      	ldr	r1, [pc, #232]	; (8000698 <readNameFromRFIDCard+0x1b0>)
 80005ae:	2000      	movs	r0, #0
 80005b0:	f007 fa4a 	bl	8007a48 <SEGGER_RTT_printf>
    return;
 80005b4:	e062      	b.n	800067c <readNameFromRFIDCard+0x194>
  }

  //PRINT FIRST NAME

    buffer1[16] = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    SEGGER_RTT_printf(0, "%s", buffer1);
 80005bc:	f107 0318 	add.w	r3, r7, #24
 80005c0:	461a      	mov	r2, r3
 80005c2:	4935      	ldr	r1, [pc, #212]	; (8000698 <readNameFromRFIDCard+0x1b0>)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f007 fa3f 	bl	8007a48 <SEGGER_RTT_printf>


  SEGGER_RTT_printf(" ");
 80005ca:	4835      	ldr	r0, [pc, #212]	; (80006a0 <readNameFromRFIDCard+0x1b8>)
 80005cc:	f007 fa3c 	bl	8007a48 <SEGGER_RTT_printf>

  //---------------------------------------- GET LAST NAME

  uint8_t buffer2[18];
  block = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  status = PCD_Authenticate(&rfidReader, PICC_CMD_MF_AUTH_KEY_A, 1, &key, &(rfidReader.uid)); //line 834
 80005d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005da:	4a2c      	ldr	r2, [pc, #176]	; (800068c <readNameFromRFIDCard+0x1a4>)
 80005dc:	9200      	str	r2, [sp, #0]
 80005de:	2201      	movs	r2, #1
 80005e0:	2160      	movs	r1, #96	; 0x60
 80005e2:	482b      	ldr	r0, [pc, #172]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 80005e4:	f001 fed2 	bl	800238c <PCD_Authenticate>
 80005e8:	4603      	mov	r3, r0
 80005ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  if (status != STATUS_OK) {
 80005ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d010      	beq.n	8000618 <readNameFromRFIDCard+0x130>
    SEGGER_RTT_printf(0, "Authentication failed: ");
 80005f6:	4927      	ldr	r1, [pc, #156]	; (8000694 <readNameFromRFIDCard+0x1ac>)
 80005f8:	2000      	movs	r0, #0
 80005fa:	f007 fa25 	bl	8007a48 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 80005fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000602:	4619      	mov	r1, r3
 8000604:	4822      	ldr	r0, [pc, #136]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 8000606:	f001 ff57 	bl	80024b8 <GetStatusCodeName>
 800060a:	4603      	mov	r3, r0
 800060c:	461a      	mov	r2, r3
 800060e:	4922      	ldr	r1, [pc, #136]	; (8000698 <readNameFromRFIDCard+0x1b0>)
 8000610:	2000      	movs	r0, #0
 8000612:	f007 fa19 	bl	8007a48 <SEGGER_RTT_printf>
    return;
 8000616:	e031      	b.n	800067c <readNameFromRFIDCard+0x194>
  }

  status = MIFARE_Read(&rfidReader, block, buffer2, &len);
 8000618:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800061c:	1d3a      	adds	r2, r7, #4
 800061e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000622:	481b      	ldr	r0, [pc, #108]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 8000624:	f001 ff0f 	bl	8002446 <MIFARE_Read>
 8000628:	4603      	mov	r3, r0
 800062a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  if (status != STATUS_OK) {
 800062e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000632:	2b00      	cmp	r3, #0
 8000634:	d010      	beq.n	8000658 <readNameFromRFIDCard+0x170>
    SEGGER_RTT_printf(0, "Reading failed: ");
 8000636:	4919      	ldr	r1, [pc, #100]	; (800069c <readNameFromRFIDCard+0x1b4>)
 8000638:	2000      	movs	r0, #0
 800063a:	f007 fa05 	bl	8007a48 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 800063e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000642:	4619      	mov	r1, r3
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 8000646:	f001 ff37 	bl	80024b8 <GetStatusCodeName>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4912      	ldr	r1, [pc, #72]	; (8000698 <readNameFromRFIDCard+0x1b0>)
 8000650:	2000      	movs	r0, #0
 8000652:	f007 f9f9 	bl	8007a48 <SEGGER_RTT_printf>
    return;
 8000656:	e011      	b.n	800067c <readNameFromRFIDCard+0x194>
  }

  //PRINT LAST NAME
  buffer2[16] = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	753b      	strb	r3, [r7, #20]
  SEGGER_RTT_printf(0, "%s", buffer2 );
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	461a      	mov	r2, r3
 8000660:	490d      	ldr	r1, [pc, #52]	; (8000698 <readNameFromRFIDCard+0x1b0>)
 8000662:	2000      	movs	r0, #0
 8000664:	f007 f9f0 	bl	8007a48 <SEGGER_RTT_printf>



  //----------------------------------------

  SEGGER_RTT_printf(0, "\n**End Reading**\n");
 8000668:	490e      	ldr	r1, [pc, #56]	; (80006a4 <readNameFromRFIDCard+0x1bc>)
 800066a:	2000      	movs	r0, #0
 800066c:	f007 f9ec 	bl	8007a48 <SEGGER_RTT_printf>

  PICC_HaltA(&rfidReader);
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 8000672:	f001 fe53 	bl	800231c <PICC_HaltA>
  PCD_StopCrypto1(&rfidReader);
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <readNameFromRFIDCard+0x1a8>)
 8000678:	f001 fed8 	bl	800242c <PCD_StopCrypto1>
}
 800067c:	3738      	adds	r7, #56	; 0x38
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	08007ba4 	.word	0x08007ba4
 8000688:	08007bb8 	.word	0x08007bb8
 800068c:	20000960 	.word	0x20000960
 8000690:	2000094c 	.word	0x2000094c
 8000694:	08007bc0 	.word	0x08007bc0
 8000698:	08007b30 	.word	0x08007b30
 800069c:	08007bd8 	.word	0x08007bd8
 80006a0:	08007b14 	.word	0x08007b14
 80006a4:	08007bec 	.word	0x08007bec

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f002 f81b 	bl	80026e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f849 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 fac5 	bl	8000c44 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ba:	f000 faa3 	bl	8000c04 <MX_DMA_Init>
  MX_ETH_Init();
 80006be:	f000 f8ad 	bl	800081c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006c2:	f000 fa47 	bl	8000b54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c6:	f000 fa6f 	bl	8000ba8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80006ca:	f000 fa0d 	bl	8000ae8 <MX_TIM6_Init>
  MX_TIM1_Init();
 80006ce:	f000 f969 	bl	80009a4 <MX_TIM1_Init>
  MX_SPI1_Init();
 80006d2:	f000 f931 	bl	8000938 <MX_SPI1_Init>
  MX_I2C1_Init();
 80006d6:	f000 f8ef 	bl	80008b8 <MX_I2C1_Init>
//
//
//  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)&pwmData, 10);


  rfidReader.hspi = &hspi1;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <main+0x88>)
 80006dc:	4a15      	ldr	r2, [pc, #84]	; (8000734 <main+0x8c>)
 80006de:	60da      	str	r2, [r3, #12]
  MFRC522_Init(&rfidReader, GPIO_PIN_7, GPIOC, GPIO_PIN_3, GPIOB);
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <main+0x90>)
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2308      	movs	r3, #8
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <main+0x94>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	4811      	ldr	r0, [pc, #68]	; (8000730 <main+0x88>)
 80006ec:	f000 ff57 	bl	800159e <MFRC522_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(PICC_IsNewCardPresent(&rfidReader) == false)
 80006f0:	480f      	ldr	r0, [pc, #60]	; (8000730 <main+0x88>)
 80006f2:	f001 ffa9 	bl	8002648 <PICC_IsNewCardPresent>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f083 0301 	eor.w	r3, r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d008      	beq.n	8000714 <main+0x6c>
	  {
		  SEGGER_RTT_printf(0, "Card not found!!!!!\r\n");
 8000702:	490f      	ldr	r1, [pc, #60]	; (8000740 <main+0x98>)
 8000704:	2000      	movs	r0, #0
 8000706:	f007 f99f 	bl	8007a48 <SEGGER_RTT_printf>
		  HAL_Delay(1000);
 800070a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070e:	f002 f85d 	bl	80027cc <HAL_Delay>
		  continue;
 8000712:	e00c      	b.n	800072e <main+0x86>

	  }
	  SEGGER_RTT_printf(0, "Card found!!!!!\r\n");
 8000714:	490b      	ldr	r1, [pc, #44]	; (8000744 <main+0x9c>)
 8000716:	2000      	movs	r0, #0
 8000718:	f007 f996 	bl	8007a48 <SEGGER_RTT_printf>

	  if(PICC_ReadCardSerial(&rfidReader) == true)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <main+0x88>)
 800071e:	f001 ffc3 	bl	80026a8 <PICC_ReadCardSerial>
		  //PICC_DumpToSerial(&rfidReader, &rfidReader.uid);
	  }

	  //writeNameToRFIDCard("Thanh", "Pham");

	  HAL_Delay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f002 f851 	bl	80027cc <HAL_Delay>

	  readNameFromRFIDCard();
 800072a:	f7ff fedd 	bl	80004e8 <readNameFromRFIDCard>
  {
 800072e:	e7df      	b.n	80006f0 <main+0x48>
 8000730:	2000094c 	.word	0x2000094c
 8000734:	200002ac 	.word	0x200002ac
 8000738:	40020400 	.word	0x40020400
 800073c:	40020800 	.word	0x40020800
 8000740:	08007c00 	.word	0x08007c00
 8000744:	08007c18 	.word	0x08007c18

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2230      	movs	r2, #48	; 0x30
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f007 f98e 	bl	8007a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a27      	ldr	r2, [pc, #156]	; (8000814 <SystemClock_Config+0xcc>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <SystemClock_Config+0xd0>)
 8000792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007bc:	23a8      	movs	r3, #168	; 0xa8
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fd0b 	bl	80041e8 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d8:	f000 fb5c 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2105      	movs	r1, #5
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 ff6c 	bl	80046d8 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000806:	f000 fb45 	bl	8000e94 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ETH_Init+0x84>)
 8000822:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <MX_ETH_Init+0x88>)
 8000824:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ETH_Init+0x8c>)
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000834:	22e1      	movs	r2, #225	; 0xe1
 8000836:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_ETH_Init+0x8c>)
 800083a:	2200      	movs	r2, #0
 800083c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000840:	2200      	movs	r2, #0
 8000842:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000846:	2200      	movs	r2, #0
 8000848:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_ETH_Init+0x84>)
 800084c:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <MX_ETH_Init+0x8c>)
 800084e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_ETH_Init+0x84>)
 8000852:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000856:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_ETH_Init+0x84>)
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <MX_ETH_Init+0x90>)
 800085c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_ETH_Init+0x84>)
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MX_ETH_Init+0x94>)
 8000862:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_ETH_Init+0x84>)
 8000866:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800086a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_ETH_Init+0x84>)
 800086e:	f002 fbcd 	bl	800300c <HAL_ETH_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000878:	f000 fb0c 	bl	8000e94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800087c:	2238      	movs	r2, #56	; 0x38
 800087e:	2100      	movs	r1, #0
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_ETH_Init+0x98>)
 8000882:	f007 f8f9 	bl	8007a78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_ETH_Init+0x98>)
 8000888:	2221      	movs	r2, #33	; 0x21
 800088a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_ETH_Init+0x98>)
 800088e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000892:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_ETH_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200001a8 	.word	0x200001a8
 80008a4:	40028000 	.word	0x40028000
 80008a8:	2000096c 	.word	0x2000096c
 80008ac:	20000108 	.word	0x20000108
 80008b0:	20000068 	.word	0x20000068
 80008b4:	20000030 	.word	0x20000030

080008b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_I2C1_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_I2C1_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_I2C1_Init+0x74>)
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <MX_I2C1_Init+0x7c>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_I2C1_Init+0x74>)
 80008d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2C1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_I2C1_Init+0x74>)
 80008f6:	f003 f99b 	bl	8003c30 <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000900:	f000 fac8 	bl	8000e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_I2C1_Init+0x74>)
 8000908:	f003 fad6 	bl	8003eb8 <HAL_I2CEx_ConfigAnalogFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000912:	f000 fabf 	bl	8000e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_I2C1_Init+0x74>)
 800091a:	f003 fb09 	bl	8003f30 <HAL_I2CEx_ConfigDigitalFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 fab6 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000258 	.word	0x20000258
 8000930:	40005400 	.word	0x40005400
 8000934:	00061a80 	.word	0x00061a80

08000938 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_SPI1_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI1_Init+0x64>)
 8000944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000948:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI1_Init+0x64>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0x64>)
 800096c:	2218      	movs	r2, #24
 800096e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0x64>)
 8000984:	220a      	movs	r2, #10
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SPI1_Init+0x64>)
 800098a:	f004 f8c5 	bl	8004b18 <HAL_SPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 fa7e 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200002ac 	.word	0x200002ac
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b096      	sub	sp, #88	; 0x58
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2220      	movs	r2, #32
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f007 f84b 	bl	8007a78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e2:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 80009e4:	4a3f      	ldr	r2, [pc, #252]	; (8000ae4 <MX_TIM1_Init+0x140>)
 80009e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 80009e8:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 80009ea:	f244 129f 	movw	r2, #16799	; 0x419f
 80009ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009f6:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 80009f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80009fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a04:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a10:	4833      	ldr	r0, [pc, #204]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a12:	f004 fe29 	bl	8005668 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 fa3a 	bl	8000e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	482c      	ldr	r0, [pc, #176]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a2e:	f005 f88d 	bl	8005b4c <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a38:	f000 fa2c 	bl	8000e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a3c:	4828      	ldr	r0, [pc, #160]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a3e:	f004 fe62 	bl	8005706 <HAL_TIM_PWM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a48:	f000 fa24 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a5c:	f005 fc50 	bl	8006300 <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a66:	f000 fa15 	bl	8000e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6a:	2360      	movs	r3, #96	; 0x60
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a90:	f004 ff9a 	bl	80059c8 <HAL_TIM_PWM_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000a9a:	f000 f9fb 	bl	8000e94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000ac2:	f005 fc99 	bl	80063f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000acc:	f000 f9e2 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 8000ad2:	f000 fbfd 	bl	80012d0 <HAL_TIM_MspPostInit>

}
 8000ad6:	bf00      	nop
 8000ad8:	3758      	adds	r7, #88	; 0x58
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000304 	.word	0x20000304
 8000ae4:	40010000 	.word	0x40010000

08000ae8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_TIM6_Init+0x64>)
 8000af8:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <MX_TIM6_Init+0x68>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_TIM6_Init+0x64>)
 8000afe:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000b02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_TIM6_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_TIM6_Init+0x64>)
 8000b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_TIM6_Init+0x64>)
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MX_TIM6_Init+0x64>)
 8000b1a:	f004 fda5 	bl	8005668 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b24:	f000 f9b6 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_TIM6_Init+0x64>)
 8000b36:	f005 fbe3 	bl	8006300 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 f9a8 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000034c 	.word	0x2000034c
 8000b50:	40001000 	.word	0x40001000

08000b54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_USART3_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b8c:	f005 fc9a 	bl	80064c4 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f97d 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200003f4 	.word	0x200003f4
 8000ba4:	40004800 	.word	0x40004800

08000ba8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bec:	f003 f9df 	bl	8003fae <HAL_PCD_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bf6:	f000 f94d 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000438 	.word	0x20000438

08000c04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_DMA_Init+0x3c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <MX_DMA_Init+0x3c>)
 8000c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_DMA_Init+0x3c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2039      	movs	r0, #57	; 0x39
 8000c2c:	f001 fecd 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c30:	2039      	movs	r0, #57	; 0x39
 8000c32:	f001 fee6 	bl	8002a02 <HAL_NVIC_EnableIRQ>

}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	4b60      	ldr	r3, [pc, #384]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a5f      	ldr	r2, [pc, #380]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b5d      	ldr	r3, [pc, #372]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	4b59      	ldr	r3, [pc, #356]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a58      	ldr	r2, [pc, #352]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b52      	ldr	r3, [pc, #328]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a51      	ldr	r2, [pc, #324]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a4a      	ldr	r2, [pc, #296]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a43      	ldr	r2, [pc, #268]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a3c      	ldr	r2, [pc, #240]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a35      	ldr	r2, [pc, #212]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <MX_GPIO_Init+0x19c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|MFR522_RS_PIN_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f244 0189 	movw	r1, #16521	; 0x4089
 8000d24:	482f      	ldr	r0, [pc, #188]	; (8000de4 <MX_GPIO_Init+0x1a0>)
 8000d26:	f002 ff51 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	482e      	ldr	r0, [pc, #184]	; (8000de8 <MX_GPIO_Init+0x1a4>)
 8000d30:	f002 ff4c 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFR522_CS_PIN_GPIO_Port, MFR522_CS_PIN_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	482c      	ldr	r0, [pc, #176]	; (8000dec <MX_GPIO_Init+0x1a8>)
 8000d3a:	f002 ff47 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	4825      	ldr	r0, [pc, #148]	; (8000dec <MX_GPIO_Init+0x1a8>)
 8000d56:	f002 fd75 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin MFR522_RS_PIN_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|MFR522_RS_PIN_Pin|LD2_Pin;
 8000d5a:	f244 0389 	movw	r3, #16521	; 0x4089
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	481c      	ldr	r0, [pc, #112]	; (8000de4 <MX_GPIO_Init+0x1a0>)
 8000d74:	f002 fd66 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d78:	2340      	movs	r3, #64	; 0x40
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4816      	ldr	r0, [pc, #88]	; (8000de8 <MX_GPIO_Init+0x1a4>)
 8000d90:	f002 fd58 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4810      	ldr	r0, [pc, #64]	; (8000de8 <MX_GPIO_Init+0x1a4>)
 8000da8:	f002 fd4c 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFR522_CS_PIN_Pin */
  GPIO_InitStruct.Pin = MFR522_CS_PIN_Pin;
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MFR522_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480a      	ldr	r0, [pc, #40]	; (8000dec <MX_GPIO_Init+0x1a8>)
 8000dc4:	f002 fd3e 	bl	8003844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2028      	movs	r0, #40	; 0x28
 8000dce:	f001 fdfc 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dd2:	2028      	movs	r0, #40	; 0x28
 8000dd4:	f001 fe15 	bl	8002a02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd8:	bf00      	nop
 8000dda:	3730      	adds	r7, #48	; 0x30
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400
 8000de8:	40021800 	.word	0x40021800
 8000dec:	40020800 	.word	0x40020800

08000df0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if(_pressed == 0 && HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET)
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d115      	bne.n	8000e2e <HAL_GPIO_EXTI_Callback+0x3e>
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	481a      	ldr	r0, [pc, #104]	; (8000e70 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e08:	f002 fec8 	bl	8003b9c <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10d      	bne.n	8000e2e <HAL_GPIO_EXTI_Callback+0x3e>
	{
		_pressed = 1;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	601a      	str	r2, [r3, #0]
		_startTick = HAL_GetTick();
 8000e18:	f001 fccc 	bl	80027b4 <HAL_GetTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e20:	6013      	str	r3, [r2, #0]
		_tick = HAL_GetTick();
 8000e22:	f001 fcc7 	bl	80027b4 <HAL_GetTick>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_EXTI_Callback+0x48>
	}else{
		_tick = HAL_GetTick();
 8000e2e:	f001 fcc1 	bl	80027b4 <HAL_GetTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e36:	6013      	str	r3, [r2, #0]
	}

	if(_tick - _startTick > 10 && HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET)
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b0a      	cmp	r3, #10
 8000e44:	d90d      	bls.n	8000e62 <HAL_GPIO_EXTI_Callback+0x72>
 8000e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e4c:	f002 fea6 	bl	8003b9c <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d105      	bne.n	8000e62 <HAL_GPIO_EXTI_Callback+0x72>
	{
		isButtonPressed = 1;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
		_pressed = 0;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
	}
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	40020800 	.word	0x40020800
 8000e74:	20000948 	.word	0x20000948
 8000e78:	20000944 	.word	0x20000944
 8000e7c:	20000000 	.word	0x20000000

08000e80 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	static int cnt = 0;

	//ledToggle(&ledYellow);

}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08e      	sub	sp, #56	; 0x38
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a59      	ldr	r2, [pc, #356]	; (8001074 <HAL_ETH_MspInit+0x184>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	f040 80ac 	bne.w	800106c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
 8000f18:	4b57      	ldr	r3, [pc, #348]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a56      	ldr	r2, [pc, #344]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b54      	ldr	r3, [pc, #336]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2c:	623b      	str	r3, [r7, #32]
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	4b50      	ldr	r3, [pc, #320]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a4f      	ldr	r2, [pc, #316]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f40:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	4b49      	ldr	r3, [pc, #292]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b46      	ldr	r3, [pc, #280]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	4b42      	ldr	r3, [pc, #264]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a41      	ldr	r2, [pc, #260]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a3a      	ldr	r2, [pc, #232]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	4a33      	ldr	r2, [pc, #204]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a2c      	ldr	r2, [pc, #176]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fd8:	2332      	movs	r3, #50	; 0x32
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe8:	230b      	movs	r3, #11
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4822      	ldr	r0, [pc, #136]	; (800107c <HAL_ETH_MspInit+0x18c>)
 8000ff4:	f002 fc26 	bl	8003844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ff8:	2386      	movs	r3, #134	; 0x86
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001008:	230b      	movs	r3, #11
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	481b      	ldr	r0, [pc, #108]	; (8001080 <HAL_ETH_MspInit+0x190>)
 8001014:	f002 fc16 	bl	8003844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102a:	230b      	movs	r3, #11
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <HAL_ETH_MspInit+0x194>)
 8001036:	f002 fc05 	bl	8003844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800103a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104c:	230b      	movs	r3, #11
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	480c      	ldr	r0, [pc, #48]	; (8001088 <HAL_ETH_MspInit+0x198>)
 8001058:	f002 fbf4 	bl	8003844 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	203d      	movs	r0, #61	; 0x3d
 8001062:	f001 fcb2 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001066:	203d      	movs	r0, #61	; 0x3d
 8001068:	f001 fccb 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3738      	adds	r7, #56	; 0x38
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40028000 	.word	0x40028000
 8001078:	40023800 	.word	0x40023800
 800107c:	40020800 	.word	0x40020800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020400 	.word	0x40020400
 8001088:	40021800 	.word	0x40021800

0800108c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_I2C_MspInit+0x84>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d12c      	bne.n	8001108 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80010ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d0:	2312      	movs	r3, #18
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010dc:	2304      	movs	r3, #4
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <HAL_I2C_MspInit+0x8c>)
 80010e8:	f002 fbac 	bl	8003844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40005400 	.word	0x40005400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_SPI_MspInit+0xc0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d149      	bne.n	80011d2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <HAL_SPI_MspInit+0xc4>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <HAL_SPI_MspInit+0xc4>)
 8001148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_SPI_MspInit+0xc4>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_SPI_MspInit+0xc4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_SPI_MspInit+0xc4>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_SPI_MspInit+0xc4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_SPI_MspInit+0xc4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_SPI_MspInit+0xc4>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_SPI_MspInit+0xc4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001192:	2360      	movs	r3, #96	; 0x60
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a2:	2305      	movs	r3, #5
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_SPI_MspInit+0xc8>)
 80011ae:	f002 fb49 	bl	8003844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b2:	2320      	movs	r3, #32
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011c2:	2305      	movs	r3, #5
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <HAL_SPI_MspInit+0xcc>)
 80011ce:	f002 fb39 	bl	8003844 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40013000 	.word	0x40013000
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a30      	ldr	r2, [pc, #192]	; (80012bc <HAL_TIM_Base_MspInit+0xd0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d13f      	bne.n	800127e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_TIM_Base_MspInit+0xd4>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <HAL_TIM_Base_MspInit+0xd4>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <HAL_TIM_Base_MspInit+0xd4>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 800121c:	4a2a      	ldr	r2, [pc, #168]	; (80012c8 <HAL_TIM_Base_MspInit+0xdc>)
 800121e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 8001222:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001226:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 800122a:	2240      	movs	r2, #64	; 0x40
 800122c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 8001236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 800123e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001242:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 8001246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 800124e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001252:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001260:	4818      	ldr	r0, [pc, #96]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 8001262:	f001 fbe9 	bl	8002a38 <HAL_DMA_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800126c:	f7ff fe12 	bl	8000e94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <HAL_TIM_Base_MspInit+0xd8>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800127c:	e01a      	b.n	80012b4 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM6)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_TIM_Base_MspInit+0xe0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d115      	bne.n	80012b4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_TIM_Base_MspInit+0xd4>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HAL_TIM_Base_MspInit+0xd4>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_TIM_Base_MspInit+0xd4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2036      	movs	r0, #54	; 0x36
 80012aa:	f001 fb8e 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012ae:	2036      	movs	r0, #54	; 0x36
 80012b0:	f001 fba7 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40010000 	.word	0x40010000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	20000394 	.word	0x20000394
 80012c8:	40026428 	.word	0x40026428
 80012cc:	40001000 	.word	0x40001000

080012d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_TIM_MspPostInit+0x68>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d11e      	bne.n	8001330 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_TIM_MspPostInit+0x6c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_TIM_MspPostInit+0x6c>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_TIM_MspPostInit+0x6c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800130e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001312:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001320:	2301      	movs	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_TIM_MspPostInit+0x70>)
 800132c:	f002 fa8a 	bl	8003844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010000 	.word	0x40010000
 800133c:	40023800 	.word	0x40023800
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_UART_MspInit+0x84>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12c      	bne.n	80013c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_UART_MspInit+0x88>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_UART_MspInit+0x88>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_UART_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_UART_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <HAL_UART_MspInit+0x88>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_UART_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800139e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b0:	2307      	movs	r3, #7
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <HAL_UART_MspInit+0x8c>)
 80013bc:	f002 fa42 	bl	8003844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40004800 	.word	0x40004800
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020c00 	.word	0x40020c00

080013d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f4:	d13f      	bne.n	8001476 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_PCD_MspInit+0xac>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a20      	ldr	r2, [pc, #128]	; (8001480 <HAL_PCD_MspInit+0xac>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_PCD_MspInit+0xac>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001412:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001424:	230a      	movs	r3, #10
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4815      	ldr	r0, [pc, #84]	; (8001484 <HAL_PCD_MspInit+0xb0>)
 8001430:	f002 fa08 	bl	8003844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	480e      	ldr	r0, [pc, #56]	; (8001484 <HAL_PCD_MspInit+0xb0>)
 800144a:	f002 f9fb 	bl	8003844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_PCD_MspInit+0xac>)
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_PCD_MspInit+0xac>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	6353      	str	r3, [r2, #52]	; 0x34
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_PCD_MspInit+0xac>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_PCD_MspInit+0xac>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_PCD_MspInit+0xac>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x4>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d4:	f001 f95a 	bl	800278c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80014e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014e4:	f002 fb8c 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM6_DAC_IRQHandler+0x10>)
 80014f2:	f004 f961 	bl	80057b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000034c 	.word	0x2000034c

08001500 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA2_Stream1_IRQHandler+0x10>)
 8001506:	f001 fb45 	bl	8002b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000394 	.word	0x20000394

08001514 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <ETH_IRQHandler+0x10>)
 800151a:	f001 fdf5 	bl	8003108 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001a8 	.word	0x200001a8

08001528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <SystemInit+0x20>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <SystemInit+0x20>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001584 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001552:	490e      	ldr	r1, [pc, #56]	; (800158c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001554:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001568:	4c0b      	ldr	r4, [pc, #44]	; (8001598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001576:	f7ff ffd7 	bl	8001528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157a:	f006 fa85 	bl	8007a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157e:	f7ff f893 	bl	80006a8 <main>
  bx  lr    
 8001582:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001584:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001590:	08008344 	.word	0x08008344
  ldr r2, =_sbss
 8001594:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001598:	20000e30 	.word	0x20000e30

0800159c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC_IRQHandler>

0800159e <MFRC522_Init>:
/////////////////////////////////////////////////////////////////////////////////////
// Functions for setting up the Arduino
/////////////////////////////////////////////////////////////////////////////////////

void MFRC522_Init(MFRC *dev, uint16_t chipSelectPin, GPIO_TypeDef * csPort, uint16_t resetPowerDownPin, GPIO_TypeDef * rsPDPort)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	461a      	mov	r2, r3
 80015aa:	460b      	mov	r3, r1
 80015ac:	817b      	strh	r3, [r7, #10]
 80015ae:	4613      	mov	r3, r2
 80015b0:	813b      	strh	r3, [r7, #8]
	dev->_chipSelectPin = chipSelectPin;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	897a      	ldrh	r2, [r7, #10]
 80015b6:	801a      	strh	r2, [r3, #0]
	dev->_chipSelectPort = csPort;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	605a      	str	r2, [r3, #4]
	dev->_resetPowerDownPin = resetPowerDownPin;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	893a      	ldrh	r2, [r7, #8]
 80015c2:	805a      	strh	r2, [r3, #2]
	dev->_resetPowerDownPort = rsPDPort;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]
	PCD_Init(dev);
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f9ae 	bl	800192c <PCD_Init>

	PCD_DumpVersionToSerial(dev);
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 ffc1 	bl	8002558 <PCD_DumpVersionToSerial>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <PCD_WriteRegister>:
 * Writes a uint8_t to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void PCD_WriteRegister(	MFRC *dev, PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									uint8_t value			///< The value to write.
								) {
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	70fb      	strb	r3, [r7, #3]
 80015ea:	4613      	mov	r3, r2
 80015ec:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
#ifdef USE_SPI
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);		// Select slave
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6858      	ldr	r0, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	f002 fae7 	bl	8003bcc <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dev->hspi, &reg, 1, 1000);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68d8      	ldr	r0, [r3, #12]
 8001602:	1cf9      	adds	r1, r7, #3
 8001604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001608:	2201      	movs	r2, #1
 800160a:	f003 fb0e 	bl	8004c2a <HAL_SPI_Transmit>
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(dev->hspi, &value, 1, 1000);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68d8      	ldr	r0, [r3, #12]
 8001616:	1cb9      	adds	r1, r7, #2
 8001618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161c:	2201      	movs	r2, #1
 800161e:	f003 fb04 	bl	8004c2a <HAL_SPI_Transmit>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6858      	ldr	r0, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	f002 facb 	bl	8003bcc <HAL_GPIO_WritePin>
#else

#endif
} // End PCD_WriteRegister()
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <PCD_WriteRegisters>:
 * The interface is described in the datasheet section 8.1.2.
 */
void PCD_WriteRegisters(	MFRC *dev, PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									uint8_t count,			///< The number of bytes to write to the register
									uint8_t *values		///< The values to write. Byte array.
								) {
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	72fb      	strb	r3, [r7, #11]
 800164c:	4613      	mov	r3, r2
 800164e:	72bb      	strb	r3, [r7, #10]
#ifdef USE_SPI
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6858      	ldr	r0, [r3, #4]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	f002 fab6 	bl	8003bcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspi, &reg, 1, 1000);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68d8      	ldr	r0, [r3, #12]
 8001664:	f107 010b 	add.w	r1, r7, #11
 8001668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166c:	2201      	movs	r2, #1
 800166e:	f003 fadc 	bl	8004c2a <HAL_SPI_Transmit>

	HAL_SPI_Transmit(dev->hspi, values, count, 3000);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	68d8      	ldr	r0, [r3, #12]
 8001676:	7abb      	ldrb	r3, [r7, #10]
 8001678:	b29a      	uxth	r2, r3
 800167a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f003 fad3 	bl	8004c2a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6858      	ldr	r0, [r3, #4]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	4619      	mov	r1, r3
 8001690:	f002 fa9c 	bl	8003bcc <HAL_GPIO_WritePin>
#else


#endif
} // End PCD_WriteRegister()
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <PCD_ReadRegister>:
/**
 * Reads a uint8_t from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
uint8_t PCD_ReadRegister(	MFRC *dev, PCD_Register reg	///< The register to read from. One of the PCD_Register enums.
								) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	uint8_t address = (0x80 | reg);
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6858      	ldr	r0, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	4619      	mov	r1, r3
 80016be:	f002 fa85 	bl	8003bcc <HAL_GPIO_WritePin>
				// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	HAL_SPI_Transmit(dev->hspi, &address, 1, 1000);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68d8      	ldr	r0, [r3, #12]
 80016c6:	f107 010e 	add.w	r1, r7, #14
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	2201      	movs	r2, #1
 80016d0:	f003 faab 	bl	8004c2a <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->hspi, &value, 1, 1000);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68d8      	ldr	r0, [r3, #12]
 80016d8:	f107 010f 	add.w	r1, r7, #15
 80016dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e0:	2201      	movs	r2, #1
 80016e2:	f003 fbde 	bl	8004ea2 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6858      	ldr	r0, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	2201      	movs	r2, #1
 80016f0:	4619      	mov	r1, r3
 80016f2:	f002 fa6b 	bl	8003bcc <HAL_GPIO_WritePin>
	return value;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
} // End PCD_ReadRegister()
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <PCD_ReadRegisters>:
 */
void PCD_ReadRegisters(	MFRC *dev, PCD_Register reg,	///< The register to read from. One of the PCD_Register enums.
								uint8_t count,			///< The number of bytes to read
								uint8_t *values,		///< Byte array to store the values in.
								uint8_t rxAlign		///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af02      	add	r7, sp, #8
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	72fb      	strb	r3, [r7, #11]
 800170e:	4613      	mov	r3, r2
 8001710:	72bb      	strb	r3, [r7, #10]
	if (count == 0) {
 8001712:	7abb      	ldrb	r3, [r7, #10]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d071      	beq.n	80017fc <PCD_ReadRegisters+0xfc>
		return;
	}
	//SEGGER_RTT_printf(0, "Reading "); 	SEGGER_RTT_printf(0, count); SEGGER_RTT_printf(0, " bytes from register.");
	uint8_t address = 0x80 | reg;				// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 8001718:	7afb      	ldrb	r3, [r7, #11]
 800171a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800171e:	b2db      	uxtb	r3, r3
 8001720:	757b      	strb	r3, [r7, #21]
	uint8_t index = 0;							// Index in values array.
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6858      	ldr	r0, [r3, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	f002 fa4b 	bl	8003bcc <HAL_GPIO_WritePin>
	count--;								// One read is performed outside of the loop
 8001736:	7abb      	ldrb	r3, [r7, #10]
 8001738:	3b01      	subs	r3, #1
 800173a:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(dev->hspi, &address, 1, 1000);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	68d8      	ldr	r0, [r3, #12]
 8001740:	f107 0115 	add.w	r1, r7, #21
 8001744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001748:	2201      	movs	r2, #1
 800174a:	f003 fa6e 	bl	8004c2a <HAL_SPI_Transmit>
	if (rxAlign) {		// Only update bit positions rxAlign..7 in values[0]
 800174e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d038      	beq.n	80017c8 <PCD_ReadRegisters+0xc8>
		// Create bit mask for bit positions rxAlign..7
		uint8_t mask = (0xFF << rxAlign) & 0xFF;
 8001756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800175a:	22ff      	movs	r2, #255	; 0xff
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	75bb      	strb	r3, [r7, #22]
		// Read value and tell that we want to read the same address again.
		uint8_t value;
		HAL_SPI_TransmitReceive(dev->hspi, &address,  &value, 1, 1000);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68d8      	ldr	r0, [r3, #12]
 8001766:	f107 0214 	add.w	r2, r7, #20
 800176a:	f107 0115 	add.w	r1, r7, #21
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	f003 fca5 	bl	80050c4 <HAL_SPI_TransmitReceive>

		// Apply mask to both current value of values[0] and the new data in value.
		values[0] = (values[0] & ~mask) | (value & mask);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25a      	sxtb	r2, r3
 8001780:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001784:	43db      	mvns	r3, r3
 8001786:	b25b      	sxtb	r3, r3
 8001788:	4013      	ands	r3, r2
 800178a:	b25a      	sxtb	r2, r3
 800178c:	7d39      	ldrb	r1, [r7, #20]
 800178e:	7dbb      	ldrb	r3, [r7, #22]
 8001790:	400b      	ands	r3, r1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	b25b      	sxtb	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b25b      	sxtb	r3, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	701a      	strb	r2, [r3, #0]
		index++;
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	3301      	adds	r3, #1
 80017a4:	75fb      	strb	r3, [r7, #23]
	}
	while (index < count) {
 80017a6:	e00f      	b.n	80017c8 <PCD_ReadRegisters+0xc8>
		HAL_SPI_TransmitReceive(dev->hspi, &address,  &values[index], 1, 1000);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	68d8      	ldr	r0, [r3, #12]
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	441a      	add	r2, r3
 80017b2:	f107 0115 	add.w	r1, r7, #21
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2301      	movs	r3, #1
 80017be:	f003 fc81 	bl	80050c4 <HAL_SPI_TransmitReceive>
		index++;
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	3301      	adds	r3, #1
 80017c6:	75fb      	strb	r3, [r7, #23]
	while (index < count) {
 80017c8:	7dfa      	ldrb	r2, [r7, #23]
 80017ca:	7abb      	ldrb	r3, [r7, #10]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d3eb      	bcc.n	80017a8 <PCD_ReadRegisters+0xa8>
	}
	HAL_SPI_TransmitReceive(dev->hspi, &address,  &values[index], 1, 1000);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	68d8      	ldr	r0, [r3, #12]
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	441a      	add	r2, r3
 80017da:	f107 0115 	add.w	r1, r7, #21
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2301      	movs	r3, #1
 80017e6:	f003 fc6d 	bl	80050c4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6858      	ldr	r0, [r3, #4]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4619      	mov	r1, r3
 80017f6:	f002 f9e9 	bl	8003bcc <HAL_GPIO_WritePin>
 80017fa:	e000      	b.n	80017fe <PCD_ReadRegisters+0xfe>
		return;
 80017fc:	bf00      	nop
} // End PCD_ReadRegister()
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <PCD_SetRegisterBitMask>:
/**
 * Sets the bits given in mask in register reg.
 */
void PCD_SetRegisterBitMask(	MFRC *dev, PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										uint8_t mask			///< The bits to set.
									) { 
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
 8001810:	4613      	mov	r3, r2
 8001812:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = PCD_ReadRegister(dev, reg);
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff3f 	bl	800169c <PCD_ReadRegister>
 800181e:	4603      	mov	r3, r0
 8001820:	73fb      	strb	r3, [r7, #15]
	PCD_WriteRegister(dev, reg, tmp | mask);			// set bit mask
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	78bb      	ldrb	r3, [r7, #2]
 8001826:	4313      	orrs	r3, r2
 8001828:	b2da      	uxtb	r2, r3
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fed5 	bl	80015de <PCD_WriteRegister>
} // End PCD_SetRegisterBitMask(dev, )
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <PCD_ClearRegisterBitMask>:
/**
 * Clears the bits given in mask from register reg.
 */
void PCD_ClearRegisterBitMask(	MFRC *dev, PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										uint8_t mask			///< The bits to clear.
									  ) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
 8001848:	4613      	mov	r3, r2
 800184a:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = PCD_ReadRegister(dev, reg);
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff23 	bl	800169c <PCD_ReadRegister>
 8001856:	4603      	mov	r3, r0
 8001858:	73fb      	strb	r3, [r7, #15]
	PCD_WriteRegister(dev, reg, tmp & (~mask));		// clear bit mask
 800185a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800185e:	43db      	mvns	r3, r3
 8001860:	b25a      	sxtb	r2, r3
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4013      	ands	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	4619      	mov	r1, r3
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff feb4 	bl	80015de <PCD_WriteRegister>
} // End PCD_ClearRegisterBitMask()
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <PCD_CalculateCRC>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PCD_CalculateCRC(	MFRC *dev, uint8_t *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
												uint8_t length,	///< In: The number of bytes to transfer.
												uint8_t *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low uint8_t first.
					 ) {
 800187e:	b590      	push	{r4, r7, lr}
 8001880:	b087      	sub	sp, #28
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	71fb      	strb	r3, [r7, #7]
	PCD_WriteRegister(dev, CommandReg, PCD_Idle);		// Stop any active command.
 800188e:	2200      	movs	r2, #0
 8001890:	2102      	movs	r1, #2
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7ff fea3 	bl	80015de <PCD_WriteRegister>
	PCD_WriteRegister(dev, DivIrqReg, 0x04);				// Clear the CRCIRq interrupt request bit
 8001898:	2204      	movs	r2, #4
 800189a:	210a      	movs	r1, #10
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff fe9e 	bl	80015de <PCD_WriteRegister>
	PCD_WriteRegister(dev, FIFOLevelReg, 0x80);			// FlushBuffer = 1, FIFO initialization
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	2114      	movs	r1, #20
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff fe99 	bl	80015de <PCD_WriteRegister>
	PCD_WriteRegisters(dev, FIFODataReg, length, data);	// Write data to the FIFO
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2112      	movs	r1, #18
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff fec3 	bl	800163e <PCD_WriteRegisters>
	PCD_WriteRegister(dev, CommandReg, PCD_CalcCRC);		// Start the calculation
 80018b8:	2203      	movs	r2, #3
 80018ba:	2102      	movs	r1, #2
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fe8e 	bl	80015de <PCD_WriteRegister>
	
	// Wait for the CRC calculation to complete. Check for the register to
	// indicate that the CRC calculation is complete in a loop. If the
	// calculation is not indicated as complete in ~90ms, then time out
	// the operation.
	const uint32_t deadline = HAL_GetTick() + 89;
 80018c2:	f000 ff77 	bl	80027b4 <HAL_GetTick>
 80018c6:	4603      	mov	r3, r0
 80018c8:	3359      	adds	r3, #89	; 0x59
 80018ca:	617b      	str	r3, [r7, #20]

	do {
		// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq reserved CRCIRq reserved reserved
		uint8_t n = PCD_ReadRegister(dev, DivIrqReg);
 80018cc:	210a      	movs	r1, #10
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f7ff fee4 	bl	800169c <PCD_ReadRegister>
 80018d4:	4603      	mov	r3, r0
 80018d6:	74fb      	strb	r3, [r7, #19]
		if (n & 0x04) {									// CRCIRq bit set - calculation done
 80018d8:	7cfb      	ldrb	r3, [r7, #19]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d016      	beq.n	8001910 <PCD_CalculateCRC+0x92>
			PCD_WriteRegister(dev, CommandReg, PCD_Idle);	// Stop calculating CRC for new content in the FIFO.
 80018e2:	2200      	movs	r2, #0
 80018e4:	2102      	movs	r1, #2
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff fe79 	bl	80015de <PCD_WriteRegister>
			// Transfer the result from the registers to the result buffer
			result[0] = PCD_ReadRegister(dev, CRCResultRegL);
 80018ec:	2144      	movs	r1, #68	; 0x44
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f7ff fed4 	bl	800169c <PCD_ReadRegister>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	701a      	strb	r2, [r3, #0]
			result[1] = PCD_ReadRegister(dev, CRCResultRegH);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	1c5c      	adds	r4, r3, #1
 8001900:	2142      	movs	r1, #66	; 0x42
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f7ff feca 	bl	800169c <PCD_ReadRegister>
 8001908:	4603      	mov	r3, r0
 800190a:	7023      	strb	r3, [r4, #0]
			return STATUS_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e009      	b.n	8001924 <PCD_CalculateCRC+0xa6>
		}
		HAL_Delay(10);
 8001910:	200a      	movs	r0, #10
 8001912:	f000 ff5b 	bl	80027cc <HAL_Delay>
	}
	while ( HAL_GetTick() < deadline);
 8001916:	f000 ff4d 	bl	80027b4 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	4293      	cmp	r3, r2
 8001920:	d8d4      	bhi.n	80018cc <PCD_CalculateCRC+0x4e>

	// 89ms passed and nothing happened. Communication with the MFRC522 might be down.
	return STATUS_TIMEOUT;
 8001922:	2303      	movs	r3, #3
} // End PCD_CalculateCRC()
 8001924:	4618      	mov	r0, r3
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}

0800192c <PCD_Init>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void PCD_Init(MFRC *dev) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	bool hardReset = false;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]

	// Set the chipSelectPin as digital output, do not select the slave yet

	// If a valid pin number has been set, pull device out of power down / reset state.

	if (HAL_GPIO_ReadPin(dev->_resetPowerDownPort, dev->_resetPowerDownPin) == GPIO_PIN_RESET) {	// The MFRC522 chip is in power down mode.
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	885b      	ldrh	r3, [r3, #2]
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f002 f92a 	bl	8003b9c <HAL_GPIO_ReadPin>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d117      	bne.n	800197e <PCD_Init+0x52>

		HAL_GPIO_WritePin(dev->_resetPowerDownPort, dev->_resetPowerDownPin, GPIO_PIN_RESET);		// Make sure we have a clean LOW state.
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6898      	ldr	r0, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	885b      	ldrh	r3, [r3, #2]
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	f002 f937 	bl	8003bcc <HAL_GPIO_WritePin>
		HAL_Delay(1);				// 8.8.1 Reset timing requirements says about 100ns. Let us be generous: 2μsl
 800195e:	2001      	movs	r0, #1
 8001960:	f000 ff34 	bl	80027cc <HAL_Delay>
		HAL_GPIO_WritePin(dev->_resetPowerDownPort, dev->_resetPowerDownPin, GPIO_PIN_SET);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6898      	ldr	r0, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	885b      	ldrh	r3, [r3, #2]
 800196c:	2201      	movs	r2, #1
 800196e:	4619      	mov	r1, r3
 8001970:	f002 f92c 	bl	8003bcc <HAL_GPIO_WritePin>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
		HAL_Delay(50);
 8001974:	2032      	movs	r0, #50	; 0x32
 8001976:	f000 ff29 	bl	80027cc <HAL_Delay>
		hardReset = true;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
	}


	if (!hardReset) { // Perform a soft reset if we haven't triggered a hard reset above.
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	f083 0301 	eor.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <PCD_Init+0x64>
		PCD_Reset(dev);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f8a4 	bl	8001ad8 <PCD_Reset>
	}
	uint8_t r_val = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	73bb      	strb	r3, [r7, #14]
	// Reset baud rates
	PCD_WriteRegister(dev, TxModeReg, 0x00);
 8001994:	2200      	movs	r2, #0
 8001996:	2124      	movs	r1, #36	; 0x24
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fe20 	bl	80015de <PCD_WriteRegister>

	r_val = PCD_ReadRegister(dev, TxModeReg);
 800199e:	2124      	movs	r1, #36	; 0x24
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fe7b 	bl	800169c <PCD_ReadRegister>
 80019a6:	4603      	mov	r3, r0
 80019a8:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4949      	ldr	r1, [pc, #292]	; (8001ad4 <PCD_Init+0x1a8>)
 80019b0:	2000      	movs	r0, #0
 80019b2:	f006 f849 	bl	8007a48 <SEGGER_RTT_printf>


	PCD_WriteRegister(dev, RxModeReg, 0x00);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2126      	movs	r1, #38	; 0x26
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fe0f 	bl	80015de <PCD_WriteRegister>

	r_val = PCD_ReadRegister(dev, RxModeReg);
 80019c0:	2126      	movs	r1, #38	; 0x26
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fe6a 	bl	800169c <PCD_ReadRegister>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4940      	ldr	r1, [pc, #256]	; (8001ad4 <PCD_Init+0x1a8>)
 80019d2:	2000      	movs	r0, #0
 80019d4:	f006 f838 	bl	8007a48 <SEGGER_RTT_printf>


	// Reset ModWidthReg
	PCD_WriteRegister(dev, ModWidthReg, 0x26);
 80019d8:	2226      	movs	r2, #38	; 0x26
 80019da:	2148      	movs	r1, #72	; 0x48
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fdfe 	bl	80015de <PCD_WriteRegister>

	r_val = PCD_ReadRegister(dev, ModWidthReg);
 80019e2:	2148      	movs	r1, #72	; 0x48
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fe59 	bl	800169c <PCD_ReadRegister>
 80019ea:	4603      	mov	r3, r0
 80019ec:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80019ee:	7bbb      	ldrb	r3, [r7, #14]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4938      	ldr	r1, [pc, #224]	; (8001ad4 <PCD_Init+0x1a8>)
 80019f4:	2000      	movs	r0, #0
 80019f6:	f006 f827 	bl	8007a48 <SEGGER_RTT_printf>

	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	PCD_WriteRegister(dev, TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	2154      	movs	r1, #84	; 0x54
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fded 	bl	80015de <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TModeReg);
 8001a04:	2154      	movs	r1, #84	; 0x54
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fe48 	bl	800169c <PCD_ReadRegister>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001a10:	7bbb      	ldrb	r3, [r7, #14]
 8001a12:	461a      	mov	r2, r3
 8001a14:	492f      	ldr	r1, [pc, #188]	; (8001ad4 <PCD_Init+0x1a8>)
 8001a16:	2000      	movs	r0, #0
 8001a18:	f006 f816 	bl	8007a48 <SEGGER_RTT_printf>


	PCD_WriteRegister(dev, TPrescalerReg, 0xA9);		// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
 8001a1c:	22a9      	movs	r2, #169	; 0xa9
 8001a1e:	2156      	movs	r1, #86	; 0x56
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fddc 	bl	80015de <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TPrescalerReg);
 8001a26:	2156      	movs	r1, #86	; 0x56
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fe37 	bl	800169c <PCD_ReadRegister>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001a32:	7bbb      	ldrb	r3, [r7, #14]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4927      	ldr	r1, [pc, #156]	; (8001ad4 <PCD_Init+0x1a8>)
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f006 f805 	bl	8007a48 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 8001a3e:	2203      	movs	r2, #3
 8001a40:	2158      	movs	r1, #88	; 0x58
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fdcb 	bl	80015de <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TReloadRegH);
 8001a48:	2158      	movs	r1, #88	; 0x58
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fe26 	bl	800169c <PCD_ReadRegister>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	461a      	mov	r2, r3
 8001a58:	491e      	ldr	r1, [pc, #120]	; (8001ad4 <PCD_Init+0x1a8>)
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f005 fff4 	bl	8007a48 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, TReloadRegL, 0xE8);
 8001a60:	22e8      	movs	r2, #232	; 0xe8
 8001a62:	215a      	movs	r1, #90	; 0x5a
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fdba 	bl	80015de <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TReloadRegL);
 8001a6a:	215a      	movs	r1, #90	; 0x5a
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fe15 	bl	800169c <PCD_ReadRegister>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <PCD_Init+0x1a8>)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f005 ffe3 	bl	8007a48 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	212a      	movs	r1, #42	; 0x2a
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fda9 	bl	80015de <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TxASKReg);
 8001a8c:	212a      	movs	r1, #42	; 0x2a
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fe04 	bl	800169c <PCD_ReadRegister>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001a98:	7bbb      	ldrb	r3, [r7, #14]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <PCD_Init+0x1a8>)
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f005 ffd2 	bl	8007a48 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 8001aa4:	223d      	movs	r2, #61	; 0x3d
 8001aa6:	2122      	movs	r1, #34	; 0x22
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fd98 	bl	80015de <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, ModeReg);
 8001aae:	2122      	movs	r1, #34	; 0x22
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fdf3 	bl	800169c <PCD_ReadRegister>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4905      	ldr	r1, [pc, #20]	; (8001ad4 <PCD_Init+0x1a8>)
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f005 ffc1 	bl	8007a48 <SEGGER_RTT_printf>

	PCD_AntennaOn(dev);						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f827 	bl	8001b1a <PCD_AntennaOn>
} // End PCD_Init()
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	08007c2c 	.word	0x08007c2c

08001ad8 <PCD_Reset>:


/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void PCD_Reset(MFRC *dev) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	PCD_WriteRegister(dev, CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fd7a 	bl	80015de <PCD_WriteRegister>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
	uint8_t count = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
	do {
		// Wait for the PowerDown bit in CommandReg to be cleared (max 3x50ms)
		HAL_Delay(50);
 8001aee:	2032      	movs	r0, #50	; 0x32
 8001af0:	f000 fe6c 	bl	80027cc <HAL_Delay>
	} while ((PCD_ReadRegister(dev, CommandReg) & (1 << 4)) && (++count) < 3);
 8001af4:	2102      	movs	r1, #2
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fdd0 	bl	800169c <PCD_ReadRegister>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <PCD_Reset+0x3a>
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d9ed      	bls.n	8001aee <PCD_Reset+0x16>
} // End PCD_Reset()
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <PCD_AntennaOn>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins are disabled.
 */
void PCD_AntennaOn(MFRC *dev) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	uint8_t value = PCD_ReadRegister(dev, TxControlReg);
 8001b22:	2128      	movs	r1, #40	; 0x28
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fdb9 	bl	800169c <PCD_ReadRegister>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]
	if ((value & 0x03) != 0x03) {
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d008      	beq.n	8001b4a <PCD_AntennaOn+0x30>
		PCD_WriteRegister(dev, TxControlReg, value | 0x03);
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	f043 0303 	orr.w	r3, r3, #3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	2128      	movs	r1, #40	; 0x28
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fd4a 	bl	80015de <PCD_WriteRegister>
	}
} // End PCD_AntennaOn()
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <PCD_TransceiveData>:
													uint8_t *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
													uint8_t *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
													uint8_t *validBits,	///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits. Default NULL.
													uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
													bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08c      	sub	sp, #48	; 0x30
 8001b56:	af06      	add	r7, sp, #24
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	71fb      	strb	r3, [r7, #7]
	uint8_t waitIRq = 0x30;		// RxIRq and IdleIRq
 8001b62:	2330      	movs	r3, #48	; 0x30
 8001b64:	75fb      	strb	r3, [r7, #23]
	return PCD_CommunicateWithPICC(dev, PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 8001b66:	7dfa      	ldrb	r2, [r7, #23]
 8001b68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b6c:	9305      	str	r3, [sp, #20]
 8001b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b72:	9304      	str	r3, [sp, #16]
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	9303      	str	r3, [sp, #12]
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	210c      	movs	r1, #12
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f805 	bl	8001b98 <PCD_CommunicateWithPICC>
 8001b8e:	4603      	mov	r3, r0
} // End PCD_TransceiveData()
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <PCD_CommunicateWithPICC>:
														uint8_t *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
														uint8_t *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
														uint8_t *validBits,	///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits.
														uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
														bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	72fb      	strb	r3, [r7, #11]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	72bb      	strb	r3, [r7, #10]
	// Prepare values for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
 8001baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <PCD_CommunicateWithPICC+0x1e>
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	e000      	b.n	8001bb8 <PCD_CommunicateWithPICC+0x20>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	777b      	strb	r3, [r7, #29]
	uint8_t bitFraming = (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8001bba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	7f7b      	ldrb	r3, [r7, #29]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	773b      	strb	r3, [r7, #28]
	
	PCD_WriteRegister(dev, CommandReg, PCD_Idle);			// Stop any active command.
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2102      	movs	r1, #2
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff fd06 	bl	80015de <PCD_WriteRegister>
	PCD_WriteRegister(dev, ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 8001bd2:	227f      	movs	r2, #127	; 0x7f
 8001bd4:	2108      	movs	r1, #8
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff fd01 	bl	80015de <PCD_WriteRegister>
	PCD_WriteRegister(dev, FIFOLevelReg, 0x80);				// FlushBuffer = 1, FIFO initialization
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	2114      	movs	r1, #20
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7ff fcfc 	bl	80015de <PCD_WriteRegister>
	PCD_WriteRegisters(dev, FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 8001be6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2112      	movs	r1, #18
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f7ff fd25 	bl	800163e <PCD_WriteRegisters>
	PCD_WriteRegister(dev, BitFramingReg, bitFraming);		// Bit adjustments
 8001bf4:	7f3b      	ldrb	r3, [r7, #28]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	211a      	movs	r1, #26
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff fcef 	bl	80015de <PCD_WriteRegister>
	PCD_WriteRegister(dev, CommandReg, command);				// Execute the command
 8001c00:	7afb      	ldrb	r3, [r7, #11]
 8001c02:	461a      	mov	r2, r3
 8001c04:	2102      	movs	r1, #2
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fce9 	bl	80015de <PCD_WriteRegister>
	if (command == PCD_Transceive) {
 8001c0c:	7afb      	ldrb	r3, [r7, #11]
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d104      	bne.n	8001c1c <PCD_CommunicateWithPICC+0x84>
		PCD_SetRegisterBitMask(dev, BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	211a      	movs	r1, #26
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff fdf4 	bl	8001804 <PCD_SetRegisterBitMask>
	// Wait here for the command to complete. The bits specified in the
	// `waitIRq` parameter define what bits constitute a completed command.
	// When they are set in the ComIrqReg register, then the command is
	// considered complete. If the command is not indicated as complete in
	// ~36ms, then consider the command as timed out.
	const uint32_t deadline = HAL_GetTick() + 36;
 8001c1c:	f000 fdca 	bl	80027b4 <HAL_GetTick>
 8001c20:	4603      	mov	r3, r0
 8001c22:	3324      	adds	r3, #36	; 0x24
 8001c24:	61bb      	str	r3, [r7, #24]
	bool completed = false;
 8001c26:	2300      	movs	r3, #0
 8001c28:	77fb      	strb	r3, [r7, #31]

	do {
		uint8_t n = PCD_ReadRegister(dev, ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7ff fd35 	bl	800169c <PCD_ReadRegister>
 8001c32:	4603      	mov	r3, r0
 8001c34:	75fb      	strb	r3, [r7, #23]
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 8001c36:	7dfa      	ldrb	r2, [r7, #23]
 8001c38:	7abb      	ldrb	r3, [r7, #10]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <PCD_CommunicateWithPICC+0xb0>
			completed = true;
 8001c42:	2301      	movs	r3, #1
 8001c44:	77fb      	strb	r3, [r7, #31]
			break;
 8001c46:	e00f      	b.n	8001c68 <PCD_CommunicateWithPICC+0xd0>
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <PCD_CommunicateWithPICC+0xbe>
			return STATUS_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e095      	b.n	8001d82 <PCD_CommunicateWithPICC+0x1ea>
		}
		HAL_Delay(10);
 8001c56:	200a      	movs	r0, #10
 8001c58:	f000 fdb8 	bl	80027cc <HAL_Delay>
	}
	while ((HAL_GetTick()) < deadline);
 8001c5c:	f000 fdaa 	bl	80027b4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d8e0      	bhi.n	8001c2a <PCD_CommunicateWithPICC+0x92>

	// 36ms and nothing happened. Communication with the MFRC522 might be down.
	if (!completed) {
 8001c68:	7ffb      	ldrb	r3, [r7, #31]
 8001c6a:	f083 0301 	eor.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <PCD_CommunicateWithPICC+0xe0>
		return STATUS_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e084      	b.n	8001d82 <PCD_CommunicateWithPICC+0x1ea>
	}
	
	// Stop now if any errors except collisions were detected.
	uint8_t errorRegValue = PCD_ReadRegister(dev, ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
 8001c78:	210c      	movs	r1, #12
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f7ff fd0e 	bl	800169c <PCD_ReadRegister>
 8001c80:	4603      	mov	r3, r0
 8001c82:	75bb      	strb	r3, [r7, #22]
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 8001c84:	7dbb      	ldrb	r3, [r7, #22]
 8001c86:	f003 0313 	and.w	r3, r3, #19
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <PCD_CommunicateWithPICC+0xfa>
		return STATUS_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e077      	b.n	8001d82 <PCD_CommunicateWithPICC+0x1ea>
	}
  
	uint8_t _validBits = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	77bb      	strb	r3, [r7, #30]
	
	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d029      	beq.n	8001cf0 <PCD_CommunicateWithPICC+0x158>
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d026      	beq.n	8001cf0 <PCD_CommunicateWithPICC+0x158>
		uint8_t n = PCD_ReadRegister(dev, FIFOLevelReg);	// Number of bytes in the FIFO
 8001ca2:	2114      	movs	r1, #20
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff fcf9 	bl	800169c <PCD_ReadRegister>
 8001caa:	4603      	mov	r3, r0
 8001cac:	757b      	strb	r3, [r7, #21]
		if (n > *backLen) {
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	7d7a      	ldrb	r2, [r7, #21]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d901      	bls.n	8001cbc <PCD_CommunicateWithPICC+0x124>
			return STATUS_NO_ROOM;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e062      	b.n	8001d82 <PCD_CommunicateWithPICC+0x1ea>
		}
		*backLen = n;											// Number of bytes returned
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	7d7a      	ldrb	r2, [r7, #21]
 8001cc0:	701a      	strb	r2, [r3, #0]
		PCD_ReadRegisters(dev, FIFODataReg, n, backData, rxAlign);	// Get received data from FIFO
 8001cc2:	7d7a      	ldrb	r2, [r7, #21]
 8001cc4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	2112      	movs	r1, #18
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7ff fd16 	bl	8001700 <PCD_ReadRegisters>
		_validBits = PCD_ReadRegister(dev, ControlReg) & 0x07;		// RxLastBits[2:0] indicates the number of valid bits in the last received uint8_t. If this value is 000b, the whole uint8_t is valid.
 8001cd4:	2118      	movs	r1, #24
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff fce0 	bl	800169c <PCD_ReadRegister>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	77bb      	strb	r3, [r7, #30]
		if (validBits) {
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <PCD_CommunicateWithPICC+0x158>
			*validBits = _validBits;
 8001cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cec:	7fba      	ldrb	r2, [r7, #30]
 8001cee:	701a      	strb	r2, [r3, #0]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) {		// CollErr
 8001cf0:	7dbb      	ldrb	r3, [r7, #22]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <PCD_CommunicateWithPICC+0x166>
		return STATUS_COLLISION;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e041      	b.n	8001d82 <PCD_CommunicateWithPICC+0x1ea>
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 8001cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d03d      	beq.n	8001d80 <PCD_CommunicateWithPICC+0x1e8>
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d03a      	beq.n	8001d80 <PCD_CommunicateWithPICC+0x1e8>
 8001d0a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d036      	beq.n	8001d80 <PCD_CommunicateWithPICC+0x1e8>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d104      	bne.n	8001d24 <PCD_CommunicateWithPICC+0x18c>
 8001d1a:	7fbb      	ldrb	r3, [r7, #30]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d101      	bne.n	8001d24 <PCD_CommunicateWithPICC+0x18c>
			return STATUS_MIFARE_NACK;
 8001d20:	23ff      	movs	r3, #255	; 0xff
 8001d22:	e02e      	b.n	8001d82 <PCD_CommunicateWithPICC+0x1ea>
		}
		// We need at least the CRC_A value and all 8 bits of the last uint8_t must be received.
		if (*backLen < 2 || _validBits != 0) {
 8001d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d902      	bls.n	8001d32 <PCD_CommunicateWithPICC+0x19a>
 8001d2c:	7fbb      	ldrb	r3, [r7, #30]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <PCD_CommunicateWithPICC+0x19e>
			return STATUS_CRC_WRONG;
 8001d32:	2307      	movs	r3, #7
 8001d34:	e025      	b.n	8001d82 <PCD_CommunicateWithPICC+0x1ea>
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		uint8_t controlBuffer[2];
		StatusCode status = PCD_CalculateCRC(dev, &backData[0], *backLen - 2, &controlBuffer[0]);
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	3b02      	subs	r3, #2
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7ff fd9a 	bl	800187e <PCD_CalculateCRC>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	753b      	strb	r3, [r7, #20]
		if (status != STATUS_OK) {
 8001d4e:	7d3b      	ldrb	r3, [r7, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <PCD_CommunicateWithPICC+0x1c0>
			return status;
 8001d54:	7d3b      	ldrb	r3, [r7, #20]
 8001d56:	e014      	b.n	8001d82 <PCD_CommunicateWithPICC+0x1ea>
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	3b02      	subs	r3, #2
 8001d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d60:	4413      	add	r3, r2
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	7c3b      	ldrb	r3, [r7, #16]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d108      	bne.n	8001d7c <PCD_CommunicateWithPICC+0x1e4>
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d72:	4413      	add	r3, r2
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	7c7b      	ldrb	r3, [r7, #17]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <PCD_CommunicateWithPICC+0x1e8>
			return STATUS_CRC_WRONG;
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	e000      	b.n	8001d82 <PCD_CommunicateWithPICC+0x1ea>
		}
	}
	
	return STATUS_OK;
 8001d80:	2300      	movs	r3, #0
} // End PCD_CommunicateWithPICC()
 8001d82:	4618      	mov	r0, r3
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <PICC_RequestA>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PICC_RequestA(	MFRC *dev, uint8_t *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											uint8_t *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
	return PICC_REQA_or_WUPA(dev, PICC_CMD_REQA, bufferATQA, bufferSize);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	2126      	movs	r1, #38	; 0x26
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f805 	bl	8001dac <PICC_REQA_or_WUPA>
 8001da2:	4603      	mov	r3, r0
} // End PICC_RequestA()
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <PICC_REQA_or_WUPA>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
StatusCode PICC_REQA_or_WUPA(	MFRC *dev, uint8_t command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												uint8_t *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												uint8_t *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af04      	add	r7, sp, #16
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	460b      	mov	r3, r1
 8001dba:	72fb      	strb	r3, [r7, #11]
	uint8_t validBits;
	StatusCode status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <PICC_REQA_or_WUPA+0x1e>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d801      	bhi.n	8001dce <PICC_REQA_or_WUPA+0x22>
		return STATUS_NO_ROOM;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e027      	b.n	8001e1e <PICC_REQA_or_WUPA+0x72>
	}
	PCD_ClearRegisterBitMask(dev, CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	211c      	movs	r1, #28
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fd32 	bl	800183c <PCD_ClearRegisterBitMask>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) uint8_t. TxLastBits = BitFramingReg[2..0]
 8001dd8:	2307      	movs	r3, #7
 8001dda:	75bb      	strb	r3, [r7, #22]
	status = PCD_TransceiveData(dev, &command, 1, bufferATQA, bufferSize, &validBits, 0, false);
 8001ddc:	f107 010b 	add.w	r1, r7, #11
 8001de0:	2300      	movs	r3, #0
 8001de2:	9303      	str	r3, [sp, #12]
 8001de4:	2300      	movs	r3, #0
 8001de6:	9302      	str	r3, [sp, #8]
 8001de8:	f107 0316 	add.w	r3, r7, #22
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f7ff feab 	bl	8001b52 <PCD_TransceiveData>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	75fb      	strb	r3, [r7, #23]
	if (status != STATUS_OK) {
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <PICC_REQA_or_WUPA+0x5e>
		return status;
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	e009      	b.n	8001e1e <PICC_REQA_or_WUPA+0x72>
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d102      	bne.n	8001e18 <PICC_REQA_or_WUPA+0x6c>
 8001e12:	7dbb      	ldrb	r3, [r7, #22]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <PICC_REQA_or_WUPA+0x70>
		return STATUS_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <PICC_REQA_or_WUPA+0x72>
	}
	return STATUS_OK;
 8001e1c:	2300      	movs	r3, #0
} // End PICC_REQA_or_WUPA()
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <PICC_Select>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PICC_Select(	MFRC *dev, Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
											uint8_t validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
										 ) {
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b092      	sub	sp, #72	; 0x48
 8001e2a:	af04      	add	r7, sp, #16
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71fb      	strb	r3, [r7, #7]
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	uint8_t cascadeLevel = 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b50      	cmp	r3, #80	; 0x50
 8001e3e:	d901      	bls.n	8001e44 <PICC_Select+0x1e>
		return STATUS_INVALID;
 8001e40:	2306      	movs	r3, #6
 8001e42:	e267      	b.n	8002314 <PICC_Select+0x4ee>
	}
	
	// Prepare MFRC522
	PCD_ClearRegisterBitMask(dev, CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	211c      	movs	r1, #28
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff fcf7 	bl	800183c <PCD_ClearRegisterBitMask>
	
	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (!uidComplete) {
 8001e54:	e24b      	b.n	80022ee <PICC_Select+0x4c8>
		// Set the Cascade Level in the SEL uint8_t, find out if we need to use the Cascade Tag in uint8_t 2.
		switch (cascadeLevel) {
 8001e56:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d036      	beq.n	8001ecc <PICC_Select+0xa6>
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	dc3d      	bgt.n	8001ede <PICC_Select+0xb8>
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d002      	beq.n	8001e6c <PICC_Select+0x46>
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d018      	beq.n	8001e9c <PICC_Select+0x76>
 8001e6a:	e038      	b.n	8001ede <PICC_Select+0xb8>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
 8001e6c:	2393      	movs	r3, #147	; 0x93
 8001e6e:	763b      	strb	r3, [r7, #24]
				uidIndex = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <PICC_Select+0x62>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d901      	bls.n	8001e88 <PICC_Select+0x62>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <PICC_Select+0x64>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001e8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 8001e9a:	e022      	b.n	8001ee2 <PICC_Select+0xbc>
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
 8001e9c:	2395      	movs	r3, #149	; 0x95
 8001e9e:	763b      	strb	r3, [r7, #24]
				uidIndex = 3;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <PICC_Select+0x92>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b07      	cmp	r3, #7
 8001eb2:	d901      	bls.n	8001eb8 <PICC_Select+0x92>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <PICC_Select+0x94>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001ebe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 8001eca:	e00a      	b.n	8001ee2 <PICC_Select+0xbc>
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
 8001ecc:	2397      	movs	r3, #151	; 0x97
 8001ece:	763b      	strb	r3, [r7, #24]
				uidIndex = 6;
 8001ed0:	2306      	movs	r3, #6
 8001ed2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				useCascadeTag = false;						// Never used in CL3.
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 8001edc:	e001      	b.n	8001ee2 <PICC_Select+0xbc>
			
			default:
				return STATUS_INTERNAL_ERROR;
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e218      	b.n	8002314 <PICC_Select+0x4ee>
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
 8001ee2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	79fa      	ldrb	r2, [r7, #7]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		if (currentLevelKnownBits < 0) {
 8001ef4:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da02      	bge.n	8001f02 <PICC_Select+0xdc>
			currentLevelKnownBits = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
 8001f02:	2302      	movs	r3, #2
 8001f04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		if (useCascadeTag) {
 8001f08:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <PICC_Select+0xfe>
			buffer[index++] = PICC_CMD_CT;
 8001f10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 8001f1a:	3338      	adds	r3, #56	; 0x38
 8001f1c:	443b      	add	r3, r7
 8001f1e:	2288      	movs	r2, #136	; 0x88
 8001f20:	f803 2c20 	strb.w	r2, [r3, #-32]
		}
		uint8_t bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 8001f24:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da00      	bge.n	8001f2e <PICC_Select+0x108>
 8001f2c:	3307      	adds	r3, #7
 8001f2e:	10db      	asrs	r3, r3, #3
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f38:	f002 0207 	and.w	r2, r2, #7
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2201      	movne	r2, #1
 8001f44:	2200      	moveq	r2, #0
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	4413      	add	r3, r2
 8001f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (bytesToCopy) {
 8001f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d034      	beq.n	8001fc0 <PICC_Select+0x19a>
			uint8_t maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 8001f56:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <PICC_Select+0x13c>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e000      	b.n	8001f64 <PICC_Select+0x13e>
 8001f62:	2304      	movs	r3, #4
 8001f64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if (bytesToCopy > maxBytes) {
 8001f68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d903      	bls.n	8001f7c <PICC_Select+0x156>
				bytesToCopy = maxBytes;
 8001f74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			for (count = 0; count < bytesToCopy; count++) {
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001f82:	e017      	b.n	8001fb4 <PICC_Select+0x18e>
				buffer[index++] = uid->uidByte[uidIndex + count];
 8001f84:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001f88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f8c:	441a      	add	r2, r3
 8001f8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f92:	1c59      	adds	r1, r3, #1
 8001f94:	f887 1032 	strb.w	r1, [r7, #50]	; 0x32
 8001f98:	4619      	mov	r1, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	785a      	ldrb	r2, [r3, #1]
 8001fa0:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8001fa4:	443b      	add	r3, r7
 8001fa6:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (count = 0; count < bytesToCopy; count++) {
 8001faa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001fb4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3e1      	bcc.n	8001f84 <PICC_Select+0x15e>
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
 8001fc0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <PICC_Select+0x1ae>
			currentLevelKnownBits += 8;
 8001fc8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fcc:	3308      	adds	r3, #8
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!selectDone) {
 8001fda:	e112      	b.n	8002202 <PICC_Select+0x3dc>
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 8001fdc:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001fe0:	2b1f      	cmp	r3, #31
 8001fe2:	dd2b      	ble.n	800203c <PICC_Select+0x216>
				//SEGGER_RTT_printf(0, "SELECT: currentLevelKnownBits="); SEGGER_RTT_printf(0, currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 8001fe4:	2370      	movs	r3, #112	; 0x70
 8001fe6:	767b      	strb	r3, [r7, #25]
				// Calculate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 8001fe8:	7eba      	ldrb	r2, [r7, #26]
 8001fea:	7efb      	ldrb	r3, [r7, #27]
 8001fec:	4053      	eors	r3, r2
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	7f3b      	ldrb	r3, [r7, #28]
 8001ff2:	4053      	eors	r3, r2
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	7f7b      	ldrb	r3, [r7, #29]
 8001ff8:	4053      	eors	r3, r2
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	77bb      	strb	r3, [r7, #30]
				// Calculate CRC_A
				result = PCD_CalculateCRC(dev, buffer, 7, &buffer[7]);
 8001ffe:	f107 0318 	add.w	r3, r7, #24
 8002002:	3307      	adds	r3, #7
 8002004:	f107 0118 	add.w	r1, r7, #24
 8002008:	2207      	movs	r2, #7
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fc37 	bl	800187e <PCD_CalculateCRC>
 8002010:	4603      	mov	r3, r0
 8002012:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				if (result != STATUS_OK) {
 8002016:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <PICC_Select+0x1fe>
					return result;
 800201e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002022:	e177      	b.n	8002314 <PICC_Select+0x4ee>
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
 8002024:	2300      	movs	r3, #0
 8002026:	75fb      	strb	r3, [r7, #23]
				bufferUsed		= 9;
 8002028:	2309      	movs	r3, #9
 800202a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
 800202e:	f107 0318 	add.w	r3, r7, #24
 8002032:	3306      	adds	r3, #6
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
				responseLength	= 3;
 8002036:	2303      	movs	r3, #3
 8002038:	75bb      	strb	r3, [r7, #22]
 800203a:	e039      	b.n	80020b0 <PICC_Select+0x28a>
			}
			else { // This is an ANTICOLLISION.
				//SEGGER_RTT_printf(0, "ANTICOLLISION: currentLevelKnownBits="); SEGGER_RTT_printf(0, currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 800203c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002040:	425a      	negs	r2, r3
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	f002 0207 	and.w	r2, r2, #7
 800204a:	bf58      	it	pl
 800204c:	4253      	negpl	r3, r2
 800204e:	b25b      	sxtb	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	75fb      	strb	r3, [r7, #23]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
 8002054:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002058:	2b00      	cmp	r3, #0
 800205a:	da00      	bge.n	800205e <PICC_Select+0x238>
 800205c:	3307      	adds	r3, #7
 800205e:	10db      	asrs	r3, r3, #3
 8002060:	b25b      	sxtb	r3, r3
 8002062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 8002066:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800206a:	3302      	adds	r3, #2
 800206c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 8002070:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	b2da      	uxtb	r2, r3
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	4413      	add	r3, r2
 800207c:	b2db      	uxtb	r3, r3
 800207e:	767b      	strb	r3, [r7, #25]
				bufferUsed		= index + (txLastBits ? 1 : 0);
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002092:	4413      	add	r3, r2
 8002094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
 8002098:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800209c:	f107 0218 	add.w	r2, r7, #24
 80020a0:	4413      	add	r3, r2
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
				responseLength	= sizeof(buffer) - index;
 80020a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020a8:	f1c3 0309 	rsb	r3, r3, #9
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	75bb      	strb	r3, [r7, #22]
			}
			
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a separate variable is overkill. But it makes the next line easier to read.
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			PCD_WriteRegister(dev, BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80020b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	4413      	add	r3, r2
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	211a      	movs	r1, #26
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff fa88 	bl	80015de <PCD_WriteRegister>
			
			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(dev, buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign, false);
 80020ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80020d2:	f107 0118 	add.w	r1, r7, #24
 80020d6:	2300      	movs	r3, #0
 80020d8:	9303      	str	r3, [sp, #12]
 80020da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	f107 0317 	add.w	r3, r7, #23
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	f107 0316 	add.w	r3, r7, #22
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f7ff fd2f 	bl	8001b52 <PCD_TransceiveData>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80020fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d16a      	bne.n	80021d8 <PICC_Select+0x3b2>
				uint8_t valueOfCollReg = PCD_ReadRegister(dev, CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 8002102:	211c      	movs	r1, #28
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff fac9 	bl	800169c <PCD_ReadRegister>
 800210a:	4603      	mov	r3, r0
 800210c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				if (valueOfCollReg & 0x20) { // CollPosNotValid
 8002110:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <PICC_Select+0x2fa>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
 800211c:	2302      	movs	r3, #2
 800211e:	e0f9      	b.n	8002314 <PICC_Select+0x4ee>
				}
				uint8_t collisionPos = valueOfCollReg & 0x1F; // Values 0-31, 0 means bit 32.
 8002120:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (collisionPos == 0) {
 800212c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <PICC_Select+0x314>
					collisionPos = 32;
 8002134:	2320      	movs	r3, #32
 8002136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 800213a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800213e:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002142:	429a      	cmp	r2, r3
 8002144:	dc01      	bgt.n	800214a <PICC_Select+0x324>
					return STATUS_INTERNAL_ERROR;
 8002146:	2305      	movs	r3, #5
 8002148:	e0e4      	b.n	8002314 <PICC_Select+0x4ee>
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits	= collisionPos;
 800214a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800214e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				count			= currentLevelKnownBits % 8; // The bit to modify
 8002152:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002156:	425a      	negs	r2, r3
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	f002 0207 	and.w	r2, r2, #7
 8002160:	bf58      	it	pl
 8002162:	4253      	negpl	r3, r2
 8002164:	b25b      	sxtb	r3, r3
 8002166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				checkBit		= (currentLevelKnownBits - 1) % 8;
 800216a:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 800216e:	3b01      	subs	r3, #1
 8002170:	425a      	negs	r2, r3
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	f002 0207 	and.w	r2, r2, #7
 800217a:	bf58      	it	pl
 800217c:	4253      	negpl	r3, r2
 800217e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First uint8_t is index 0.
 8002182:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002186:	2b00      	cmp	r3, #0
 8002188:	da00      	bge.n	800218c <PICC_Select+0x366>
 800218a:	3307      	adds	r3, #7
 800218c:	10db      	asrs	r3, r3, #3
 800218e:	b25b      	sxtb	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002196:	2a00      	cmp	r2, #0
 8002198:	bf14      	ite	ne
 800219a:	2201      	movne	r2, #1
 800219c:	2200      	moveq	r2, #0
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	4413      	add	r3, r2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				buffer[index]	|= (1 << checkBit);
 80021aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80021ae:	3338      	adds	r3, #56	; 0x38
 80021b0:	443b      	add	r3, r7
 80021b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80021b6:	b25a      	sxtb	r2, r3
 80021b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b25a      	sxtb	r2, r3
 80021c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	3338      	adds	r3, #56	; 0x38
 80021d0:	443b      	add	r3, r7
 80021d2:	f803 2c20 	strb.w	r2, [r3, #-32]
 80021d6:	e014      	b.n	8002202 <PICC_Select+0x3dc>
			}
			else if (result != STATUS_OK) {
 80021d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <PICC_Select+0x3c0>
				return result;
 80021e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021e4:	e096      	b.n	8002314 <PICC_Select+0x4ee>
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80021e6:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80021ea:	2b1f      	cmp	r3, #31
 80021ec:	dd03      	ble.n	80021f6 <PICC_Select+0x3d0>
					selectDone = true; // No more anticollision 
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021f4:	e002      	b.n	80021fc <PICC_Select+0x3d6>
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
 80021f6:	2320      	movs	r3, #32
 80021f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					// Run loop again to do the SELECT.
				}
				HAL_Delay(10);
 80021fc:	200a      	movs	r0, #10
 80021fe:	f000 fae5 	bl	80027cc <HAL_Delay>
		while (!selectDone) {
 8002202:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002206:	f083 0301 	eor.w	r3, r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	f47f aee5 	bne.w	8001fdc <PICC_Select+0x1b6>
		} // End of while (!selectDone)
		
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 8002212:	7ebb      	ldrb	r3, [r7, #26]
 8002214:	2b88      	cmp	r3, #136	; 0x88
 8002216:	d101      	bne.n	800221c <PICC_Select+0x3f6>
 8002218:	2303      	movs	r3, #3
 800221a:	e000      	b.n	800221e <PICC_Select+0x3f8>
 800221c:	2302      	movs	r3, #2
 800221e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 8002222:	7ebb      	ldrb	r3, [r7, #26]
 8002224:	2b88      	cmp	r3, #136	; 0x88
 8002226:	d101      	bne.n	800222c <PICC_Select+0x406>
 8002228:	2303      	movs	r3, #3
 800222a:	e000      	b.n	800222e <PICC_Select+0x408>
 800222c:	2304      	movs	r3, #4
 800222e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (count = 0; count < bytesToCopy; count++) {
 8002232:	2300      	movs	r3, #0
 8002234:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002238:	e018      	b.n	800226c <PICC_Select+0x446>
			uid->uidByte[uidIndex + count] = buffer[index++];
 800223a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 8002244:	4619      	mov	r1, r3
 8002246:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800224a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800224e:	4413      	add	r3, r2
 8002250:	f101 0238 	add.w	r2, r1, #56	; 0x38
 8002254:	443a      	add	r2, r7
 8002256:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4413      	add	r3, r2
 800225e:	460a      	mov	r2, r1
 8002260:	705a      	strb	r2, [r3, #1]
		for (count = 0; count < bytesToCopy; count++) {
 8002262:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002266:	3301      	adds	r3, #1
 8002268:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800226c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002274:	429a      	cmp	r2, r3
 8002276:	d3e0      	bcc.n	800223a <PICC_Select+0x414>
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) { // SAK must be exactly 24 bits (1 uint8_t + CRC_A).
 8002278:	7dbb      	ldrb	r3, [r7, #22]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d102      	bne.n	8002284 <PICC_Select+0x45e>
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <PICC_Select+0x462>
			return STATUS_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e045      	b.n	8002314 <PICC_Select+0x4ee>
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(dev, responseBuffer, 1, &buffer[2]);
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	3302      	adds	r3, #2
 800228e:	2201      	movs	r2, #1
 8002290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7ff faf3 	bl	800187e <PCD_CalculateCRC>
 8002298:	4603      	mov	r3, r0
 800229a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (result != STATUS_OK) {
 800229e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <PICC_Select+0x486>
			return result;
 80022a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022aa:	e033      	b.n	8002314 <PICC_Select+0x4ee>
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80022ac:	7eba      	ldrb	r2, [r7, #26]
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	3301      	adds	r3, #1
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d105      	bne.n	80022c4 <PICC_Select+0x49e>
 80022b8:	7efa      	ldrb	r2, [r7, #27]
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	3302      	adds	r3, #2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <PICC_Select+0x4a2>
			return STATUS_CRC_WRONG;
 80022c4:	2307      	movs	r3, #7
 80022c6:	e025      	b.n	8002314 <PICC_Select+0x4ee>
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <PICC_Select+0x4ba>
			cascadeLevel++;
 80022d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d8:	3301      	adds	r3, #1
 80022da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022de:	e006      	b.n	80022ee <PICC_Select+0x4c8>
		}
		else {
			uidComplete = true;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			uid->sak = responseBuffer[0];
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	72da      	strb	r2, [r3, #11]
	while (!uidComplete) {
 80022ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f47f adac 	bne.w	8001e56 <PICC_Select+0x30>
		}
	} // End of while (!uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80022fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002302:	461a      	mov	r2, r3
 8002304:	0052      	lsls	r2, r2, #1
 8002306:	4413      	add	r3, r2
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	b2da      	uxtb	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 8002312:	2300      	movs	r3, #0
} // End PICC_Select()
 8002314:	4618      	mov	r0, r3
 8002316:	3738      	adds	r7, #56	; 0x38
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <PICC_HaltA>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
StatusCode PICC_HaltA(MFRC *dev) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af04      	add	r7, sp, #16
 8002322:	6078      	str	r0, [r7, #4]
	StatusCode result;
	uint8_t buffer[4];
	
	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
 8002324:	2350      	movs	r3, #80	; 0x50
 8002326:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	727b      	strb	r3, [r7, #9]
	// Calculate CRC_A
	result = PCD_CalculateCRC(dev, buffer, 2, &buffer[2]);
 800232c:	f107 0308 	add.w	r3, r7, #8
 8002330:	3302      	adds	r3, #2
 8002332:	f107 0108 	add.w	r1, r7, #8
 8002336:	2202      	movs	r2, #2
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff faa0 	bl	800187e <PCD_CalculateCRC>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]
	if (result != STATUS_OK) {
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <PICC_HaltA+0x30>
		return result;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	e01b      	b.n	8002384 <PICC_HaltA+0x68>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = PCD_TransceiveData(dev, buffer, sizeof(buffer), NULL, NULL, NULL, 0, false);
 800234c:	f107 0108 	add.w	r1, r7, #8
 8002350:	2300      	movs	r3, #0
 8002352:	9303      	str	r3, [sp, #12]
 8002354:	2300      	movs	r3, #0
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	2300      	movs	r3, #0
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2300      	movs	r3, #0
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	2204      	movs	r2, #4
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fbf4 	bl	8001b52 <PCD_TransceiveData>
 800236a:	4603      	mov	r3, r0
 800236c:	73fb      	strb	r3, [r7, #15]
	if (result == STATUS_TIMEOUT) {
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d101      	bne.n	8002378 <PICC_HaltA+0x5c>
		return STATUS_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e005      	b.n	8002384 <PICC_HaltA+0x68>
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <PICC_HaltA+0x66>
		return STATUS_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <PICC_HaltA+0x68>
	}
	return result;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
} // End PICC_HaltA()
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <PCD_Authenticate>:
 */
StatusCode PCD_Authenticate(MFRC *dev, uint8_t command,		///< PICC_CMD_MF_AUTH_KEY_A or PICC_CMD_MF_AUTH_KEY_B
											uint8_t blockAddr, 	///< The block number. See numbering in the comments in the .h file.
											MIFARE_Key *key,	///< Pointer to the Crypteo1 key to use (6 bytes)
											Uid *uid			///< Pointer to Uid struct. The first 4 bytes of the UID is used.
											) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af06      	add	r7, sp, #24
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	72fb      	strb	r3, [r7, #11]
 800239a:	4613      	mov	r3, r2
 800239c:	72bb      	strb	r3, [r7, #10]
	uint8_t waitIRq = 0x10;		// IdleIRq
 800239e:	2310      	movs	r3, #16
 80023a0:	777b      	strb	r3, [r7, #29]
	
	// Build command buffer
	uint8_t sendData[12];
	sendData[0] = command;
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	743b      	strb	r3, [r7, #16]
	sendData[1] = blockAddr;
 80023a6:	7abb      	ldrb	r3, [r7, #10]
 80023a8:	747b      	strb	r3, [r7, #17]
	for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {	// 6 key bytes
 80023aa:	2300      	movs	r3, #0
 80023ac:	77fb      	strb	r3, [r7, #31]
 80023ae:	e00b      	b.n	80023c8 <PCD_Authenticate+0x3c>
		sendData[2+i] = key->keyByte[i];
 80023b0:	7ffa      	ldrb	r2, [r7, #31]
 80023b2:	7ffb      	ldrb	r3, [r7, #31]
 80023b4:	3302      	adds	r3, #2
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	5c8a      	ldrb	r2, [r1, r2]
 80023ba:	3320      	adds	r3, #32
 80023bc:	443b      	add	r3, r7
 80023be:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {	// 6 key bytes
 80023c2:	7ffb      	ldrb	r3, [r7, #31]
 80023c4:	3301      	adds	r3, #1
 80023c6:	77fb      	strb	r3, [r7, #31]
 80023c8:	7ffb      	ldrb	r3, [r7, #31]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d9f0      	bls.n	80023b0 <PCD_Authenticate+0x24>
	}
	// Use the last uid bytes as specified in http://cache.nxp.com/documents/application_note/AN10927.pdf
	// section 3.2.5 "MIFARE Classic Authentication".
	// The only missed case is the MF1Sxxxx shortcut activation,
	// but it requires cascade tag (CT) uint8_t, that is not part of uid.
	for (uint8_t i = 0; i < 4; i++) {				// The last 4 bytes of the UID
 80023ce:	2300      	movs	r3, #0
 80023d0:	77bb      	strb	r3, [r7, #30]
 80023d2:	e010      	b.n	80023f6 <PCD_Authenticate+0x6a>
		sendData[8+i] = uid->uidByte[i+uid->size-4];
 80023d4:	7fbb      	ldrb	r3, [r7, #30]
 80023d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	1f1a      	subs	r2, r3, #4
 80023de:	7fbb      	ldrb	r3, [r7, #30]
 80023e0:	3308      	adds	r3, #8
 80023e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e4:	440a      	add	r2, r1
 80023e6:	7852      	ldrb	r2, [r2, #1]
 80023e8:	3320      	adds	r3, #32
 80023ea:	443b      	add	r3, r7
 80023ec:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < 4; i++) {				// The last 4 bytes of the UID
 80023f0:	7fbb      	ldrb	r3, [r7, #30]
 80023f2:	3301      	adds	r3, #1
 80023f4:	77bb      	strb	r3, [r7, #30]
 80023f6:	7fbb      	ldrb	r3, [r7, #30]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d9eb      	bls.n	80023d4 <PCD_Authenticate+0x48>
	}
	
	// Start the authentication.
	return PCD_CommunicateWithPICC(dev, PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData), NULL, NULL, NULL, 0, false);
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	7f7a      	ldrb	r2, [r7, #29]
 8002402:	2100      	movs	r1, #0
 8002404:	9105      	str	r1, [sp, #20]
 8002406:	2100      	movs	r1, #0
 8002408:	9104      	str	r1, [sp, #16]
 800240a:	2100      	movs	r1, #0
 800240c:	9103      	str	r1, [sp, #12]
 800240e:	2100      	movs	r1, #0
 8002410:	9102      	str	r1, [sp, #8]
 8002412:	2100      	movs	r1, #0
 8002414:	9101      	str	r1, [sp, #4]
 8002416:	210c      	movs	r1, #12
 8002418:	9100      	str	r1, [sp, #0]
 800241a:	210e      	movs	r1, #14
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fbbb 	bl	8001b98 <PCD_CommunicateWithPICC>
 8002422:	4603      	mov	r3, r0
} // End PCD_Authenticate()
 8002424:	4618      	mov	r0, r3
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <PCD_StopCrypto1>:

/**
 * Used to exit the PCD from its authenticated state.
 * Remember to call this function after communicating with an authenticated PICC - otherwise no new communications can start.
 */
void PCD_StopCrypto1(MFRC *dev) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	// Clear MFCrypto1On bit
	PCD_ClearRegisterBitMask(dev, Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved MFCrypto1On ModemState[2:0]
 8002434:	2208      	movs	r2, #8
 8002436:	2110      	movs	r1, #16
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff f9ff 	bl	800183c <PCD_ClearRegisterBitMask>
} // End PCD_StopCrypto1()
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <MIFARE_Read>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode MIFARE_Read(	MFRC *dev, uint8_t blockAddr, 	///< MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The first page to return data from.
											uint8_t *buffer,		///< The buffer to store the data in
											uint8_t *bufferSize	///< Buffer size, at least 18 bytes. Also number of bytes returned if STATUS_OK.
										) {
 8002446:	b580      	push	{r7, lr}
 8002448:	b08a      	sub	sp, #40	; 0x28
 800244a:	af04      	add	r7, sp, #16
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	460b      	mov	r3, r1
 8002454:	72fb      	strb	r3, [r7, #11]
	StatusCode result;
	
	// Sanity check
	if (buffer == NULL || *bufferSize < 18) {
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <MIFARE_Read+0x1e>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b11      	cmp	r3, #17
 8002462:	d801      	bhi.n	8002468 <MIFARE_Read+0x22>
		return STATUS_NO_ROOM;
 8002464:	2304      	movs	r3, #4
 8002466:	e023      	b.n	80024b0 <MIFARE_Read+0x6a>
	}
	
	// Build command buffer
	buffer[0] = PICC_CMD_MF_READ;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2230      	movs	r2, #48	; 0x30
 800246c:	701a      	strb	r2, [r3, #0]
	buffer[1] = blockAddr;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3301      	adds	r3, #1
 8002472:	7afa      	ldrb	r2, [r7, #11]
 8002474:	701a      	strb	r2, [r3, #0]
	// Calculate CRC_A
	result = PCD_CalculateCRC(dev, buffer, 2, &buffer[2]);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3302      	adds	r3, #2
 800247a:	2202      	movs	r2, #2
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff f9fd 	bl	800187e <PCD_CalculateCRC>
 8002484:	4603      	mov	r3, r0
 8002486:	75fb      	strb	r3, [r7, #23]
	if (result != STATUS_OK) {
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MIFARE_Read+0x4c>
		return result;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	e00e      	b.n	80024b0 <MIFARE_Read+0x6a>
	}
	
	// Transmit the buffer and receive the response, validate CRC_A.
	return PCD_TransceiveData(dev, buffer, 4, buffer, bufferSize, NULL, 0, true);
 8002492:	2301      	movs	r3, #1
 8002494:	9303      	str	r3, [sp, #12]
 8002496:	2300      	movs	r3, #0
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	2300      	movs	r3, #0
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2204      	movs	r2, #4
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff fb52 	bl	8001b52 <PCD_TransceiveData>
 80024ae:	4603      	mov	r3, r0
} // End MIFARE_Read()
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <GetStatusCodeName>:
 * Returns a __FlashStringHelper pointer to a status code name.
 * 
 * @return const __FlashStringHelper *
 */
const char *GetStatusCodeName(MFRC *dev, StatusCode code	///< One of the StatusCode enums.
										) {
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
	switch (code) {
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	2b07      	cmp	r3, #7
 80024c8:	dc16      	bgt.n	80024f8 <GetStatusCodeName+0x40>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db29      	blt.n	8002522 <GetStatusCodeName+0x6a>
 80024ce:	2b07      	cmp	r3, #7
 80024d0:	d827      	bhi.n	8002522 <GetStatusCodeName+0x6a>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <GetStatusCodeName+0x20>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	080024ff 	.word	0x080024ff
 80024dc:	08002503 	.word	0x08002503
 80024e0:	08002507 	.word	0x08002507
 80024e4:	0800250b 	.word	0x0800250b
 80024e8:	0800250f 	.word	0x0800250f
 80024ec:	08002513 	.word	0x08002513
 80024f0:	08002517 	.word	0x08002517
 80024f4:	0800251b 	.word	0x0800251b
 80024f8:	2bff      	cmp	r3, #255	; 0xff
 80024fa:	d010      	beq.n	800251e <GetStatusCodeName+0x66>
 80024fc:	e011      	b.n	8002522 <GetStatusCodeName+0x6a>
		case STATUS_OK:				return "Success.";
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <GetStatusCodeName+0x78>)
 8002500:	e010      	b.n	8002524 <GetStatusCodeName+0x6c>
		case STATUS_ERROR:			return "Error in communication.";
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <GetStatusCodeName+0x7c>)
 8002504:	e00e      	b.n	8002524 <GetStatusCodeName+0x6c>
		case STATUS_COLLISION:		return "Collision detected.";
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <GetStatusCodeName+0x80>)
 8002508:	e00c      	b.n	8002524 <GetStatusCodeName+0x6c>
		case STATUS_TIMEOUT:		return "Timeout in communication.";
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <GetStatusCodeName+0x84>)
 800250c:	e00a      	b.n	8002524 <GetStatusCodeName+0x6c>
		case STATUS_NO_ROOM:		return "A buffer is not big enough.";
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <GetStatusCodeName+0x88>)
 8002510:	e008      	b.n	8002524 <GetStatusCodeName+0x6c>
		case STATUS_INTERNAL_ERROR:	return "Internal error in the code. Should not happen.";
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <GetStatusCodeName+0x8c>)
 8002514:	e006      	b.n	8002524 <GetStatusCodeName+0x6c>
		case STATUS_INVALID:		return "Invalid argument.";
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <GetStatusCodeName+0x90>)
 8002518:	e004      	b.n	8002524 <GetStatusCodeName+0x6c>
		case STATUS_CRC_WRONG:		return "The CRC_A does not match.";
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <GetStatusCodeName+0x94>)
 800251c:	e002      	b.n	8002524 <GetStatusCodeName+0x6c>
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK.";
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <GetStatusCodeName+0x98>)
 8002520:	e000      	b.n	8002524 <GetStatusCodeName+0x6c>
		default:					return "Unknown error";
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <GetStatusCodeName+0x9c>)
	}
} // End GetStatusCodeName()
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	08007c3c 	.word	0x08007c3c
 8002534:	08007c48 	.word	0x08007c48
 8002538:	08007c60 	.word	0x08007c60
 800253c:	08007c74 	.word	0x08007c74
 8002540:	08007c90 	.word	0x08007c90
 8002544:	08007cac 	.word	0x08007cac
 8002548:	08007cdc 	.word	0x08007cdc
 800254c:	08007cf0 	.word	0x08007cf0
 8002550:	08007d0c 	.word	0x08007d0c
 8002554:	08007d30 	.word	0x08007d30

08002558 <PCD_DumpVersionToSerial>:

/**
 * Dumps debug info about the connected PCD to Serial.
 * Shows all known firmware versions
 */
void PCD_DumpVersionToSerial(MFRC *dev) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	// Get the MFRC522 firmware version
	uint8_t v = PCD_ReadRegister(dev, VersionReg);
 8002560:	216e      	movs	r1, #110	; 0x6e
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff f89a 	bl	800169c <PCD_ReadRegister>
 8002568:	4603      	mov	r3, r0
 800256a:	73fb      	strb	r3, [r7, #15]
	SEGGER_RTT_printf(0, "Firmware Version: 0x");
 800256c:	492d      	ldr	r1, [pc, #180]	; (8002624 <PCD_DumpVersionToSerial+0xcc>)
 800256e:	2000      	movs	r0, #0
 8002570:	f005 fa6a 	bl	8007a48 <SEGGER_RTT_printf>
	SEGGER_RTT_printf(0,  "%x", v);
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	461a      	mov	r2, r3
 8002578:	492b      	ldr	r1, [pc, #172]	; (8002628 <PCD_DumpVersionToSerial+0xd0>)
 800257a:	2000      	movs	r0, #0
 800257c:	f005 fa64 	bl	8007a48 <SEGGER_RTT_printf>
	// Lookup which version
	switch(v) {
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b12      	cmp	r3, #18
 8002584:	d036      	beq.n	80025f4 <PCD_DumpVersionToSerial+0x9c>
 8002586:	2b12      	cmp	r3, #18
 8002588:	db39      	blt.n	80025fe <PCD_DumpVersionToSerial+0xa6>
 800258a:	2b92      	cmp	r3, #146	; 0x92
 800258c:	dc37      	bgt.n	80025fe <PCD_DumpVersionToSerial+0xa6>
 800258e:	2b88      	cmp	r3, #136	; 0x88
 8002590:	db35      	blt.n	80025fe <PCD_DumpVersionToSerial+0xa6>
 8002592:	3b88      	subs	r3, #136	; 0x88
 8002594:	2b0a      	cmp	r3, #10
 8002596:	d832      	bhi.n	80025fe <PCD_DumpVersionToSerial+0xa6>
 8002598:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <PCD_DumpVersionToSerial+0x48>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	080025cd 	.word	0x080025cd
 80025a4:	080025ff 	.word	0x080025ff
 80025a8:	080025ff 	.word	0x080025ff
 80025ac:	080025ff 	.word	0x080025ff
 80025b0:	080025ff 	.word	0x080025ff
 80025b4:	080025ff 	.word	0x080025ff
 80025b8:	080025ff 	.word	0x080025ff
 80025bc:	080025ff 	.word	0x080025ff
 80025c0:	080025d7 	.word	0x080025d7
 80025c4:	080025e1 	.word	0x080025e1
 80025c8:	080025eb 	.word	0x080025eb
		case 0x88: SEGGER_RTT_printf(0, " = (clone)");  break;
 80025cc:	4917      	ldr	r1, [pc, #92]	; (800262c <PCD_DumpVersionToSerial+0xd4>)
 80025ce:	2000      	movs	r0, #0
 80025d0:	f005 fa3a 	bl	8007a48 <SEGGER_RTT_printf>
 80025d4:	e017      	b.n	8002606 <PCD_DumpVersionToSerial+0xae>
		case 0x90: SEGGER_RTT_printf(0, " = v0.0");     break;
 80025d6:	4916      	ldr	r1, [pc, #88]	; (8002630 <PCD_DumpVersionToSerial+0xd8>)
 80025d8:	2000      	movs	r0, #0
 80025da:	f005 fa35 	bl	8007a48 <SEGGER_RTT_printf>
 80025de:	e012      	b.n	8002606 <PCD_DumpVersionToSerial+0xae>
		case 0x91: SEGGER_RTT_printf(0, " = v1.0");     break;
 80025e0:	4914      	ldr	r1, [pc, #80]	; (8002634 <PCD_DumpVersionToSerial+0xdc>)
 80025e2:	2000      	movs	r0, #0
 80025e4:	f005 fa30 	bl	8007a48 <SEGGER_RTT_printf>
 80025e8:	e00d      	b.n	8002606 <PCD_DumpVersionToSerial+0xae>
		case 0x92: SEGGER_RTT_printf(0, " = v2.0");     break;
 80025ea:	4913      	ldr	r1, [pc, #76]	; (8002638 <PCD_DumpVersionToSerial+0xe0>)
 80025ec:	2000      	movs	r0, #0
 80025ee:	f005 fa2b 	bl	8007a48 <SEGGER_RTT_printf>
 80025f2:	e008      	b.n	8002606 <PCD_DumpVersionToSerial+0xae>
		case 0x12: SEGGER_RTT_printf(0, " = counterfeit chip");     break;
 80025f4:	4911      	ldr	r1, [pc, #68]	; (800263c <PCD_DumpVersionToSerial+0xe4>)
 80025f6:	2000      	movs	r0, #0
 80025f8:	f005 fa26 	bl	8007a48 <SEGGER_RTT_printf>
 80025fc:	e003      	b.n	8002606 <PCD_DumpVersionToSerial+0xae>
		default:   SEGGER_RTT_printf(0, " = (unknown)");
 80025fe:	4910      	ldr	r1, [pc, #64]	; (8002640 <PCD_DumpVersionToSerial+0xe8>)
 8002600:	2000      	movs	r0, #0
 8002602:	f005 fa21 	bl	8007a48 <SEGGER_RTT_printf>
	}
	// When 0x00 or 0xFF is returned, communication probably failed
	if ((v == 0x00) || (v == 0xFF))
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <PCD_DumpVersionToSerial+0xba>
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2bff      	cmp	r3, #255	; 0xff
 8002610:	d103      	bne.n	800261a <PCD_DumpVersionToSerial+0xc2>
		SEGGER_RTT_printf(0, "WARNING: Communication failure, is the MFRC522 properly connected?");
 8002612:	490c      	ldr	r1, [pc, #48]	; (8002644 <PCD_DumpVersionToSerial+0xec>)
 8002614:	2000      	movs	r0, #0
 8002616:	f005 fa17 	bl	8007a48 <SEGGER_RTT_printf>
} // End PCD_DumpVersionToSerial()
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	08007e40 	.word	0x08007e40
 8002628:	08007e58 	.word	0x08007e58
 800262c:	08007e5c 	.word	0x08007e5c
 8002630:	08007e68 	.word	0x08007e68
 8002634:	08007e70 	.word	0x08007e70
 8002638:	08007e78 	.word	0x08007e78
 800263c:	08007e80 	.word	0x08007e80
 8002640:	08007e94 	.word	0x08007e94
 8002644:	08007ea4 	.word	0x08007ea4

08002648 <PICC_IsNewCardPresent>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool PICC_IsNewCardPresent(MFRC *dev) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	uint8_t bufferATQA[2];
	uint8_t bufferSize = sizeof(bufferATQA);
 8002650:	2302      	movs	r3, #2
 8002652:	72fb      	strb	r3, [r7, #11]

	// Reset baud rates
	PCD_WriteRegister(dev, TxModeReg, 0x00);
 8002654:	2200      	movs	r2, #0
 8002656:	2124      	movs	r1, #36	; 0x24
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe ffc0 	bl	80015de <PCD_WriteRegister>
	PCD_WriteRegister(dev, RxModeReg, 0x00);
 800265e:	2200      	movs	r2, #0
 8002660:	2126      	movs	r1, #38	; 0x26
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe ffbb 	bl	80015de <PCD_WriteRegister>
	// Reset ModWidthReg
	PCD_WriteRegister(dev, ModWidthReg, 0x26);
 8002668:	2226      	movs	r2, #38	; 0x26
 800266a:	2148      	movs	r1, #72	; 0x48
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7fe ffb6 	bl	80015de <PCD_WriteRegister>

	StatusCode result = PICC_RequestA(dev, bufferATQA, &bufferSize);
 8002672:	f107 020b 	add.w	r2, r7, #11
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fb84 	bl	8001d8a <PICC_RequestA>
 8002682:	4603      	mov	r3, r0
 8002684:	73fb      	strb	r3, [r7, #15]
	return (result == STATUS_OK || result == STATUS_COLLISION);
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <PICC_IsNewCardPresent+0x4a>
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d101      	bne.n	8002696 <PICC_IsNewCardPresent+0x4e>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <PICC_IsNewCardPresent+0x50>
 8002696:	2300      	movs	r3, #0
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
} // End PICC_IsNewCardPresent()
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <PICC_ReadCardSerial>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool PICC_ReadCardSerial(MFRC *dev) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	StatusCode result = PICC_Select(dev, &dev->uid, 0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3314      	adds	r3, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff fbb4 	bl	8001e26 <PICC_Select>
 80026be:	4603      	mov	r3, r0
 80026c0:	73fb      	strb	r3, [r7, #15]

	SEGGER_RTT_printf(0, "PICC_Select return value: %d", result);
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4907      	ldr	r1, [pc, #28]	; (80026e4 <PICC_ReadCardSerial+0x3c>)
 80026c8:	2000      	movs	r0, #0
 80026ca:	f005 f9bd 	bl	8007a48 <SEGGER_RTT_printf>
	return (result == STATUS_OK);
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
} // End 
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	080082c4 	.word	0x080082c4

080026e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_Init+0x40>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <HAL_Init+0x40>)
 80026f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_Init+0x40>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <HAL_Init+0x40>)
 80026fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_Init+0x40>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_Init+0x40>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002710:	2003      	movs	r0, #3
 8002712:	f000 f94f 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002716:	2000      	movs	r0, #0
 8002718:	f000 f808 	bl	800272c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800271c:	f7fe fbc0 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023c00 	.word	0x40023c00

0800272c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_InitTick+0x54>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_InitTick+0x58>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002742:	fbb3 f3f1 	udiv	r3, r3, r1
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f967 	bl	8002a1e <HAL_SYSTICK_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e00e      	b.n	8002778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d80a      	bhi.n	8002776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002760:	2200      	movs	r2, #0
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f000 f92f 	bl	80029ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800276c:	4a06      	ldr	r2, [pc, #24]	; (8002788 <HAL_InitTick+0x5c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000008 	.word	0x20000008
 8002784:	20000010 	.word	0x20000010
 8002788:	2000000c 	.word	0x2000000c

0800278c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_IncTick+0x20>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_IncTick+0x24>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_IncTick+0x24>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000010 	.word	0x20000010
 80027b0:	20000974 	.word	0x20000974

080027b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_GetTick+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000974 	.word	0x20000974

080027cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff ffee 	bl	80027b4 <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d005      	beq.n	80027f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_Delay+0x44>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027f2:	bf00      	nop
 80027f4:	f7ff ffde 	bl	80027b4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8f7      	bhi.n	80027f4 <HAL_Delay+0x28>
  {
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000010 	.word	0x20000010

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	2b00      	cmp	r3, #0
 8002888:	db0b      	blt.n	80028a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4907      	ldr	r1, [pc, #28]	; (80028b0 <__NVIC_EnableIRQ+0x38>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2001      	movs	r0, #1
 800289a:	fa00 f202 	lsl.w	r2, r0, r2
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	; (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	; (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
         );
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f7ff ff8e 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff29 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff3e 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff8e 	bl	8002908 <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5d 	bl	80028b4 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff31 	bl	8002878 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa2 	bl	8002970 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff feb6 	bl	80027b4 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e099      	b.n	8002b88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a74:	e00f      	b.n	8002a96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a76:	f7ff fe9d 	bl	80027b4 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d908      	bls.n	8002a96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e078      	b.n	8002b88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e8      	bne.n	8002a76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <HAL_DMA_Init+0x158>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d107      	bne.n	8002b00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4313      	orrs	r3, r2
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0307 	bic.w	r3, r3, #7
 8002b16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d117      	bne.n	8002b5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00e      	beq.n	8002b5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f9e9 	bl	8002f14 <DMA_CheckFifoParam>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b56:	2301      	movs	r3, #1
 8002b58:	e016      	b.n	8002b88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f9a0 	bl	8002ea8 <DMA_CalcBaseAndBitshift>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	223f      	movs	r2, #63	; 0x3f
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	f010803f 	.word	0xf010803f

08002b94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ba0:	4b8e      	ldr	r3, [pc, #568]	; (8002ddc <HAL_DMA_IRQHandler+0x248>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a8e      	ldr	r2, [pc, #568]	; (8002de0 <HAL_DMA_IRQHandler+0x24c>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0a9b      	lsrs	r3, r3, #10
 8002bac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01a      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0204 	bic.w	r2, r2, #4
 8002be6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2208      	movs	r2, #8
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	2201      	movs	r2, #1
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d012      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	2201      	movs	r2, #1
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f043 0202 	orr.w	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	2204      	movs	r2, #4
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	f043 0204 	orr.w	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	2210      	movs	r2, #16
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d043      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d03c      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	2210      	movs	r2, #16
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d018      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d108      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d024      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	4798      	blx	r3
 8002cc2:	e01f      	b.n	8002d04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01b      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
 8002cd4:	e016      	b.n	8002d04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0208 	bic.w	r2, r2, #8
 8002cf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	2220      	movs	r2, #32
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 808f 	beq.w	8002e34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8087 	beq.w	8002e34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b05      	cmp	r3, #5
 8002d3c:	d136      	bne.n	8002dac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0216 	bic.w	r2, r2, #22
 8002d4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <HAL_DMA_IRQHandler+0x1da>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0208 	bic.w	r2, r2, #8
 8002d7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	223f      	movs	r2, #63	; 0x3f
 8002d84:	409a      	lsls	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d07e      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
        }
        return;
 8002daa:	e079      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01d      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10d      	bne.n	8002de4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d031      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4798      	blx	r3
 8002dd8:	e02c      	b.n	8002e34 <HAL_DMA_IRQHandler+0x2a0>
 8002dda:	bf00      	nop
 8002ddc:	20000008 	.word	0x20000008
 8002de0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d023      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
 8002df4:	e01e      	b.n	8002e34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10f      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0210 	bic.w	r2, r2, #16
 8002e12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d032      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d022      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2205      	movs	r2, #5
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	3301      	adds	r3, #1
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d307      	bcc.n	8002e7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f2      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x2cc>
 8002e7a:	e000      	b.n	8002e7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
 8002e9e:	e000      	b.n	8002ea2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ea0:	bf00      	nop
    }
  }
}
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	3b10      	subs	r3, #16
 8002eb8:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <DMA_CalcBaseAndBitshift+0x64>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <DMA_CalcBaseAndBitshift+0x68>)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d909      	bls.n	8002eea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ede:	f023 0303 	bic.w	r3, r3, #3
 8002ee2:	1d1a      	adds	r2, r3, #4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ee8:	e007      	b.n	8002efa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	aaaaaaab 	.word	0xaaaaaaab
 8002f10:	08008308 	.word	0x08008308

08002f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11f      	bne.n	8002f6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d856      	bhi.n	8002fe2 <DMA_CheckFifoParam+0xce>
 8002f34:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <DMA_CheckFifoParam+0x28>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f5f 	.word	0x08002f5f
 8002f44:	08002f4d 	.word	0x08002f4d
 8002f48:	08002fe3 	.word	0x08002fe3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d046      	beq.n	8002fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5c:	e043      	b.n	8002fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f66:	d140      	bne.n	8002fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6c:	e03d      	b.n	8002fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f76:	d121      	bne.n	8002fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d837      	bhi.n	8002fee <DMA_CheckFifoParam+0xda>
 8002f7e:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <DMA_CheckFifoParam+0x70>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002f9b 	.word	0x08002f9b
 8002f8c:	08002f95 	.word	0x08002f95
 8002f90:	08002fad 	.word	0x08002fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e030      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d025      	beq.n	8002ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002faa:	e022      	b.n	8002ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fb4:	d11f      	bne.n	8002ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fba:	e01c      	b.n	8002ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d903      	bls.n	8002fca <DMA_CheckFifoParam+0xb6>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d003      	beq.n	8002fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fc8:	e018      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8002fce:	e015      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e00b      	b.n	8002ffa <DMA_CheckFifoParam+0xe6>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e00a      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e008      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
 8002fec:	e006      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e004      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06c      	b.n	80030f8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2223      	movs	r2, #35	; 0x23
 800302c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd ff5d 	bl	8000ef0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <HAL_ETH_Init+0xf4>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4a30      	ldr	r2, [pc, #192]	; (8003100 <HAL_ETH_Init+0xf4>)
 8003040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003044:	6453      	str	r3, [r2, #68]	; 0x44
 8003046:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <HAL_ETH_Init+0xf4>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003052:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <HAL_ETH_Init+0xf8>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <HAL_ETH_Init+0xf8>)
 8003058:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800305c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800305e:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_ETH_Init+0xf8>)
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4927      	ldr	r1, [pc, #156]	; (8003104 <HAL_ETH_Init+0xf8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_ETH_Init+0xf8>)
 800306e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003086:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003088:	f7ff fb94 	bl	80027b4 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800308e:	e011      	b.n	80030b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003090:	f7ff fb90 	bl	80027b4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800309e:	d909      	bls.n	80030b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2204      	movs	r2, #4
 80030a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	22e0      	movs	r2, #224	; 0xe0
 80030ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e021      	b.n	80030f8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e4      	bne.n	8003090 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa4c 	bl	8003564 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 faf3 	bl	80036b8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fb49 	bl	800376a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	461a      	mov	r2, r3
 80030de:	2100      	movs	r1, #0
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fab1 	bl	8003648 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2210      	movs	r2, #16
 80030f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	40013800 	.word	0x40013800

08003108 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	2b40      	cmp	r3, #64	; 0x40
 8003120:	d112      	bne.n	8003148 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d109      	bne.n	8003148 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800313c:	461a      	mov	r2, r3
 800313e:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_ETH_IRQHandler+0x178>)
 8003140:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8ac 	bl	80032a0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d113      	bne.n	8003182 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10a      	bne.n	8003182 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003174:	461a      	mov	r2, r3
 8003176:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800317a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f885 	bl	800328c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003194:	d14c      	bne.n	8003230 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a8:	d142      	bne.n	8003230 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f043 0208 	orr.w	r2, r3, #8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d11a      	bne.n	8003204 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_ETH_IRQHandler+0x17c>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80031f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031f8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	22e0      	movs	r2, #224	; 0xe0
 80031fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003202:	e012      	b.n	800322a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	f248 6380 	movw	r3, #34432	; 0x8680
 8003212:	4013      	ands	r3, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003222:	461a      	mov	r2, r3
 8003224:	f248 6380 	movw	r3, #34432	; 0x8680
 8003228:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f842 	bl	80032b4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b08      	cmp	r3, #8
 800323c:	d10e      	bne.n	800325c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f83a 	bl	80032c8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_ETH_IRQHandler+0x180>)
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d006      	beq.n	8003276 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <HAL_ETH_IRQHandler+0x180>)
 800326a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800326e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f833 	bl	80032dc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	00010040 	.word	0x00010040
 8003284:	007e2000 	.word	0x007e2000
 8003288:	40013c00 	.word	0x40013c00

0800328c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4b51      	ldr	r3, [pc, #324]	; (800344c <ETH_SetMACConfig+0x15c>)
 8003306:	4013      	ands	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	7c1b      	ldrb	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <ETH_SetMACConfig+0x28>
 8003312:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003316:	e000      	b.n	800331a <ETH_SetMACConfig+0x2a>
 8003318:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	7c5b      	ldrb	r3, [r3, #17]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <ETH_SetMACConfig+0x38>
 8003322:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003326:	e000      	b.n	800332a <ETH_SetMACConfig+0x3a>
 8003328:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800332a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003330:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	7fdb      	ldrb	r3, [r3, #31]
 8003336:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003338:	431a      	orrs	r2, r3
                        macconf->Speed |
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800333e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	7f92      	ldrb	r2, [r2, #30]
 8003344:	2a00      	cmp	r2, #0
 8003346:	d102      	bne.n	800334e <ETH_SetMACConfig+0x5e>
 8003348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800334c:	e000      	b.n	8003350 <ETH_SetMACConfig+0x60>
 800334e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003350:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	7f1b      	ldrb	r3, [r3, #28]
 8003356:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003358:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800335e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	791b      	ldrb	r3, [r3, #4]
 8003364:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003366:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800336e:	2a00      	cmp	r2, #0
 8003370:	d102      	bne.n	8003378 <ETH_SetMACConfig+0x88>
 8003372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003376:	e000      	b.n	800337a <ETH_SetMACConfig+0x8a>
 8003378:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800337a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	7bdb      	ldrb	r3, [r3, #15]
 8003380:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003382:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003388:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003390:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003392:	4313      	orrs	r3, r2
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f7ff fa0e 	bl	80027cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80033d6:	2a00      	cmp	r2, #0
 80033d8:	d101      	bne.n	80033de <ETH_SetMACConfig+0xee>
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	e000      	b.n	80033e0 <ETH_SetMACConfig+0xf0>
 80033de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80033ee:	2a01      	cmp	r2, #1
 80033f0:	d101      	bne.n	80033f6 <ETH_SetMACConfig+0x106>
 80033f2:	2208      	movs	r2, #8
 80033f4:	e000      	b.n	80033f8 <ETH_SetMACConfig+0x108>
 80033f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80033f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003400:	2a01      	cmp	r2, #1
 8003402:	d101      	bne.n	8003408 <ETH_SetMACConfig+0x118>
 8003404:	2204      	movs	r2, #4
 8003406:	e000      	b.n	800340a <ETH_SetMACConfig+0x11a>
 8003408:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800340a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003412:	2a01      	cmp	r2, #1
 8003414:	d101      	bne.n	800341a <ETH_SetMACConfig+0x12a>
 8003416:	2202      	movs	r2, #2
 8003418:	e000      	b.n	800341c <ETH_SetMACConfig+0x12c>
 800341a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800341c:	4313      	orrs	r3, r2
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003434:	2001      	movs	r0, #1
 8003436:	f7ff f9c9 	bl	80027cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	ff20810f 	.word	0xff20810f

08003450 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <ETH_SetDMAConfig+0x110>)
 800346a:	4013      	ands	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	7b1b      	ldrb	r3, [r3, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <ETH_SetDMAConfig+0x2c>
 8003476:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800347a:	e000      	b.n	800347e <ETH_SetDMAConfig+0x2e>
 800347c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	7b5b      	ldrb	r3, [r3, #13]
 8003482:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003484:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	7f52      	ldrb	r2, [r2, #29]
 800348a:	2a00      	cmp	r2, #0
 800348c:	d102      	bne.n	8003494 <ETH_SetDMAConfig+0x44>
 800348e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003492:	e000      	b.n	8003496 <ETH_SetDMAConfig+0x46>
 8003494:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003496:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	7b9b      	ldrb	r3, [r3, #14]
 800349c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800349e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80034a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	7f1b      	ldrb	r3, [r3, #28]
 80034aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80034ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	7f9b      	ldrb	r3, [r3, #30]
 80034b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80034b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80034ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034c4:	4313      	orrs	r3, r2
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d4:	461a      	mov	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034e6:	2001      	movs	r0, #1
 80034e8:	f7ff f970 	bl	80027cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f4:	461a      	mov	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	791b      	ldrb	r3, [r3, #4]
 80034fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003504:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800350a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003510:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003518:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800351a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003522:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003528:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003536:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003544:	2001      	movs	r0, #1
 8003546:	f7ff f941 	bl	80027cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	f8de3f23 	.word	0xf8de3f23

08003564 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b0a6      	sub	sp, #152	; 0x98
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003578:	2300      	movs	r3, #0
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800357c:	2300      	movs	r3, #0
 800357e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80035a0:	2300      	movs	r3, #0
 80035a2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80035cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80035d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fe86 	bl	80032f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003606:	2300      	movs	r3, #0
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003610:	2301      	movs	r3, #1
 8003612:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003618:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800361a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800361e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003624:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800362c:	2300      	movs	r3, #0
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003634:	f107 0308 	add.w	r3, r7, #8
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ff08 	bl	8003450 <ETH_SetDMAConfig>
}
 8003640:	bf00      	nop
 8003642:	3798      	adds	r7, #152	; 0x98
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3305      	adds	r3, #5
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	3204      	adds	r2, #4
 8003660:	7812      	ldrb	r2, [r2, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <ETH_MACAddressConfig+0x68>)
 800366a:	4413      	add	r3, r2
 800366c:	461a      	mov	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3303      	adds	r3, #3
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	061a      	lsls	r2, r3, #24
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3302      	adds	r3, #2
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3301      	adds	r3, #1
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	4313      	orrs	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	7812      	ldrb	r2, [r2, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <ETH_MACAddressConfig+0x6c>)
 800369a:	4413      	add	r3, r2
 800369c:	461a      	mov	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	6013      	str	r3, [r2, #0]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40028040 	.word	0x40028040
 80036b4:	40028044 	.word	0x40028044

080036b8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e03e      	b.n	8003744 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68d9      	ldr	r1, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2200      	movs	r2, #0
 80036e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2200      	movs	r2, #0
 80036ee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	3206      	adds	r2, #6
 80036f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d80c      	bhi.n	8003728 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68d9      	ldr	r1, [r3, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	e004      	b.n	8003732 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3301      	adds	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d9bd      	bls.n	80036c6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375c:	611a      	str	r2, [r3, #16]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e046      	b.n	8003806 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6919      	ldr	r1, [r3, #16]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2200      	movs	r2, #0
 80037a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2200      	movs	r2, #0
 80037a6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2200      	movs	r2, #0
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037b4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80037bc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	3212      	adds	r2, #18
 80037d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d80c      	bhi.n	80037f6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6919      	ldr	r1, [r3, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	440b      	add	r3, r1
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	60da      	str	r2, [r3, #12]
 80037f4:	e004      	b.n	8003800 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3301      	adds	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d9b5      	bls.n	8003778 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003836:	60da      	str	r2, [r3, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e177      	b.n	8003b50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003860:	2201      	movs	r2, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	f040 8166 	bne.w	8003b4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d005      	beq.n	8003896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003892:	2b02      	cmp	r3, #2
 8003894:	d130      	bne.n	80038f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038cc:	2201      	movs	r2, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 0201 	and.w	r2, r3, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b03      	cmp	r3, #3
 8003902:	d017      	beq.n	8003934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d123      	bne.n	8003988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	08da      	lsrs	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3208      	adds	r2, #8
 8003948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	220f      	movs	r2, #15
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	08da      	lsrs	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3208      	adds	r2, #8
 8003982:	69b9      	ldr	r1, [r7, #24]
 8003984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	2203      	movs	r2, #3
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80c0 	beq.w	8003b4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	4b66      	ldr	r3, [pc, #408]	; (8003b68 <HAL_GPIO_Init+0x324>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	4a65      	ldr	r2, [pc, #404]	; (8003b68 <HAL_GPIO_Init+0x324>)
 80039d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d8:	6453      	str	r3, [r2, #68]	; 0x44
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <HAL_GPIO_Init+0x324>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e6:	4a61      	ldr	r2, [pc, #388]	; (8003b6c <HAL_GPIO_Init+0x328>)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	3302      	adds	r3, #2
 80039ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	220f      	movs	r2, #15
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a58      	ldr	r2, [pc, #352]	; (8003b70 <HAL_GPIO_Init+0x32c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d037      	beq.n	8003a82 <HAL_GPIO_Init+0x23e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a57      	ldr	r2, [pc, #348]	; (8003b74 <HAL_GPIO_Init+0x330>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d031      	beq.n	8003a7e <HAL_GPIO_Init+0x23a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a56      	ldr	r2, [pc, #344]	; (8003b78 <HAL_GPIO_Init+0x334>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d02b      	beq.n	8003a7a <HAL_GPIO_Init+0x236>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a55      	ldr	r2, [pc, #340]	; (8003b7c <HAL_GPIO_Init+0x338>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d025      	beq.n	8003a76 <HAL_GPIO_Init+0x232>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a54      	ldr	r2, [pc, #336]	; (8003b80 <HAL_GPIO_Init+0x33c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01f      	beq.n	8003a72 <HAL_GPIO_Init+0x22e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a53      	ldr	r2, [pc, #332]	; (8003b84 <HAL_GPIO_Init+0x340>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d019      	beq.n	8003a6e <HAL_GPIO_Init+0x22a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_GPIO_Init+0x344>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_GPIO_Init+0x226>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a51      	ldr	r2, [pc, #324]	; (8003b8c <HAL_GPIO_Init+0x348>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00d      	beq.n	8003a66 <HAL_GPIO_Init+0x222>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a50      	ldr	r2, [pc, #320]	; (8003b90 <HAL_GPIO_Init+0x34c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <HAL_GPIO_Init+0x21e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4f      	ldr	r2, [pc, #316]	; (8003b94 <HAL_GPIO_Init+0x350>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_GPIO_Init+0x21a>
 8003a5a:	2309      	movs	r3, #9
 8003a5c:	e012      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a5e:	230a      	movs	r3, #10
 8003a60:	e010      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a62:	2308      	movs	r3, #8
 8003a64:	e00e      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a66:	2307      	movs	r3, #7
 8003a68:	e00c      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a6a:	2306      	movs	r3, #6
 8003a6c:	e00a      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a6e:	2305      	movs	r3, #5
 8003a70:	e008      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a72:	2304      	movs	r3, #4
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e004      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_Init+0x240>
 8003a82:	2300      	movs	r3, #0
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	f002 0203 	and.w	r2, r2, #3
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a94:	4935      	ldr	r1, [pc, #212]	; (8003b6c <HAL_GPIO_Init+0x328>)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <HAL_GPIO_Init+0x354>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac6:	4a34      	ldr	r2, [pc, #208]	; (8003b98 <HAL_GPIO_Init+0x354>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003acc:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <HAL_GPIO_Init+0x354>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af0:	4a29      	ldr	r2, [pc, #164]	; (8003b98 <HAL_GPIO_Init+0x354>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003af6:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <HAL_GPIO_Init+0x354>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b1a:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <HAL_GPIO_Init+0x354>)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b20:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_GPIO_Init+0x354>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <HAL_GPIO_Init+0x354>)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b0f      	cmp	r3, #15
 8003b54:	f67f ae84 	bls.w	8003860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3724      	adds	r7, #36	; 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	40020000 	.word	0x40020000
 8003b74:	40020400 	.word	0x40020400
 8003b78:	40020800 	.word	0x40020800
 8003b7c:	40020c00 	.word	0x40020c00
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40021400 	.word	0x40021400
 8003b88:	40021800 	.word	0x40021800
 8003b8c:	40021c00 	.word	0x40021c00
 8003b90:	40022000 	.word	0x40022000
 8003b94:	40022400 	.word	0x40022400
 8003b98:	40013c00 	.word	0x40013c00

08003b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e001      	b.n	8003bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bdc:	787b      	ldrb	r3, [r7, #1]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003be8:	e003      	b.n	8003bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	041a      	lsls	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c16:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd f8e6 	bl	8000df0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40013c00 	.word	0x40013c00

08003c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e12b      	b.n	8003e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fa18 	bl	800108c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	; 0x24
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c94:	f000 ff18 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 8003c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4a81      	ldr	r2, [pc, #516]	; (8003ea4 <HAL_I2C_Init+0x274>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d807      	bhi.n	8003cb4 <HAL_I2C_Init+0x84>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a80      	ldr	r2, [pc, #512]	; (8003ea8 <HAL_I2C_Init+0x278>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	bf94      	ite	ls
 8003cac:	2301      	movls	r3, #1
 8003cae:	2300      	movhi	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e006      	b.n	8003cc2 <HAL_I2C_Init+0x92>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4a7d      	ldr	r2, [pc, #500]	; (8003eac <HAL_I2C_Init+0x27c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	bf94      	ite	ls
 8003cbc:	2301      	movls	r3, #1
 8003cbe:	2300      	movhi	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0e7      	b.n	8003e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a78      	ldr	r2, [pc, #480]	; (8003eb0 <HAL_I2C_Init+0x280>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0c9b      	lsrs	r3, r3, #18
 8003cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a6a      	ldr	r2, [pc, #424]	; (8003ea4 <HAL_I2C_Init+0x274>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d802      	bhi.n	8003d04 <HAL_I2C_Init+0xd4>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3301      	adds	r3, #1
 8003d02:	e009      	b.n	8003d18 <HAL_I2C_Init+0xe8>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	4a69      	ldr	r2, [pc, #420]	; (8003eb4 <HAL_I2C_Init+0x284>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	3301      	adds	r3, #1
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	495c      	ldr	r1, [pc, #368]	; (8003ea4 <HAL_I2C_Init+0x274>)
 8003d34:	428b      	cmp	r3, r1
 8003d36:	d819      	bhi.n	8003d6c <HAL_I2C_Init+0x13c>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1e59      	subs	r1, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d46:	1c59      	adds	r1, r3, #1
 8003d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_I2C_Init+0x138>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1e59      	subs	r1, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d60:	3301      	adds	r3, #1
 8003d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d66:	e051      	b.n	8003e0c <HAL_I2C_Init+0x1dc>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	e04f      	b.n	8003e0c <HAL_I2C_Init+0x1dc>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d111      	bne.n	8003d98 <HAL_I2C_Init+0x168>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e58      	subs	r0, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	440b      	add	r3, r1
 8003d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	e012      	b.n	8003dbe <HAL_I2C_Init+0x18e>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1e58      	subs	r0, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	0099      	lsls	r1, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Init+0x196>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e022      	b.n	8003e0c <HAL_I2C_Init+0x1dc>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10e      	bne.n	8003dec <HAL_I2C_Init+0x1bc>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1e58      	subs	r0, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6859      	ldr	r1, [r3, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	440b      	add	r3, r1
 8003ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de0:	3301      	adds	r3, #1
 8003de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dea:	e00f      	b.n	8003e0c <HAL_I2C_Init+0x1dc>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1e58      	subs	r0, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	0099      	lsls	r1, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	6809      	ldr	r1, [r1, #0]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6911      	ldr	r1, [r2, #16]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68d2      	ldr	r2, [r2, #12]
 8003e46:	4311      	orrs	r1, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	000186a0 	.word	0x000186a0
 8003ea8:	001e847f 	.word	0x001e847f
 8003eac:	003d08ff 	.word	0x003d08ff
 8003eb0:	431bde83 	.word	0x431bde83
 8003eb4:	10624dd3 	.word	0x10624dd3

08003eb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d129      	bne.n	8003f22 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2224      	movs	r2, #36	; 0x24
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0210 	bic.w	r2, r2, #16
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d12a      	bne.n	8003fa0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2224      	movs	r2, #36	; 0x24
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f6a:	89fb      	ldrh	r3, [r7, #14]
 8003f6c:	f023 030f 	bic.w	r3, r3, #15
 8003f70:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	89fb      	ldrh	r3, [r7, #14]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	89fa      	ldrh	r2, [r7, #14]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb0:	b08f      	sub	sp, #60	; 0x3c
 8003fb2:	af0a      	add	r7, sp, #40	; 0x28
 8003fb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e10f      	b.n	80041e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd f9fa 	bl	80013d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f002 fd83 	bl	8006b0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	687e      	ldr	r6, [r7, #4]
 800400c:	466d      	mov	r5, sp
 800400e:	f106 0410 	add.w	r4, r6, #16
 8004012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800401a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800401e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004022:	1d33      	adds	r3, r6, #4
 8004024:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004026:	6838      	ldr	r0, [r7, #0]
 8004028:	f002 fd0e 	bl	8006a48 <USB_CoreInit>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0d0      	b.n	80041e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f002 fd71 	bl	8006b2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
 800404e:	e04a      	b.n	80040e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	333d      	adds	r3, #61	; 0x3d
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004064:	7bfa      	ldrb	r2, [r7, #15]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	333c      	adds	r3, #60	; 0x3c
 8004074:	7bfa      	ldrb	r2, [r7, #15]
 8004076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	b298      	uxth	r0, r3
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	3344      	adds	r3, #68	; 0x44
 800408c:	4602      	mov	r2, r0
 800408e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3340      	adds	r3, #64	; 0x40
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	3348      	adds	r3, #72	; 0x48
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	334c      	adds	r3, #76	; 0x4c
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	3354      	adds	r3, #84	; 0x54
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	3301      	adds	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d3af      	bcc.n	8004050 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	e044      	b.n	8004180 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800411e:	7bfa      	ldrb	r2, [r7, #15]
 8004120:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800414e:	7bfa      	ldrb	r2, [r7, #15]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	3301      	adds	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	429a      	cmp	r2, r3
 8004188:	d3b5      	bcc.n	80040f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	687e      	ldr	r6, [r7, #4]
 8004192:	466d      	mov	r5, sp
 8004194:	f106 0410 	add.w	r4, r6, #16
 8004198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800419a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800419c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800419e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80041a8:	1d33      	adds	r3, r6, #4
 80041aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ac:	6838      	ldr	r0, [r7, #0]
 80041ae:	f002 fd09 	bl	8006bc4 <USB_DevInit>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e00d      	b.n	80041e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f002 fed4 	bl	8006f86 <USB_DevDisconnect>

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e267      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d075      	beq.n	80042f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004206:	4b88      	ldr	r3, [pc, #544]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b04      	cmp	r3, #4
 8004210:	d00c      	beq.n	800422c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004212:	4b85      	ldr	r3, [pc, #532]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421a:	2b08      	cmp	r3, #8
 800421c:	d112      	bne.n	8004244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421e:	4b82      	ldr	r3, [pc, #520]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422a:	d10b      	bne.n	8004244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	4b7e      	ldr	r3, [pc, #504]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d05b      	beq.n	80042f0 <HAL_RCC_OscConfig+0x108>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d157      	bne.n	80042f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e242      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x74>
 800424e:	4b76      	ldr	r3, [pc, #472]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a75      	ldr	r2, [pc, #468]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e01d      	b.n	8004298 <HAL_RCC_OscConfig+0xb0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x98>
 8004266:	4b70      	ldr	r3, [pc, #448]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6f      	ldr	r2, [pc, #444]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800426c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b6d      	ldr	r3, [pc, #436]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6c      	ldr	r2, [pc, #432]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e00b      	b.n	8004298 <HAL_RCC_OscConfig+0xb0>
 8004280:	4b69      	ldr	r3, [pc, #420]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a68      	ldr	r2, [pc, #416]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b66      	ldr	r3, [pc, #408]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a65      	ldr	r2, [pc, #404]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fe fa88 	bl	80027b4 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fe fa84 	bl	80027b4 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e207      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0xc0>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fe fa74 	bl	80027b4 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d0:	f7fe fa70 	bl	80027b4 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e1f3      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	4b51      	ldr	r3, [pc, #324]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0xe8>
 80042ee:	e000      	b.n	80042f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d063      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042fe:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004312:	2b08      	cmp	r3, #8
 8004314:	d11c      	bne.n	8004350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004316:	4b44      	ldr	r3, [pc, #272]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d116      	bne.n	8004350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_RCC_OscConfig+0x152>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d001      	beq.n	800433a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e1c7      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433a:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4937      	ldr	r1, [pc, #220]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434e:	e03a      	b.n	80043c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d020      	beq.n	800439a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004358:	4b34      	ldr	r3, [pc, #208]	; (800442c <HAL_RCC_OscConfig+0x244>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fe fa29 	bl	80027b4 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004366:	f7fe fa25 	bl	80027b4 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e1a8      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004384:	4b28      	ldr	r3, [pc, #160]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4925      	ldr	r1, [pc, #148]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]
 8004398:	e015      	b.n	80043c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439a:	4b24      	ldr	r3, [pc, #144]	; (800442c <HAL_RCC_OscConfig+0x244>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe fa08 	bl	80027b4 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a8:	f7fe fa04 	bl	80027b4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e187      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d036      	beq.n	8004440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <HAL_RCC_OscConfig+0x248>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fe f9e8 	bl	80027b4 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fe f9e4 	bl	80027b4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e167      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x200>
 8004406:	e01b      	b.n	8004440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_OscConfig+0x248>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440e:	f7fe f9d1 	bl	80027b4 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	e00e      	b.n	8004434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004416:	f7fe f9cd 	bl	80027b4 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d907      	bls.n	8004434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e150      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
 8004428:	40023800 	.word	0x40023800
 800442c:	42470000 	.word	0x42470000
 8004430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	4b88      	ldr	r3, [pc, #544]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ea      	bne.n	8004416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8097 	beq.w	800457c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004452:	4b81      	ldr	r3, [pc, #516]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10f      	bne.n	800447e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	4b7d      	ldr	r3, [pc, #500]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	4a7c      	ldr	r2, [pc, #496]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446c:	6413      	str	r3, [r2, #64]	; 0x40
 800446e:	4b7a      	ldr	r3, [pc, #488]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447a:	2301      	movs	r3, #1
 800447c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447e:	4b77      	ldr	r3, [pc, #476]	; (800465c <HAL_RCC_OscConfig+0x474>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d118      	bne.n	80044bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448a:	4b74      	ldr	r3, [pc, #464]	; (800465c <HAL_RCC_OscConfig+0x474>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a73      	ldr	r2, [pc, #460]	; (800465c <HAL_RCC_OscConfig+0x474>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004496:	f7fe f98d 	bl	80027b4 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fe f989 	bl	80027b4 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e10c      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b0:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_RCC_OscConfig+0x474>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2ea>
 80044c4:	4b64      	ldr	r3, [pc, #400]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	4a63      	ldr	r2, [pc, #396]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6713      	str	r3, [r2, #112]	; 0x70
 80044d0:	e01c      	b.n	800450c <HAL_RCC_OscConfig+0x324>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x30c>
 80044da:	4b5f      	ldr	r3, [pc, #380]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	4a5e      	ldr	r2, [pc, #376]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	6713      	str	r3, [r2, #112]	; 0x70
 80044e6:	4b5c      	ldr	r3, [pc, #368]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a5b      	ldr	r2, [pc, #364]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0x324>
 80044f4:	4b58      	ldr	r3, [pc, #352]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a57      	ldr	r2, [pc, #348]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	4b55      	ldr	r3, [pc, #340]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a54      	ldr	r2, [pc, #336]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004506:	f023 0304 	bic.w	r3, r3, #4
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d015      	beq.n	8004540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fe f94e 	bl	80027b4 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fe f94a 	bl	80027b4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0cb      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004532:	4b49      	ldr	r3, [pc, #292]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0ee      	beq.n	800451c <HAL_RCC_OscConfig+0x334>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004540:	f7fe f938 	bl	80027b4 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004546:	e00a      	b.n	800455e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fe f934 	bl	80027b4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e0b5      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455e:	4b3e      	ldr	r3, [pc, #248]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ee      	bne.n	8004548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b39      	ldr	r3, [pc, #228]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	4a38      	ldr	r2, [pc, #224]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a1 	beq.w	80046c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004586:	4b34      	ldr	r3, [pc, #208]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b08      	cmp	r3, #8
 8004590:	d05c      	beq.n	800464c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d141      	bne.n	800461e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <HAL_RCC_OscConfig+0x478>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fe f908 	bl	80027b4 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fe f904 	bl	80027b4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e087      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	4b27      	ldr	r3, [pc, #156]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	019b      	lsls	r3, r3, #6
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	3b01      	subs	r3, #1
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	491b      	ldr	r1, [pc, #108]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x478>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fe f8dd 	bl	80027b4 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fe f8d9 	bl	80027b4 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e05c      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x416>
 800461c:	e054      	b.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCC_OscConfig+0x478>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fe f8c6 	bl	80027b4 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462c:	f7fe f8c2 	bl	80027b4 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e045      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x444>
 800464a:	e03d      	b.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e038      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
 8004658:	40023800 	.word	0x40023800
 800465c:	40007000 	.word	0x40007000
 8004660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <HAL_RCC_OscConfig+0x4ec>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d028      	beq.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d121      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d11a      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800469a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800469c:	4293      	cmp	r3, r2
 800469e:	d111      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	3b01      	subs	r3, #1
 80046ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800

080046d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0cc      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046ec:	4b68      	ldr	r3, [pc, #416]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d90c      	bls.n	8004714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b65      	ldr	r3, [pc, #404]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b63      	ldr	r3, [pc, #396]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0b8      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800472c:	4b59      	ldr	r3, [pc, #356]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a58      	ldr	r2, [pc, #352]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004744:	4b53      	ldr	r3, [pc, #332]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a52      	ldr	r2, [pc, #328]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800474e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004750:	4b50      	ldr	r3, [pc, #320]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	494d      	ldr	r1, [pc, #308]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d044      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b47      	ldr	r3, [pc, #284]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d119      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e07f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d003      	beq.n	8004796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004792:	2b03      	cmp	r3, #3
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004796:	4b3f      	ldr	r3, [pc, #252]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e06f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e067      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b6:	4b37      	ldr	r3, [pc, #220]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4934      	ldr	r1, [pc, #208]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c8:	f7fd fff4 	bl	80027b4 <HAL_GetTick>
 80047cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d0:	f7fd fff0 	bl	80027b4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	; 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e04f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 020c 	and.w	r2, r3, #12
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d1eb      	bne.n	80047d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047f8:	4b25      	ldr	r3, [pc, #148]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d20c      	bcs.n	8004820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b22      	ldr	r3, [pc, #136]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e032      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800482c:	4b19      	ldr	r3, [pc, #100]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4916      	ldr	r1, [pc, #88]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	490e      	ldr	r1, [pc, #56]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800485e:	f000 f821 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 8004862:	4602      	mov	r2, r0
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	490a      	ldr	r1, [pc, #40]	; (8004898 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	5ccb      	ldrb	r3, [r1, r3]
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a09      	ldr	r2, [pc, #36]	; (800489c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1c8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd ff54 	bl	800272c <HAL_InitTick>

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023c00 	.word	0x40023c00
 8004894:	40023800 	.word	0x40023800
 8004898:	080082f0 	.word	0x080082f0
 800489c:	20000008 	.word	0x20000008
 80048a0:	2000000c 	.word	0x2000000c

080048a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a8:	b094      	sub	sp, #80	; 0x50
 80048aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44
 80048b0:	2300      	movs	r3, #0
 80048b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b4:	2300      	movs	r3, #0
 80048b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048bc:	4b79      	ldr	r3, [pc, #484]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d00d      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x40>
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	f200 80e1 	bhi.w	8004a90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x34>
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d003      	beq.n	80048de <HAL_RCC_GetSysClockFreq+0x3a>
 80048d6:	e0db      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d8:	4b73      	ldr	r3, [pc, #460]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048dc:	e0db      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048de:	4b73      	ldr	r3, [pc, #460]	; (8004aac <HAL_RCC_GetSysClockFreq+0x208>)
 80048e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e2:	e0d8      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e4:	4b6f      	ldr	r3, [pc, #444]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ee:	4b6d      	ldr	r3, [pc, #436]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d063      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	4b6a      	ldr	r3, [pc, #424]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	2200      	movs	r2, #0
 8004902:	63bb      	str	r3, [r7, #56]	; 0x38
 8004904:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490c:	633b      	str	r3, [r7, #48]	; 0x30
 800490e:	2300      	movs	r3, #0
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
 8004912:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	0159      	lsls	r1, r3, #5
 8004924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004928:	0150      	lsls	r0, r2, #5
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4621      	mov	r1, r4
 8004930:	1a51      	subs	r1, r2, r1
 8004932:	6139      	str	r1, [r7, #16]
 8004934:	4629      	mov	r1, r5
 8004936:	eb63 0301 	sbc.w	r3, r3, r1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004948:	4659      	mov	r1, fp
 800494a:	018b      	lsls	r3, r1, #6
 800494c:	4651      	mov	r1, sl
 800494e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004952:	4651      	mov	r1, sl
 8004954:	018a      	lsls	r2, r1, #6
 8004956:	4651      	mov	r1, sl
 8004958:	ebb2 0801 	subs.w	r8, r2, r1
 800495c:	4659      	mov	r1, fp
 800495e:	eb63 0901 	sbc.w	r9, r3, r1
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004976:	4690      	mov	r8, r2
 8004978:	4699      	mov	r9, r3
 800497a:	4623      	mov	r3, r4
 800497c:	eb18 0303 	adds.w	r3, r8, r3
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	462b      	mov	r3, r5
 8004984:	eb49 0303 	adc.w	r3, r9, r3
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004996:	4629      	mov	r1, r5
 8004998:	024b      	lsls	r3, r1, #9
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a0:	4621      	mov	r1, r4
 80049a2:	024a      	lsls	r2, r1, #9
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049aa:	2200      	movs	r2, #0
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049b4:	f7fb fc1a 	bl	80001ec <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c0:	e058      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b38      	ldr	r3, [pc, #224]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	2200      	movs	r2, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	4611      	mov	r1, r2
 80049ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049d2:	623b      	str	r3, [r7, #32]
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
 80049d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	f04f 0000 	mov.w	r0, #0
 80049e4:	f04f 0100 	mov.w	r1, #0
 80049e8:	0159      	lsls	r1, r3, #5
 80049ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ee:	0150      	lsls	r0, r2, #5
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4641      	mov	r1, r8
 80049f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049fa:	4649      	mov	r1, r9
 80049fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a14:	ebb2 040a 	subs.w	r4, r2, sl
 8004a18:	eb63 050b 	sbc.w	r5, r3, fp
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	00eb      	lsls	r3, r5, #3
 8004a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2a:	00e2      	lsls	r2, r4, #3
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	461d      	mov	r5, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	18e3      	adds	r3, r4, r3
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	464b      	mov	r3, r9
 8004a38:	eb45 0303 	adc.w	r3, r5, r3
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	028b      	lsls	r3, r1, #10
 8004a4e:	4621      	mov	r1, r4
 8004a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a54:	4621      	mov	r1, r4
 8004a56:	028a      	lsls	r2, r1, #10
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	61fa      	str	r2, [r7, #28]
 8004a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a68:	f7fb fbc0 	bl	80001ec <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3750      	adds	r7, #80	; 0x50
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	007a1200 	.word	0x007a1200

08004ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000008 	.word	0x20000008

08004ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004acc:	f7ff fff0 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0a9b      	lsrs	r3, r3, #10
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	08008300 	.word	0x08008300

08004af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af4:	f7ff ffdc 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0b5b      	lsrs	r3, r3, #13
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	08008300 	.word	0x08008300

08004b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e07b      	b.n	8004c22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3a:	d009      	beq.n	8004b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	61da      	str	r2, [r3, #28]
 8004b42:	e005      	b.n	8004b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc fad6 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	ea42 0103 	orr.w	r1, r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	f003 0104 	and.w	r1, r3, #4
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f003 0210 	and.w	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b088      	sub	sp, #32
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	4613      	mov	r3, r2
 8004c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_SPI_Transmit+0x22>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e126      	b.n	8004e9a <HAL_SPI_Transmit+0x270>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c54:	f7fd fdae 	bl	80027b4 <HAL_GetTick>
 8004c58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d002      	beq.n	8004c70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c6e:	e10b      	b.n	8004e88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_SPI_Transmit+0x52>
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c80:	e102      	b.n	8004e88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	88fa      	ldrh	r2, [r7, #6]
 8004c9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	88fa      	ldrh	r2, [r7, #6]
 8004ca0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc8:	d10f      	bne.n	8004cea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d007      	beq.n	8004d08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d10:	d14b      	bne.n	8004daa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_SPI_Transmit+0xf6>
 8004d1a:	8afb      	ldrh	r3, [r7, #22]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d13e      	bne.n	8004d9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	881a      	ldrh	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d44:	e02b      	b.n	8004d9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d112      	bne.n	8004d7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	881a      	ldrh	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	1c9a      	adds	r2, r3, #2
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d78:	e011      	b.n	8004d9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7a:	f7fd fd1b 	bl	80027b4 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d803      	bhi.n	8004d92 <HAL_SPI_Transmit+0x168>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d102      	bne.n	8004d98 <HAL_SPI_Transmit+0x16e>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d9c:	e074      	b.n	8004e88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ce      	bne.n	8004d46 <HAL_SPI_Transmit+0x11c>
 8004da8:	e04c      	b.n	8004e44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_Transmit+0x18e>
 8004db2:	8afb      	ldrh	r3, [r7, #22]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d140      	bne.n	8004e3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dde:	e02c      	b.n	8004e3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d113      	bne.n	8004e16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	7812      	ldrb	r2, [r2, #0]
 8004dfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e14:	e011      	b.n	8004e3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e16:	f7fd fccd 	bl	80027b4 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d803      	bhi.n	8004e2e <HAL_SPI_Transmit+0x204>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d102      	bne.n	8004e34 <HAL_SPI_Transmit+0x20a>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e38:	e026      	b.n	8004e88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1cd      	bne.n	8004de0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	6839      	ldr	r1, [r7, #0]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fbcb 	bl	80055e4 <SPI_EndRxTxTransaction>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e000      	b.n	8004e88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b088      	sub	sp, #32
 8004ea6:	af02      	add	r7, sp, #8
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ebe:	d112      	bne.n	8004ee6 <HAL_SPI_Receive+0x44>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10e      	bne.n	8004ee6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2204      	movs	r2, #4
 8004ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f8f1 	bl	80050c4 <HAL_SPI_TransmitReceive>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	e0ea      	b.n	80050bc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_SPI_Receive+0x52>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e0e3      	b.n	80050bc <HAL_SPI_Receive+0x21a>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004efc:	f7fd fc5a 	bl	80027b4 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f12:	e0ca      	b.n	80050aa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_SPI_Receive+0x7e>
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f24:	e0c1      	b.n	80050aa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2204      	movs	r2, #4
 8004f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	88fa      	ldrh	r2, [r7, #6]
 8004f3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	88fa      	ldrh	r2, [r7, #6]
 8004f44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6c:	d10f      	bne.n	8004f8e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d007      	beq.n	8004fac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004faa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d162      	bne.n	800507a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fb4:	e02e      	b.n	8005014 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d115      	bne.n	8004ff0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f103 020c 	add.w	r2, r3, #12
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fee:	e011      	b.n	8005014 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff0:	f7fd fbe0 	bl	80027b4 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d803      	bhi.n	8005008 <HAL_SPI_Receive+0x166>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d102      	bne.n	800500e <HAL_SPI_Receive+0x16c>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005012:	e04a      	b.n	80050aa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1cb      	bne.n	8004fb6 <HAL_SPI_Receive+0x114>
 800501e:	e031      	b.n	8005084 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b01      	cmp	r3, #1
 800502c:	d113      	bne.n	8005056 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	b292      	uxth	r2, r2
 800503a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	1c9a      	adds	r2, r3, #2
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005054:	e011      	b.n	800507a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005056:	f7fd fbad 	bl	80027b4 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d803      	bhi.n	800506e <HAL_SPI_Receive+0x1cc>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d102      	bne.n	8005074 <HAL_SPI_Receive+0x1d2>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005078:	e017      	b.n	80050aa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1cd      	bne.n	8005020 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fa45 	bl	8005518 <SPI_EndRxTransaction>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
 80050a6:	e000      	b.n	80050aa <HAL_SPI_Receive+0x208>
  }

error :
 80050a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08c      	sub	sp, #48	; 0x30
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050d2:	2301      	movs	r3, #1
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x26>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e18a      	b.n	8005400 <HAL_SPI_TransmitReceive+0x33c>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f2:	f7fd fb5f 	bl	80027b4 <HAL_GetTick>
 80050f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005108:	887b      	ldrh	r3, [r7, #2]
 800510a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800510c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005110:	2b01      	cmp	r3, #1
 8005112:	d00f      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x70>
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511a:	d107      	bne.n	800512c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d103      	bne.n	800512c <HAL_SPI_TransmitReceive+0x68>
 8005124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005128:	2b04      	cmp	r3, #4
 800512a:	d003      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800512c:	2302      	movs	r3, #2
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005132:	e15b      	b.n	80053ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_SPI_TransmitReceive+0x82>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_SPI_TransmitReceive+0x82>
 8005140:	887b      	ldrh	r3, [r7, #2]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d103      	bne.n	800514e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800514c:	e14e      	b.n	80053ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b04      	cmp	r3, #4
 8005158:	d003      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2205      	movs	r2, #5
 800515e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	887a      	ldrh	r2, [r7, #2]
 8005172:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	887a      	ldrh	r2, [r7, #2]
 8005178:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	887a      	ldrh	r2, [r7, #2]
 8005184:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	887a      	ldrh	r2, [r7, #2]
 800518a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d007      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051be:	d178      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x10a>
 80051c8:	8b7b      	ldrh	r3, [r7, #26]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d166      	bne.n	800529c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	881a      	ldrh	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	1c9a      	adds	r2, r3, #2
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f2:	e053      	b.n	800529c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d11b      	bne.n	800523a <HAL_SPI_TransmitReceive+0x176>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d016      	beq.n	800523a <HAL_SPI_TransmitReceive+0x176>
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	2b01      	cmp	r3, #1
 8005210:	d113      	bne.n	800523a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	881a      	ldrh	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	1c9a      	adds	r2, r3, #2
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d119      	bne.n	800527c <HAL_SPI_TransmitReceive+0x1b8>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d014      	beq.n	800527c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	b292      	uxth	r2, r2
 800525e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005278:	2301      	movs	r3, #1
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800527c:	f7fd fa9a 	bl	80027b4 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005288:	429a      	cmp	r2, r3
 800528a:	d807      	bhi.n	800529c <HAL_SPI_TransmitReceive+0x1d8>
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d003      	beq.n	800529c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800529a:	e0a7      	b.n	80053ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1a6      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x130>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1a1      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x130>
 80052b0:	e07c      	b.n	80053ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x1fc>
 80052ba:	8b7b      	ldrh	r3, [r7, #26]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d16b      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e6:	e057      	b.n	8005398 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d11c      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x26c>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d017      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x26c>
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	2b01      	cmp	r3, #1
 8005304:	d114      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	7812      	ldrb	r2, [r2, #0]
 8005312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d119      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x2ae>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d014      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800536e:	2301      	movs	r3, #1
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005372:	f7fd fa1f 	bl	80027b4 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800537e:	429a      	cmp	r2, r3
 8005380:	d803      	bhi.n	800538a <HAL_SPI_TransmitReceive+0x2c6>
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d102      	bne.n	8005390 <HAL_SPI_TransmitReceive+0x2cc>
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005396:	e029      	b.n	80053ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1a2      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x224>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d19d      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f917 	bl	80055e4 <SPI_EndRxTxTransaction>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d006      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053c8:	e010      	b.n	80053ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	e000      	b.n	80053ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	; 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005418:	f7fd f9cc 	bl	80027b4 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	4413      	add	r3, r2
 8005426:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005428:	f7fd f9c4 	bl	80027b4 <HAL_GetTick>
 800542c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800542e:	4b39      	ldr	r3, [pc, #228]	; (8005514 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	015b      	lsls	r3, r3, #5
 8005434:	0d1b      	lsrs	r3, r3, #20
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800543e:	e054      	b.n	80054ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d050      	beq.n	80054ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005448:	f7fd f9b4 	bl	80027b4 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	429a      	cmp	r2, r3
 8005456:	d902      	bls.n	800545e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d13d      	bne.n	80054da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800546c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005476:	d111      	bne.n	800549c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005480:	d004      	beq.n	800548c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d107      	bne.n	800549c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a4:	d10f      	bne.n	80054c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e017      	b.n	800550a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4013      	ands	r3, r2
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	bf0c      	ite	eq
 80054fa:	2301      	moveq	r3, #1
 80054fc:	2300      	movne	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	429a      	cmp	r2, r3
 8005506:	d19b      	bne.n	8005440 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000008 	.word	0x20000008

08005518 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552c:	d111      	bne.n	8005552 <SPI_EndRxTransaction+0x3a>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005536:	d004      	beq.n	8005542 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005540:	d107      	bne.n	8005552 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005550:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555a:	d12a      	bne.n	80055b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005564:	d012      	beq.n	800558c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2200      	movs	r2, #0
 800556e:	2180      	movs	r1, #128	; 0x80
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff ff49 	bl	8005408 <SPI_WaitFlagStateUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02d      	beq.n	80055d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e026      	b.n	80055da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	2101      	movs	r1, #1
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff ff36 	bl	8005408 <SPI_WaitFlagStateUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01a      	beq.n	80055d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e013      	b.n	80055da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2200      	movs	r2, #0
 80055ba:	2101      	movs	r1, #1
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff ff23 	bl	8005408 <SPI_WaitFlagStateUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055cc:	f043 0220 	orr.w	r2, r3, #32
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e000      	b.n	80055da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055f0:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <SPI_EndRxTxTransaction+0x7c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1b      	ldr	r2, [pc, #108]	; (8005664 <SPI_EndRxTxTransaction+0x80>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	0d5b      	lsrs	r3, r3, #21
 80055fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005600:	fb02 f303 	mul.w	r3, r2, r3
 8005604:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560e:	d112      	bne.n	8005636 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2200      	movs	r2, #0
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff fef4 	bl	8005408 <SPI_WaitFlagStateUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d016      	beq.n	8005654 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	f043 0220 	orr.w	r2, r3, #32
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e00f      	b.n	8005656 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	3b01      	subs	r3, #1
 8005640:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b80      	cmp	r3, #128	; 0x80
 800564e:	d0f2      	beq.n	8005636 <SPI_EndRxTxTransaction+0x52>
 8005650:	e000      	b.n	8005654 <SPI_EndRxTxTransaction+0x70>
        break;
 8005652:	bf00      	nop
  }

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000008 	.word	0x20000008
 8005664:	165e9f81 	.word	0x165e9f81

08005668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e041      	b.n	80056fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fdac 	bl	80011ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f000 fb40 	bl	8005d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e041      	b.n	800579c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f839 	bl	80057a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3304      	adds	r3, #4
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f000 faf1 	bl	8005d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d122      	bne.n	8005814 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d11b      	bne.n	8005814 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0202 	mvn.w	r2, #2
 80057e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa77 	bl	8005cee <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa69 	bl	8005cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fa7a 	bl	8005d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b04      	cmp	r3, #4
 8005820:	d122      	bne.n	8005868 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b04      	cmp	r3, #4
 800582e:	d11b      	bne.n	8005868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0204 	mvn.w	r2, #4
 8005838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa4d 	bl	8005cee <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fa3f 	bl	8005cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa50 	bl	8005d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b08      	cmp	r3, #8
 8005874:	d122      	bne.n	80058bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b08      	cmp	r3, #8
 8005882:	d11b      	bne.n	80058bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0208 	mvn.w	r2, #8
 800588c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2204      	movs	r2, #4
 8005892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa23 	bl	8005cee <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa15 	bl	8005cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa26 	bl	8005d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	2b10      	cmp	r3, #16
 80058c8:	d122      	bne.n	8005910 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d11b      	bne.n	8005910 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0210 	mvn.w	r2, #16
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2208      	movs	r2, #8
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9f9 	bl	8005cee <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9eb 	bl	8005cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f9fc 	bl	8005d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	d10e      	bne.n	800593c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b01      	cmp	r3, #1
 800592a:	d107      	bne.n	800593c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0201 	mvn.w	r2, #1
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fb faa2 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d10e      	bne.n	8005968 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005954:	2b80      	cmp	r3, #128	; 0x80
 8005956:	d107      	bne.n	8005968 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fda4 	bl	80064b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d107      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f9c1 	bl	8005d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d10e      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d107      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0220 	mvn.w	r2, #32
 80059b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fd6e 	bl	800649c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e0ae      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	f200 809f 	bhi.w	8005b34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a31 	.word	0x08005a31
 8005a00:	08005b35 	.word	0x08005b35
 8005a04:	08005b35 	.word	0x08005b35
 8005a08:	08005b35 	.word	0x08005b35
 8005a0c:	08005a71 	.word	0x08005a71
 8005a10:	08005b35 	.word	0x08005b35
 8005a14:	08005b35 	.word	0x08005b35
 8005a18:	08005b35 	.word	0x08005b35
 8005a1c:	08005ab3 	.word	0x08005ab3
 8005a20:	08005b35 	.word	0x08005b35
 8005a24:	08005b35 	.word	0x08005b35
 8005a28:	08005b35 	.word	0x08005b35
 8005a2c:	08005af3 	.word	0x08005af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fa18 	bl	8005e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0208 	orr.w	r2, r2, #8
 8005a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0204 	bic.w	r2, r2, #4
 8005a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6999      	ldr	r1, [r3, #24]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	619a      	str	r2, [r3, #24]
      break;
 8005a6e:	e064      	b.n	8005b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fa68 	bl	8005f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6999      	ldr	r1, [r3, #24]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	021a      	lsls	r2, r3, #8
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	619a      	str	r2, [r3, #24]
      break;
 8005ab0:	e043      	b.n	8005b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fabd 	bl	8006038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0208 	orr.w	r2, r2, #8
 8005acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0204 	bic.w	r2, r2, #4
 8005adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69d9      	ldr	r1, [r3, #28]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	61da      	str	r2, [r3, #28]
      break;
 8005af0:	e023      	b.n	8005b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fb11 	bl	8006120 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69d9      	ldr	r1, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	021a      	lsls	r2, r3, #8
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	61da      	str	r2, [r3, #28]
      break;
 8005b32:	e002      	b.n	8005b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	75fb      	strb	r3, [r7, #23]
      break;
 8005b38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_TIM_ConfigClockSource+0x1c>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e0b4      	b.n	8005cd2 <HAL_TIM_ConfigClockSource+0x186>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba0:	d03e      	beq.n	8005c20 <HAL_TIM_ConfigClockSource+0xd4>
 8005ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba6:	f200 8087 	bhi.w	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bae:	f000 8086 	beq.w	8005cbe <HAL_TIM_ConfigClockSource+0x172>
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb6:	d87f      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb8:	2b70      	cmp	r3, #112	; 0x70
 8005bba:	d01a      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8005bbc:	2b70      	cmp	r3, #112	; 0x70
 8005bbe:	d87b      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b60      	cmp	r3, #96	; 0x60
 8005bc2:	d050      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x11a>
 8005bc4:	2b60      	cmp	r3, #96	; 0x60
 8005bc6:	d877      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b50      	cmp	r3, #80	; 0x50
 8005bca:	d03c      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0xfa>
 8005bcc:	2b50      	cmp	r3, #80	; 0x50
 8005bce:	d873      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d058      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x13a>
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d86f      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b30      	cmp	r3, #48	; 0x30
 8005bda:	d064      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bdc:	2b30      	cmp	r3, #48	; 0x30
 8005bde:	d86b      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d060      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d867      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d05c      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d05a      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf0:	e062      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6899      	ldr	r1, [r3, #8]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f000 fb5d 	bl	80062c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	609a      	str	r2, [r3, #8]
      break;
 8005c1e:	e04f      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6899      	ldr	r1, [r3, #8]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f000 fb46 	bl	80062c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c42:	609a      	str	r2, [r3, #8]
      break;
 8005c44:	e03c      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f000 faba 	bl	80061cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2150      	movs	r1, #80	; 0x50
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fb13 	bl	800628a <TIM_ITRx_SetConfig>
      break;
 8005c64:	e02c      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f000 fad9 	bl	800622a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2160      	movs	r1, #96	; 0x60
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fb03 	bl	800628a <TIM_ITRx_SetConfig>
      break;
 8005c84:	e01c      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f000 fa9a 	bl	80061cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2140      	movs	r1, #64	; 0x40
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 faf3 	bl	800628a <TIM_ITRx_SetConfig>
      break;
 8005ca4:	e00c      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f000 faea 	bl	800628a <TIM_ITRx_SetConfig>
      break;
 8005cb6:	e003      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbc:	e000      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a40      	ldr	r2, [pc, #256]	; (8005e40 <TIM_Base_SetConfig+0x114>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4a:	d00f      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a3d      	ldr	r2, [pc, #244]	; (8005e44 <TIM_Base_SetConfig+0x118>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00b      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a3c      	ldr	r2, [pc, #240]	; (8005e48 <TIM_Base_SetConfig+0x11c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d007      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a3b      	ldr	r2, [pc, #236]	; (8005e4c <TIM_Base_SetConfig+0x120>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a3a      	ldr	r2, [pc, #232]	; (8005e50 <TIM_Base_SetConfig+0x124>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d108      	bne.n	8005d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a2f      	ldr	r2, [pc, #188]	; (8005e40 <TIM_Base_SetConfig+0x114>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d02b      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8c:	d027      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a2c      	ldr	r2, [pc, #176]	; (8005e44 <TIM_Base_SetConfig+0x118>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d023      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a2b      	ldr	r2, [pc, #172]	; (8005e48 <TIM_Base_SetConfig+0x11c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01f      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a2a      	ldr	r2, [pc, #168]	; (8005e4c <TIM_Base_SetConfig+0x120>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01b      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a29      	ldr	r2, [pc, #164]	; (8005e50 <TIM_Base_SetConfig+0x124>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d017      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a28      	ldr	r2, [pc, #160]	; (8005e54 <TIM_Base_SetConfig+0x128>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a27      	ldr	r2, [pc, #156]	; (8005e58 <TIM_Base_SetConfig+0x12c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00f      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <TIM_Base_SetConfig+0x130>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00b      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a25      	ldr	r2, [pc, #148]	; (8005e60 <TIM_Base_SetConfig+0x134>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d007      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a24      	ldr	r2, [pc, #144]	; (8005e64 <TIM_Base_SetConfig+0x138>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a23      	ldr	r2, [pc, #140]	; (8005e68 <TIM_Base_SetConfig+0x13c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d108      	bne.n	8005df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <TIM_Base_SetConfig+0x114>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_Base_SetConfig+0xf8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a0c      	ldr	r2, [pc, #48]	; (8005e50 <TIM_Base_SetConfig+0x124>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d103      	bne.n	8005e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	615a      	str	r2, [r3, #20]
}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00
 8005e50:	40010400 	.word	0x40010400
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800
 8005e60:	40001800 	.word	0x40001800
 8005e64:	40001c00 	.word	0x40001c00
 8005e68:	40002000 	.word	0x40002000

08005e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	f023 0201 	bic.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0303 	bic.w	r3, r3, #3
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f023 0302 	bic.w	r3, r3, #2
 8005eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a20      	ldr	r2, [pc, #128]	; (8005f44 <TIM_OC1_SetConfig+0xd8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC1_SetConfig+0x64>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a1f      	ldr	r2, [pc, #124]	; (8005f48 <TIM_OC1_SetConfig+0xdc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d10c      	bne.n	8005eea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f023 0308 	bic.w	r3, r3, #8
 8005ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f023 0304 	bic.w	r3, r3, #4
 8005ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a15      	ldr	r2, [pc, #84]	; (8005f44 <TIM_OC1_SetConfig+0xd8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_OC1_SetConfig+0x8e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <TIM_OC1_SetConfig+0xdc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d111      	bne.n	8005f1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	621a      	str	r2, [r3, #32]
}
 8005f38:	bf00      	nop
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40010400 	.word	0x40010400

08005f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f023 0210 	bic.w	r2, r3, #16
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0320 	bic.w	r3, r3, #32
 8005f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a22      	ldr	r2, [pc, #136]	; (8006030 <TIM_OC2_SetConfig+0xe4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_OC2_SetConfig+0x68>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a21      	ldr	r2, [pc, #132]	; (8006034 <TIM_OC2_SetConfig+0xe8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d10d      	bne.n	8005fd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a17      	ldr	r2, [pc, #92]	; (8006030 <TIM_OC2_SetConfig+0xe4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC2_SetConfig+0x94>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a16      	ldr	r2, [pc, #88]	; (8006034 <TIM_OC2_SetConfig+0xe8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d113      	bne.n	8006008 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400

08006038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0303 	bic.w	r3, r3, #3
 800606e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a21      	ldr	r2, [pc, #132]	; (8006118 <TIM_OC3_SetConfig+0xe0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_OC3_SetConfig+0x66>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a20      	ldr	r2, [pc, #128]	; (800611c <TIM_OC3_SetConfig+0xe4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10d      	bne.n	80060ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a16      	ldr	r2, [pc, #88]	; (8006118 <TIM_OC3_SetConfig+0xe0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d003      	beq.n	80060ca <TIM_OC3_SetConfig+0x92>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a15      	ldr	r2, [pc, #84]	; (800611c <TIM_OC3_SetConfig+0xe4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d113      	bne.n	80060f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	621a      	str	r2, [r3, #32]
}
 800610c:	bf00      	nop
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40010000 	.word	0x40010000
 800611c:	40010400 	.word	0x40010400

08006120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800616a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	031b      	lsls	r3, r3, #12
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a12      	ldr	r2, [pc, #72]	; (80061c4 <TIM_OC4_SetConfig+0xa4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_OC4_SetConfig+0x68>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a11      	ldr	r2, [pc, #68]	; (80061c8 <TIM_OC4_SetConfig+0xa8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d109      	bne.n	800619c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800618e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	019b      	lsls	r3, r3, #6
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	621a      	str	r2, [r3, #32]
}
 80061b6:	bf00      	nop
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40010400 	.word	0x40010400

080061cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	f023 0201 	bic.w	r2, r3, #1
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f023 030a 	bic.w	r3, r3, #10
 8006208:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800622a:	b480      	push	{r7}
 800622c:	b087      	sub	sp, #28
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f023 0210 	bic.w	r2, r3, #16
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	031b      	lsls	r3, r3, #12
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006266:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f043 0307 	orr.w	r3, r3, #7
 80062ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	609a      	str	r2, [r3, #8]
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	021a      	lsls	r2, r3, #8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	609a      	str	r2, [r3, #8]
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006314:	2302      	movs	r3, #2
 8006316:	e05a      	b.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a21      	ldr	r2, [pc, #132]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d022      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006364:	d01d      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1d      	ldr	r2, [pc, #116]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d018      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1b      	ldr	r2, [pc, #108]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1a      	ldr	r2, [pc, #104]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a18      	ldr	r2, [pc, #96]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a17      	ldr	r2, [pc, #92]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a15      	ldr	r2, [pc, #84]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d10c      	bne.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40010000 	.word	0x40010000
 80063e0:	40000400 	.word	0x40000400
 80063e4:	40000800 	.word	0x40000800
 80063e8:	40000c00 	.word	0x40000c00
 80063ec:	40010400 	.word	0x40010400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40001800 	.word	0x40001800

080063f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006410:	2302      	movs	r3, #2
 8006412:	e03d      	b.n	8006490 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e03f      	b.n	8006556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fa ff2a 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	; 0x24
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f829 	bl	8006560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800651c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800652c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800653c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006564:	b0c0      	sub	sp, #256	; 0x100
 8006566:	af00      	add	r7, sp, #0
 8006568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	ea40 0301 	orr.w	r3, r0, r1
 8006588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	431a      	orrs	r2, r3
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	431a      	orrs	r2, r3
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065b8:	f021 010c 	bic.w	r1, r1, #12
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065c6:	430b      	orrs	r3, r1
 80065c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065da:	6999      	ldr	r1, [r3, #24]
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	ea40 0301 	orr.w	r3, r0, r1
 80065e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b8f      	ldr	r3, [pc, #572]	; (800682c <UART_SetConfig+0x2cc>)
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d005      	beq.n	8006600 <UART_SetConfig+0xa0>
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b8d      	ldr	r3, [pc, #564]	; (8006830 <UART_SetConfig+0x2d0>)
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d104      	bne.n	800660a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006600:	f7fe fa76 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 8006604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006608:	e003      	b.n	8006612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800660a:	f7fe fa5d 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 800660e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661c:	f040 810c 	bne.w	8006838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006624:	2200      	movs	r2, #0
 8006626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800662a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800662e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006632:	4622      	mov	r2, r4
 8006634:	462b      	mov	r3, r5
 8006636:	1891      	adds	r1, r2, r2
 8006638:	65b9      	str	r1, [r7, #88]	; 0x58
 800663a:	415b      	adcs	r3, r3
 800663c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800663e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006642:	4621      	mov	r1, r4
 8006644:	eb12 0801 	adds.w	r8, r2, r1
 8006648:	4629      	mov	r1, r5
 800664a:	eb43 0901 	adc.w	r9, r3, r1
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800665a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800665e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006662:	4690      	mov	r8, r2
 8006664:	4699      	mov	r9, r3
 8006666:	4623      	mov	r3, r4
 8006668:	eb18 0303 	adds.w	r3, r8, r3
 800666c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006670:	462b      	mov	r3, r5
 8006672:	eb49 0303 	adc.w	r3, r9, r3
 8006676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800668a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800668e:	460b      	mov	r3, r1
 8006690:	18db      	adds	r3, r3, r3
 8006692:	653b      	str	r3, [r7, #80]	; 0x50
 8006694:	4613      	mov	r3, r2
 8006696:	eb42 0303 	adc.w	r3, r2, r3
 800669a:	657b      	str	r3, [r7, #84]	; 0x54
 800669c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066a4:	f7f9 fda2 	bl	80001ec <__aeabi_uldivmod>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4b61      	ldr	r3, [pc, #388]	; (8006834 <UART_SetConfig+0x2d4>)
 80066ae:	fba3 2302 	umull	r2, r3, r3, r2
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	011c      	lsls	r4, r3, #4
 80066b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	1891      	adds	r1, r2, r2
 80066ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80066d0:	415b      	adcs	r3, r3
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066d8:	4641      	mov	r1, r8
 80066da:	eb12 0a01 	adds.w	sl, r2, r1
 80066de:	4649      	mov	r1, r9
 80066e0:	eb43 0b01 	adc.w	fp, r3, r1
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066f8:	4692      	mov	sl, r2
 80066fa:	469b      	mov	fp, r3
 80066fc:	4643      	mov	r3, r8
 80066fe:	eb1a 0303 	adds.w	r3, sl, r3
 8006702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006706:	464b      	mov	r3, r9
 8006708:	eb4b 0303 	adc.w	r3, fp, r3
 800670c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800671c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006724:	460b      	mov	r3, r1
 8006726:	18db      	adds	r3, r3, r3
 8006728:	643b      	str	r3, [r7, #64]	; 0x40
 800672a:	4613      	mov	r3, r2
 800672c:	eb42 0303 	adc.w	r3, r2, r3
 8006730:	647b      	str	r3, [r7, #68]	; 0x44
 8006732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800673a:	f7f9 fd57 	bl	80001ec <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4611      	mov	r1, r2
 8006744:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <UART_SetConfig+0x2d4>)
 8006746:	fba3 2301 	umull	r2, r3, r3, r1
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	2264      	movs	r2, #100	; 0x64
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	1acb      	subs	r3, r1, r3
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800675a:	4b36      	ldr	r3, [pc, #216]	; (8006834 <UART_SetConfig+0x2d4>)
 800675c:	fba3 2302 	umull	r2, r3, r3, r2
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006768:	441c      	add	r4, r3
 800676a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800676e:	2200      	movs	r2, #0
 8006770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800677c:	4642      	mov	r2, r8
 800677e:	464b      	mov	r3, r9
 8006780:	1891      	adds	r1, r2, r2
 8006782:	63b9      	str	r1, [r7, #56]	; 0x38
 8006784:	415b      	adcs	r3, r3
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800678c:	4641      	mov	r1, r8
 800678e:	1851      	adds	r1, r2, r1
 8006790:	6339      	str	r1, [r7, #48]	; 0x30
 8006792:	4649      	mov	r1, r9
 8006794:	414b      	adcs	r3, r1
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067a4:	4659      	mov	r1, fp
 80067a6:	00cb      	lsls	r3, r1, #3
 80067a8:	4651      	mov	r1, sl
 80067aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ae:	4651      	mov	r1, sl
 80067b0:	00ca      	lsls	r2, r1, #3
 80067b2:	4610      	mov	r0, r2
 80067b4:	4619      	mov	r1, r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	4642      	mov	r2, r8
 80067ba:	189b      	adds	r3, r3, r2
 80067bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067c0:	464b      	mov	r3, r9
 80067c2:	460a      	mov	r2, r1
 80067c4:	eb42 0303 	adc.w	r3, r2, r3
 80067c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067e0:	460b      	mov	r3, r1
 80067e2:	18db      	adds	r3, r3, r3
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e6:	4613      	mov	r3, r2
 80067e8:	eb42 0303 	adc.w	r3, r2, r3
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067f6:	f7f9 fcf9 	bl	80001ec <__aeabi_uldivmod>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <UART_SetConfig+0x2d4>)
 8006800:	fba3 1302 	umull	r1, r3, r3, r2
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	2164      	movs	r1, #100	; 0x64
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	3332      	adds	r3, #50	; 0x32
 8006812:	4a08      	ldr	r2, [pc, #32]	; (8006834 <UART_SetConfig+0x2d4>)
 8006814:	fba2 2303 	umull	r2, r3, r2, r3
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	f003 0207 	and.w	r2, r3, #7
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4422      	add	r2, r4
 8006826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006828:	e106      	b.n	8006a38 <UART_SetConfig+0x4d8>
 800682a:	bf00      	nop
 800682c:	40011000 	.word	0x40011000
 8006830:	40011400 	.word	0x40011400
 8006834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683c:	2200      	movs	r2, #0
 800683e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800684a:	4642      	mov	r2, r8
 800684c:	464b      	mov	r3, r9
 800684e:	1891      	adds	r1, r2, r2
 8006850:	6239      	str	r1, [r7, #32]
 8006852:	415b      	adcs	r3, r3
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
 8006856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800685a:	4641      	mov	r1, r8
 800685c:	1854      	adds	r4, r2, r1
 800685e:	4649      	mov	r1, r9
 8006860:	eb43 0501 	adc.w	r5, r3, r1
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	00eb      	lsls	r3, r5, #3
 800686e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006872:	00e2      	lsls	r2, r4, #3
 8006874:	4614      	mov	r4, r2
 8006876:	461d      	mov	r5, r3
 8006878:	4643      	mov	r3, r8
 800687a:	18e3      	adds	r3, r4, r3
 800687c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006880:	464b      	mov	r3, r9
 8006882:	eb45 0303 	adc.w	r3, r5, r3
 8006886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068a6:	4629      	mov	r1, r5
 80068a8:	008b      	lsls	r3, r1, #2
 80068aa:	4621      	mov	r1, r4
 80068ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b0:	4621      	mov	r1, r4
 80068b2:	008a      	lsls	r2, r1, #2
 80068b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068b8:	f7f9 fc98 	bl	80001ec <__aeabi_uldivmod>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4b60      	ldr	r3, [pc, #384]	; (8006a44 <UART_SetConfig+0x4e4>)
 80068c2:	fba3 2302 	umull	r2, r3, r3, r2
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	011c      	lsls	r4, r3, #4
 80068ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068dc:	4642      	mov	r2, r8
 80068de:	464b      	mov	r3, r9
 80068e0:	1891      	adds	r1, r2, r2
 80068e2:	61b9      	str	r1, [r7, #24]
 80068e4:	415b      	adcs	r3, r3
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068ec:	4641      	mov	r1, r8
 80068ee:	1851      	adds	r1, r2, r1
 80068f0:	6139      	str	r1, [r7, #16]
 80068f2:	4649      	mov	r1, r9
 80068f4:	414b      	adcs	r3, r1
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006904:	4659      	mov	r1, fp
 8006906:	00cb      	lsls	r3, r1, #3
 8006908:	4651      	mov	r1, sl
 800690a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800690e:	4651      	mov	r1, sl
 8006910:	00ca      	lsls	r2, r1, #3
 8006912:	4610      	mov	r0, r2
 8006914:	4619      	mov	r1, r3
 8006916:	4603      	mov	r3, r0
 8006918:	4642      	mov	r2, r8
 800691a:	189b      	adds	r3, r3, r2
 800691c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006920:	464b      	mov	r3, r9
 8006922:	460a      	mov	r2, r1
 8006924:	eb42 0303 	adc.w	r3, r2, r3
 8006928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	67bb      	str	r3, [r7, #120]	; 0x78
 8006936:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006944:	4649      	mov	r1, r9
 8006946:	008b      	lsls	r3, r1, #2
 8006948:	4641      	mov	r1, r8
 800694a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800694e:	4641      	mov	r1, r8
 8006950:	008a      	lsls	r2, r1, #2
 8006952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006956:	f7f9 fc49 	bl	80001ec <__aeabi_uldivmod>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4611      	mov	r1, r2
 8006960:	4b38      	ldr	r3, [pc, #224]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006962:	fba3 2301 	umull	r2, r3, r3, r1
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	2264      	movs	r2, #100	; 0x64
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	1acb      	subs	r3, r1, r3
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	3332      	adds	r3, #50	; 0x32
 8006974:	4a33      	ldr	r2, [pc, #204]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006976:	fba2 2303 	umull	r2, r3, r2, r3
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006980:	441c      	add	r4, r3
 8006982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006986:	2200      	movs	r2, #0
 8006988:	673b      	str	r3, [r7, #112]	; 0x70
 800698a:	677a      	str	r2, [r7, #116]	; 0x74
 800698c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006990:	4642      	mov	r2, r8
 8006992:	464b      	mov	r3, r9
 8006994:	1891      	adds	r1, r2, r2
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	415b      	adcs	r3, r3
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069a0:	4641      	mov	r1, r8
 80069a2:	1851      	adds	r1, r2, r1
 80069a4:	6039      	str	r1, [r7, #0]
 80069a6:	4649      	mov	r1, r9
 80069a8:	414b      	adcs	r3, r1
 80069aa:	607b      	str	r3, [r7, #4]
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069b8:	4659      	mov	r1, fp
 80069ba:	00cb      	lsls	r3, r1, #3
 80069bc:	4651      	mov	r1, sl
 80069be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c2:	4651      	mov	r1, sl
 80069c4:	00ca      	lsls	r2, r1, #3
 80069c6:	4610      	mov	r0, r2
 80069c8:	4619      	mov	r1, r3
 80069ca:	4603      	mov	r3, r0
 80069cc:	4642      	mov	r2, r8
 80069ce:	189b      	adds	r3, r3, r2
 80069d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d2:	464b      	mov	r3, r9
 80069d4:	460a      	mov	r2, r1
 80069d6:	eb42 0303 	adc.w	r3, r2, r3
 80069da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	663b      	str	r3, [r7, #96]	; 0x60
 80069e6:	667a      	str	r2, [r7, #100]	; 0x64
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069f4:	4649      	mov	r1, r9
 80069f6:	008b      	lsls	r3, r1, #2
 80069f8:	4641      	mov	r1, r8
 80069fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069fe:	4641      	mov	r1, r8
 8006a00:	008a      	lsls	r2, r1, #2
 8006a02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a06:	f7f9 fbf1 	bl	80001ec <__aeabi_uldivmod>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006a10:	fba3 1302 	umull	r1, r3, r3, r2
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	2164      	movs	r1, #100	; 0x64
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	3332      	adds	r3, #50	; 0x32
 8006a22:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4422      	add	r2, r4
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a44:	51eb851f 	.word	0x51eb851f

08006a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a48:	b084      	sub	sp, #16
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	f107 001c 	add.w	r0, r7, #28
 8006a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d122      	bne.n	8006aa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d105      	bne.n	8006a9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 faa2 	bl	8006fe4 <USB_CoreReset>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]
 8006aa4:	e01a      	b.n	8006adc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa96 	bl	8006fe4 <USB_CoreReset>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ace:	e005      	b.n	8006adc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10b      	bne.n	8006afa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f043 0206 	orr.w	r2, r3, #6
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f043 0220 	orr.w	r2, r3, #32
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b06:	b004      	add	sp, #16
 8006b08:	4770      	bx	lr

08006b0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f023 0201 	bic.w	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d115      	bne.n	8006b7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	f7fb fe36 	bl	80027cc <HAL_Delay>
      ms++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa2e 	bl	8006fc8 <USB_GetMode>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d01e      	beq.n	8006bb0 <USB_SetCurrentMode+0x84>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b31      	cmp	r3, #49	; 0x31
 8006b76:	d9f0      	bls.n	8006b5a <USB_SetCurrentMode+0x2e>
 8006b78:	e01a      	b.n	8006bb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d115      	bne.n	8006bac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	f7fb fe1d 	bl	80027cc <HAL_Delay>
      ms++;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fa15 	bl	8006fc8 <USB_GetMode>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <USB_SetCurrentMode+0x84>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b31      	cmp	r3, #49	; 0x31
 8006ba8:	d9f0      	bls.n	8006b8c <USB_SetCurrentMode+0x60>
 8006baa:	e001      	b.n	8006bb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e005      	b.n	8006bbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b32      	cmp	r3, #50	; 0x32
 8006bb4:	d101      	bne.n	8006bba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b086      	sub	sp, #24
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bde:	2300      	movs	r3, #0
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	e009      	b.n	8006bf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	3340      	adds	r3, #64	; 0x40
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b0e      	cmp	r3, #14
 8006bfc:	d9f2      	bls.n	8006be4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11c      	bne.n	8006c3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c12:	f043 0302 	orr.w	r3, r3, #2
 8006c16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8006c3c:	e00b      	b.n	8006c56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2300      	movs	r3, #0
 8006c60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c68:	4619      	mov	r1, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c70:	461a      	mov	r2, r3
 8006c72:	680b      	ldr	r3, [r1, #0]
 8006c74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d10c      	bne.n	8006c96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d104      	bne.n	8006c8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c82:	2100      	movs	r1, #0
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f965 	bl	8006f54 <USB_SetDevSpeed>
 8006c8a:	e008      	b.n	8006c9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f960 	bl	8006f54 <USB_SetDevSpeed>
 8006c94:	e003      	b.n	8006c9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c96:	2103      	movs	r1, #3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f95b 	bl	8006f54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c9e:	2110      	movs	r1, #16
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8f3 	bl	8006e8c <USB_FlushTxFifo>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f91f 	bl	8006ef4 <USB_FlushRxFifo>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cde:	461a      	mov	r2, r3
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	e043      	b.n	8006d72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d00:	d118      	bne.n	8006d34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d14:	461a      	mov	r2, r3
 8006d16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e013      	b.n	8006d46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e008      	b.n	8006d46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	461a      	mov	r2, r3
 8006d42:	2300      	movs	r3, #0
 8006d44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d52:	461a      	mov	r2, r3
 8006d54:	2300      	movs	r3, #0
 8006d56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d64:	461a      	mov	r2, r3
 8006d66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d3b7      	bcc.n	8006cea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	e043      	b.n	8006e08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d96:	d118      	bne.n	8006dca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	461a      	mov	r2, r3
 8006dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	e013      	b.n	8006ddc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	e008      	b.n	8006ddc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	2300      	movs	r3, #0
 8006dda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de8:	461a      	mov	r2, r3
 8006dea:	2300      	movs	r3, #0
 8006dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	3301      	adds	r3, #1
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d3b7      	bcc.n	8006d80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	f043 0210 	orr.w	r2, r3, #16
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699a      	ldr	r2, [r3, #24]
 8006e48:	4b0f      	ldr	r3, [pc, #60]	; (8006e88 <USB_DevInit+0x2c4>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f043 0208 	orr.w	r2, r3, #8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d107      	bne.n	8006e78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e70:	f043 0304 	orr.w	r3, r3, #4
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e84:	b004      	add	sp, #16
 8006e86:	4770      	bx	lr
 8006e88:	803c3800 	.word	0x803c3800

08006e8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <USB_FlushTxFifo+0x64>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d901      	bls.n	8006eac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e01b      	b.n	8006ee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	daf2      	bge.n	8006e9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	019b      	lsls	r3, r3, #6
 8006ebc:	f043 0220 	orr.w	r2, r3, #32
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <USB_FlushTxFifo+0x64>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d901      	bls.n	8006ed6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e006      	b.n	8006ee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	d0f0      	beq.n	8006ec4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	00030d40 	.word	0x00030d40

08006ef4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4a11      	ldr	r2, [pc, #68]	; (8006f50 <USB_FlushRxFifo+0x5c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d901      	bls.n	8006f12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e018      	b.n	8006f44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	daf2      	bge.n	8006f00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2210      	movs	r2, #16
 8006f22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <USB_FlushRxFifo+0x5c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e006      	b.n	8006f44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d0f0      	beq.n	8006f24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	00030d40 	.word	0x00030d40

08006f54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f74:	4313      	orrs	r3, r2
 8006f76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fa0:	f023 0303 	bic.w	r3, r3, #3
 8006fa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fb4:	f043 0302 	orr.w	r3, r3, #2
 8006fb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a13      	ldr	r2, [pc, #76]	; (8007048 <USB_CoreReset+0x64>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e01b      	b.n	800703a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	daf2      	bge.n	8006ff0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f043 0201 	orr.w	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3301      	adds	r3, #1
 800701e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a09      	ldr	r2, [pc, #36]	; (8007048 <USB_CoreReset+0x64>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d901      	bls.n	800702c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e006      	b.n	800703a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d0f0      	beq.n	800701a <USB_CoreReset+0x36>

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	00030d40 	.word	0x00030d40

0800704c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007052:	4b26      	ldr	r3, [pc, #152]	; (80070ec <_DoInit+0xa0>)
 8007054:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007056:	22a8      	movs	r2, #168	; 0xa8
 8007058:	2100      	movs	r1, #0
 800705a:	6838      	ldr	r0, [r7, #0]
 800705c:	f000 fd0c 	bl	8007a78 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2203      	movs	r2, #3
 8007064:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2203      	movs	r2, #3
 800706a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	4a20      	ldr	r2, [pc, #128]	; (80070f0 <_DoInit+0xa4>)
 8007070:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	4a1f      	ldr	r2, [pc, #124]	; (80070f4 <_DoInit+0xa8>)
 8007076:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800707e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2200      	movs	r2, #0
 8007084:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2200      	movs	r2, #0
 800708a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <_DoInit+0xa4>)
 8007096:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4a17      	ldr	r2, [pc, #92]	; (80070f8 <_DoInit+0xac>)
 800709c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2210      	movs	r2, #16
 80070a2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2200      	movs	r2, #0
 80070ae:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2200      	movs	r2, #0
 80070b4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80070b6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80070ba:	2300      	movs	r3, #0
 80070bc:	607b      	str	r3, [r7, #4]
 80070be:	e00c      	b.n	80070da <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f1c3 030f 	rsb	r3, r3, #15
 80070c6:	4a0d      	ldr	r2, [pc, #52]	; (80070fc <_DoInit+0xb0>)
 80070c8:	5cd1      	ldrb	r1, [r2, r3]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4413      	add	r3, r2
 80070d0:	460a      	mov	r2, r1
 80070d2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3301      	adds	r3, #1
 80070d8:	607b      	str	r3, [r7, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b0f      	cmp	r3, #15
 80070de:	d9ef      	bls.n	80070c0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80070e0:	f3bf 8f5f 	dmb	sy
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000978 	.word	0x20000978
 80070f0:	080082e4 	.word	0x080082e4
 80070f4:	20000a20 	.word	0x20000a20
 80070f8:	20000e20 	.word	0x20000e20
 80070fc:	08008310 	.word	0x08008310

08007100 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b08a      	sub	sp, #40	; 0x28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800710c:	2300      	movs	r3, #0
 800710e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	429a      	cmp	r2, r3
 8007122:	d905      	bls.n	8007130 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
 800712e:	e007      	b.n	8007140 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	69b9      	ldr	r1, [r7, #24]
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	1acb      	subs	r3, r1, r3
 800713a:	4413      	add	r3, r2
 800713c:	3b01      	subs	r3, #1
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714a:	4293      	cmp	r3, r2
 800714c:	bf28      	it	cs
 800714e:	4613      	movcs	r3, r2
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8007152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4293      	cmp	r3, r2
 8007158:	bf28      	it	cs
 800715a:	4613      	movcs	r3, r2
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	4413      	add	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8007168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	6978      	ldr	r0, [r7, #20]
 800716e:	f000 fcaf 	bl	8007ad0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8007172:	6a3a      	ldr	r2, [r7, #32]
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	4413      	add	r3, r2
 8007178:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	4413      	add	r3, r2
 8007180:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	4413      	add	r3, r2
 8007190:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	429a      	cmp	r2, r3
 800719a:	d101      	bne.n	80071a0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800719c:	2300      	movs	r3, #0
 800719e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80071a0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1b2      	bne.n	8007116 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80071b0:	6a3b      	ldr	r3, [r7, #32]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3728      	adds	r7, #40	; 0x28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b088      	sub	sp, #32
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d911      	bls.n	8007202 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	4413      	add	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	6938      	ldr	r0, [r7, #16]
 80071ee:	f000 fc6f 	bl	8007ad0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80071f2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	441a      	add	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8007200:	e01f      	b.n	8007242 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	6938      	ldr	r0, [r7, #16]
 8007216:	f000 fc5b 	bl	8007ad0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	4413      	add	r3, r2
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4619      	mov	r1, r3
 8007232:	6938      	ldr	r0, [r7, #16]
 8007234:	f000 fc4c 	bl	8007ad0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007238:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	60da      	str	r2, [r3, #12]
}
 8007242:	bf00      	nop
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800724a:	b480      	push	{r7}
 800724c:	b087      	sub	sp, #28
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	429a      	cmp	r2, r3
 8007264:	d808      	bhi.n	8007278 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad2      	subs	r2, r2, r3
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	4413      	add	r3, r2
 8007272:	3b01      	subs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e004      	b.n	8007282 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	617b      	str	r3, [r7, #20]
  }
  return r;
 8007282:	697b      	ldr	r3, [r7, #20]
}
 8007284:	4618      	mov	r0, r3
 8007286:	371c      	adds	r7, #28
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	4613      	mov	r3, r2
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	4413      	add	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4a1f      	ldr	r2, [pc, #124]	; (800732c <SEGGER_RTT_WriteNoLock+0x9c>)
 80072ae:	4413      	add	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d029      	beq.n	800730e <SEGGER_RTT_WriteNoLock+0x7e>
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d82e      	bhi.n	800731c <SEGGER_RTT_WriteNoLock+0x8c>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <SEGGER_RTT_WriteNoLock+0x38>
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d013      	beq.n	80072ee <SEGGER_RTT_WriteNoLock+0x5e>
 80072c6:	e029      	b.n	800731c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80072c8:	6978      	ldr	r0, [r7, #20]
 80072ca:	f7ff ffbe 	bl	800724a <_GetAvailWriteSpace>
 80072ce:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d202      	bcs.n	80072de <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80072d8:	2300      	movs	r3, #0
 80072da:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80072dc:	e021      	b.n	8007322 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	69b9      	ldr	r1, [r7, #24]
 80072e6:	6978      	ldr	r0, [r7, #20]
 80072e8:	f7ff ff67 	bl	80071ba <_WriteNoCheck>
    break;
 80072ec:	e019      	b.n	8007322 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80072ee:	6978      	ldr	r0, [r7, #20]
 80072f0:	f7ff ffab 	bl	800724a <_GetAvailWriteSpace>
 80072f4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	4293      	cmp	r3, r2
 80072fc:	bf28      	it	cs
 80072fe:	4613      	movcs	r3, r2
 8007300:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	69b9      	ldr	r1, [r7, #24]
 8007306:	6978      	ldr	r0, [r7, #20]
 8007308:	f7ff ff57 	bl	80071ba <_WriteNoCheck>
    break;
 800730c:	e009      	b.n	8007322 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	69b9      	ldr	r1, [r7, #24]
 8007312:	6978      	ldr	r0, [r7, #20]
 8007314:	f7ff fef4 	bl	8007100 <_WriteBlocking>
 8007318:	61f8      	str	r0, [r7, #28]
    break;
 800731a:	e002      	b.n	8007322 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800731c:	2300      	movs	r3, #0
 800731e:	61fb      	str	r3, [r7, #28]
    break;
 8007320:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8007322:	69fb      	ldr	r3, [r7, #28]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000978 	.word	0x20000978

08007330 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800733c:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <SEGGER_RTT_Write+0x48>)
 800733e:	61fb      	str	r3, [r7, #28]
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b53      	cmp	r3, #83	; 0x53
 8007348:	d001      	beq.n	800734e <SEGGER_RTT_Write+0x1e>
 800734a:	f7ff fe7f 	bl	800704c <_DoInit>
  SEGGER_RTT_LOCK();
 800734e:	f3ef 8311 	mrs	r3, BASEPRI
 8007352:	f04f 0120 	mov.w	r1, #32
 8007356:	f381 8811 	msr	BASEPRI, r1
 800735a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7ff ff95 	bl	8007290 <SEGGER_RTT_WriteNoLock>
 8007366:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800736e:	697b      	ldr	r3, [r7, #20]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3720      	adds	r7, #32
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20000978 	.word	0x20000978

0800737c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	429a      	cmp	r2, r3
 8007398:	d80e      	bhi.n	80073b8 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d115      	bne.n	80073f0 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6918      	ldr	r0, [r3, #16]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6819      	ldr	r1, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	461a      	mov	r2, r3
 80073d2:	f7ff ffad 	bl	8007330 <SEGGER_RTT_Write>
 80073d6:	4602      	mov	r2, r0
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d004      	beq.n	80073ea <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f04f 32ff 	mov.w	r2, #4294967295
 80073e6:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80073e8:	e002      	b.n	80073f0 <_StoreChar+0x74>
      p->Cnt = 0u;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	609a      	str	r2, [r3, #8]
}
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	; 0x28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800740a:	2301      	movs	r3, #1
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800740e:	2301      	movs	r3, #1
 8007410:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8007412:	e007      	b.n	8007424 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8007414:	6a3a      	ldr	r2, [r7, #32]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	fbb2 f3f3 	udiv	r3, r2, r3
 800741c:	623b      	str	r3, [r7, #32]
    Width++;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	3301      	adds	r3, #1
 8007422:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8007424:	6a3a      	ldr	r2, [r7, #32]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d2f3      	bcs.n	8007414 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	429a      	cmp	r2, r3
 8007432:	d901      	bls.n	8007438 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8007438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d125      	bne.n	800748e <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	2b00      	cmp	r3, #0
 8007446:	d022      	beq.n	800748e <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8007448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <_PrintUnsigned+0x66>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <_PrintUnsigned+0x66>
        c = '0';
 8007458:	2330      	movs	r3, #48	; 0x30
 800745a:	76fb      	strb	r3, [r7, #27]
 800745c:	e001      	b.n	8007462 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800745e:	2320      	movs	r3, #32
 8007460:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007462:	e00b      	b.n	800747c <_PrintUnsigned+0x84>
        FieldWidth--;
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	3b01      	subs	r3, #1
 8007468:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800746a:	7efb      	ldrb	r3, [r7, #27]
 800746c:	4619      	mov	r1, r3
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7ff ff84 	bl	800737c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	db07      	blt.n	800748c <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <_PrintUnsigned+0x96>
 8007482:	69fa      	ldr	r2, [r7, #28]
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	429a      	cmp	r2, r3
 8007488:	d3ec      	bcc.n	8007464 <_PrintUnsigned+0x6c>
 800748a:	e000      	b.n	800748e <_PrintUnsigned+0x96>
          break;
 800748c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	db55      	blt.n	8007542 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d903      	bls.n	80074a4 <_PrintUnsigned+0xac>
        NumDigits--;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	3b01      	subs	r3, #1
 80074a0:	603b      	str	r3, [r7, #0]
 80074a2:	e009      	b.n	80074b8 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ac:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d200      	bcs.n	80074b8 <_PrintUnsigned+0xc0>
          break;
 80074b6:	e005      	b.n	80074c4 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	fb02 f303 	mul.w	r3, r2, r3
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80074c2:	e7e8      	b.n	8007496 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074cc:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80074dc:	4a1b      	ldr	r2, [pc, #108]	; (800754c <_PrintUnsigned+0x154>)
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	4413      	add	r3, r2
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	4619      	mov	r1, r3
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff ff48 	bl	800737c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	db08      	blt.n	8007506 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80074f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1df      	bne.n	80074c4 <_PrintUnsigned+0xcc>
 8007504:	e000      	b.n	8007508 <_PrintUnsigned+0x110>
        break;
 8007506:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8007508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d017      	beq.n	8007542 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	2b00      	cmp	r3, #0
 8007516:	d014      	beq.n	8007542 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007518:	e00a      	b.n	8007530 <_PrintUnsigned+0x138>
          FieldWidth--;
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	3b01      	subs	r3, #1
 800751e:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8007520:	2120      	movs	r1, #32
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f7ff ff2a 	bl	800737c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	db07      	blt.n	8007540 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <_PrintUnsigned+0x14a>
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	429a      	cmp	r2, r3
 800753c:	d3ed      	bcc.n	800751a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 800753e:	e000      	b.n	8007542 <_PrintUnsigned+0x14a>
            break;
 8007540:	bf00      	nop
}
 8007542:	bf00      	nop
 8007544:	3728      	adds	r7, #40	; 0x28
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	08008324 	.word	0x08008324

08007550 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	bfb8      	it	lt
 8007564:	425b      	neglt	r3, r3
 8007566:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8007568:	2301      	movs	r3, #1
 800756a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800756c:	e007      	b.n	800757e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	fb92 f3f3 	sdiv	r3, r2, r3
 8007576:	613b      	str	r3, [r7, #16]
    Width++;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	3301      	adds	r3, #1
 800757c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	daf3      	bge.n	800756e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	429a      	cmp	r2, r3
 800758c:	d901      	bls.n	8007592 <_PrintInt+0x42>
    Width = NumDigits;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <_PrintInt+0x5e>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	db04      	blt.n	80075a8 <_PrintInt+0x58>
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <_PrintInt+0x5e>
    FieldWidth--;
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <_PrintInt+0x6e>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01c      	beq.n	80075f8 <_PrintInt+0xa8>
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d117      	bne.n	80075f8 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d014      	beq.n	80075f8 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80075ce:	e00a      	b.n	80075e6 <_PrintInt+0x96>
        FieldWidth--;
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80075d6:	2120      	movs	r1, #32
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f7ff fecf 	bl	800737c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	db07      	blt.n	80075f6 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <_PrintInt+0xa8>
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d3ed      	bcc.n	80075d0 <_PrintInt+0x80>
 80075f4:	e000      	b.n	80075f8 <_PrintInt+0xa8>
          break;
 80075f6:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	db4a      	blt.n	8007696 <_PrintInt+0x146>
    if (v < 0) {
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	da07      	bge.n	8007616 <_PrintInt+0xc6>
      v = -v;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	425b      	negs	r3, r3
 800760a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 800760c:	212d      	movs	r1, #45	; 0x2d
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff feb4 	bl	800737c <_StoreChar>
 8007614:	e008      	b.n	8007628 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8007620:	212b      	movs	r1, #43	; 0x2b
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff feaa 	bl	800737c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	db32      	blt.n	8007696 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01f      	beq.n	800767a <_PrintInt+0x12a>
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d11a      	bne.n	800767a <_PrintInt+0x12a>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d117      	bne.n	800767a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d014      	beq.n	800767a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007650:	e00a      	b.n	8007668 <_PrintInt+0x118>
            FieldWidth--;
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	3b01      	subs	r3, #1
 8007656:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8007658:	2130      	movs	r1, #48	; 0x30
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fe8e 	bl	800737c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	db07      	blt.n	8007678 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <_PrintInt+0x12a>
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	429a      	cmp	r2, r3
 8007674:	d3ed      	bcc.n	8007652 <_PrintInt+0x102>
 8007676:	e000      	b.n	800767a <_PrintInt+0x12a>
              break;
 8007678:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	db09      	blt.n	8007696 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff feb1 	bl	80073f8 <_PrintUnsigned>
      }
    }
  }
}
 8007696:	bf00      	nop
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b0a2      	sub	sp, #136	; 0x88
 80076a4:	af02      	add	r7, sp, #8
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 80076ac:	f107 0310 	add.w	r3, r7, #16
 80076b0:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80076b2:	2340      	movs	r3, #64	; 0x40
 80076b4:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 80076b6:	2300      	movs	r3, #0
 80076b8:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	3301      	adds	r3, #1
 80076ce:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 80076d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 819f 	beq.w	8007a18 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 80076da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80076de:	2b25      	cmp	r3, #37	; 0x25
 80076e0:	f040 818d 	bne.w	80079fe <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80076e4:	2300      	movs	r3, #0
 80076e6:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 80076e8:	2301      	movs	r3, #1
 80076ea:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 80076f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80076f8:	3b23      	subs	r3, #35	; 0x23
 80076fa:	2b0d      	cmp	r3, #13
 80076fc:	d83e      	bhi.n	800777c <SEGGER_RTT_vprintf+0xdc>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <SEGGER_RTT_vprintf+0x64>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	0800776d 	.word	0x0800776d
 8007708:	0800777d 	.word	0x0800777d
 800770c:	0800777d 	.word	0x0800777d
 8007710:	0800777d 	.word	0x0800777d
 8007714:	0800777d 	.word	0x0800777d
 8007718:	0800777d 	.word	0x0800777d
 800771c:	0800777d 	.word	0x0800777d
 8007720:	0800777d 	.word	0x0800777d
 8007724:	0800775d 	.word	0x0800775d
 8007728:	0800777d 	.word	0x0800777d
 800772c:	0800773d 	.word	0x0800773d
 8007730:	0800777d 	.word	0x0800777d
 8007734:	0800777d 	.word	0x0800777d
 8007738:	0800774d 	.word	0x0800774d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800773c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	673b      	str	r3, [r7, #112]	; 0x70
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	3301      	adds	r3, #1
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	e01a      	b.n	8007782 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800774c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800774e:	f043 0302 	orr.w	r3, r3, #2
 8007752:	673b      	str	r3, [r7, #112]	; 0x70
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	3301      	adds	r3, #1
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	e012      	b.n	8007782 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800775c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800775e:	f043 0304 	orr.w	r3, r3, #4
 8007762:	673b      	str	r3, [r7, #112]	; 0x70
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	3301      	adds	r3, #1
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	e00a      	b.n	8007782 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800776c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800776e:	f043 0308 	orr.w	r3, r3, #8
 8007772:	673b      	str	r3, [r7, #112]	; 0x70
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	3301      	adds	r3, #1
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	e002      	b.n	8007782 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 800777c:	2300      	movs	r3, #0
 800777e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007780:	bf00      	nop
        }
      } while (v);
 8007782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1b1      	bne.n	80076ec <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8007788:	2300      	movs	r3, #0
 800778a:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8007794:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007798:	2b2f      	cmp	r3, #47	; 0x2f
 800779a:	d912      	bls.n	80077c2 <SEGGER_RTT_vprintf+0x122>
 800779c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80077a0:	2b39      	cmp	r3, #57	; 0x39
 80077a2:	d80e      	bhi.n	80077c2 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80077aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	461a      	mov	r2, r3
 80077b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80077ba:	4413      	add	r3, r2
 80077bc:	3b30      	subs	r3, #48	; 0x30
 80077be:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 80077c0:	e7e4      	b.n	800778c <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80077c2:	2300      	movs	r3, #0
 80077c4:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 80077ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80077d2:	2b2e      	cmp	r3, #46	; 0x2e
 80077d4:	d11d      	bne.n	8007812 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	3301      	adds	r3, #1
 80077da:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 80077e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80077e8:	2b2f      	cmp	r3, #47	; 0x2f
 80077ea:	d912      	bls.n	8007812 <SEGGER_RTT_vprintf+0x172>
 80077ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80077f0:	2b39      	cmp	r3, #57	; 0x39
 80077f2:	d80e      	bhi.n	8007812 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80077fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	461a      	mov	r2, r3
 8007806:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800780a:	4413      	add	r3, r2
 800780c:	3b30      	subs	r3, #48	; 0x30
 800780e:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8007810:	e7e4      	b.n	80077dc <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 800781a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800781e:	2b6c      	cmp	r3, #108	; 0x6c
 8007820:	d003      	beq.n	800782a <SEGGER_RTT_vprintf+0x18a>
 8007822:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007826:	2b68      	cmp	r3, #104	; 0x68
 8007828:	d107      	bne.n	800783a <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	3301      	adds	r3, #1
 800782e:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8007838:	e7ef      	b.n	800781a <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800783a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800783e:	2b25      	cmp	r3, #37	; 0x25
 8007840:	f000 80d1 	beq.w	80079e6 <SEGGER_RTT_vprintf+0x346>
 8007844:	2b25      	cmp	r3, #37	; 0x25
 8007846:	f2c0 80d5 	blt.w	80079f4 <SEGGER_RTT_vprintf+0x354>
 800784a:	2b78      	cmp	r3, #120	; 0x78
 800784c:	f300 80d2 	bgt.w	80079f4 <SEGGER_RTT_vprintf+0x354>
 8007850:	2b58      	cmp	r3, #88	; 0x58
 8007852:	f2c0 80cf 	blt.w	80079f4 <SEGGER_RTT_vprintf+0x354>
 8007856:	3b58      	subs	r3, #88	; 0x58
 8007858:	2b20      	cmp	r3, #32
 800785a:	f200 80cb 	bhi.w	80079f4 <SEGGER_RTT_vprintf+0x354>
 800785e:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <SEGGER_RTT_vprintf+0x1c4>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	0800795b 	.word	0x0800795b
 8007868:	080079f5 	.word	0x080079f5
 800786c:	080079f5 	.word	0x080079f5
 8007870:	080079f5 	.word	0x080079f5
 8007874:	080079f5 	.word	0x080079f5
 8007878:	080079f5 	.word	0x080079f5
 800787c:	080079f5 	.word	0x080079f5
 8007880:	080079f5 	.word	0x080079f5
 8007884:	080079f5 	.word	0x080079f5
 8007888:	080079f5 	.word	0x080079f5
 800788c:	080079f5 	.word	0x080079f5
 8007890:	080078e9 	.word	0x080078e9
 8007894:	0800790f 	.word	0x0800790f
 8007898:	080079f5 	.word	0x080079f5
 800789c:	080079f5 	.word	0x080079f5
 80078a0:	080079f5 	.word	0x080079f5
 80078a4:	080079f5 	.word	0x080079f5
 80078a8:	080079f5 	.word	0x080079f5
 80078ac:	080079f5 	.word	0x080079f5
 80078b0:	080079f5 	.word	0x080079f5
 80078b4:	080079f5 	.word	0x080079f5
 80078b8:	080079f5 	.word	0x080079f5
 80078bc:	080079f5 	.word	0x080079f5
 80078c0:	080079f5 	.word	0x080079f5
 80078c4:	080079c1 	.word	0x080079c1
 80078c8:	080079f5 	.word	0x080079f5
 80078cc:	080079f5 	.word	0x080079f5
 80078d0:	08007981 	.word	0x08007981
 80078d4:	080079f5 	.word	0x080079f5
 80078d8:	08007935 	.word	0x08007935
 80078dc:	080079f5 	.word	0x080079f5
 80078e0:	080079f5 	.word	0x080079f5
 80078e4:	0800795b 	.word	0x0800795b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	1d19      	adds	r1, r3, #4
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	6011      	str	r1, [r2, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 80078f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 80078fc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007900:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007904:	4611      	mov	r1, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff fd38 	bl	800737c <_StoreChar>
        break;
 800790c:	e073      	b.n	80079f6 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	1d19      	adds	r1, r3, #4
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6011      	str	r1, [r2, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800791c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800792a:	220a      	movs	r2, #10
 800792c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800792e:	f7ff fe0f 	bl	8007550 <_PrintInt>
        break;
 8007932:	e060      	b.n	80079f6 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	1d19      	adds	r1, r3, #4
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8007942:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007944:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007952:	220a      	movs	r2, #10
 8007954:	f7ff fd50 	bl	80073f8 <_PrintUnsigned>
        break;
 8007958:	e04d      	b.n	80079f6 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	1d19      	adds	r1, r3, #4
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6011      	str	r1, [r2, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8007968:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800796a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800796e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007978:	2210      	movs	r2, #16
 800797a:	f7ff fd3d 	bl	80073f8 <_PrintUnsigned>
        break;
 800797e:	e03a      	b.n	80079f6 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	1d19      	adds	r1, r3, #4
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6011      	str	r1, [r2, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 800798e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8007996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007998:	3301      	adds	r3, #1
 800799a:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 800799c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 80079a4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80079a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079ac:	4611      	mov	r1, r2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff fce4 	bl	800737c <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 80079b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	dae9      	bge.n	800798e <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 80079ba:	e01c      	b.n	80079f6 <SEGGER_RTT_vprintf+0x356>
              break;
 80079bc:	bf00      	nop
        break;
 80079be:	e01a      	b.n	80079f6 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	1d19      	adds	r1, r3, #4
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6011      	str	r1, [r2, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80079ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80079d0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80079d4:	2300      	movs	r3, #0
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	2308      	movs	r3, #8
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	2308      	movs	r3, #8
 80079de:	2210      	movs	r2, #16
 80079e0:	f7ff fd0a 	bl	80073f8 <_PrintUnsigned>
        break;
 80079e4:	e007      	b.n	80079f6 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80079e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079ea:	2125      	movs	r1, #37	; 0x25
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff fcc5 	bl	800737c <_StoreChar>
        break;
 80079f2:	e000      	b.n	80079f6 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 80079f4:	bf00      	nop
      }
      sFormat++;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	3301      	adds	r3, #1
 80079fa:	60bb      	str	r3, [r7, #8]
 80079fc:	e007      	b.n	8007a0e <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 80079fe:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8007a02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a06:	4611      	mov	r1, r2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff fcb7 	bl	800737c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8007a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f6bf ae56 	bge.w	80076c2 <SEGGER_RTT_vprintf+0x22>
 8007a16:	e000      	b.n	8007a1a <SEGGER_RTT_vprintf+0x37a>
      break;
 8007a18:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8007a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	dd0d      	ble.n	8007a3c <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8007a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d006      	beq.n	8007a34 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8007a26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a28:	f107 0310 	add.w	r3, r7, #16
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fc7e 	bl	8007330 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8007a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a38:	4413      	add	r3, r2
 8007a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8007a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3780      	adds	r7, #128	; 0x80
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop

08007a48 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8007a48:	b40e      	push	{r1, r2, r3}
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8007a52:	f107 0320 	add.w	r3, r7, #32
 8007a56:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8007a58:	f107 0308 	add.w	r3, r7, #8
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	69f9      	ldr	r1, [r7, #28]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fe1d 	bl	80076a0 <SEGGER_RTT_vprintf>
 8007a66:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8007a68:	68fb      	ldr	r3, [r7, #12]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a74:	b003      	add	sp, #12
 8007a76:	4770      	bx	lr

08007a78 <memset>:
 8007a78:	4402      	add	r2, r0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d100      	bne.n	8007a82 <memset+0xa>
 8007a80:	4770      	bx	lr
 8007a82:	f803 1b01 	strb.w	r1, [r3], #1
 8007a86:	e7f9      	b.n	8007a7c <memset+0x4>

08007a88 <__libc_init_array>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4d0d      	ldr	r5, [pc, #52]	; (8007ac0 <__libc_init_array+0x38>)
 8007a8c:	4c0d      	ldr	r4, [pc, #52]	; (8007ac4 <__libc_init_array+0x3c>)
 8007a8e:	1b64      	subs	r4, r4, r5
 8007a90:	10a4      	asrs	r4, r4, #2
 8007a92:	2600      	movs	r6, #0
 8007a94:	42a6      	cmp	r6, r4
 8007a96:	d109      	bne.n	8007aac <__libc_init_array+0x24>
 8007a98:	4d0b      	ldr	r5, [pc, #44]	; (8007ac8 <__libc_init_array+0x40>)
 8007a9a:	4c0c      	ldr	r4, [pc, #48]	; (8007acc <__libc_init_array+0x44>)
 8007a9c:	f000 f826 	bl	8007aec <_init>
 8007aa0:	1b64      	subs	r4, r4, r5
 8007aa2:	10a4      	asrs	r4, r4, #2
 8007aa4:	2600      	movs	r6, #0
 8007aa6:	42a6      	cmp	r6, r4
 8007aa8:	d105      	bne.n	8007ab6 <__libc_init_array+0x2e>
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab0:	4798      	blx	r3
 8007ab2:	3601      	adds	r6, #1
 8007ab4:	e7ee      	b.n	8007a94 <__libc_init_array+0xc>
 8007ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aba:	4798      	blx	r3
 8007abc:	3601      	adds	r6, #1
 8007abe:	e7f2      	b.n	8007aa6 <__libc_init_array+0x1e>
 8007ac0:	0800833c 	.word	0x0800833c
 8007ac4:	0800833c 	.word	0x0800833c
 8007ac8:	0800833c 	.word	0x0800833c
 8007acc:	08008340 	.word	0x08008340

08007ad0 <memcpy>:
 8007ad0:	440a      	add	r2, r1
 8007ad2:	4291      	cmp	r1, r2
 8007ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ad8:	d100      	bne.n	8007adc <memcpy+0xc>
 8007ada:	4770      	bx	lr
 8007adc:	b510      	push	{r4, lr}
 8007ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ae6:	4291      	cmp	r1, r2
 8007ae8:	d1f9      	bne.n	8007ade <memcpy+0xe>
 8007aea:	bd10      	pop	{r4, pc}

08007aec <_init>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	bf00      	nop
 8007af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af2:	bc08      	pop	{r3}
 8007af4:	469e      	mov	lr, r3
 8007af6:	4770      	bx	lr

08007af8 <_fini>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	bf00      	nop
 8007afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afe:	bc08      	pop	{r3}
 8007b00:	469e      	mov	lr, r3
 8007b02:	4770      	bx	lr
