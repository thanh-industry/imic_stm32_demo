
stm32_rfid_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b85c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b68  0801ba0c  0801ba0c  0002ba0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f574  0801f574  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801f574  0801f574  0002f574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f57c  0801f57c  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f57c  0801f57c  0002f57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f580  0801f580  0002f580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801f584  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00012978  200000a8  200000a8  000300a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012a20  20012a20  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003d719  00000000  00000000  0003011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008e8b  00000000  00000000  0006d834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002fb8  00000000  00000000  000766c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002615  00000000  00000000  00079678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00012715  00000000  00000000  0007bc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00045c54  00000000  00000000  0008e3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109a32  00000000  00000000  000d3ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000d2f4  00000000  00000000  001dda28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  001ead1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801b9f4 	.word	0x0801b9f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	0801b9f4 	.word	0x0801b9f4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <writeNameToRFIDCard>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void writeNameToRFIDCard(char *firstName, char *lastName)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b092      	sub	sp, #72	; 0x48
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
	  MIFARE_Key key;
	  for (uint8_t i = 0; i < 6; i++) key.keyByte[i] = 0xFF;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80005ac:	e00b      	b.n	80005c6 <writeNameToRFIDCard+0x2a>
 80005ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005b2:	3340      	adds	r3, #64	; 0x40
 80005b4:	443b      	add	r3, r7
 80005b6:	22ff      	movs	r2, #255	; 0xff
 80005b8:	f803 2c10 	strb.w	r2, [r3, #-16]
 80005bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005c0:	3301      	adds	r3, #1
 80005c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80005c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d9ef      	bls.n	80005ae <writeNameToRFIDCard+0x12>


	  SEGGER_RTT_printf(0, "Card UID:");    //Dump UID
 80005ce:	49ca      	ldr	r1, [pc, #808]	; (80008f8 <writeNameToRFIDCard+0x35c>)
 80005d0:	2000      	movs	r0, #0
 80005d2:	f01a f989 	bl	801a8e8 <SEGGER_RTT_printf>
	  for (uint8_t i = 0; i < rfidReader.uid.size; i++) {
 80005d6:	2300      	movs	r3, #0
 80005d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80005dc:	e01c      	b.n	8000618 <writeNameToRFIDCard+0x7c>
	    SEGGER_RTT_printf(0, rfidReader.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80005de:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80005e2:	4ac6      	ldr	r2, [pc, #792]	; (80008fc <writeNameToRFIDCard+0x360>)
 80005e4:	4413      	add	r3, r2
 80005e6:	7d5b      	ldrb	r3, [r3, #21]
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	d801      	bhi.n	80005f0 <writeNameToRFIDCard+0x54>
 80005ec:	4bc4      	ldr	r3, [pc, #784]	; (8000900 <writeNameToRFIDCard+0x364>)
 80005ee:	e000      	b.n	80005f2 <writeNameToRFIDCard+0x56>
 80005f0:	4bc4      	ldr	r3, [pc, #784]	; (8000904 <writeNameToRFIDCard+0x368>)
 80005f2:	4619      	mov	r1, r3
 80005f4:	2000      	movs	r0, #0
 80005f6:	f01a f977 	bl	801a8e8 <SEGGER_RTT_printf>
	    SEGGER_RTT_printf(0, "%02X", rfidReader.uid.uidByte[i]);
 80005fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80005fe:	4abf      	ldr	r2, [pc, #764]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000600:	4413      	add	r3, r2
 8000602:	7d5b      	ldrb	r3, [r3, #21]
 8000604:	461a      	mov	r2, r3
 8000606:	49c0      	ldr	r1, [pc, #768]	; (8000908 <writeNameToRFIDCard+0x36c>)
 8000608:	2000      	movs	r0, #0
 800060a:	f01a f96d 	bl	801a8e8 <SEGGER_RTT_printf>
	  for (uint8_t i = 0; i < rfidReader.uid.size; i++) {
 800060e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000612:	3301      	adds	r3, #1
 8000614:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000618:	4bb8      	ldr	r3, [pc, #736]	; (80008fc <writeNameToRFIDCard+0x360>)
 800061a:	7d1b      	ldrb	r3, [r3, #20]
 800061c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000620:	429a      	cmp	r2, r3
 8000622:	d3dc      	bcc.n	80005de <writeNameToRFIDCard+0x42>
	  }
	  SEGGER_RTT_printf(0, " PICC type: ");   // Dump PICC type
 8000624:	49b9      	ldr	r1, [pc, #740]	; (800090c <writeNameToRFIDCard+0x370>)
 8000626:	2000      	movs	r0, #0
 8000628:	f01a f95e 	bl	801a8e8 <SEGGER_RTT_printf>
	  PICC_Type piccType = PICC_GetType(&rfidReader, rfidReader.uid.sak);
 800062c:	4bb3      	ldr	r3, [pc, #716]	; (80008fc <writeNameToRFIDCard+0x360>)
 800062e:	7fdb      	ldrb	r3, [r3, #31]
 8000630:	4619      	mov	r1, r3
 8000632:	48b2      	ldr	r0, [pc, #712]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000634:	f002 fcbe 	bl	8002fb4 <PICC_GetType>
 8000638:	4603      	mov	r3, r0
 800063a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  SEGGER_RTT_printf(0, "%s", PICC_GetTypeName(&rfidReader, piccType));
 800063e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000642:	4619      	mov	r1, r3
 8000644:	48ad      	ldr	r0, [pc, #692]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000646:	f002 fd63 	bl	8003110 <PICC_GetTypeName>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	49b0      	ldr	r1, [pc, #704]	; (8000910 <writeNameToRFIDCard+0x374>)
 8000650:	2000      	movs	r0, #0
 8000652:	f01a f949 	bl	801a8e8 <SEGGER_RTT_printf>
	  uint8_t buffer[34];
	  uint8_t block;
	  StatusCode status;
	  uint8_t len;

	  if(firstName == NULL || lastName == NULL)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	f000 8196 	beq.w	800098a <writeNameToRFIDCard+0x3ee>
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	f000 8192 	beq.w	800098a <writeNameToRFIDCard+0x3ee>
	  {
		  return;
	  }
	  // Ask personal data: Family name

	  memcpy(buffer, firstName, strlen(firstName));
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fdc2 	bl	80001f0 <strlen>
 800066c:	4602      	mov	r2, r0
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	4618      	mov	r0, r3
 8000676:	f01a fb86 	bl	801ad86 <memcpy>
	  for (uint8_t i = strlen(firstName); i < 30; i++) buffer[i] = ' ';     // pad with spaces
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff fdb8 	bl	80001f0 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000686:	e00b      	b.n	80006a0 <writeNameToRFIDCard+0x104>
 8000688:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800068c:	3340      	adds	r3, #64	; 0x40
 800068e:	443b      	add	r3, r7
 8000690:	2220      	movs	r2, #32
 8000692:	f803 2c34 	strb.w	r2, [r3, #-52]
 8000696:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800069a:	3301      	adds	r3, #1
 800069c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80006a0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80006a4:	2b1d      	cmp	r3, #29
 80006a6:	d9ef      	bls.n	8000688 <writeNameToRFIDCard+0xec>

	  block = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	  //SEGGER_RTT_printfln(F("Authenticating using key A..."));
	  status = PCD_Authenticate(&rfidReader, PICC_CMD_MF_AUTH_KEY_A, block, &key, &(rfidReader.uid));
 80006ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80006b6:	4997      	ldr	r1, [pc, #604]	; (8000914 <writeNameToRFIDCard+0x378>)
 80006b8:	9100      	str	r1, [sp, #0]
 80006ba:	2160      	movs	r1, #96	; 0x60
 80006bc:	488f      	ldr	r0, [pc, #572]	; (80008fc <writeNameToRFIDCard+0x360>)
 80006be:	f002 fae7 	bl	8002c90 <PCD_Authenticate>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  if (status != STATUS_OK) {
 80006c8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d010      	beq.n	80006f2 <writeNameToRFIDCard+0x156>
	    SEGGER_RTT_printf(0, "PCD_Authenticate() failed: ");
 80006d0:	4991      	ldr	r1, [pc, #580]	; (8000918 <writeNameToRFIDCard+0x37c>)
 80006d2:	2000      	movs	r0, #0
 80006d4:	f01a f908 	bl	801a8e8 <SEGGER_RTT_printf>
	    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 80006d8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80006dc:	4619      	mov	r1, r3
 80006de:	4887      	ldr	r0, [pc, #540]	; (80008fc <writeNameToRFIDCard+0x360>)
 80006e0:	f002 fc18 	bl	8002f14 <GetStatusCodeName>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4989      	ldr	r1, [pc, #548]	; (8000910 <writeNameToRFIDCard+0x374>)
 80006ea:	2000      	movs	r0, #0
 80006ec:	f01a f8fc 	bl	801a8e8 <SEGGER_RTT_printf>
	    return;
 80006f0:	e14c      	b.n	800098c <writeNameToRFIDCard+0x3f0>
	  }
	  else SEGGER_RTT_printf(0, "PCD_Authenticate() success: ");
 80006f2:	498a      	ldr	r1, [pc, #552]	; (800091c <writeNameToRFIDCard+0x380>)
 80006f4:	2000      	movs	r0, #0
 80006f6:	f01a f8f7 	bl	801a8e8 <SEGGER_RTT_printf>

	  // Write block
	  status = MIFARE_Write(&rfidReader, block, buffer, 16);
 80006fa:	f107 020c 	add.w	r2, r7, #12
 80006fe:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 8000702:	2310      	movs	r3, #16
 8000704:	487d      	ldr	r0, [pc, #500]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000706:	f002 fb59 	bl	8002dbc <MIFARE_Write>
 800070a:	4603      	mov	r3, r0
 800070c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  if (status != STATUS_OK) {
 8000710:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000714:	2b00      	cmp	r3, #0
 8000716:	d010      	beq.n	800073a <writeNameToRFIDCard+0x19e>
	    SEGGER_RTT_printf(0, "MIFARE_Write() failed: ");
 8000718:	4981      	ldr	r1, [pc, #516]	; (8000920 <writeNameToRFIDCard+0x384>)
 800071a:	2000      	movs	r0, #0
 800071c:	f01a f8e4 	bl	801a8e8 <SEGGER_RTT_printf>
	    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 8000720:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000724:	4619      	mov	r1, r3
 8000726:	4875      	ldr	r0, [pc, #468]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000728:	f002 fbf4 	bl	8002f14 <GetStatusCodeName>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4977      	ldr	r1, [pc, #476]	; (8000910 <writeNameToRFIDCard+0x374>)
 8000732:	2000      	movs	r0, #0
 8000734:	f01a f8d8 	bl	801a8e8 <SEGGER_RTT_printf>
	    return;
 8000738:	e128      	b.n	800098c <writeNameToRFIDCard+0x3f0>
	  }
	  else SEGGER_RTT_printf(0, "MIFARE_Write() success: ");
 800073a:	497a      	ldr	r1, [pc, #488]	; (8000924 <writeNameToRFIDCard+0x388>)
 800073c:	2000      	movs	r0, #0
 800073e:	f01a f8d3 	bl	801a8e8 <SEGGER_RTT_printf>

	  block = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	  //SEGGER_RTT_printfln(F("Authenticating using key A..."));
	  status = PCD_Authenticate(&rfidReader, PICC_CMD_MF_AUTH_KEY_A, block, &key, &(rfidReader.uid));
 8000748:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800074c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8000750:	4970      	ldr	r1, [pc, #448]	; (8000914 <writeNameToRFIDCard+0x378>)
 8000752:	9100      	str	r1, [sp, #0]
 8000754:	2160      	movs	r1, #96	; 0x60
 8000756:	4869      	ldr	r0, [pc, #420]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000758:	f002 fa9a 	bl	8002c90 <PCD_Authenticate>
 800075c:	4603      	mov	r3, r0
 800075e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  if (status != STATUS_OK) {
 8000762:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000766:	2b00      	cmp	r3, #0
 8000768:	d010      	beq.n	800078c <writeNameToRFIDCard+0x1f0>
	    SEGGER_RTT_printf(0, "PCD_Authenticate() failed: ");
 800076a:	496b      	ldr	r1, [pc, #428]	; (8000918 <writeNameToRFIDCard+0x37c>)
 800076c:	2000      	movs	r0, #0
 800076e:	f01a f8bb 	bl	801a8e8 <SEGGER_RTT_printf>
	    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 8000772:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000776:	4619      	mov	r1, r3
 8000778:	4860      	ldr	r0, [pc, #384]	; (80008fc <writeNameToRFIDCard+0x360>)
 800077a:	f002 fbcb 	bl	8002f14 <GetStatusCodeName>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4963      	ldr	r1, [pc, #396]	; (8000910 <writeNameToRFIDCard+0x374>)
 8000784:	2000      	movs	r0, #0
 8000786:	f01a f8af 	bl	801a8e8 <SEGGER_RTT_printf>
	    return;
 800078a:	e0ff      	b.n	800098c <writeNameToRFIDCard+0x3f0>
	  }

	  // Write block
	  status = MIFARE_Write(&rfidReader, block, &buffer[16], 16);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	f103 0210 	add.w	r2, r3, #16
 8000794:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 8000798:	2310      	movs	r3, #16
 800079a:	4858      	ldr	r0, [pc, #352]	; (80008fc <writeNameToRFIDCard+0x360>)
 800079c:	f002 fb0e 	bl	8002dbc <MIFARE_Write>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  if (status != STATUS_OK) {
 80007a6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d010      	beq.n	80007d0 <writeNameToRFIDCard+0x234>
	    SEGGER_RTT_printf(0, "MIFARE_Write() failed: ");
 80007ae:	495c      	ldr	r1, [pc, #368]	; (8000920 <writeNameToRFIDCard+0x384>)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f01a f899 	bl	801a8e8 <SEGGER_RTT_printf>
	    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 80007b6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80007ba:	4619      	mov	r1, r3
 80007bc:	484f      	ldr	r0, [pc, #316]	; (80008fc <writeNameToRFIDCard+0x360>)
 80007be:	f002 fba9 	bl	8002f14 <GetStatusCodeName>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	4952      	ldr	r1, [pc, #328]	; (8000910 <writeNameToRFIDCard+0x374>)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f01a f88d 	bl	801a8e8 <SEGGER_RTT_printf>
	    return;
 80007ce:	e0dd      	b.n	800098c <writeNameToRFIDCard+0x3f0>
	  }
	  else SEGGER_RTT_printf(0, "MIFARE_Write() success: ");
 80007d0:	4954      	ldr	r1, [pc, #336]	; (8000924 <writeNameToRFIDCard+0x388>)
 80007d2:	2000      	movs	r0, #0
 80007d4:	f01a f888 	bl	801a8e8 <SEGGER_RTT_printf>

	  // Ask personal data: First name
	  memcpy(buffer, lastName, strlen(lastName));
 80007d8:	6838      	ldr	r0, [r7, #0]
 80007da:	f7ff fd09 	bl	80001f0 <strlen>
 80007de:	4602      	mov	r2, r0
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f01a facd 	bl	801ad86 <memcpy>
	  for (uint8_t i = strlen(lastName); i < 20; i++) buffer[i] = ' ';     // pad with spaces
 80007ec:	6838      	ldr	r0, [r7, #0]
 80007ee:	f7ff fcff 	bl	80001f0 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80007f8:	e00b      	b.n	8000812 <writeNameToRFIDCard+0x276>
 80007fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80007fe:	3340      	adds	r3, #64	; 0x40
 8000800:	443b      	add	r3, r7
 8000802:	2220      	movs	r2, #32
 8000804:	f803 2c34 	strb.w	r2, [r3, #-52]
 8000808:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800080c:	3301      	adds	r3, #1
 800080e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000812:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000816:	2b13      	cmp	r3, #19
 8000818:	d9ef      	bls.n	80007fa <writeNameToRFIDCard+0x25e>

	  block = 4;
 800081a:	2304      	movs	r3, #4
 800081c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	  //SEGGER_RTT_printfln(F("Authenticating using key A..."));
	  status = PCD_Authenticate(&rfidReader, PICC_CMD_MF_AUTH_KEY_A, block, &key, &(rfidReader.uid));
 8000820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000824:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8000828:	493a      	ldr	r1, [pc, #232]	; (8000914 <writeNameToRFIDCard+0x378>)
 800082a:	9100      	str	r1, [sp, #0]
 800082c:	2160      	movs	r1, #96	; 0x60
 800082e:	4833      	ldr	r0, [pc, #204]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000830:	f002 fa2e 	bl	8002c90 <PCD_Authenticate>
 8000834:	4603      	mov	r3, r0
 8000836:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  if (status != STATUS_OK) {
 800083a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800083e:	2b00      	cmp	r3, #0
 8000840:	d010      	beq.n	8000864 <writeNameToRFIDCard+0x2c8>
	    SEGGER_RTT_printf(0, "PCD_Authenticate() failed: ");
 8000842:	4935      	ldr	r1, [pc, #212]	; (8000918 <writeNameToRFIDCard+0x37c>)
 8000844:	2000      	movs	r0, #0
 8000846:	f01a f84f 	bl	801a8e8 <SEGGER_RTT_printf>
	    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 800084a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800084e:	4619      	mov	r1, r3
 8000850:	482a      	ldr	r0, [pc, #168]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000852:	f002 fb5f 	bl	8002f14 <GetStatusCodeName>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	492d      	ldr	r1, [pc, #180]	; (8000910 <writeNameToRFIDCard+0x374>)
 800085c:	2000      	movs	r0, #0
 800085e:	f01a f843 	bl	801a8e8 <SEGGER_RTT_printf>
	    return;
 8000862:	e093      	b.n	800098c <writeNameToRFIDCard+0x3f0>
	  }

	  // Write block
	  status = MIFARE_Write(&rfidReader, block, buffer, 16);
 8000864:	f107 020c 	add.w	r2, r7, #12
 8000868:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 800086c:	2310      	movs	r3, #16
 800086e:	4823      	ldr	r0, [pc, #140]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000870:	f002 faa4 	bl	8002dbc <MIFARE_Write>
 8000874:	4603      	mov	r3, r0
 8000876:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  if (status != STATUS_OK) {
 800087a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800087e:	2b00      	cmp	r3, #0
 8000880:	d010      	beq.n	80008a4 <writeNameToRFIDCard+0x308>
	    SEGGER_RTT_printf(0, "MIFARE_Write() failed: ");
 8000882:	4927      	ldr	r1, [pc, #156]	; (8000920 <writeNameToRFIDCard+0x384>)
 8000884:	2000      	movs	r0, #0
 8000886:	f01a f82f 	bl	801a8e8 <SEGGER_RTT_printf>
	    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 800088a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800088e:	4619      	mov	r1, r3
 8000890:	481a      	ldr	r0, [pc, #104]	; (80008fc <writeNameToRFIDCard+0x360>)
 8000892:	f002 fb3f 	bl	8002f14 <GetStatusCodeName>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	491d      	ldr	r1, [pc, #116]	; (8000910 <writeNameToRFIDCard+0x374>)
 800089c:	2000      	movs	r0, #0
 800089e:	f01a f823 	bl	801a8e8 <SEGGER_RTT_printf>
	    return;
 80008a2:	e073      	b.n	800098c <writeNameToRFIDCard+0x3f0>
	  }
	  else SEGGER_RTT_printf(0, "MIFARE_Write() success: ");
 80008a4:	491f      	ldr	r1, [pc, #124]	; (8000924 <writeNameToRFIDCard+0x388>)
 80008a6:	2000      	movs	r0, #0
 80008a8:	f01a f81e 	bl	801a8e8 <SEGGER_RTT_printf>

	  block = 5;
 80008ac:	2305      	movs	r3, #5
 80008ae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	  //SEGGER_RTT_printfln(F("Authenticating using key A..."));
	  status = PCD_Authenticate(&rfidReader, PICC_CMD_MF_AUTH_KEY_A, block, &key, &(rfidReader.uid));
 80008b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008b6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80008ba:	4916      	ldr	r1, [pc, #88]	; (8000914 <writeNameToRFIDCard+0x378>)
 80008bc:	9100      	str	r1, [sp, #0]
 80008be:	2160      	movs	r1, #96	; 0x60
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <writeNameToRFIDCard+0x360>)
 80008c2:	f002 f9e5 	bl	8002c90 <PCD_Authenticate>
 80008c6:	4603      	mov	r3, r0
 80008c8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  if (status != STATUS_OK) {
 80008cc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d029      	beq.n	8000928 <writeNameToRFIDCard+0x38c>
	    SEGGER_RTT_printf(0, "PCD_Authenticate() failed: ");
 80008d4:	4910      	ldr	r1, [pc, #64]	; (8000918 <writeNameToRFIDCard+0x37c>)
 80008d6:	2000      	movs	r0, #0
 80008d8:	f01a f806 	bl	801a8e8 <SEGGER_RTT_printf>
	    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 80008dc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <writeNameToRFIDCard+0x360>)
 80008e4:	f002 fb16 	bl	8002f14 <GetStatusCodeName>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4908      	ldr	r1, [pc, #32]	; (8000910 <writeNameToRFIDCard+0x374>)
 80008ee:	2000      	movs	r0, #0
 80008f0:	f019 fffa 	bl	801a8e8 <SEGGER_RTT_printf>
	    return;
 80008f4:	e04a      	b.n	800098c <writeNameToRFIDCard+0x3f0>
 80008f6:	bf00      	nop
 80008f8:	0801ba24 	.word	0x0801ba24
 80008fc:	20001088 	.word	0x20001088
 8000900:	0801ba30 	.word	0x0801ba30
 8000904:	0801ba34 	.word	0x0801ba34
 8000908:	0801ba38 	.word	0x0801ba38
 800090c:	0801ba40 	.word	0x0801ba40
 8000910:	0801ba50 	.word	0x0801ba50
 8000914:	2000109c 	.word	0x2000109c
 8000918:	0801ba54 	.word	0x0801ba54
 800091c:	0801ba70 	.word	0x0801ba70
 8000920:	0801ba90 	.word	0x0801ba90
 8000924:	0801baa8 	.word	0x0801baa8
	  }

	  // Write block
	  status = MIFARE_Write(&rfidReader, block, &buffer[16], 16);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	f103 0210 	add.w	r2, r3, #16
 8000930:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 8000934:	2310      	movs	r3, #16
 8000936:	4817      	ldr	r0, [pc, #92]	; (8000994 <writeNameToRFIDCard+0x3f8>)
 8000938:	f002 fa40 	bl	8002dbc <MIFARE_Write>
 800093c:	4603      	mov	r3, r0
 800093e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  if (status != STATUS_OK) {
 8000942:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000946:	2b00      	cmp	r3, #0
 8000948:	d010      	beq.n	800096c <writeNameToRFIDCard+0x3d0>
	    SEGGER_RTT_printf(0, "MIFARE_Write() failed: ");
 800094a:	4913      	ldr	r1, [pc, #76]	; (8000998 <writeNameToRFIDCard+0x3fc>)
 800094c:	2000      	movs	r0, #0
 800094e:	f019 ffcb 	bl	801a8e8 <SEGGER_RTT_printf>
	    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader ,status));
 8000952:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000956:	4619      	mov	r1, r3
 8000958:	480e      	ldr	r0, [pc, #56]	; (8000994 <writeNameToRFIDCard+0x3f8>)
 800095a:	f002 fadb 	bl	8002f14 <GetStatusCodeName>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	490e      	ldr	r1, [pc, #56]	; (800099c <writeNameToRFIDCard+0x400>)
 8000964:	2000      	movs	r0, #0
 8000966:	f019 ffbf 	bl	801a8e8 <SEGGER_RTT_printf>
	    return;
 800096a:	e00f      	b.n	800098c <writeNameToRFIDCard+0x3f0>
	  }
	  else SEGGER_RTT_printf(0, "MIFARE_Write() success: ");
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <writeNameToRFIDCard+0x404>)
 800096e:	2000      	movs	r0, #0
 8000970:	f019 ffba 	bl	801a8e8 <SEGGER_RTT_printf>


	  SEGGER_RTT_printf(0, " ");
 8000974:	490b      	ldr	r1, [pc, #44]	; (80009a4 <writeNameToRFIDCard+0x408>)
 8000976:	2000      	movs	r0, #0
 8000978:	f019 ffb6 	bl	801a8e8 <SEGGER_RTT_printf>
	  PICC_HaltA(&rfidReader); // Halt PICC
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <writeNameToRFIDCard+0x3f8>)
 800097e:	f002 f94f 	bl	8002c20 <PICC_HaltA>
	  PCD_StopCrypto1(&rfidReader);  // Stop encryption on PCD
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <writeNameToRFIDCard+0x3f8>)
 8000984:	f002 f9d4 	bl	8002d30 <PCD_StopCrypto1>
 8000988:	e000      	b.n	800098c <writeNameToRFIDCard+0x3f0>
		  return;
 800098a:	bf00      	nop
}
 800098c:	3740      	adds	r7, #64	; 0x40
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20001088 	.word	0x20001088
 8000998:	0801ba90 	.word	0x0801ba90
 800099c:	0801ba50 	.word	0x0801ba50
 80009a0:	0801baa8 	.word	0x0801baa8
 80009a4:	0801ba34 	.word	0x0801ba34

080009a8 <readNameFromRFIDCard>:


void readNameFromRFIDCard(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b090      	sub	sp, #64	; 0x40
 80009ac:	af02      	add	r7, sp, #8

  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  MIFARE_Key key;
  for (uint8_t i = 0; i < 6; i++) key.keyByte[i] = 0xFF;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80009b4:	e00b      	b.n	80009ce <readNameFromRFIDCard+0x26>
 80009b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009ba:	3338      	adds	r3, #56	; 0x38
 80009bc:	443b      	add	r3, r7
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80009c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009c8:	3301      	adds	r3, #1
 80009ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80009ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009d2:	2b05      	cmp	r3, #5
 80009d4:	d9ef      	bls.n	80009b6 <readNameFromRFIDCard+0xe>
//  // Select one of the cards
//  if ( ! PICC_ReadCardSerial(&rfidReader)) {
//    return;
//  }

  SEGGER_RTT_printf(0, "**Card Detected:**");
 80009d6:	495b      	ldr	r1, [pc, #364]	; (8000b44 <readNameFromRFIDCard+0x19c>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f019 ff85 	bl	801a8e8 <SEGGER_RTT_printf>

  //PICC_DumpToSerial(&rfidReader, &(rfidReader.uid));      //uncomment this to see all blocks in hex

  //-------------------------------------------

  SEGGER_RTT_printf(0, "Name: ");
 80009de:	495a      	ldr	r1, [pc, #360]	; (8000b48 <readNameFromRFIDCard+0x1a0>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f019 ff81 	bl	801a8e8 <SEGGER_RTT_printf>

  uint8_t buffer1[18];

  block = 4;
 80009e6:	2304      	movs	r3, #4
 80009e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  len = 18;
 80009ec:	2312      	movs	r3, #18
 80009ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  //------------------------------------------- GET FIRST NAME
  status = PCD_Authenticate(&rfidReader, PICC_CMD_MF_AUTH_KEY_A, 4, &key, &(rfidReader.uid)); //line 834 of MFRC522.cpp file
 80009f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f6:	4a55      	ldr	r2, [pc, #340]	; (8000b4c <readNameFromRFIDCard+0x1a4>)
 80009f8:	9200      	str	r2, [sp, #0]
 80009fa:	2204      	movs	r2, #4
 80009fc:	2160      	movs	r1, #96	; 0x60
 80009fe:	4854      	ldr	r0, [pc, #336]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000a00:	f002 f946 	bl	8002c90 <PCD_Authenticate>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  if (status != STATUS_OK) {
 8000a0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d010      	beq.n	8000a34 <readNameFromRFIDCard+0x8c>
    SEGGER_RTT_printf(0, "Authentication failed: ");
 8000a12:	4950      	ldr	r1, [pc, #320]	; (8000b54 <readNameFromRFIDCard+0x1ac>)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f019 ff67 	bl	801a8e8 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 8000a1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a1e:	4619      	mov	r1, r3
 8000a20:	484b      	ldr	r0, [pc, #300]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000a22:	f002 fa77 	bl	8002f14 <GetStatusCodeName>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	494b      	ldr	r1, [pc, #300]	; (8000b58 <readNameFromRFIDCard+0x1b0>)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f019 ff5b 	bl	801a8e8 <SEGGER_RTT_printf>
    return;
 8000a32:	e083      	b.n	8000b3c <readNameFromRFIDCard+0x194>
  }

  status = MIFARE_Read(&rfidReader, block, buffer1, &len);
 8000a34:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000a38:	f107 0218 	add.w	r2, r7, #24
 8000a3c:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000a40:	4843      	ldr	r0, [pc, #268]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000a42:	f002 f982 	bl	8002d4a <MIFARE_Read>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  if (status != STATUS_OK) {
 8000a4c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d010      	beq.n	8000a76 <readNameFromRFIDCard+0xce>
    SEGGER_RTT_printf(0, "Reading failed: ");
 8000a54:	4941      	ldr	r1, [pc, #260]	; (8000b5c <readNameFromRFIDCard+0x1b4>)
 8000a56:	2000      	movs	r0, #0
 8000a58:	f019 ff46 	bl	801a8e8 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 8000a5c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a60:	4619      	mov	r1, r3
 8000a62:	483b      	ldr	r0, [pc, #236]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000a64:	f002 fa56 	bl	8002f14 <GetStatusCodeName>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	493a      	ldr	r1, [pc, #232]	; (8000b58 <readNameFromRFIDCard+0x1b0>)
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f019 ff3a 	bl	801a8e8 <SEGGER_RTT_printf>
    return;
 8000a74:	e062      	b.n	8000b3c <readNameFromRFIDCard+0x194>
  }

  //PRINT FIRST NAME

    buffer1[16] = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    SEGGER_RTT_printf(0, "%s", buffer1);
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	461a      	mov	r2, r3
 8000a82:	4935      	ldr	r1, [pc, #212]	; (8000b58 <readNameFromRFIDCard+0x1b0>)
 8000a84:	2000      	movs	r0, #0
 8000a86:	f019 ff2f 	bl	801a8e8 <SEGGER_RTT_printf>


  SEGGER_RTT_printf(" ");
 8000a8a:	4835      	ldr	r0, [pc, #212]	; (8000b60 <readNameFromRFIDCard+0x1b8>)
 8000a8c:	f019 ff2c 	bl	801a8e8 <SEGGER_RTT_printf>

  //---------------------------------------- GET LAST NAME

  uint8_t buffer2[18];
  block = 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  status = PCD_Authenticate(&rfidReader, PICC_CMD_MF_AUTH_KEY_A, 1, &key, &(rfidReader.uid)); //line 834
 8000a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9a:	4a2c      	ldr	r2, [pc, #176]	; (8000b4c <readNameFromRFIDCard+0x1a4>)
 8000a9c:	9200      	str	r2, [sp, #0]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2160      	movs	r1, #96	; 0x60
 8000aa2:	482b      	ldr	r0, [pc, #172]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000aa4:	f002 f8f4 	bl	8002c90 <PCD_Authenticate>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  if (status != STATUS_OK) {
 8000aae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d010      	beq.n	8000ad8 <readNameFromRFIDCard+0x130>
    SEGGER_RTT_printf(0, "Authentication failed: ");
 8000ab6:	4927      	ldr	r1, [pc, #156]	; (8000b54 <readNameFromRFIDCard+0x1ac>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f019 ff15 	bl	801a8e8 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 8000abe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4822      	ldr	r0, [pc, #136]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000ac6:	f002 fa25 	bl	8002f14 <GetStatusCodeName>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4922      	ldr	r1, [pc, #136]	; (8000b58 <readNameFromRFIDCard+0x1b0>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f019 ff09 	bl	801a8e8 <SEGGER_RTT_printf>
    return;
 8000ad6:	e031      	b.n	8000b3c <readNameFromRFIDCard+0x194>
  }

  status = MIFARE_Read(&rfidReader, block, buffer2, &len);
 8000ad8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000adc:	1d3a      	adds	r2, r7, #4
 8000ade:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000ae2:	481b      	ldr	r0, [pc, #108]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000ae4:	f002 f931 	bl	8002d4a <MIFARE_Read>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  if (status != STATUS_OK) {
 8000aee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d010      	beq.n	8000b18 <readNameFromRFIDCard+0x170>
    SEGGER_RTT_printf(0, "Reading failed: ");
 8000af6:	4919      	ldr	r1, [pc, #100]	; (8000b5c <readNameFromRFIDCard+0x1b4>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f019 fef5 	bl	801a8e8 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "%s", GetStatusCodeName(&rfidReader, status));
 8000afe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b02:	4619      	mov	r1, r3
 8000b04:	4812      	ldr	r0, [pc, #72]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000b06:	f002 fa05 	bl	8002f14 <GetStatusCodeName>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4912      	ldr	r1, [pc, #72]	; (8000b58 <readNameFromRFIDCard+0x1b0>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f019 fee9 	bl	801a8e8 <SEGGER_RTT_printf>
    return;
 8000b16:	e011      	b.n	8000b3c <readNameFromRFIDCard+0x194>
  }

  //PRINT LAST NAME
  buffer2[16] = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	753b      	strb	r3, [r7, #20]
  SEGGER_RTT_printf(0, "%s", buffer2 );
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	461a      	mov	r2, r3
 8000b20:	490d      	ldr	r1, [pc, #52]	; (8000b58 <readNameFromRFIDCard+0x1b0>)
 8000b22:	2000      	movs	r0, #0
 8000b24:	f019 fee0 	bl	801a8e8 <SEGGER_RTT_printf>



  //----------------------------------------

  SEGGER_RTT_printf(0, "\n**End Reading**\n");
 8000b28:	490e      	ldr	r1, [pc, #56]	; (8000b64 <readNameFromRFIDCard+0x1bc>)
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f019 fedc 	bl	801a8e8 <SEGGER_RTT_printf>

  PICC_HaltA(&rfidReader);
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000b32:	f002 f875 	bl	8002c20 <PICC_HaltA>
  PCD_StopCrypto1(&rfidReader);
 8000b36:	4806      	ldr	r0, [pc, #24]	; (8000b50 <readNameFromRFIDCard+0x1a8>)
 8000b38:	f002 f8fa 	bl	8002d30 <PCD_StopCrypto1>
}
 8000b3c:	3738      	adds	r7, #56	; 0x38
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	0801bac4 	.word	0x0801bac4
 8000b48:	0801bad8 	.word	0x0801bad8
 8000b4c:	2000109c 	.word	0x2000109c
 8000b50:	20001088 	.word	0x20001088
 8000b54:	0801bae0 	.word	0x0801bae0
 8000b58:	0801ba50 	.word	0x0801ba50
 8000b5c:	0801baf8 	.word	0x0801baf8
 8000b60:	0801ba34 	.word	0x0801ba34
 8000b64:	0801bb0c 	.word	0x0801bb0c

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f002 fbef 	bl	8003350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f8a5 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 faf1 	bl	800115c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7a:	f000 fab1 	bl	80010e0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b7e:	f000 fa81 	bl	8001084 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000b82:	f000 fa1f 	bl	8000fc4 <MX_TIM6_Init>
  MX_TIM1_Init();
 8000b86:	f000 f97b 	bl	8000e80 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000b8a:	f000 f943 	bl	8000e14 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000b8e:	f000 f901 	bl	8000d94 <MX_I2C1_Init>
  MX_UART4_Init();
 8000b92:	f000 fa4d 	bl	8001030 <MX_UART4_Init>
//HAL_UART_Transmit(&huart4, "hello world1234\r\n", 17, 1000);
//HAL_UART_Transmit_IT(&huart4, "uart_transmit_it\r\n", 18);
//HAL_Delay(500);
//HAL_UART_AbortTransmit_IT(&huart4);
  int j;
  for(j = 0; j < 1024; j++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	e00c      	b.n	8000bb6 <main+0x4e>
  {
	  myBuffer1[j] = 'a';
 8000b9c:	4a34      	ldr	r2, [pc, #208]	; (8000c70 <main+0x108>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	2261      	movs	r2, #97	; 0x61
 8000ba4:	701a      	strb	r2, [r3, #0]
	  myBuffer2[j] = 'b';
 8000ba6:	4a33      	ldr	r2, [pc, #204]	; (8000c74 <main+0x10c>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	2262      	movs	r2, #98	; 0x62
 8000bae:	701a      	strb	r2, [r3, #0]
  for(j = 0; j < 1024; j++)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bbc:	dbee      	blt.n	8000b9c <main+0x34>
//
//
//  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)&pwmData, 10);


  rfidReader.hspi = &hspi1;
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <main+0x110>)
 8000bc0:	4a2e      	ldr	r2, [pc, #184]	; (8000c7c <main+0x114>)
 8000bc2:	60da      	str	r2, [r3, #12]
  MFRC522_Init(&rfidReader, GPIO_PIN_7, GPIOC, GPIO_PIN_3, GPIOB);
 8000bc4:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <main+0x118>)
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2308      	movs	r3, #8
 8000bca:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <main+0x11c>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	482a      	ldr	r0, [pc, #168]	; (8000c78 <main+0x110>)
 8000bd0:	f001 f967 	bl	8001ea2 <MFRC522_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bd4:	f008 fd08 	bl	80095e8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  myMtx = osMutexNew (&myMtxAtt);
 8000bd8:	482b      	ldr	r0, [pc, #172]	; (8000c88 <main+0x120>)
 8000bda:	f008 fe11 	bl	8009800 <osMutexNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a2a      	ldr	r2, [pc, #168]	; (8000c8c <main+0x124>)
 8000be2:	6013      	str	r3, [r2, #0]
  myMtx2 = osMutexNew (&myMtxAtt2);
 8000be4:	482a      	ldr	r0, [pc, #168]	; (8000c90 <main+0x128>)
 8000be6:	f008 fe0b 	bl	8009800 <osMutexNew>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a29      	ldr	r2, [pc, #164]	; (8000c94 <main+0x12c>)
 8000bee:	6013      	str	r3, [r2, #0]

  if(myMtx == NULL || myMtx2 == NULL)
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <main+0x124>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <main+0x98>
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <main+0x12c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d100      	bne.n	8000c02 <main+0x9a>
  {
	  while(1);
 8000c00:	e7fe      	b.n	8000c00 <main+0x98>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c02:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <main+0x130>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4825      	ldr	r0, [pc, #148]	; (8000c9c <main+0x134>)
 8000c08:	f008 fd4d 	bl	80096a6 <osThreadNew>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a24      	ldr	r2, [pc, #144]	; (8000ca0 <main+0x138>)
 8000c10:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  myFirstTask = osThreadNew(myFirstTaskHandle, NULL, &myFirstTask_attributes);
 8000c12:	4a24      	ldr	r2, [pc, #144]	; (8000ca4 <main+0x13c>)
 8000c14:	2100      	movs	r1, #0
 8000c16:	4824      	ldr	r0, [pc, #144]	; (8000ca8 <main+0x140>)
 8000c18:	f008 fd45 	bl	80096a6 <osThreadNew>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <main+0x144>)
 8000c20:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c22:	f008 fd05 	bl	8009630 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(PICC_IsNewCardPresent(&rfidReader) == false)
 8000c26:	4814      	ldr	r0, [pc, #80]	; (8000c78 <main+0x110>)
 8000c28:	f002 fb42 	bl	80032b0 <PICC_IsNewCardPresent>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f083 0301 	eor.w	r3, r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d008      	beq.n	8000c4a <main+0xe2>
	  {
		  SEGGER_RTT_printf(0, "Card not found!!!!!\r\n");
 8000c38:	491d      	ldr	r1, [pc, #116]	; (8000cb0 <main+0x148>)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f019 fe54 	bl	801a8e8 <SEGGER_RTT_printf>
		  HAL_Delay(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f002 fbc6 	bl	80033d4 <HAL_Delay>
		  continue;
 8000c48:	e010      	b.n	8000c6c <main+0x104>

	  }
	  SEGGER_RTT_printf(0, "Card found!!!!!\r\n");
 8000c4a:	491a      	ldr	r1, [pc, #104]	; (8000cb4 <main+0x14c>)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f019 fe4b 	bl	801a8e8 <SEGGER_RTT_printf>

	  if(PICC_ReadCardSerial(&rfidReader) == true)
 8000c52:	4809      	ldr	r0, [pc, #36]	; (8000c78 <main+0x110>)
 8000c54:	f002 fb5c 	bl	8003310 <PICC_ReadCardSerial>
	  {
		  //PICC_DumpToSerial(&rfidReader, &rfidReader.uid);
	  }

	  writeNameToRFIDCard("Phuc", "Vu");
 8000c58:	4917      	ldr	r1, [pc, #92]	; (8000cb8 <main+0x150>)
 8000c5a:	4818      	ldr	r0, [pc, #96]	; (8000cbc <main+0x154>)
 8000c5c:	f7ff fc9e 	bl	800059c <writeNameToRFIDCard>

	  HAL_Delay(1000);
 8000c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c64:	f002 fbb6 	bl	80033d4 <HAL_Delay>

	  readNameFromRFIDCard();
 8000c68:	f7ff fe9e 	bl	80009a8 <readNameFromRFIDCard>
  {
 8000c6c:	e7db      	b.n	8000c26 <main+0xbe>
 8000c6e:	bf00      	nop
 8000c70:	20000880 	.word	0x20000880
 8000c74:	20000c80 	.word	0x20000c80
 8000c78:	20001088 	.word	0x20001088
 8000c7c:	20000118 	.word	0x20000118
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40020800 	.word	0x40020800
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000878 	.word	0x20000878
 8000c90:	20000010 	.word	0x20000010
 8000c94:	2000087c 	.word	0x2000087c
 8000c98:	0801f2ac 	.word	0x0801f2ac
 8000c9c:	08001489 	.word	0x08001489
 8000ca0:	20000870 	.word	0x20000870
 8000ca4:	0801f2d0 	.word	0x0801f2d0
 8000ca8:	080013c1 	.word	0x080013c1
 8000cac:	20000874 	.word	0x20000874
 8000cb0:	0801bb20 	.word	0x0801bb20
 8000cb4:	0801bb38 	.word	0x0801bb38
 8000cb8:	0801bb4c 	.word	0x0801bb4c
 8000cbc:	0801bb50 	.word	0x0801bb50

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	; 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f019 ff87 	bl	801abe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d30:	2304      	movs	r3, #4
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d34:	23a8      	movs	r3, #168	; 0xa8
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f004 fbd5 	bl	80054f4 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d50:	f000 fc09 	bl	8001566 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2105      	movs	r1, #5
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fe36 	bl	80059e4 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d7e:	f000 fbf2 	bl	8001566 <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3750      	adds	r7, #80	; 0x50
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40007000 	.word	0x40007000

08000d94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <MX_I2C1_Init+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <MX_I2C1_Init+0x7c>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dd2:	f004 f8b3 	bl	8004f3c <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ddc:	f000 fbc3 	bl	8001566 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de0:	2100      	movs	r1, #0
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000de4:	f004 f9ee 	bl	80051c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000dee:	f000 fbba 	bl	8001566 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000df6:	f004 fa21 	bl	800523c <HAL_I2CEx_ConfigDigitalFilter>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e00:	f000 fbb1 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200000c4 	.word	0x200000c4
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	00061a80 	.word	0x00061a80

08000e14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e1a:	4a18      	ldr	r2, [pc, #96]	; (8000e7c <MX_SPI1_Init+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e48:	2218      	movs	r2, #24
 8000e4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e60:	220a      	movs	r2, #10
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e66:	f005 f80f 	bl	8005e88 <HAL_SPI_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e70:	f000 fb79 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000118 	.word	0x20000118
 8000e7c:	40013000 	.word	0x40013000

08000e80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b096      	sub	sp, #88	; 0x58
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f019 fe92 	bl	801abe2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000ec0:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <MX_TIM1_Init+0x140>)
 8000ec2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 8000ec4:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000ec6:	f244 129f 	movw	r2, #16799	; 0x419f
 8000eca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000ed4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ed8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eec:	4833      	ldr	r0, [pc, #204]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000eee:	f005 fd73 	bl	80069d8 <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ef8:	f000 fb35 	bl	8001566 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f06:	4619      	mov	r1, r3
 8000f08:	482c      	ldr	r0, [pc, #176]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000f0a:	f006 f849 	bl	8006fa0 <HAL_TIM_ConfigClockSource>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f14:	f000 fb27 	bl	8001566 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f18:	4828      	ldr	r0, [pc, #160]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000f1a:	f005 fe1d 	bl	8006b58 <HAL_TIM_PWM_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f24:	f000 fb1f 	bl	8001566 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f34:	4619      	mov	r1, r3
 8000f36:	4821      	ldr	r0, [pc, #132]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000f38:	f006 fc0c 	bl	8007754 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000f42:	f000 fb10 	bl	8001566 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f46:	2360      	movs	r3, #96	; 0x60
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	2200      	movs	r2, #0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000f6c:	f005 ff56 	bl	8006e1c <HAL_TIM_PWM_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000f76:	f000 faf6 	bl	8001566 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000f9e:	f006 fc55 	bl	800784c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000fa8:	f000 fadd 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MX_TIM1_Init+0x13c>)
 8000fae:	f000 fc2d 	bl	800180c <HAL_TIM_MspPostInit>

}
 8000fb2:	bf00      	nop
 8000fb4:	3758      	adds	r7, #88	; 0x58
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000170 	.word	0x20000170
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fd4:	4a15      	ldr	r2, [pc, #84]	; (800102c <MX_TIM6_Init+0x68>)
 8000fd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fda:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000fde:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_TIM6_Init+0x64>)
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <MX_TIM6_Init+0x64>)
 8000ff6:	f005 fcef 	bl	80069d8 <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001000:	f000 fab1 	bl	8001566 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_TIM6_Init+0x64>)
 8001012:	f006 fb9f 	bl	8007754 <HAL_TIMEx_MasterConfigSynchronization>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800101c:	f000 faa3 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001b8 	.word	0x200001b8
 800102c:	40001000 	.word	0x40001000

08001030 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_UART4_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_UART4_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_UART4_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_UART4_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_UART4_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_UART4_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_UART4_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_UART4_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_UART4_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_UART4_Init+0x4c>)
 8001068:	f006 fc56 	bl	8007918 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 fa78 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000260 	.word	0x20000260
 8001080:	40004c00 	.word	0x40004c00

08001084 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800108e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001092:	2204      	movs	r2, #4
 8001094:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001098:	2202      	movs	r2, #2
 800109a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a4:	2202      	movs	r2, #2
 80010a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010bc:	2201      	movs	r2, #1
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c8:	f004 f8f7 	bl	80052ba <HAL_PCD_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010d2:	f000 fa48 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000364 	.word	0x20000364

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_DMA_Init+0x78>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <MX_DMA_Init+0x78>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <MX_DMA_Init+0x78>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_DMA_Init+0x78>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <MX_DMA_Init+0x78>)
 800110c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_DMA_Init+0x78>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2105      	movs	r1, #5
 8001122:	200d      	movs	r0, #13
 8001124:	f002 fa32 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001128:	200d      	movs	r0, #13
 800112a:	f002 fa4b 	bl	80035c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2105      	movs	r1, #5
 8001132:	200f      	movs	r0, #15
 8001134:	f002 fa2a 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001138:	200f      	movs	r0, #15
 800113a:	f002 fa43 	bl	80035c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2105      	movs	r1, #5
 8001142:	2039      	movs	r0, #57	; 0x39
 8001144:	f002 fa22 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001148:	2039      	movs	r0, #57	; 0x39
 800114a:	f002 fa3b 	bl	80035c4 <HAL_NVIC_EnableIRQ>

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	4b69      	ldr	r3, [pc, #420]	; (800131c <MX_GPIO_Init+0x1c0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a68      	ldr	r2, [pc, #416]	; (800131c <MX_GPIO_Init+0x1c0>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b66      	ldr	r3, [pc, #408]	; (800131c <MX_GPIO_Init+0x1c0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	4b62      	ldr	r3, [pc, #392]	; (800131c <MX_GPIO_Init+0x1c0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a61      	ldr	r2, [pc, #388]	; (800131c <MX_GPIO_Init+0x1c0>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b5f      	ldr	r3, [pc, #380]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b5b      	ldr	r3, [pc, #364]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a5a      	ldr	r2, [pc, #360]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b58      	ldr	r3, [pc, #352]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b54      	ldr	r3, [pc, #336]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a53      	ldr	r2, [pc, #332]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b51      	ldr	r3, [pc, #324]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a4c      	ldr	r2, [pc, #304]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b4a      	ldr	r3, [pc, #296]	; (800131c <MX_GPIO_Init+0x1c0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b46      	ldr	r3, [pc, #280]	; (800131c <MX_GPIO_Init+0x1c0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a45      	ldr	r2, [pc, #276]	; (800131c <MX_GPIO_Init+0x1c0>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b43      	ldr	r3, [pc, #268]	; (800131c <MX_GPIO_Init+0x1c0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b3f      	ldr	r3, [pc, #252]	; (800131c <MX_GPIO_Init+0x1c0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a3e      	ldr	r2, [pc, #248]	; (800131c <MX_GPIO_Init+0x1c0>)
 8001224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <MX_GPIO_Init+0x1c0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|MFR522_RS_PIN_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f244 0189 	movw	r1, #16521	; 0x4089
 800123c:	4838      	ldr	r0, [pc, #224]	; (8001320 <MX_GPIO_Init+0x1c4>)
 800123e:	f003 fe4b 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	4837      	ldr	r0, [pc, #220]	; (8001324 <MX_GPIO_Init+0x1c8>)
 8001248:	f003 fe46 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFR522_CS_PIN_GPIO_Port, MFR522_CS_PIN_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	4835      	ldr	r0, [pc, #212]	; (8001328 <MX_GPIO_Init+0x1cc>)
 8001252:	f003 fe41 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	482e      	ldr	r0, [pc, #184]	; (8001328 <MX_GPIO_Init+0x1cc>)
 800126e:	f003 fc6f 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin MFR522_RS_PIN_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|MFR522_RS_PIN_Pin|LD2_Pin;
 8001272:	f244 0389 	movw	r3, #16521	; 0x4089
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4825      	ldr	r0, [pc, #148]	; (8001320 <MX_GPIO_Init+0x1c4>)
 800128c:	f003 fc60 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001290:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012a2:	2307      	movs	r3, #7
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	481f      	ldr	r0, [pc, #124]	; (800132c <MX_GPIO_Init+0x1d0>)
 80012ae:	f003 fc4f 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4816      	ldr	r0, [pc, #88]	; (8001324 <MX_GPIO_Init+0x1c8>)
 80012ca:	f003 fc41 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4810      	ldr	r0, [pc, #64]	; (8001324 <MX_GPIO_Init+0x1c8>)
 80012e2:	f003 fc35 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFR522_CS_PIN_Pin */
  GPIO_InitStruct.Pin = MFR522_CS_PIN_Pin;
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MFR522_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <MX_GPIO_Init+0x1cc>)
 80012fe:	f003 fc27 	bl	8004b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2105      	movs	r1, #5
 8001306:	2028      	movs	r0, #40	; 0x28
 8001308:	f002 f940 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800130c:	2028      	movs	r0, #40	; 0x28
 800130e:	f002 f959 	bl	80035c4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001312:	bf00      	nop
 8001314:	3730      	adds	r7, #48	; 0x30
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40020400 	.word	0x40020400
 8001324:	40021800 	.word	0x40021800
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00

08001330 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if(_pressed == 0 && HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET)
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_GPIO_EXTI_Callback+0x7c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d115      	bne.n	800136e <HAL_GPIO_EXTI_Callback+0x3e>
 8001342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001346:	481a      	ldr	r0, [pc, #104]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001348:	f003 fdae 	bl	8004ea8 <HAL_GPIO_ReadPin>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_GPIO_EXTI_Callback+0x3e>
	{
		_pressed = 1;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <HAL_GPIO_EXTI_Callback+0x7c>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
		_startTick = HAL_GetTick();
 8001358:	f002 f830 	bl	80033bc <HAL_GetTick>
 800135c:	4603      	mov	r3, r0
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001360:	6013      	str	r3, [r2, #0]
		_tick = HAL_GetTick();
 8001362:	f002 f82b 	bl	80033bc <HAL_GetTick>
 8001366:	4603      	mov	r3, r0
 8001368:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <HAL_GPIO_EXTI_Callback+0x88>)
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	e004      	b.n	8001378 <HAL_GPIO_EXTI_Callback+0x48>
	}else{
		_tick = HAL_GetTick();
 800136e:	f002 f825 	bl	80033bc <HAL_GetTick>
 8001372:	4603      	mov	r3, r0
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001376:	6013      	str	r3, [r2, #0]
	}

	if(_tick - _startTick > 10 && HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET)
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_GPIO_EXTI_Callback+0x88>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x84>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b0a      	cmp	r3, #10
 8001384:	d90d      	bls.n	80013a2 <HAL_GPIO_EXTI_Callback+0x72>
 8001386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138a:	4809      	ldr	r0, [pc, #36]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x80>)
 800138c:	f003 fd8c 	bl	8004ea8 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	d105      	bne.n	80013a2 <HAL_GPIO_EXTI_Callback+0x72>
	{
		isButtonPressed = 1;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
		_pressed = 0;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GPIO_EXTI_Callback+0x7c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
	}
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000028 	.word	0x20000028
 80013b0:	40020800 	.word	0x40020800
 80013b4:	20001084 	.word	0x20001084
 80013b8:	20001080 	.word	0x20001080
 80013bc:	20000024 	.word	0x20000024

080013c0 <myFirstTaskHandle>:


void myFirstTaskHandle(void *argument)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
	SEGGER_RTT_printf(0, "Enter My First Task\r\n");
 80013cc:	4923      	ldr	r1, [pc, #140]	; (800145c <myFirstTaskHandle+0x9c>)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f019 fa8a 	bl	801a8e8 <SEGGER_RTT_printf>
	while(1)
	{
		if(osMutexAcquire(myMtx2, 1000) == osOK){
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <myFirstTaskHandle+0xa0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 fa95 	bl	800990c <osMutexAcquire>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d130      	bne.n	800144a <myFirstTaskHandle+0x8a>
			HAL_UART_Transmit(&huart4, myBuffer1,10, 100);
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	220a      	movs	r2, #10
 80013ec:	491d      	ldr	r1, [pc, #116]	; (8001464 <myFirstTaskHandle+0xa4>)
 80013ee:	481e      	ldr	r0, [pc, #120]	; (8001468 <myFirstTaskHandle+0xa8>)
 80013f0:	f006 fadf 	bl	80079b2 <HAL_UART_Transmit>
			data += 1;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <myFirstTaskHandle+0xac>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <myFirstTaskHandle+0xac>)
 80013fe:	801a      	strh	r2, [r3, #0]
			SEGGER_RTT_printf(0, "Mutex 2 taken in task 2\r\n");
 8001400:	491b      	ldr	r1, [pc, #108]	; (8001470 <myFirstTaskHandle+0xb0>)
 8001402:	2000      	movs	r0, #0
 8001404:	f019 fa70 	bl	801a8e8 <SEGGER_RTT_printf>

			if(osMutexAcquire(myMtx, 1000000) == osOK)
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <myFirstTaskHandle+0xb4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	491a      	ldr	r1, [pc, #104]	; (8001478 <myFirstTaskHandle+0xb8>)
 800140e:	4618      	mov	r0, r3
 8001410:	f008 fa7c 	bl	800990c <osMutexAcquire>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10d      	bne.n	8001436 <myFirstTaskHandle+0x76>
			{
				SEGGER_RTT_printf(0, "Mutex 1 taken in task 2\r\n");
 800141a:	4918      	ldr	r1, [pc, #96]	; (800147c <myFirstTaskHandle+0xbc>)
 800141c:	2000      	movs	r0, #0
 800141e:	f019 fa63 	bl	801a8e8 <SEGGER_RTT_printf>
				HAL_Delay(5000);
 8001422:	f241 3088 	movw	r0, #5000	; 0x1388
 8001426:	f001 ffd5 	bl	80033d4 <HAL_Delay>
				osMutexRelease(myMtx);
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <myFirstTaskHandle+0xb4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f008 fab7 	bl	80099a2 <osMutexRelease>
 8001434:	e003      	b.n	800143e <myFirstTaskHandle+0x7e>
			}else{
				SEGGER_RTT_printf(0, "can't take mutex1 in task 2\r\n");
 8001436:	4912      	ldr	r1, [pc, #72]	; (8001480 <myFirstTaskHandle+0xc0>)
 8001438:	2000      	movs	r0, #0
 800143a:	f019 fa55 	bl	801a8e8 <SEGGER_RTT_printf>

			}
			osMutexRelease(myMtx2);
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <myFirstTaskHandle+0xa0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f008 faad 	bl	80099a2 <osMutexRelease>
 8001448:	e003      	b.n	8001452 <myFirstTaskHandle+0x92>
		}else{
			SEGGER_RTT_printf(0, "can't take mutex 2 in task 2\r\n");
 800144a:	490e      	ldr	r1, [pc, #56]	; (8001484 <myFirstTaskHandle+0xc4>)
 800144c:	2000      	movs	r0, #0
 800144e:	f019 fa4b 	bl	801a8e8 <SEGGER_RTT_printf>

		}

		osDelay(500);
 8001452:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001456:	f008 f9b8 	bl	80097ca <osDelay>
		if(osMutexAcquire(myMtx2, 1000) == osOK){
 800145a:	e7bb      	b.n	80013d4 <myFirstTaskHandle+0x14>
 800145c:	0801bb58 	.word	0x0801bb58
 8001460:	2000087c 	.word	0x2000087c
 8001464:	20000880 	.word	0x20000880
 8001468:	20000260 	.word	0x20000260
 800146c:	20000020 	.word	0x20000020
 8001470:	0801bb70 	.word	0x0801bb70
 8001474:	20000878 	.word	0x20000878
 8001478:	000f4240 	.word	0x000f4240
 800147c:	0801bb8c 	.word	0x0801bb8c
 8001480:	0801bba8 	.word	0x0801bba8
 8001484:	0801bbc8 	.word	0x0801bbc8

08001488 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001490:	f007 fd58 	bl	8008f44 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  uint32_t counter = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(osMutexAcquire(myMtx, 1000) == osOK)
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <StartDefaultTask+0x9c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 fa33 	bl	800990c <osMutexAcquire>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d132      	bne.n	8001512 <StartDefaultTask+0x8a>
	  {
			SEGGER_RTT_printf(0, "Default Task Running, Counter = %d\r\n", counter++);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	60fa      	str	r2, [r7, #12]
 80014b2:	461a      	mov	r2, r3
 80014b4:	491c      	ldr	r1, [pc, #112]	; (8001528 <StartDefaultTask+0xa0>)
 80014b6:	2000      	movs	r0, #0
 80014b8:	f019 fa16 	bl	801a8e8 <SEGGER_RTT_printf>
			SEGGER_RTT_printf(0, "Mutex 1 taken in task 1\r\n");
 80014bc:	491b      	ldr	r1, [pc, #108]	; (800152c <StartDefaultTask+0xa4>)
 80014be:	2000      	movs	r0, #0
 80014c0:	f019 fa12 	bl	801a8e8 <SEGGER_RTT_printf>
			data += 2;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <StartDefaultTask+0xa8>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	3302      	adds	r3, #2
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <StartDefaultTask+0xa8>)
 80014ce:	801a      	strh	r2, [r3, #0]

			if(osMutexAcquire(myMtx2, 1000000) == osOK)
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <StartDefaultTask+0xac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4918      	ldr	r1, [pc, #96]	; (8001538 <StartDefaultTask+0xb0>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f008 fa18 	bl	800990c <osMutexAcquire>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10d      	bne.n	80014fe <StartDefaultTask+0x76>
			{
				SEGGER_RTT_printf(0, "Mutex 2 taken in task 1\r\n");
 80014e2:	4916      	ldr	r1, [pc, #88]	; (800153c <StartDefaultTask+0xb4>)
 80014e4:	2000      	movs	r0, #0
 80014e6:	f019 f9ff 	bl	801a8e8 <SEGGER_RTT_printf>
				HAL_Delay(1000);
 80014ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ee:	f001 ff71 	bl	80033d4 <HAL_Delay>
				osMutexRelease(myMtx2);
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <StartDefaultTask+0xac>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f008 fa53 	bl	80099a2 <osMutexRelease>
 80014fc:	e003      	b.n	8001506 <StartDefaultTask+0x7e>



			}else{
				SEGGER_RTT_printf(0, "can't take mutex2 in task 1\r\n");
 80014fe:	4910      	ldr	r1, [pc, #64]	; (8001540 <StartDefaultTask+0xb8>)
 8001500:	2000      	movs	r0, #0
 8001502:	f019 f9f1 	bl	801a8e8 <SEGGER_RTT_printf>

			}



			osMutexRelease(myMtx);
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <StartDefaultTask+0x9c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f008 fa49 	bl	80099a2 <osMutexRelease>
 8001510:	e003      	b.n	800151a <StartDefaultTask+0x92>

	  }else{
		  SEGGER_RTT_printf(0, "can't take mutex1 in task 1\r\n");
 8001512:	490c      	ldr	r1, [pc, #48]	; (8001544 <StartDefaultTask+0xbc>)
 8001514:	2000      	movs	r0, #0
 8001516:	f019 f9e7 	bl	801a8e8 <SEGGER_RTT_printf>
	  }

    osDelay(100);
 800151a:	2064      	movs	r0, #100	; 0x64
 800151c:	f008 f955 	bl	80097ca <osDelay>
	  if(osMutexAcquire(myMtx, 1000) == osOK)
 8001520:	e7ba      	b.n	8001498 <StartDefaultTask+0x10>
 8001522:	bf00      	nop
 8001524:	20000878 	.word	0x20000878
 8001528:	0801bbe8 	.word	0x0801bbe8
 800152c:	0801bc10 	.word	0x0801bc10
 8001530:	20000020 	.word	0x20000020
 8001534:	2000087c 	.word	0x2000087c
 8001538:	000f4240 	.word	0x000f4240
 800153c:	0801bc2c 	.word	0x0801bc2c
 8001540:	0801bc48 	.word	0x0801bc48
 8001544:	0801bc68 	.word	0x0801bc68

08001548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001558:	d101      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155a:	f001 ff1b 	bl	8003394 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156a:	b672      	cpsid	i
}
 800156c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156e:	e7fe      	b.n	800156e <Error_Handler+0x8>

08001570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_MspInit+0x54>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <HAL_MspInit+0x54>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_MspInit+0x54>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_MspInit+0x54>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_MspInit+0x54>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_MspInit+0x54>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	210f      	movs	r1, #15
 80015b2:	f06f 0001 	mvn.w	r0, #1
 80015b6:	f001 ffe9 	bl	800358c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <HAL_I2C_MspInit+0x84>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12c      	bne.n	8001644 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_I2C_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_I2C_MspInit+0x88>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_I2C_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001606:	f44f 7310 	mov.w	r3, #576	; 0x240
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	2312      	movs	r3, #18
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001618:	2304      	movs	r3, #4
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <HAL_I2C_MspInit+0x8c>)
 8001624:	f003 fa94 	bl	8004b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_I2C_MspInit+0x88>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_I2C_MspInit+0x88>)
 8001632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_I2C_MspInit+0x88>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40005400 	.word	0x40005400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020400 	.word	0x40020400

08001658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a28      	ldr	r2, [pc, #160]	; (8001718 <HAL_SPI_MspInit+0xc0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d149      	bne.n	800170e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_SPI_MspInit+0xc4>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a26      	ldr	r2, [pc, #152]	; (800171c <HAL_SPI_MspInit+0xc4>)
 8001684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_SPI_MspInit+0xc4>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_SPI_MspInit+0xc4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_SPI_MspInit+0xc4>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_SPI_MspInit+0xc4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_SPI_MspInit+0xc4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_SPI_MspInit+0xc4>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_SPI_MspInit+0xc4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016ce:	2360      	movs	r3, #96	; 0x60
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016de:	2305      	movs	r3, #5
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <HAL_SPI_MspInit+0xc8>)
 80016ea:	f003 fa31 	bl	8004b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016ee:	2320      	movs	r3, #32
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fe:	2305      	movs	r3, #5
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <HAL_SPI_MspInit+0xcc>)
 800170a:	f003 fa21 	bl	8004b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40013000 	.word	0x40013000
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400

08001728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a30      	ldr	r2, [pc, #192]	; (80017f8 <HAL_TIM_Base_MspInit+0xd0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d13f      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <HAL_TIM_Base_MspInit+0xd4>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a2e      	ldr	r2, [pc, #184]	; (80017fc <HAL_TIM_Base_MspInit+0xd4>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <HAL_TIM_Base_MspInit+0xd4>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 8001758:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <HAL_TIM_Base_MspInit+0xdc>)
 800175a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 800175e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001762:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 8001766:	2240      	movs	r2, #64	; 0x40
 8001768:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 8001772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001776:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 800177a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800177e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 8001782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001786:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 800178a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800179c:	4818      	ldr	r0, [pc, #96]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 800179e:	f001 ff1f 	bl	80035e0 <HAL_DMA_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80017a8:	f7ff fedd 	bl	8001566 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a14      	ldr	r2, [pc, #80]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_TIM_Base_MspInit+0xd8>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80017b8:	e01a      	b.n	80017f0 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM6)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <HAL_TIM_Base_MspInit+0xe0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d115      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_TIM_Base_MspInit+0xd4>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_TIM_Base_MspInit+0xd4>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_TIM_Base_MspInit+0xd4>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2105      	movs	r1, #5
 80017e4:	2036      	movs	r0, #54	; 0x36
 80017e6:	f001 fed1 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ea:	2036      	movs	r0, #54	; 0x36
 80017ec:	f001 feea 	bl	80035c4 <HAL_NVIC_EnableIRQ>
}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40010000 	.word	0x40010000
 80017fc:	40023800 	.word	0x40023800
 8001800:	20000200 	.word	0x20000200
 8001804:	40026428 	.word	0x40026428
 8001808:	40001000 	.word	0x40001000

0800180c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_TIM_MspPostInit+0x68>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d11e      	bne.n	800186c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_TIM_MspPostInit+0x6c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_TIM_MspPostInit+0x6c>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_TIM_MspPostInit+0x6c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800184a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800185c:	2301      	movs	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4619      	mov	r1, r3
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <HAL_TIM_MspPostInit+0x70>)
 8001868:	f003 f972 	bl	8004b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40010000 	.word	0x40010000
 8001878:	40023800 	.word	0x40023800
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a5b      	ldr	r2, [pc, #364]	; (8001a0c <HAL_UART_MspInit+0x18c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	f040 80b0 	bne.w	8001a04 <HAL_UART_MspInit+0x184>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_UART_MspInit+0x190>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_UART_MspInit+0x190>)
 80018ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <HAL_UART_MspInit+0x190>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <HAL_UART_MspInit+0x190>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a51      	ldr	r2, [pc, #324]	; (8001a10 <HAL_UART_MspInit+0x190>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30
 80018d0:	4b4f      	ldr	r3, [pc, #316]	; (8001a10 <HAL_UART_MspInit+0x190>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_UART_MspInit+0x190>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a4a      	ldr	r2, [pc, #296]	; (8001a10 <HAL_UART_MspInit+0x190>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <HAL_UART_MspInit+0x190>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f8:	2301      	movs	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001908:	2308      	movs	r3, #8
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	4840      	ldr	r0, [pc, #256]	; (8001a14 <HAL_UART_MspInit+0x194>)
 8001914:	f003 f91c 	bl	8004b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800192a:	2308      	movs	r3, #8
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4838      	ldr	r0, [pc, #224]	; (8001a18 <HAL_UART_MspInit+0x198>)
 8001936:	f003 f90b 	bl	8004b50 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_UART_MspInit+0x1a0>)
 800193e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001940:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 8001942:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001946:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 800194a:	2240      	movs	r2, #64	; 0x40
 800194c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800194e:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 8001956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800197a:	4828      	ldr	r0, [pc, #160]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 800197c:	f001 fe30 	bl	80035e0 <HAL_DMA_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001986:	f7ff fdee 	bl	8001566 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 800198e:	635a      	str	r2, [r3, #52]	; 0x34
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_UART_MspInit+0x19c>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <HAL_UART_MspInit+0x1a8>)
 800199a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 800199e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ca:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80019d8:	4812      	ldr	r0, [pc, #72]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019da:	f001 fe01 	bl	80035e0 <HAL_DMA_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 80019e4:	f7ff fdbf 	bl	8001566 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019ec:	639a      	str	r2, [r3, #56]	; 0x38
 80019ee:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_UART_MspInit+0x1a4>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2105      	movs	r1, #5
 80019f8:	2034      	movs	r0, #52	; 0x34
 80019fa:	f001 fdc7 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019fe:	2034      	movs	r0, #52	; 0x34
 8001a00:	f001 fde0 	bl	80035c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40004c00 	.word	0x40004c00
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	200002a4 	.word	0x200002a4
 8001a20:	40026070 	.word	0x40026070
 8001a24:	20000304 	.word	0x20000304
 8001a28:	40026040 	.word	0x40026040

08001a2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a4c:	d13f      	bne.n	8001ace <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_PCD_MspInit+0xac>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <HAL_PCD_MspInit+0xac>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_PCD_MspInit+0xac>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a7c:	230a      	movs	r3, #10
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4815      	ldr	r0, [pc, #84]	; (8001adc <HAL_PCD_MspInit+0xb0>)
 8001a88:	f003 f862 	bl	8004b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480e      	ldr	r0, [pc, #56]	; (8001adc <HAL_PCD_MspInit+0xb0>)
 8001aa2:	f003 f855 	bl	8004b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_PCD_MspInit+0xac>)
 8001aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_PCD_MspInit+0xac>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	6353      	str	r3, [r2, #52]	; 0x34
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_PCD_MspInit+0xac>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_PCD_MspInit+0xac>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_PCD_MspInit+0xac>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000

08001ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08e      	sub	sp, #56	; 0x38
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	4a33      	ldr	r2, [pc, #204]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6413      	str	r3, [r2, #64]	; 0x40
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b0c:	f107 0210 	add.w	r2, r7, #16
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 f984 	bl	8005e24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d103      	bne.n	8001b2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b26:	f004 f955 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
 8001b2a:	6378      	str	r0, [r7, #52]	; 0x34
 8001b2c:	e004      	b.n	8001b38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b2e:	f004 f951 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
 8001b32:	4603      	mov	r3, r0
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3a:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <HAL_InitTick+0xec>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	0c9b      	lsrs	r3, r3, #18
 8001b42:	3b01      	subs	r3, #1
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_InitTick+0xf0>)
 8001b48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_InitTick+0xf0>)
 8001b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b54:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_InitTick+0xf0>)
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_InitTick+0xf0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_InitTick+0xf0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_InitTick+0xf0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001b6e:	4818      	ldr	r0, [pc, #96]	; (8001bd0 <HAL_InitTick+0xf0>)
 8001b70:	f004 ff32 	bl	80069d8 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d11b      	bne.n	8001bba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001b82:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <HAL_InitTick+0xf0>)
 8001b84:	f004 ff78 	bl	8006a78 <HAL_TIM_Base_Start_IT>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d111      	bne.n	8001bba <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b96:	201c      	movs	r0, #28
 8001b98:	f001 fd14 	bl	80035c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b0f      	cmp	r3, #15
 8001ba0:	d808      	bhi.n	8001bb4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	201c      	movs	r0, #28
 8001ba8:	f001 fcf0 	bl	800358c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bac:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_InitTick+0xf4>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e002      	b.n	8001bba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3738      	adds	r7, #56	; 0x38
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	431bde83 	.word	0x431bde83
 8001bd0:	200010a8 	.word	0x200010a8
 8001bd4:	20000030 	.word	0x20000030

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <NMI_Handler+0x4>

08001bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Stream2_IRQHandler+0x10>)
 8001c0a:	f001 fe29 	bl	8003860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000304 	.word	0x20000304

08001c18 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <DMA1_Stream4_IRQHandler+0x10>)
 8001c1e:	f001 fe1f 	bl	8003860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200002a4 	.word	0x200002a4

08001c2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <TIM2_IRQHandler+0x10>)
 8001c32:	f004 ffea 	bl	8006c0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200010a8 	.word	0x200010a8

08001c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c48:	f003 f960 	bl	8004f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <UART4_IRQHandler+0x10>)
 8001c56:	f005 ff3f 	bl	8007ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000260 	.word	0x20000260

08001c64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM6_DAC_IRQHandler+0x10>)
 8001c6a:	f004 ffce 	bl	8006c0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200001b8 	.word	0x200001b8

08001c78 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <DMA2_Stream1_IRQHandler+0x10>)
 8001c7e:	f001 fdef 	bl	8003860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000200 	.word	0x20000200

08001c8c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <ETH_IRQHandler+0x10>)
 8001c92:	f002 fa99 	bl	80041c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20005c34 	.word	0x20005c34

08001ca0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return 1;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_kill>:

int _kill(int pid, int sig)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cba:	f019 f837 	bl	801ad2c <__errno>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2216      	movs	r2, #22
 8001cc2:	601a      	str	r2, [r3, #0]
  return -1;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_exit>:

void _exit (int status)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ffe7 	bl	8001cb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ce2:	e7fe      	b.n	8001ce2 <_exit+0x12>

08001ce4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e00a      	b.n	8001d0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf6:	f3af 8000 	nop.w
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf0      	blt.n	8001cf6 <_read+0x12>
  }

  return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e009      	b.n	8001d44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	60ba      	str	r2, [r7, #8]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf1      	blt.n	8001d30 <_write+0x12>
  }
  return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_close>:

int _close(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_isatty>:

int _isatty(int file)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d207      	bcs.n	8001e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df0:	f018 ff9c 	bl	801ad2c <__errno>
 8001df4:	4603      	mov	r3, r0
 8001df6:	220c      	movs	r2, #12
 8001df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	e009      	b.n	8001e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <_sbrk+0x64>)
 8001e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20030000 	.word	0x20030000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	200010f0 	.word	0x200010f0
 8001e28:	20012a20 	.word	0x20012a20

08001e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <SystemInit+0x20>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <SystemInit+0x20>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e88 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e56:	490e      	ldr	r1, [pc, #56]	; (8001e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e58:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e6c:	4c0b      	ldr	r4, [pc, #44]	; (8001e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e7a:	f7ff ffd7 	bl	8001e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f018 ff5b 	bl	801ad38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e82:	f7fe fe71 	bl	8000b68 <main>
  bx  lr    
 8001e86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001e94:	0801f584 	.word	0x0801f584
  ldr r2, =_sbss
 8001e98:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001e9c:	20012a20 	.word	0x20012a20

08001ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC_IRQHandler>

08001ea2 <MFRC522_Init>:
/////////////////////////////////////////////////////////////////////////////////////
// Functions for setting up the Arduino
/////////////////////////////////////////////////////////////////////////////////////

void MFRC522_Init(MFRC *dev, uint16_t chipSelectPin, GPIO_TypeDef * csPort, uint16_t resetPowerDownPin, GPIO_TypeDef * rsPDPort)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	461a      	mov	r2, r3
 8001eae:	460b      	mov	r3, r1
 8001eb0:	817b      	strh	r3, [r7, #10]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	813b      	strh	r3, [r7, #8]
	dev->_chipSelectPin = chipSelectPin;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	897a      	ldrh	r2, [r7, #10]
 8001eba:	801a      	strh	r2, [r3, #0]
	dev->_chipSelectPort = csPort;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	605a      	str	r2, [r3, #4]
	dev->_resetPowerDownPin = resetPowerDownPin;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	893a      	ldrh	r2, [r7, #8]
 8001ec6:	805a      	strh	r2, [r3, #2]
	dev->_resetPowerDownPort = rsPDPort;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	609a      	str	r2, [r3, #8]
	PCD_Init(dev);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f9ae 	bl	8002230 <PCD_Init>

	PCD_DumpVersionToSerial(dev);
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f001 f973 	bl	80031c0 <PCD_DumpVersionToSerial>
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <PCD_WriteRegister>:
 * Writes a uint8_t to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void PCD_WriteRegister(	MFRC *dev, PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									uint8_t value			///< The value to write.
								) {
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	70fb      	strb	r3, [r7, #3]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
#ifdef USE_SPI
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);		// Select slave
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6858      	ldr	r0, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	4619      	mov	r1, r3
 8001efe:	f002 ffeb 	bl	8004ed8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dev->hspi, &reg, 1, 1000);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68d8      	ldr	r0, [r3, #12]
 8001f06:	1cf9      	adds	r1, r7, #3
 8001f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f004 f844 	bl	8005f9a <HAL_SPI_Transmit>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(dev->hspi, &value, 1, 1000);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68d8      	ldr	r0, [r3, #12]
 8001f1a:	1cb9      	adds	r1, r7, #2
 8001f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f20:	2201      	movs	r2, #1
 8001f22:	f004 f83a 	bl	8005f9a <HAL_SPI_Transmit>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6858      	ldr	r0, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4619      	mov	r1, r3
 8001f36:	f002 ffcf 	bl	8004ed8 <HAL_GPIO_WritePin>
#else

#endif
} // End PCD_WriteRegister()
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <PCD_WriteRegisters>:
 * The interface is described in the datasheet section 8.1.2.
 */
void PCD_WriteRegisters(	MFRC *dev, PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									uint8_t count,			///< The number of bytes to write to the register
									uint8_t *values		///< The values to write. Byte array.
								) {
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	72fb      	strb	r3, [r7, #11]
 8001f50:	4613      	mov	r3, r2
 8001f52:	72bb      	strb	r3, [r7, #10]
#ifdef USE_SPI
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6858      	ldr	r0, [r3, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f002 ffba 	bl	8004ed8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspi, &reg, 1, 1000);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68d8      	ldr	r0, [r3, #12]
 8001f68:	f107 010b 	add.w	r1, r7, #11
 8001f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f70:	2201      	movs	r2, #1
 8001f72:	f004 f812 	bl	8005f9a <HAL_SPI_Transmit>

	HAL_SPI_Transmit(dev->hspi, values, count, 3000);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	68d8      	ldr	r0, [r3, #12]
 8001f7a:	7abb      	ldrb	r3, [r7, #10]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f004 f809 	bl	8005f9a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6858      	ldr	r0, [r3, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4619      	mov	r1, r3
 8001f94:	f002 ffa0 	bl	8004ed8 <HAL_GPIO_WritePin>
#else


#endif
} // End PCD_WriteRegister()
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <PCD_ReadRegister>:
/**
 * Reads a uint8_t from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
uint8_t PCD_ReadRegister(	MFRC *dev, PCD_Register reg	///< The register to read from. One of the PCD_Register enums.
								) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	uint8_t address = (0x80 | reg);
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6858      	ldr	r0, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f002 ff89 	bl	8004ed8 <HAL_GPIO_WritePin>
				// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	HAL_SPI_Transmit(dev->hspi, &address, 1, 1000);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68d8      	ldr	r0, [r3, #12]
 8001fca:	f107 010e 	add.w	r1, r7, #14
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f003 ffe1 	bl	8005f9a <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->hspi, &value, 1, 1000);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68d8      	ldr	r0, [r3, #12]
 8001fdc:	f107 010f 	add.w	r1, r7, #15
 8001fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f004 f914 	bl	8006212 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6858      	ldr	r0, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f002 ff6f 	bl	8004ed8 <HAL_GPIO_WritePin>
	return value;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
} // End PCD_ReadRegister()
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <PCD_ReadRegisters>:
 */
void PCD_ReadRegisters(	MFRC *dev, PCD_Register reg,	///< The register to read from. One of the PCD_Register enums.
								uint8_t count,			///< The number of bytes to read
								uint8_t *values,		///< Byte array to store the values in.
								uint8_t rxAlign		///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	72fb      	strb	r3, [r7, #11]
 8002012:	4613      	mov	r3, r2
 8002014:	72bb      	strb	r3, [r7, #10]
	if (count == 0) {
 8002016:	7abb      	ldrb	r3, [r7, #10]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d071      	beq.n	8002100 <PCD_ReadRegisters+0xfc>
		return;
	}
	//SEGGER_RTT_printf(0, "Reading "); 	SEGGER_RTT_printf(0, count); SEGGER_RTT_printf(0, " bytes from register.");
	uint8_t address = 0x80 | reg;				// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 800201c:	7afb      	ldrb	r3, [r7, #11]
 800201e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002022:	b2db      	uxtb	r3, r3
 8002024:	757b      	strb	r3, [r7, #21]
	uint8_t index = 0;							// Index in values array.
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_RESET);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6858      	ldr	r0, [r3, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	f002 ff4f 	bl	8004ed8 <HAL_GPIO_WritePin>
	count--;								// One read is performed outside of the loop
 800203a:	7abb      	ldrb	r3, [r7, #10]
 800203c:	3b01      	subs	r3, #1
 800203e:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(dev->hspi, &address, 1, 1000);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	68d8      	ldr	r0, [r3, #12]
 8002044:	f107 0115 	add.w	r1, r7, #21
 8002048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204c:	2201      	movs	r2, #1
 800204e:	f003 ffa4 	bl	8005f9a <HAL_SPI_Transmit>
	if (rxAlign) {		// Only update bit positions rxAlign..7 in values[0]
 8002052:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d038      	beq.n	80020cc <PCD_ReadRegisters+0xc8>
		// Create bit mask for bit positions rxAlign..7
		uint8_t mask = (0xFF << rxAlign) & 0xFF;
 800205a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800205e:	22ff      	movs	r2, #255	; 0xff
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	75bb      	strb	r3, [r7, #22]
		// Read value and tell that we want to read the same address again.
		uint8_t value;
		HAL_SPI_TransmitReceive(dev->hspi, &address,  &value, 1, 1000);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	68d8      	ldr	r0, [r3, #12]
 800206a:	f107 0214 	add.w	r2, r7, #20
 800206e:	f107 0115 	add.w	r1, r7, #21
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2301      	movs	r3, #1
 800207a:	f004 f9db 	bl	8006434 <HAL_SPI_TransmitReceive>

		// Apply mask to both current value of values[0] and the new data in value.
		values[0] = (values[0] & ~mask) | (value & mask);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b25a      	sxtb	r2, r3
 8002084:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002088:	43db      	mvns	r3, r3
 800208a:	b25b      	sxtb	r3, r3
 800208c:	4013      	ands	r3, r2
 800208e:	b25a      	sxtb	r2, r3
 8002090:	7d39      	ldrb	r1, [r7, #20]
 8002092:	7dbb      	ldrb	r3, [r7, #22]
 8002094:	400b      	ands	r3, r1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	b25b      	sxtb	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b25b      	sxtb	r3, r3
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	701a      	strb	r2, [r3, #0]
		index++;
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	3301      	adds	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
	}
	while (index < count) {
 80020aa:	e00f      	b.n	80020cc <PCD_ReadRegisters+0xc8>
		HAL_SPI_TransmitReceive(dev->hspi, &address,  &values[index], 1, 1000);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68d8      	ldr	r0, [r3, #12]
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	441a      	add	r2, r3
 80020b6:	f107 0115 	add.w	r1, r7, #21
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2301      	movs	r3, #1
 80020c2:	f004 f9b7 	bl	8006434 <HAL_SPI_TransmitReceive>
		index++;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	3301      	adds	r3, #1
 80020ca:	75fb      	strb	r3, [r7, #23]
	while (index < count) {
 80020cc:	7dfa      	ldrb	r2, [r7, #23]
 80020ce:	7abb      	ldrb	r3, [r7, #10]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3eb      	bcc.n	80020ac <PCD_ReadRegisters+0xa8>
	}
	HAL_SPI_TransmitReceive(dev->hspi, &address,  &values[index], 1, 1000);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68d8      	ldr	r0, [r3, #12]
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	441a      	add	r2, r3
 80020de:	f107 0115 	add.w	r1, r7, #21
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	f004 f9a3 	bl	8006434 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(dev->_chipSelectPort, dev->_chipSelectPin, GPIO_PIN_SET);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6858      	ldr	r0, [r3, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4619      	mov	r1, r3
 80020fa:	f002 feed 	bl	8004ed8 <HAL_GPIO_WritePin>
 80020fe:	e000      	b.n	8002102 <PCD_ReadRegisters+0xfe>
		return;
 8002100:	bf00      	nop
} // End PCD_ReadRegister()
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <PCD_SetRegisterBitMask>:
/**
 * Sets the bits given in mask in register reg.
 */
void PCD_SetRegisterBitMask(	MFRC *dev, PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										uint8_t mask			///< The bits to set.
									) { 
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]
 8002114:	4613      	mov	r3, r2
 8002116:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = PCD_ReadRegister(dev, reg);
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff3f 	bl	8001fa0 <PCD_ReadRegister>
 8002122:	4603      	mov	r3, r0
 8002124:	73fb      	strb	r3, [r7, #15]
	PCD_WriteRegister(dev, reg, tmp | mask);			// set bit mask
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	78bb      	ldrb	r3, [r7, #2]
 800212a:	4313      	orrs	r3, r2
 800212c:	b2da      	uxtb	r2, r3
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fed5 	bl	8001ee2 <PCD_WriteRegister>
} // End PCD_SetRegisterBitMask(dev, )
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <PCD_ClearRegisterBitMask>:
/**
 * Clears the bits given in mask from register reg.
 */
void PCD_ClearRegisterBitMask(	MFRC *dev, PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										uint8_t mask			///< The bits to clear.
									  ) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]
 800214c:	4613      	mov	r3, r2
 800214e:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = PCD_ReadRegister(dev, reg);
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff23 	bl	8001fa0 <PCD_ReadRegister>
 800215a:	4603      	mov	r3, r0
 800215c:	73fb      	strb	r3, [r7, #15]
	PCD_WriteRegister(dev, reg, tmp & (~mask));		// clear bit mask
 800215e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002162:	43db      	mvns	r3, r3
 8002164:	b25a      	sxtb	r2, r3
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4013      	ands	r3, r2
 800216c:	b25b      	sxtb	r3, r3
 800216e:	b2da      	uxtb	r2, r3
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff feb4 	bl	8001ee2 <PCD_WriteRegister>
} // End PCD_ClearRegisterBitMask()
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <PCD_CalculateCRC>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PCD_CalculateCRC(	MFRC *dev, uint8_t *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
												uint8_t length,	///< In: The number of bytes to transfer.
												uint8_t *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low uint8_t first.
					 ) {
 8002182:	b590      	push	{r4, r7, lr}
 8002184:	b087      	sub	sp, #28
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	71fb      	strb	r3, [r7, #7]
	PCD_WriteRegister(dev, CommandReg, PCD_Idle);		// Stop any active command.
 8002192:	2200      	movs	r2, #0
 8002194:	2102      	movs	r1, #2
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff fea3 	bl	8001ee2 <PCD_WriteRegister>
	PCD_WriteRegister(dev, DivIrqReg, 0x04);				// Clear the CRCIRq interrupt request bit
 800219c:	2204      	movs	r2, #4
 800219e:	210a      	movs	r1, #10
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff fe9e 	bl	8001ee2 <PCD_WriteRegister>
	PCD_WriteRegister(dev, FIFOLevelReg, 0x80);			// FlushBuffer = 1, FIFO initialization
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	2114      	movs	r1, #20
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff fe99 	bl	8001ee2 <PCD_WriteRegister>
	PCD_WriteRegisters(dev, FIFODataReg, length, data);	// Write data to the FIFO
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2112      	movs	r1, #18
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f7ff fec3 	bl	8001f42 <PCD_WriteRegisters>
	PCD_WriteRegister(dev, CommandReg, PCD_CalcCRC);		// Start the calculation
 80021bc:	2203      	movs	r2, #3
 80021be:	2102      	movs	r1, #2
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff fe8e 	bl	8001ee2 <PCD_WriteRegister>
	
	// Wait for the CRC calculation to complete. Check for the register to
	// indicate that the CRC calculation is complete in a loop. If the
	// calculation is not indicated as complete in ~90ms, then time out
	// the operation.
	const uint32_t deadline = HAL_GetTick() + 89;
 80021c6:	f001 f8f9 	bl	80033bc <HAL_GetTick>
 80021ca:	4603      	mov	r3, r0
 80021cc:	3359      	adds	r3, #89	; 0x59
 80021ce:	617b      	str	r3, [r7, #20]

	do {
		// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq reserved CRCIRq reserved reserved
		uint8_t n = PCD_ReadRegister(dev, DivIrqReg);
 80021d0:	210a      	movs	r1, #10
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7ff fee4 	bl	8001fa0 <PCD_ReadRegister>
 80021d8:	4603      	mov	r3, r0
 80021da:	74fb      	strb	r3, [r7, #19]
		if (n & 0x04) {									// CRCIRq bit set - calculation done
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <PCD_CalculateCRC+0x92>
			PCD_WriteRegister(dev, CommandReg, PCD_Idle);	// Stop calculating CRC for new content in the FIFO.
 80021e6:	2200      	movs	r2, #0
 80021e8:	2102      	movs	r1, #2
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff fe79 	bl	8001ee2 <PCD_WriteRegister>
			// Transfer the result from the registers to the result buffer
			result[0] = PCD_ReadRegister(dev, CRCResultRegL);
 80021f0:	2144      	movs	r1, #68	; 0x44
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff fed4 	bl	8001fa0 <PCD_ReadRegister>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	701a      	strb	r2, [r3, #0]
			result[1] = PCD_ReadRegister(dev, CRCResultRegH);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	1c5c      	adds	r4, r3, #1
 8002204:	2142      	movs	r1, #66	; 0x42
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f7ff feca 	bl	8001fa0 <PCD_ReadRegister>
 800220c:	4603      	mov	r3, r0
 800220e:	7023      	strb	r3, [r4, #0]
			return STATUS_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e009      	b.n	8002228 <PCD_CalculateCRC+0xa6>
		}
		HAL_Delay(10);
 8002214:	200a      	movs	r0, #10
 8002216:	f001 f8dd 	bl	80033d4 <HAL_Delay>
	}
	while ( HAL_GetTick() < deadline);
 800221a:	f001 f8cf 	bl	80033bc <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4293      	cmp	r3, r2
 8002224:	d8d4      	bhi.n	80021d0 <PCD_CalculateCRC+0x4e>

	// 89ms passed and nothing happened. Communication with the MFRC522 might be down.
	return STATUS_TIMEOUT;
 8002226:	2303      	movs	r3, #3
} // End PCD_CalculateCRC()
 8002228:	4618      	mov	r0, r3
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd90      	pop	{r4, r7, pc}

08002230 <PCD_Init>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void PCD_Init(MFRC *dev) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	bool hardReset = false;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]

	// Set the chipSelectPin as digital output, do not select the slave yet

	// If a valid pin number has been set, pull device out of power down / reset state.

	if (HAL_GPIO_ReadPin(dev->_resetPowerDownPort, dev->_resetPowerDownPin) == GPIO_PIN_RESET) {	// The MFRC522 chip is in power down mode.
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	885b      	ldrh	r3, [r3, #2]
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f002 fe2e 	bl	8004ea8 <HAL_GPIO_ReadPin>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d117      	bne.n	8002282 <PCD_Init+0x52>

		HAL_GPIO_WritePin(dev->_resetPowerDownPort, dev->_resetPowerDownPin, GPIO_PIN_RESET);		// Make sure we have a clean LOW state.
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6898      	ldr	r0, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	885b      	ldrh	r3, [r3, #2]
 800225a:	2200      	movs	r2, #0
 800225c:	4619      	mov	r1, r3
 800225e:	f002 fe3b 	bl	8004ed8 <HAL_GPIO_WritePin>
		HAL_Delay(1);				// 8.8.1 Reset timing requirements says about 100ns. Let us be generous: 2μsl
 8002262:	2001      	movs	r0, #1
 8002264:	f001 f8b6 	bl	80033d4 <HAL_Delay>
		HAL_GPIO_WritePin(dev->_resetPowerDownPort, dev->_resetPowerDownPin, GPIO_PIN_SET);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6898      	ldr	r0, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	885b      	ldrh	r3, [r3, #2]
 8002270:	2201      	movs	r2, #1
 8002272:	4619      	mov	r1, r3
 8002274:	f002 fe30 	bl	8004ed8 <HAL_GPIO_WritePin>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
		HAL_Delay(50);
 8002278:	2032      	movs	r0, #50	; 0x32
 800227a:	f001 f8ab 	bl	80033d4 <HAL_Delay>
		hardReset = true;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
	}


	if (!hardReset) { // Perform a soft reset if we haven't triggered a hard reset above.
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	f083 0301 	eor.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <PCD_Init+0x64>
		PCD_Reset(dev);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8a4 	bl	80023dc <PCD_Reset>
	}
	uint8_t r_val = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	73bb      	strb	r3, [r7, #14]
	// Reset baud rates
	PCD_WriteRegister(dev, TxModeReg, 0x00);
 8002298:	2200      	movs	r2, #0
 800229a:	2124      	movs	r1, #36	; 0x24
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fe20 	bl	8001ee2 <PCD_WriteRegister>

	r_val = PCD_ReadRegister(dev, TxModeReg);
 80022a2:	2124      	movs	r1, #36	; 0x24
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fe7b 	bl	8001fa0 <PCD_ReadRegister>
 80022aa:	4603      	mov	r3, r0
 80022ac:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80022ae:	7bbb      	ldrb	r3, [r7, #14]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4949      	ldr	r1, [pc, #292]	; (80023d8 <PCD_Init+0x1a8>)
 80022b4:	2000      	movs	r0, #0
 80022b6:	f018 fb17 	bl	801a8e8 <SEGGER_RTT_printf>


	PCD_WriteRegister(dev, RxModeReg, 0x00);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2126      	movs	r1, #38	; 0x26
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fe0f 	bl	8001ee2 <PCD_WriteRegister>

	r_val = PCD_ReadRegister(dev, RxModeReg);
 80022c4:	2126      	movs	r1, #38	; 0x26
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fe6a 	bl	8001fa0 <PCD_ReadRegister>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80022d0:	7bbb      	ldrb	r3, [r7, #14]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4940      	ldr	r1, [pc, #256]	; (80023d8 <PCD_Init+0x1a8>)
 80022d6:	2000      	movs	r0, #0
 80022d8:	f018 fb06 	bl	801a8e8 <SEGGER_RTT_printf>


	// Reset ModWidthReg
	PCD_WriteRegister(dev, ModWidthReg, 0x26);
 80022dc:	2226      	movs	r2, #38	; 0x26
 80022de:	2148      	movs	r1, #72	; 0x48
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff fdfe 	bl	8001ee2 <PCD_WriteRegister>

	r_val = PCD_ReadRegister(dev, ModWidthReg);
 80022e6:	2148      	movs	r1, #72	; 0x48
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fe59 	bl	8001fa0 <PCD_ReadRegister>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80022f2:	7bbb      	ldrb	r3, [r7, #14]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4938      	ldr	r1, [pc, #224]	; (80023d8 <PCD_Init+0x1a8>)
 80022f8:	2000      	movs	r0, #0
 80022fa:	f018 faf5 	bl	801a8e8 <SEGGER_RTT_printf>

	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	PCD_WriteRegister(dev, TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	2154      	movs	r1, #84	; 0x54
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff fded 	bl	8001ee2 <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TModeReg);
 8002308:	2154      	movs	r1, #84	; 0x54
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fe48 	bl	8001fa0 <PCD_ReadRegister>
 8002310:	4603      	mov	r3, r0
 8002312:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	461a      	mov	r2, r3
 8002318:	492f      	ldr	r1, [pc, #188]	; (80023d8 <PCD_Init+0x1a8>)
 800231a:	2000      	movs	r0, #0
 800231c:	f018 fae4 	bl	801a8e8 <SEGGER_RTT_printf>


	PCD_WriteRegister(dev, TPrescalerReg, 0xA9);		// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
 8002320:	22a9      	movs	r2, #169	; 0xa9
 8002322:	2156      	movs	r1, #86	; 0x56
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff fddc 	bl	8001ee2 <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TPrescalerReg);
 800232a:	2156      	movs	r1, #86	; 0x56
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fe37 	bl	8001fa0 <PCD_ReadRegister>
 8002332:	4603      	mov	r3, r0
 8002334:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8002336:	7bbb      	ldrb	r3, [r7, #14]
 8002338:	461a      	mov	r2, r3
 800233a:	4927      	ldr	r1, [pc, #156]	; (80023d8 <PCD_Init+0x1a8>)
 800233c:	2000      	movs	r0, #0
 800233e:	f018 fad3 	bl	801a8e8 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 8002342:	2203      	movs	r2, #3
 8002344:	2158      	movs	r1, #88	; 0x58
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fdcb 	bl	8001ee2 <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TReloadRegH);
 800234c:	2158      	movs	r1, #88	; 0x58
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff fe26 	bl	8001fa0 <PCD_ReadRegister>
 8002354:	4603      	mov	r3, r0
 8002356:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 8002358:	7bbb      	ldrb	r3, [r7, #14]
 800235a:	461a      	mov	r2, r3
 800235c:	491e      	ldr	r1, [pc, #120]	; (80023d8 <PCD_Init+0x1a8>)
 800235e:	2000      	movs	r0, #0
 8002360:	f018 fac2 	bl	801a8e8 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, TReloadRegL, 0xE8);
 8002364:	22e8      	movs	r2, #232	; 0xe8
 8002366:	215a      	movs	r1, #90	; 0x5a
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fdba 	bl	8001ee2 <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TReloadRegL);
 800236e:	215a      	movs	r1, #90	; 0x5a
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fe15 	bl	8001fa0 <PCD_ReadRegister>
 8002376:	4603      	mov	r3, r0
 8002378:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	461a      	mov	r2, r3
 800237e:	4916      	ldr	r1, [pc, #88]	; (80023d8 <PCD_Init+0x1a8>)
 8002380:	2000      	movs	r0, #0
 8002382:	f018 fab1 	bl	801a8e8 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	212a      	movs	r1, #42	; 0x2a
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fda9 	bl	8001ee2 <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, TxASKReg);
 8002390:	212a      	movs	r1, #42	; 0x2a
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fe04 	bl	8001fa0 <PCD_ReadRegister>
 8002398:	4603      	mov	r3, r0
 800239a:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 800239c:	7bbb      	ldrb	r3, [r7, #14]
 800239e:	461a      	mov	r2, r3
 80023a0:	490d      	ldr	r1, [pc, #52]	; (80023d8 <PCD_Init+0x1a8>)
 80023a2:	2000      	movs	r0, #0
 80023a4:	f018 faa0 	bl	801a8e8 <SEGGER_RTT_printf>

	PCD_WriteRegister(dev, ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80023a8:	223d      	movs	r2, #61	; 0x3d
 80023aa:	2122      	movs	r1, #34	; 0x22
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff fd98 	bl	8001ee2 <PCD_WriteRegister>
	r_val = PCD_ReadRegister(dev, ModeReg);
 80023b2:	2122      	movs	r1, #34	; 0x22
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff fdf3 	bl	8001fa0 <PCD_ReadRegister>
 80023ba:	4603      	mov	r3, r0
 80023bc:	73bb      	strb	r3, [r7, #14]
	SEGGER_RTT_printf(0, "Value = %x\r\n", r_val);
 80023be:	7bbb      	ldrb	r3, [r7, #14]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4905      	ldr	r1, [pc, #20]	; (80023d8 <PCD_Init+0x1a8>)
 80023c4:	2000      	movs	r0, #0
 80023c6:	f018 fa8f 	bl	801a8e8 <SEGGER_RTT_printf>

	PCD_AntennaOn(dev);						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f827 	bl	800241e <PCD_AntennaOn>
} // End PCD_Init()
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	0801bc88 	.word	0x0801bc88

080023dc <PCD_Reset>:


/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void PCD_Reset(MFRC *dev) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	PCD_WriteRegister(dev, CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80023e4:	220f      	movs	r2, #15
 80023e6:	2102      	movs	r1, #2
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fd7a 	bl	8001ee2 <PCD_WriteRegister>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
	uint8_t count = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
	do {
		// Wait for the PowerDown bit in CommandReg to be cleared (max 3x50ms)
		HAL_Delay(50);
 80023f2:	2032      	movs	r0, #50	; 0x32
 80023f4:	f000 ffee 	bl	80033d4 <HAL_Delay>
	} while ((PCD_ReadRegister(dev, CommandReg) & (1 << 4)) && (++count) < 3);
 80023f8:	2102      	movs	r1, #2
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff fdd0 	bl	8001fa0 <PCD_ReadRegister>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <PCD_Reset+0x3a>
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	3301      	adds	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d9ed      	bls.n	80023f2 <PCD_Reset+0x16>
} // End PCD_Reset()
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <PCD_AntennaOn>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins are disabled.
 */
void PCD_AntennaOn(MFRC *dev) {
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
	uint8_t value = PCD_ReadRegister(dev, TxControlReg);
 8002426:	2128      	movs	r1, #40	; 0x28
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff fdb9 	bl	8001fa0 <PCD_ReadRegister>
 800242e:	4603      	mov	r3, r0
 8002430:	73fb      	strb	r3, [r7, #15]
	if ((value & 0x03) != 0x03) {
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d008      	beq.n	800244e <PCD_AntennaOn+0x30>
		PCD_WriteRegister(dev, TxControlReg, value | 0x03);
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	f043 0303 	orr.w	r3, r3, #3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	2128      	movs	r1, #40	; 0x28
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff fd4a 	bl	8001ee2 <PCD_WriteRegister>
	}
} // End PCD_AntennaOn()
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <PCD_TransceiveData>:
													uint8_t *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
													uint8_t *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
													uint8_t *validBits,	///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits. Default NULL.
													uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
													bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
 8002456:	b580      	push	{r7, lr}
 8002458:	b08c      	sub	sp, #48	; 0x30
 800245a:	af06      	add	r7, sp, #24
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	71fb      	strb	r3, [r7, #7]
	uint8_t waitIRq = 0x30;		// RxIRq and IdleIRq
 8002466:	2330      	movs	r3, #48	; 0x30
 8002468:	75fb      	strb	r3, [r7, #23]
	return PCD_CommunicateWithPICC(dev, PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 800246a:	7dfa      	ldrb	r2, [r7, #23]
 800246c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002470:	9305      	str	r3, [sp, #20]
 8002472:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002476:	9304      	str	r3, [sp, #16]
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	9303      	str	r3, [sp, #12]
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	9302      	str	r3, [sp, #8]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	210c      	movs	r1, #12
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f805 	bl	800249c <PCD_CommunicateWithPICC>
 8002492:	4603      	mov	r3, r0
} // End PCD_TransceiveData()
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <PCD_CommunicateWithPICC>:
														uint8_t *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
														uint8_t *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
														uint8_t *validBits,	///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits.
														uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
														bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	72fb      	strb	r3, [r7, #11]
 80024aa:	4613      	mov	r3, r2
 80024ac:	72bb      	strb	r3, [r7, #10]
	// Prepare values for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <PCD_CommunicateWithPICC+0x1e>
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	e000      	b.n	80024bc <PCD_CommunicateWithPICC+0x20>
 80024ba:	2300      	movs	r3, #0
 80024bc:	777b      	strb	r3, [r7, #29]
	uint8_t bitFraming = (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80024be:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	7f7b      	ldrb	r3, [r7, #29]
 80024c8:	4413      	add	r3, r2
 80024ca:	773b      	strb	r3, [r7, #28]
	
	PCD_WriteRegister(dev, CommandReg, PCD_Idle);			// Stop any active command.
 80024cc:	2200      	movs	r2, #0
 80024ce:	2102      	movs	r1, #2
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff fd06 	bl	8001ee2 <PCD_WriteRegister>
	PCD_WriteRegister(dev, ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80024d6:	227f      	movs	r2, #127	; 0x7f
 80024d8:	2108      	movs	r1, #8
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f7ff fd01 	bl	8001ee2 <PCD_WriteRegister>
	PCD_WriteRegister(dev, FIFOLevelReg, 0x80);				// FlushBuffer = 1, FIFO initialization
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	2114      	movs	r1, #20
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff fcfc 	bl	8001ee2 <PCD_WriteRegister>
	PCD_WriteRegisters(dev, FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80024ea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2112      	movs	r1, #18
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f7ff fd25 	bl	8001f42 <PCD_WriteRegisters>
	PCD_WriteRegister(dev, BitFramingReg, bitFraming);		// Bit adjustments
 80024f8:	7f3b      	ldrb	r3, [r7, #28]
 80024fa:	461a      	mov	r2, r3
 80024fc:	211a      	movs	r1, #26
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7ff fcef 	bl	8001ee2 <PCD_WriteRegister>
	PCD_WriteRegister(dev, CommandReg, command);				// Execute the command
 8002504:	7afb      	ldrb	r3, [r7, #11]
 8002506:	461a      	mov	r2, r3
 8002508:	2102      	movs	r1, #2
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f7ff fce9 	bl	8001ee2 <PCD_WriteRegister>
	if (command == PCD_Transceive) {
 8002510:	7afb      	ldrb	r3, [r7, #11]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d104      	bne.n	8002520 <PCD_CommunicateWithPICC+0x84>
		PCD_SetRegisterBitMask(dev, BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	211a      	movs	r1, #26
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fdf4 	bl	8002108 <PCD_SetRegisterBitMask>
	// Wait here for the command to complete. The bits specified in the
	// `waitIRq` parameter define what bits constitute a completed command.
	// When they are set in the ComIrqReg register, then the command is
	// considered complete. If the command is not indicated as complete in
	// ~36ms, then consider the command as timed out.
	const uint32_t deadline = HAL_GetTick() + 36;
 8002520:	f000 ff4c 	bl	80033bc <HAL_GetTick>
 8002524:	4603      	mov	r3, r0
 8002526:	3324      	adds	r3, #36	; 0x24
 8002528:	61bb      	str	r3, [r7, #24]
	bool completed = false;
 800252a:	2300      	movs	r3, #0
 800252c:	77fb      	strb	r3, [r7, #31]

	do {
		uint8_t n = PCD_ReadRegister(dev, ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 800252e:	2108      	movs	r1, #8
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff fd35 	bl	8001fa0 <PCD_ReadRegister>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 800253a:	7dfa      	ldrb	r2, [r7, #23]
 800253c:	7abb      	ldrb	r3, [r7, #10]
 800253e:	4013      	ands	r3, r2
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <PCD_CommunicateWithPICC+0xb0>
			completed = true;
 8002546:	2301      	movs	r3, #1
 8002548:	77fb      	strb	r3, [r7, #31]
			break;
 800254a:	e00f      	b.n	800256c <PCD_CommunicateWithPICC+0xd0>
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <PCD_CommunicateWithPICC+0xbe>
			return STATUS_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e095      	b.n	8002686 <PCD_CommunicateWithPICC+0x1ea>
		}
		HAL_Delay(10);
 800255a:	200a      	movs	r0, #10
 800255c:	f000 ff3a 	bl	80033d4 <HAL_Delay>
	}
	while ((HAL_GetTick()) < deadline);
 8002560:	f000 ff2c 	bl	80033bc <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4293      	cmp	r3, r2
 800256a:	d8e0      	bhi.n	800252e <PCD_CommunicateWithPICC+0x92>

	// 36ms and nothing happened. Communication with the MFRC522 might be down.
	if (!completed) {
 800256c:	7ffb      	ldrb	r3, [r7, #31]
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <PCD_CommunicateWithPICC+0xe0>
		return STATUS_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e084      	b.n	8002686 <PCD_CommunicateWithPICC+0x1ea>
	}
	
	// Stop now if any errors except collisions were detected.
	uint8_t errorRegValue = PCD_ReadRegister(dev, ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
 800257c:	210c      	movs	r1, #12
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff fd0e 	bl	8001fa0 <PCD_ReadRegister>
 8002584:	4603      	mov	r3, r0
 8002586:	75bb      	strb	r3, [r7, #22]
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 8002588:	7dbb      	ldrb	r3, [r7, #22]
 800258a:	f003 0313 	and.w	r3, r3, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <PCD_CommunicateWithPICC+0xfa>
		return STATUS_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e077      	b.n	8002686 <PCD_CommunicateWithPICC+0x1ea>
	}
  
	uint8_t _validBits = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	77bb      	strb	r3, [r7, #30]
	
	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d029      	beq.n	80025f4 <PCD_CommunicateWithPICC+0x158>
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d026      	beq.n	80025f4 <PCD_CommunicateWithPICC+0x158>
		uint8_t n = PCD_ReadRegister(dev, FIFOLevelReg);	// Number of bytes in the FIFO
 80025a6:	2114      	movs	r1, #20
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff fcf9 	bl	8001fa0 <PCD_ReadRegister>
 80025ae:	4603      	mov	r3, r0
 80025b0:	757b      	strb	r3, [r7, #21]
		if (n > *backLen) {
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	7d7a      	ldrb	r2, [r7, #21]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d901      	bls.n	80025c0 <PCD_CommunicateWithPICC+0x124>
			return STATUS_NO_ROOM;
 80025bc:	2304      	movs	r3, #4
 80025be:	e062      	b.n	8002686 <PCD_CommunicateWithPICC+0x1ea>
		}
		*backLen = n;											// Number of bytes returned
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	7d7a      	ldrb	r2, [r7, #21]
 80025c4:	701a      	strb	r2, [r3, #0]
		PCD_ReadRegisters(dev, FIFODataReg, n, backData, rxAlign);	// Get received data from FIFO
 80025c6:	7d7a      	ldrb	r2, [r7, #21]
 80025c8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2112      	movs	r1, #18
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7ff fd16 	bl	8002004 <PCD_ReadRegisters>
		_validBits = PCD_ReadRegister(dev, ControlReg) & 0x07;		// RxLastBits[2:0] indicates the number of valid bits in the last received uint8_t. If this value is 000b, the whole uint8_t is valid.
 80025d8:	2118      	movs	r1, #24
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff fce0 	bl	8001fa0 <PCD_ReadRegister>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	77bb      	strb	r3, [r7, #30]
		if (validBits) {
 80025e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <PCD_CommunicateWithPICC+0x158>
			*validBits = _validBits;
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	7fba      	ldrb	r2, [r7, #30]
 80025f2:	701a      	strb	r2, [r3, #0]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) {		// CollErr
 80025f4:	7dbb      	ldrb	r3, [r7, #22]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <PCD_CommunicateWithPICC+0x166>
		return STATUS_COLLISION;
 80025fe:	2302      	movs	r3, #2
 8002600:	e041      	b.n	8002686 <PCD_CommunicateWithPICC+0x1ea>
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03d      	beq.n	8002684 <PCD_CommunicateWithPICC+0x1e8>
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03a      	beq.n	8002684 <PCD_CommunicateWithPICC+0x1e8>
 800260e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d036      	beq.n	8002684 <PCD_CommunicateWithPICC+0x1e8>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d104      	bne.n	8002628 <PCD_CommunicateWithPICC+0x18c>
 800261e:	7fbb      	ldrb	r3, [r7, #30]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d101      	bne.n	8002628 <PCD_CommunicateWithPICC+0x18c>
			return STATUS_MIFARE_NACK;
 8002624:	23ff      	movs	r3, #255	; 0xff
 8002626:	e02e      	b.n	8002686 <PCD_CommunicateWithPICC+0x1ea>
		}
		// We need at least the CRC_A value and all 8 bits of the last uint8_t must be received.
		if (*backLen < 2 || _validBits != 0) {
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d902      	bls.n	8002636 <PCD_CommunicateWithPICC+0x19a>
 8002630:	7fbb      	ldrb	r3, [r7, #30]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <PCD_CommunicateWithPICC+0x19e>
			return STATUS_CRC_WRONG;
 8002636:	2307      	movs	r3, #7
 8002638:	e025      	b.n	8002686 <PCD_CommunicateWithPICC+0x1ea>
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		uint8_t controlBuffer[2];
		StatusCode status = PCD_CalculateCRC(dev, &backData[0], *backLen - 2, &controlBuffer[0]);
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	3b02      	subs	r3, #2
 8002640:	b2da      	uxtb	r2, r3
 8002642:	f107 0310 	add.w	r3, r7, #16
 8002646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff fd9a 	bl	8002182 <PCD_CalculateCRC>
 800264e:	4603      	mov	r3, r0
 8002650:	753b      	strb	r3, [r7, #20]
		if (status != STATUS_OK) {
 8002652:	7d3b      	ldrb	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <PCD_CommunicateWithPICC+0x1c0>
			return status;
 8002658:	7d3b      	ldrb	r3, [r7, #20]
 800265a:	e014      	b.n	8002686 <PCD_CommunicateWithPICC+0x1ea>
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	3b02      	subs	r3, #2
 8002662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002664:	4413      	add	r3, r2
 8002666:	781a      	ldrb	r2, [r3, #0]
 8002668:	7c3b      	ldrb	r3, [r7, #16]
 800266a:	429a      	cmp	r2, r3
 800266c:	d108      	bne.n	8002680 <PCD_CommunicateWithPICC+0x1e4>
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3b01      	subs	r3, #1
 8002674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002676:	4413      	add	r3, r2
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	7c7b      	ldrb	r3, [r7, #17]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <PCD_CommunicateWithPICC+0x1e8>
			return STATUS_CRC_WRONG;
 8002680:	2307      	movs	r3, #7
 8002682:	e000      	b.n	8002686 <PCD_CommunicateWithPICC+0x1ea>
		}
	}
	
	return STATUS_OK;
 8002684:	2300      	movs	r3, #0
} // End PCD_CommunicateWithPICC()
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <PICC_RequestA>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PICC_RequestA(	MFRC *dev, uint8_t *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											uint8_t *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
	return PICC_REQA_or_WUPA(dev, PICC_CMD_REQA, bufferATQA, bufferSize);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	2126      	movs	r1, #38	; 0x26
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f805 	bl	80026b0 <PICC_REQA_or_WUPA>
 80026a6:	4603      	mov	r3, r0
} // End PICC_RequestA()
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <PICC_REQA_or_WUPA>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
StatusCode PICC_REQA_or_WUPA(	MFRC *dev, uint8_t command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												uint8_t *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												uint8_t *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af04      	add	r7, sp, #16
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	460b      	mov	r3, r1
 80026be:	72fb      	strb	r3, [r7, #11]
	uint8_t validBits;
	StatusCode status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <PICC_REQA_or_WUPA+0x1e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d801      	bhi.n	80026d2 <PICC_REQA_or_WUPA+0x22>
		return STATUS_NO_ROOM;
 80026ce:	2304      	movs	r3, #4
 80026d0:	e027      	b.n	8002722 <PICC_REQA_or_WUPA+0x72>
	}
	PCD_ClearRegisterBitMask(dev, CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	211c      	movs	r1, #28
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff fd32 	bl	8002140 <PCD_ClearRegisterBitMask>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) uint8_t. TxLastBits = BitFramingReg[2..0]
 80026dc:	2307      	movs	r3, #7
 80026de:	75bb      	strb	r3, [r7, #22]
	status = PCD_TransceiveData(dev, &command, 1, bufferATQA, bufferSize, &validBits, 0, false);
 80026e0:	f107 010b 	add.w	r1, r7, #11
 80026e4:	2300      	movs	r3, #0
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	2300      	movs	r3, #0
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	f107 0316 	add.w	r3, r7, #22
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff feab 	bl	8002456 <PCD_TransceiveData>
 8002700:	4603      	mov	r3, r0
 8002702:	75fb      	strb	r3, [r7, #23]
	if (status != STATUS_OK) {
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <PICC_REQA_or_WUPA+0x5e>
		return status;
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	e009      	b.n	8002722 <PICC_REQA_or_WUPA+0x72>
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d102      	bne.n	800271c <PICC_REQA_or_WUPA+0x6c>
 8002716:	7dbb      	ldrb	r3, [r7, #22]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <PICC_REQA_or_WUPA+0x70>
		return STATUS_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <PICC_REQA_or_WUPA+0x72>
	}
	return STATUS_OK;
 8002720:	2300      	movs	r3, #0
} // End PICC_REQA_or_WUPA()
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <PICC_Select>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PICC_Select(	MFRC *dev, Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
											uint8_t validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
										 ) {
 800272a:	b580      	push	{r7, lr}
 800272c:	b092      	sub	sp, #72	; 0x48
 800272e:	af04      	add	r7, sp, #16
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	4613      	mov	r3, r2
 8002736:	71fb      	strb	r3, [r7, #7]
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	uint8_t cascadeLevel = 1;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	2b50      	cmp	r3, #80	; 0x50
 8002742:	d901      	bls.n	8002748 <PICC_Select+0x1e>
		return STATUS_INVALID;
 8002744:	2306      	movs	r3, #6
 8002746:	e267      	b.n	8002c18 <PICC_Select+0x4ee>
	}
	
	// Prepare MFRC522
	PCD_ClearRegisterBitMask(dev, CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	211c      	movs	r1, #28
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff fcf7 	bl	8002140 <PCD_ClearRegisterBitMask>
	
	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (!uidComplete) {
 8002758:	e24b      	b.n	8002bf2 <PICC_Select+0x4c8>
		// Set the Cascade Level in the SEL uint8_t, find out if we need to use the Cascade Tag in uint8_t 2.
		switch (cascadeLevel) {
 800275a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800275e:	2b03      	cmp	r3, #3
 8002760:	d036      	beq.n	80027d0 <PICC_Select+0xa6>
 8002762:	2b03      	cmp	r3, #3
 8002764:	dc3d      	bgt.n	80027e2 <PICC_Select+0xb8>
 8002766:	2b01      	cmp	r3, #1
 8002768:	d002      	beq.n	8002770 <PICC_Select+0x46>
 800276a:	2b02      	cmp	r3, #2
 800276c:	d018      	beq.n	80027a0 <PICC_Select+0x76>
 800276e:	e038      	b.n	80027e2 <PICC_Select+0xb8>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
 8002770:	2393      	movs	r3, #147	; 0x93
 8002772:	763b      	strb	r3, [r7, #24]
				uidIndex = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <PICC_Select+0x62>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b04      	cmp	r3, #4
 8002786:	d901      	bls.n	800278c <PICC_Select+0x62>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <PICC_Select+0x64>
 800278c:	2300      	movs	r3, #0
 800278e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002792:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 800279e:	e022      	b.n	80027e6 <PICC_Select+0xbc>
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
 80027a0:	2395      	movs	r3, #149	; 0x95
 80027a2:	763b      	strb	r3, [r7, #24]
				uidIndex = 3;
 80027a4:	2303      	movs	r3, #3
 80027a6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <PICC_Select+0x92>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b07      	cmp	r3, #7
 80027b6:	d901      	bls.n	80027bc <PICC_Select+0x92>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <PICC_Select+0x94>
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80027c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 80027ce:	e00a      	b.n	80027e6 <PICC_Select+0xbc>
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
 80027d0:	2397      	movs	r3, #151	; 0x97
 80027d2:	763b      	strb	r3, [r7, #24]
				uidIndex = 6;
 80027d4:	2306      	movs	r3, #6
 80027d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				useCascadeTag = false;						// Never used in CL3.
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 80027e0:	e001      	b.n	80027e6 <PICC_Select+0xbc>
			
			default:
				return STATUS_INTERNAL_ERROR;
 80027e2:	2305      	movs	r3, #5
 80027e4:	e218      	b.n	8002c18 <PICC_Select+0x4ee>
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80027e6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	79fa      	ldrb	r2, [r7, #7]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		if (currentLevelKnownBits < 0) {
 80027f8:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	da02      	bge.n	8002806 <PICC_Select+0xdc>
			currentLevelKnownBits = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
 8002806:	2302      	movs	r3, #2
 8002808:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		if (useCascadeTag) {
 800280c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <PICC_Select+0xfe>
			buffer[index++] = PICC_CMD_CT;
 8002814:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 800281e:	3338      	adds	r3, #56	; 0x38
 8002820:	443b      	add	r3, r7
 8002822:	2288      	movs	r2, #136	; 0x88
 8002824:	f803 2c20 	strb.w	r2, [r3, #-32]
		}
		uint8_t bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 8002828:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 800282c:	2b00      	cmp	r3, #0
 800282e:	da00      	bge.n	8002832 <PICC_Select+0x108>
 8002830:	3307      	adds	r3, #7
 8002832:	10db      	asrs	r3, r3, #3
 8002834:	b25b      	sxtb	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800283c:	f002 0207 	and.w	r2, r2, #7
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	2a00      	cmp	r2, #0
 8002844:	bf14      	ite	ne
 8002846:	2201      	movne	r2, #1
 8002848:	2200      	moveq	r2, #0
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4413      	add	r3, r2
 800284e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (bytesToCopy) {
 8002852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002856:	2b00      	cmp	r3, #0
 8002858:	d034      	beq.n	80028c4 <PICC_Select+0x19a>
			uint8_t maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 800285a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <PICC_Select+0x13c>
 8002862:	2303      	movs	r3, #3
 8002864:	e000      	b.n	8002868 <PICC_Select+0x13e>
 8002866:	2304      	movs	r3, #4
 8002868:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if (bytesToCopy > maxBytes) {
 800286c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002870:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002874:	429a      	cmp	r2, r3
 8002876:	d903      	bls.n	8002880 <PICC_Select+0x156>
				bytesToCopy = maxBytes;
 8002878:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800287c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			for (count = 0; count < bytesToCopy; count++) {
 8002880:	2300      	movs	r3, #0
 8002882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002886:	e017      	b.n	80028b8 <PICC_Select+0x18e>
				buffer[index++] = uid->uidByte[uidIndex + count];
 8002888:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800288c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002890:	441a      	add	r2, r3
 8002892:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002896:	1c59      	adds	r1, r3, #1
 8002898:	f887 1032 	strb.w	r1, [r7, #50]	; 0x32
 800289c:	4619      	mov	r1, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4413      	add	r3, r2
 80028a2:	785a      	ldrb	r2, [r3, #1]
 80028a4:	f101 0338 	add.w	r3, r1, #56	; 0x38
 80028a8:	443b      	add	r3, r7
 80028aa:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (count = 0; count < bytesToCopy; count++) {
 80028ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028b2:	3301      	adds	r3, #1
 80028b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80028b8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80028bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d3e1      	bcc.n	8002888 <PICC_Select+0x15e>
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
 80028c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <PICC_Select+0x1ae>
			currentLevelKnownBits += 8;
 80028cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80028d0:	3308      	adds	r3, #8
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!selectDone) {
 80028de:	e112      	b.n	8002b06 <PICC_Select+0x3dc>
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80028e0:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80028e4:	2b1f      	cmp	r3, #31
 80028e6:	dd2b      	ble.n	8002940 <PICC_Select+0x216>
				//SEGGER_RTT_printf(0, "SELECT: currentLevelKnownBits="); SEGGER_RTT_printf(0, currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80028e8:	2370      	movs	r3, #112	; 0x70
 80028ea:	767b      	strb	r3, [r7, #25]
				// Calculate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80028ec:	7eba      	ldrb	r2, [r7, #26]
 80028ee:	7efb      	ldrb	r3, [r7, #27]
 80028f0:	4053      	eors	r3, r2
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	7f3b      	ldrb	r3, [r7, #28]
 80028f6:	4053      	eors	r3, r2
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	7f7b      	ldrb	r3, [r7, #29]
 80028fc:	4053      	eors	r3, r2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	77bb      	strb	r3, [r7, #30]
				// Calculate CRC_A
				result = PCD_CalculateCRC(dev, buffer, 7, &buffer[7]);
 8002902:	f107 0318 	add.w	r3, r7, #24
 8002906:	3307      	adds	r3, #7
 8002908:	f107 0118 	add.w	r1, r7, #24
 800290c:	2207      	movs	r2, #7
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7ff fc37 	bl	8002182 <PCD_CalculateCRC>
 8002914:	4603      	mov	r3, r0
 8002916:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				if (result != STATUS_OK) {
 800291a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <PICC_Select+0x1fe>
					return result;
 8002922:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002926:	e177      	b.n	8002c18 <PICC_Select+0x4ee>
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
 8002928:	2300      	movs	r3, #0
 800292a:	75fb      	strb	r3, [r7, #23]
				bufferUsed		= 9;
 800292c:	2309      	movs	r3, #9
 800292e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
 8002932:	f107 0318 	add.w	r3, r7, #24
 8002936:	3306      	adds	r3, #6
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
				responseLength	= 3;
 800293a:	2303      	movs	r3, #3
 800293c:	75bb      	strb	r3, [r7, #22]
 800293e:	e039      	b.n	80029b4 <PICC_Select+0x28a>
			}
			else { // This is an ANTICOLLISION.
				//SEGGER_RTT_printf(0, "ANTICOLLISION: currentLevelKnownBits="); SEGGER_RTT_printf(0, currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 8002940:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002944:	425a      	negs	r2, r3
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	f002 0207 	and.w	r2, r2, #7
 800294e:	bf58      	it	pl
 8002950:	4253      	negpl	r3, r2
 8002952:	b25b      	sxtb	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	75fb      	strb	r3, [r7, #23]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
 8002958:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 800295c:	2b00      	cmp	r3, #0
 800295e:	da00      	bge.n	8002962 <PICC_Select+0x238>
 8002960:	3307      	adds	r3, #7
 8002962:	10db      	asrs	r3, r3, #3
 8002964:	b25b      	sxtb	r3, r3
 8002966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 800296a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800296e:	3302      	adds	r3, #2
 8002970:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 8002974:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	b2da      	uxtb	r2, r3
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	4413      	add	r3, r2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	767b      	strb	r3, [r7, #25]
				bufferUsed		= index + (txLastBits ? 1 : 0);
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002996:	4413      	add	r3, r2
 8002998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
 800299c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029a0:	f107 0218 	add.w	r2, r7, #24
 80029a4:	4413      	add	r3, r2
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
				responseLength	= sizeof(buffer) - index;
 80029a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029ac:	f1c3 0309 	rsb	r3, r3, #9
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	75bb      	strb	r3, [r7, #22]
			}
			
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a separate variable is overkill. But it makes the next line easier to read.
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			PCD_WriteRegister(dev, BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80029ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	4413      	add	r3, r2
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	211a      	movs	r1, #26
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff fa88 	bl	8001ee2 <PCD_WriteRegister>
			
			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(dev, buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign, false);
 80029d2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80029d6:	f107 0118 	add.w	r1, r7, #24
 80029da:	2300      	movs	r3, #0
 80029dc:	9303      	str	r3, [sp, #12]
 80029de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029e2:	9302      	str	r3, [sp, #8]
 80029e4:	f107 0317 	add.w	r3, r7, #23
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	f107 0316 	add.w	r3, r7, #22
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff fd2f 	bl	8002456 <PCD_TransceiveData>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80029fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d16a      	bne.n	8002adc <PICC_Select+0x3b2>
				uint8_t valueOfCollReg = PCD_ReadRegister(dev, CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 8002a06:	211c      	movs	r1, #28
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff fac9 	bl	8001fa0 <PCD_ReadRegister>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				if (valueOfCollReg & 0x20) { // CollPosNotValid
 8002a14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <PICC_Select+0x2fa>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0f9      	b.n	8002c18 <PICC_Select+0x4ee>
				}
				uint8_t collisionPos = valueOfCollReg & 0x1F; // Values 0-31, 0 means bit 32.
 8002a24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (collisionPos == 0) {
 8002a30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <PICC_Select+0x314>
					collisionPos = 32;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 8002a3e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a42:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002a46:	429a      	cmp	r2, r3
 8002a48:	dc01      	bgt.n	8002a4e <PICC_Select+0x324>
					return STATUS_INTERNAL_ERROR;
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	e0e4      	b.n	8002c18 <PICC_Select+0x4ee>
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits	= collisionPos;
 8002a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a52:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				count			= currentLevelKnownBits % 8; // The bit to modify
 8002a56:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002a5a:	425a      	negs	r2, r3
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	f002 0207 	and.w	r2, r2, #7
 8002a64:	bf58      	it	pl
 8002a66:	4253      	negpl	r3, r2
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				checkBit		= (currentLevelKnownBits - 1) % 8;
 8002a6e:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002a72:	3b01      	subs	r3, #1
 8002a74:	425a      	negs	r2, r3
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	f002 0207 	and.w	r2, r2, #7
 8002a7e:	bf58      	it	pl
 8002a80:	4253      	negpl	r3, r2
 8002a82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First uint8_t is index 0.
 8002a86:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	da00      	bge.n	8002a90 <PICC_Select+0x366>
 8002a8e:	3307      	adds	r3, #7
 8002a90:	10db      	asrs	r3, r3, #3
 8002a92:	b25b      	sxtb	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002a9a:	2a00      	cmp	r2, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2201      	movne	r2, #1
 8002aa0:	2200      	moveq	r2, #0
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				buffer[index]	|= (1 << checkBit);
 8002aae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ab2:	3338      	adds	r3, #56	; 0x38
 8002ab4:	443b      	add	r3, r7
 8002ab6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002aba:	b25a      	sxtb	r2, r3
 8002abc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b25a      	sxtb	r2, r3
 8002acc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	3338      	adds	r3, #56	; 0x38
 8002ad4:	443b      	add	r3, r7
 8002ad6:	f803 2c20 	strb.w	r2, [r3, #-32]
 8002ada:	e014      	b.n	8002b06 <PICC_Select+0x3dc>
			}
			else if (result != STATUS_OK) {
 8002adc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <PICC_Select+0x3c0>
				return result;
 8002ae4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ae8:	e096      	b.n	8002c18 <PICC_Select+0x4ee>
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 8002aea:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002aee:	2b1f      	cmp	r3, #31
 8002af0:	dd03      	ble.n	8002afa <PICC_Select+0x3d0>
					selectDone = true; // No more anticollision 
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002af8:	e002      	b.n	8002b00 <PICC_Select+0x3d6>
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
 8002afa:	2320      	movs	r3, #32
 8002afc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					// Run loop again to do the SELECT.
				}
				HAL_Delay(10);
 8002b00:	200a      	movs	r0, #10
 8002b02:	f000 fc67 	bl	80033d4 <HAL_Delay>
		while (!selectDone) {
 8002b06:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f47f aee5 	bne.w	80028e0 <PICC_Select+0x1b6>
		} // End of while (!selectDone)
		
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 8002b16:	7ebb      	ldrb	r3, [r7, #26]
 8002b18:	2b88      	cmp	r3, #136	; 0x88
 8002b1a:	d101      	bne.n	8002b20 <PICC_Select+0x3f6>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e000      	b.n	8002b22 <PICC_Select+0x3f8>
 8002b20:	2302      	movs	r3, #2
 8002b22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 8002b26:	7ebb      	ldrb	r3, [r7, #26]
 8002b28:	2b88      	cmp	r3, #136	; 0x88
 8002b2a:	d101      	bne.n	8002b30 <PICC_Select+0x406>
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e000      	b.n	8002b32 <PICC_Select+0x408>
 8002b30:	2304      	movs	r3, #4
 8002b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (count = 0; count < bytesToCopy; count++) {
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002b3c:	e018      	b.n	8002b70 <PICC_Select+0x446>
			uid->uidByte[uidIndex + count] = buffer[index++];
 8002b3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8002b4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b52:	4413      	add	r3, r2
 8002b54:	f101 0238 	add.w	r2, r1, #56	; 0x38
 8002b58:	443a      	add	r2, r7
 8002b5a:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	4413      	add	r3, r2
 8002b62:	460a      	mov	r2, r1
 8002b64:	705a      	strb	r2, [r3, #1]
		for (count = 0; count < bytesToCopy; count++) {
 8002b66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002b70:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3e0      	bcc.n	8002b3e <PICC_Select+0x414>
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) { // SAK must be exactly 24 bits (1 uint8_t + CRC_A).
 8002b7c:	7dbb      	ldrb	r3, [r7, #22]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d102      	bne.n	8002b88 <PICC_Select+0x45e>
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <PICC_Select+0x462>
			return STATUS_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e045      	b.n	8002c18 <PICC_Select+0x4ee>
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(dev, responseBuffer, 1, &buffer[2]);
 8002b8c:	f107 0318 	add.w	r3, r7, #24
 8002b90:	3302      	adds	r3, #2
 8002b92:	2201      	movs	r2, #1
 8002b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7ff faf3 	bl	8002182 <PCD_CalculateCRC>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (result != STATUS_OK) {
 8002ba2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <PICC_Select+0x486>
			return result;
 8002baa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bae:	e033      	b.n	8002c18 <PICC_Select+0x4ee>
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 8002bb0:	7eba      	ldrb	r2, [r7, #26]
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d105      	bne.n	8002bc8 <PICC_Select+0x49e>
 8002bbc:	7efa      	ldrb	r2, [r7, #27]
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <PICC_Select+0x4a2>
			return STATUS_CRC_WRONG;
 8002bc8:	2307      	movs	r3, #7
 8002bca:	e025      	b.n	8002c18 <PICC_Select+0x4ee>
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <PICC_Select+0x4ba>
			cascadeLevel++;
 8002bd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002be2:	e006      	b.n	8002bf2 <PICC_Select+0x4c8>
		}
		else {
			uidComplete = true;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			uid->sak = responseBuffer[0];
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	72da      	strb	r2, [r3, #11]
	while (!uidComplete) {
 8002bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f47f adac 	bne.w	800275a <PICC_Select+0x30>
		}
	} // End of while (!uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 8002c02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c06:	461a      	mov	r2, r3
 8002c08:	0052      	lsls	r2, r2, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 8002c16:	2300      	movs	r3, #0
} // End PICC_Select()
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3738      	adds	r7, #56	; 0x38
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <PICC_HaltA>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
StatusCode PICC_HaltA(MFRC *dev) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	6078      	str	r0, [r7, #4]
	StatusCode result;
	uint8_t buffer[4];
	
	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
 8002c28:	2350      	movs	r3, #80	; 0x50
 8002c2a:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	727b      	strb	r3, [r7, #9]
	// Calculate CRC_A
	result = PCD_CalculateCRC(dev, buffer, 2, &buffer[2]);
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	3302      	adds	r3, #2
 8002c36:	f107 0108 	add.w	r1, r7, #8
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff faa0 	bl	8002182 <PCD_CalculateCRC>
 8002c42:	4603      	mov	r3, r0
 8002c44:	73fb      	strb	r3, [r7, #15]
	if (result != STATUS_OK) {
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <PICC_HaltA+0x30>
		return result;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	e01b      	b.n	8002c88 <PICC_HaltA+0x68>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = PCD_TransceiveData(dev, buffer, sizeof(buffer), NULL, NULL, NULL, 0, false);
 8002c50:	f107 0108 	add.w	r1, r7, #8
 8002c54:	2300      	movs	r3, #0
 8002c56:	9303      	str	r3, [sp, #12]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	2300      	movs	r3, #0
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	2204      	movs	r2, #4
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff fbf4 	bl	8002456 <PCD_TransceiveData>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	73fb      	strb	r3, [r7, #15]
	if (result == STATUS_TIMEOUT) {
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d101      	bne.n	8002c7c <PICC_HaltA+0x5c>
		return STATUS_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e005      	b.n	8002c88 <PICC_HaltA+0x68>
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <PICC_HaltA+0x66>
		return STATUS_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <PICC_HaltA+0x68>
	}
	return result;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
} // End PICC_HaltA()
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <PCD_Authenticate>:
 */
StatusCode PCD_Authenticate(MFRC *dev, uint8_t command,		///< PICC_CMD_MF_AUTH_KEY_A or PICC_CMD_MF_AUTH_KEY_B
											uint8_t blockAddr, 	///< The block number. See numbering in the comments in the .h file.
											MIFARE_Key *key,	///< Pointer to the Crypteo1 key to use (6 bytes)
											Uid *uid			///< Pointer to Uid struct. The first 4 bytes of the UID is used.
											) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08e      	sub	sp, #56	; 0x38
 8002c94:	af06      	add	r7, sp, #24
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	72fb      	strb	r3, [r7, #11]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	72bb      	strb	r3, [r7, #10]
	uint8_t waitIRq = 0x10;		// IdleIRq
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	777b      	strb	r3, [r7, #29]
	
	// Build command buffer
	uint8_t sendData[12];
	sendData[0] = command;
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
 8002ca8:	743b      	strb	r3, [r7, #16]
	sendData[1] = blockAddr;
 8002caa:	7abb      	ldrb	r3, [r7, #10]
 8002cac:	747b      	strb	r3, [r7, #17]
	for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {	// 6 key bytes
 8002cae:	2300      	movs	r3, #0
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e00b      	b.n	8002ccc <PCD_Authenticate+0x3c>
		sendData[2+i] = key->keyByte[i];
 8002cb4:	7ffa      	ldrb	r2, [r7, #31]
 8002cb6:	7ffb      	ldrb	r3, [r7, #31]
 8002cb8:	3302      	adds	r3, #2
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	5c8a      	ldrb	r2, [r1, r2]
 8002cbe:	3320      	adds	r3, #32
 8002cc0:	443b      	add	r3, r7
 8002cc2:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {	// 6 key bytes
 8002cc6:	7ffb      	ldrb	r3, [r7, #31]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	7ffb      	ldrb	r3, [r7, #31]
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d9f0      	bls.n	8002cb4 <PCD_Authenticate+0x24>
	}
	// Use the last uid bytes as specified in http://cache.nxp.com/documents/application_note/AN10927.pdf
	// section 3.2.5 "MIFARE Classic Authentication".
	// The only missed case is the MF1Sxxxx shortcut activation,
	// but it requires cascade tag (CT) uint8_t, that is not part of uid.
	for (uint8_t i = 0; i < 4; i++) {				// The last 4 bytes of the UID
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	77bb      	strb	r3, [r7, #30]
 8002cd6:	e010      	b.n	8002cfa <PCD_Authenticate+0x6a>
		sendData[8+i] = uid->uidByte[i+uid->size-4];
 8002cd8:	7fbb      	ldrb	r3, [r7, #30]
 8002cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cdc:	7812      	ldrb	r2, [r2, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	1f1a      	subs	r2, r3, #4
 8002ce2:	7fbb      	ldrb	r3, [r7, #30]
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce8:	440a      	add	r2, r1
 8002cea:	7852      	ldrb	r2, [r2, #1]
 8002cec:	3320      	adds	r3, #32
 8002cee:	443b      	add	r3, r7
 8002cf0:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < 4; i++) {				// The last 4 bytes of the UID
 8002cf4:	7fbb      	ldrb	r3, [r7, #30]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	77bb      	strb	r3, [r7, #30]
 8002cfa:	7fbb      	ldrb	r3, [r7, #30]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d9eb      	bls.n	8002cd8 <PCD_Authenticate+0x48>
	}
	
	// Start the authentication.
	return PCD_CommunicateWithPICC(dev, PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData), NULL, NULL, NULL, 0, false);
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	7f7a      	ldrb	r2, [r7, #29]
 8002d06:	2100      	movs	r1, #0
 8002d08:	9105      	str	r1, [sp, #20]
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	9104      	str	r1, [sp, #16]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	9103      	str	r1, [sp, #12]
 8002d12:	2100      	movs	r1, #0
 8002d14:	9102      	str	r1, [sp, #8]
 8002d16:	2100      	movs	r1, #0
 8002d18:	9101      	str	r1, [sp, #4]
 8002d1a:	210c      	movs	r1, #12
 8002d1c:	9100      	str	r1, [sp, #0]
 8002d1e:	210e      	movs	r1, #14
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff fbbb 	bl	800249c <PCD_CommunicateWithPICC>
 8002d26:	4603      	mov	r3, r0
} // End PCD_Authenticate()
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <PCD_StopCrypto1>:

/**
 * Used to exit the PCD from its authenticated state.
 * Remember to call this function after communicating with an authenticated PICC - otherwise no new communications can start.
 */
void PCD_StopCrypto1(MFRC *dev) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	// Clear MFCrypto1On bit
	PCD_ClearRegisterBitMask(dev, Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved MFCrypto1On ModemState[2:0]
 8002d38:	2208      	movs	r2, #8
 8002d3a:	2110      	movs	r1, #16
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff f9ff 	bl	8002140 <PCD_ClearRegisterBitMask>
} // End PCD_StopCrypto1()
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <MIFARE_Read>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode MIFARE_Read(	MFRC *dev, uint8_t blockAddr, 	///< MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The first page to return data from.
											uint8_t *buffer,		///< The buffer to store the data in
											uint8_t *bufferSize	///< Buffer size, at least 18 bytes. Also number of bytes returned if STATUS_OK.
										) {
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08a      	sub	sp, #40	; 0x28
 8002d4e:	af04      	add	r7, sp, #16
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	460b      	mov	r3, r1
 8002d58:	72fb      	strb	r3, [r7, #11]
	StatusCode result;
	
	// Sanity check
	if (buffer == NULL || *bufferSize < 18) {
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <MIFARE_Read+0x1e>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b11      	cmp	r3, #17
 8002d66:	d801      	bhi.n	8002d6c <MIFARE_Read+0x22>
		return STATUS_NO_ROOM;
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e023      	b.n	8002db4 <MIFARE_Read+0x6a>
	}
	
	// Build command buffer
	buffer[0] = PICC_CMD_MF_READ;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2230      	movs	r2, #48	; 0x30
 8002d70:	701a      	strb	r2, [r3, #0]
	buffer[1] = blockAddr;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3301      	adds	r3, #1
 8002d76:	7afa      	ldrb	r2, [r7, #11]
 8002d78:	701a      	strb	r2, [r3, #0]
	// Calculate CRC_A
	result = PCD_CalculateCRC(dev, buffer, 2, &buffer[2]);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	2202      	movs	r2, #2
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f7ff f9fd 	bl	8002182 <PCD_CalculateCRC>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	75fb      	strb	r3, [r7, #23]
	if (result != STATUS_OK) {
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MIFARE_Read+0x4c>
		return result;
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	e00e      	b.n	8002db4 <MIFARE_Read+0x6a>
	}
	
	// Transmit the buffer and receive the response, validate CRC_A.
	return PCD_TransceiveData(dev, buffer, 4, buffer, bufferSize, NULL, 0, true);
 8002d96:	2301      	movs	r3, #1
 8002d98:	9303      	str	r3, [sp, #12]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9302      	str	r3, [sp, #8]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2204      	movs	r2, #4
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff fb52 	bl	8002456 <PCD_TransceiveData>
 8002db2:	4603      	mov	r3, r0
} // End MIFARE_Read()
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <MIFARE_Write>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode MIFARE_Write(MFRC *dev, 	uint8_t blockAddr, ///< MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The page (2-15) to write to.
											uint8_t *buffer,	///< The 16 bytes to write to the PICC
											uint8_t bufferSize	///< Buffer size, must be at least 16 bytes. Exactly 16 bytes are written.
										) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	460b      	mov	r3, r1
 8002dca:	72fb      	strb	r3, [r7, #11]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	72bb      	strb	r3, [r7, #10]
	StatusCode result;
	
	// Sanity check
	if (buffer == NULL || bufferSize < 16) {
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <MIFARE_Write+0x20>
 8002dd6:	7abb      	ldrb	r3, [r7, #10]
 8002dd8:	2b0f      	cmp	r3, #15
 8002dda:	d801      	bhi.n	8002de0 <MIFARE_Write+0x24>
		return STATUS_INVALID;
 8002ddc:	2306      	movs	r3, #6
 8002dde:	e01f      	b.n	8002e20 <MIFARE_Write+0x64>
	}
	
	// Mifare Classic protocol requires two communications to perform a write.
	// Step 1: Tell the PICC we want to write to block blockAddr.
	uint8_t cmdBuffer[2];
	cmdBuffer[0] = PICC_CMD_MF_WRITE;
 8002de0:	23a0      	movs	r3, #160	; 0xa0
 8002de2:	753b      	strb	r3, [r7, #20]
	cmdBuffer[1] = blockAddr;
 8002de4:	7afb      	ldrb	r3, [r7, #11]
 8002de6:	757b      	strb	r3, [r7, #21]
	result = PCD_MIFARE_Transceive(dev, cmdBuffer, 2, false); // Adds CRC_A and checks that the response is MF_ACK.
 8002de8:	f107 0114 	add.w	r1, r7, #20
 8002dec:	2300      	movs	r3, #0
 8002dee:	2202      	movs	r2, #2
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f819 	bl	8002e28 <PCD_MIFARE_Transceive>
 8002df6:	4603      	mov	r3, r0
 8002df8:	75fb      	strb	r3, [r7, #23]
	if (result != STATUS_OK) {
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MIFARE_Write+0x48>
		return result;
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	e00d      	b.n	8002e20 <MIFARE_Write+0x64>
	}
	
	// Step 2: Transfer the data
	result = PCD_MIFARE_Transceive(dev, buffer, bufferSize, false); // Adds CRC_A and checks that the response is MF_ACK.
 8002e04:	7aba      	ldrb	r2, [r7, #10]
 8002e06:	2300      	movs	r3, #0
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f80c 	bl	8002e28 <PCD_MIFARE_Transceive>
 8002e10:	4603      	mov	r3, r0
 8002e12:	75fb      	strb	r3, [r7, #23]
	if (result != STATUS_OK) {
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MIFARE_Write+0x62>
		return result;
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	e000      	b.n	8002e20 <MIFARE_Write+0x64>
	}
	
	return STATUS_OK;
 8002e1e:	2300      	movs	r3, #0
} // End MIFARE_Write()
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <PCD_MIFARE_Transceive>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode PCD_MIFARE_Transceive(MFRC *dev, 	uint8_t *sendData,		///< Pointer to the data to transfer to the FIFO. Do NOT include the CRC_A.
													uint8_t sendLen,		///< Number of bytes in sendData.
													bool acceptTimeout	///< True => A timeout is also success
												) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b090      	sub	sp, #64	; 0x40
 8002e2c:	af06      	add	r7, sp, #24
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	460b      	mov	r3, r1
 8002e38:	71fb      	strb	r3, [r7, #7]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	71bb      	strb	r3, [r7, #6]
	StatusCode result;
	uint8_t cmdBuffer[18]; // We need room for 16 bytes data and 2 bytes CRC_A.
	
	// Sanity check
	if (sendData == NULL || sendLen > 16) {
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <PCD_MIFARE_Transceive+0x22>
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d901      	bls.n	8002e4e <PCD_MIFARE_Transceive+0x26>
		return STATUS_INVALID;
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e05d      	b.n	8002f0a <PCD_MIFARE_Transceive+0xe2>
	}
	
	// Copy sendData[] to cmdBuffer[] and add CRC_A
	memcpy(cmdBuffer, sendData, sendLen);
 8002e4e:	79fa      	ldrb	r2, [r7, #7]
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f017 ff95 	bl	801ad86 <memcpy>
	result = PCD_CalculateCRC(dev, cmdBuffer, sendLen, &cmdBuffer[sendLen]);
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f107 0214 	add.w	r2, r7, #20
 8002e62:	4413      	add	r3, r2
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	f107 0114 	add.w	r1, r7, #20
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff f989 	bl	8002182 <PCD_CalculateCRC>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (result != STATUS_OK) { 
 8002e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <PCD_MIFARE_Transceive+0x5c>
		return result;
 8002e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e82:	e042      	b.n	8002f0a <PCD_MIFARE_Transceive+0xe2>
	}
	sendLen += 2;
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	3302      	adds	r3, #2
 8002e88:	71fb      	strb	r3, [r7, #7]
	
	// Transceive the data, store the reply in cmdBuffer[]
	uint8_t waitIRq = 0x30;		// RxIRq and IdleIRq
 8002e8a:	2330      	movs	r3, #48	; 0x30
 8002e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t cmdBufferSize = sizeof(cmdBuffer);
 8002e90:	2312      	movs	r3, #18
 8002e92:	74fb      	strb	r3, [r7, #19]
	uint8_t validBits = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	74bb      	strb	r3, [r7, #18]
	result = PCD_CommunicateWithPICC(dev, PCD_Transceive, waitIRq, cmdBuffer, sendLen, cmdBuffer, &cmdBufferSize, &validBits, 0, false);
 8002e98:	f107 0114 	add.w	r1, r7, #20
 8002e9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	9305      	str	r3, [sp, #20]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9304      	str	r3, [sp, #16]
 8002ea8:	f107 0312 	add.w	r3, r7, #18
 8002eac:	9303      	str	r3, [sp, #12]
 8002eae:	f107 0313 	add.w	r3, r7, #19
 8002eb2:	9302      	str	r3, [sp, #8]
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	210c      	movs	r1, #12
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff faea 	bl	800249c <PCD_CommunicateWithPICC>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (acceptTimeout && result == STATUS_TIMEOUT) {
 8002ece:	79bb      	ldrb	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <PCD_MIFARE_Transceive+0xb8>
 8002ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d101      	bne.n	8002ee0 <PCD_MIFARE_Transceive+0xb8>
		return STATUS_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e014      	b.n	8002f0a <PCD_MIFARE_Transceive+0xe2>
	}
	if (result != STATUS_OK) {
 8002ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <PCD_MIFARE_Transceive+0xc6>
		return result;
 8002ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eec:	e00d      	b.n	8002f0a <PCD_MIFARE_Transceive+0xe2>
	}
	// The PICC must reply with a 4 bit ACK
	if (cmdBufferSize != 1 || validBits != 4) {
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d102      	bne.n	8002efa <PCD_MIFARE_Transceive+0xd2>
 8002ef4:	7cbb      	ldrb	r3, [r7, #18]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d001      	beq.n	8002efe <PCD_MIFARE_Transceive+0xd6>
		return STATUS_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e005      	b.n	8002f0a <PCD_MIFARE_Transceive+0xe2>
	}
	if (cmdBuffer[0] != MF_ACK) {
 8002efe:	7d3b      	ldrb	r3, [r7, #20]
 8002f00:	2b0a      	cmp	r3, #10
 8002f02:	d001      	beq.n	8002f08 <PCD_MIFARE_Transceive+0xe0>
		return STATUS_MIFARE_NACK;
 8002f04:	23ff      	movs	r3, #255	; 0xff
 8002f06:	e000      	b.n	8002f0a <PCD_MIFARE_Transceive+0xe2>
	}
	return STATUS_OK;
 8002f08:	2300      	movs	r3, #0
} // End PCD_MIFARE_Transceive()
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <GetStatusCodeName>:
 * Returns a __FlashStringHelper pointer to a status code name.
 * 
 * @return const __FlashStringHelper *
 */
const char *GetStatusCodeName(MFRC *dev, StatusCode code	///< One of the StatusCode enums.
										) {
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70fb      	strb	r3, [r7, #3]
	switch (code) {
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	2b07      	cmp	r3, #7
 8002f24:	dc16      	bgt.n	8002f54 <GetStatusCodeName+0x40>
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db29      	blt.n	8002f7e <GetStatusCodeName+0x6a>
 8002f2a:	2b07      	cmp	r3, #7
 8002f2c:	d827      	bhi.n	8002f7e <GetStatusCodeName+0x6a>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <GetStatusCodeName+0x20>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f5b 	.word	0x08002f5b
 8002f38:	08002f5f 	.word	0x08002f5f
 8002f3c:	08002f63 	.word	0x08002f63
 8002f40:	08002f67 	.word	0x08002f67
 8002f44:	08002f6b 	.word	0x08002f6b
 8002f48:	08002f6f 	.word	0x08002f6f
 8002f4c:	08002f73 	.word	0x08002f73
 8002f50:	08002f77 	.word	0x08002f77
 8002f54:	2bff      	cmp	r3, #255	; 0xff
 8002f56:	d010      	beq.n	8002f7a <GetStatusCodeName+0x66>
 8002f58:	e011      	b.n	8002f7e <GetStatusCodeName+0x6a>
		case STATUS_OK:				return "Success.";
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <GetStatusCodeName+0x78>)
 8002f5c:	e010      	b.n	8002f80 <GetStatusCodeName+0x6c>
		case STATUS_ERROR:			return "Error in communication.";
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <GetStatusCodeName+0x7c>)
 8002f60:	e00e      	b.n	8002f80 <GetStatusCodeName+0x6c>
		case STATUS_COLLISION:		return "Collision detected.";
 8002f62:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <GetStatusCodeName+0x80>)
 8002f64:	e00c      	b.n	8002f80 <GetStatusCodeName+0x6c>
		case STATUS_TIMEOUT:		return "Timeout in communication.";
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <GetStatusCodeName+0x84>)
 8002f68:	e00a      	b.n	8002f80 <GetStatusCodeName+0x6c>
		case STATUS_NO_ROOM:		return "A buffer is not big enough.";
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <GetStatusCodeName+0x88>)
 8002f6c:	e008      	b.n	8002f80 <GetStatusCodeName+0x6c>
		case STATUS_INTERNAL_ERROR:	return "Internal error in the code. Should not happen.";
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <GetStatusCodeName+0x8c>)
 8002f70:	e006      	b.n	8002f80 <GetStatusCodeName+0x6c>
		case STATUS_INVALID:		return "Invalid argument.";
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <GetStatusCodeName+0x90>)
 8002f74:	e004      	b.n	8002f80 <GetStatusCodeName+0x6c>
		case STATUS_CRC_WRONG:		return "The CRC_A does not match.";
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <GetStatusCodeName+0x94>)
 8002f78:	e002      	b.n	8002f80 <GetStatusCodeName+0x6c>
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK.";
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <GetStatusCodeName+0x98>)
 8002f7c:	e000      	b.n	8002f80 <GetStatusCodeName+0x6c>
		default:					return "Unknown error";
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <GetStatusCodeName+0x9c>)
	}
} // End GetStatusCodeName()
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	0801bc98 	.word	0x0801bc98
 8002f90:	0801bca4 	.word	0x0801bca4
 8002f94:	0801bcbc 	.word	0x0801bcbc
 8002f98:	0801bcd0 	.word	0x0801bcd0
 8002f9c:	0801bcec 	.word	0x0801bcec
 8002fa0:	0801bd08 	.word	0x0801bd08
 8002fa4:	0801bd38 	.word	0x0801bd38
 8002fa8:	0801bd4c 	.word	0x0801bd4c
 8002fac:	0801bd68 	.word	0x0801bd68
 8002fb0:	0801bd8c 	.word	0x0801bd8c

08002fb4 <PICC_GetType>:
 * Translates the SAK (Select Acknowledge) to a PICC type.
 * 
 * @return PICC_Type
 */
PICC_Type PICC_GetType(MFRC *dev, uint8_t sak		///< The SAK uint8_t returned from PICC_Select().
										) {
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
	// http://www.nxp.com/documents/application_note/AN10833.pdf 
	// 3.2 Coding of Select Acknowledge (SAK)
	// ignore 8-bit (iso14443 starts with LSBit = bit 1)
	// fixes wrong type for manufacturer Infineon (http://nfc-tools.org/index.php?title=ISO14443A)
	sak &= 0x7F;
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fc6:	70fb      	strb	r3, [r7, #3]
	switch (sak) {
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	f200 8098 	bhi.w	8003100 <PICC_GetType+0x14c>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <PICC_GetType+0x24>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	080030ed 	.word	0x080030ed
 8002fdc:	080030f5 	.word	0x080030f5
 8002fe0:	08003101 	.word	0x08003101
 8002fe4:	08003101 	.word	0x08003101
 8002fe8:	080030dd 	.word	0x080030dd
 8002fec:	08003101 	.word	0x08003101
 8002ff0:	08003101 	.word	0x08003101
 8002ff4:	08003101 	.word	0x08003101
 8002ff8:	080030e5 	.word	0x080030e5
 8002ffc:	080030e1 	.word	0x080030e1
 8003000:	08003101 	.word	0x08003101
 8003004:	08003101 	.word	0x08003101
 8003008:	08003101 	.word	0x08003101
 800300c:	08003101 	.word	0x08003101
 8003010:	08003101 	.word	0x08003101
 8003014:	08003101 	.word	0x08003101
 8003018:	080030f1 	.word	0x080030f1
 800301c:	080030f1 	.word	0x080030f1
 8003020:	08003101 	.word	0x08003101
 8003024:	08003101 	.word	0x08003101
 8003028:	08003101 	.word	0x08003101
 800302c:	08003101 	.word	0x08003101
 8003030:	08003101 	.word	0x08003101
 8003034:	08003101 	.word	0x08003101
 8003038:	080030e9 	.word	0x080030e9
 800303c:	08003101 	.word	0x08003101
 8003040:	08003101 	.word	0x08003101
 8003044:	08003101 	.word	0x08003101
 8003048:	08003101 	.word	0x08003101
 800304c:	08003101 	.word	0x08003101
 8003050:	08003101 	.word	0x08003101
 8003054:	08003101 	.word	0x08003101
 8003058:	080030f9 	.word	0x080030f9
 800305c:	08003101 	.word	0x08003101
 8003060:	08003101 	.word	0x08003101
 8003064:	08003101 	.word	0x08003101
 8003068:	08003101 	.word	0x08003101
 800306c:	08003101 	.word	0x08003101
 8003070:	08003101 	.word	0x08003101
 8003074:	08003101 	.word	0x08003101
 8003078:	08003101 	.word	0x08003101
 800307c:	08003101 	.word	0x08003101
 8003080:	08003101 	.word	0x08003101
 8003084:	08003101 	.word	0x08003101
 8003088:	08003101 	.word	0x08003101
 800308c:	08003101 	.word	0x08003101
 8003090:	08003101 	.word	0x08003101
 8003094:	08003101 	.word	0x08003101
 8003098:	08003101 	.word	0x08003101
 800309c:	08003101 	.word	0x08003101
 80030a0:	08003101 	.word	0x08003101
 80030a4:	08003101 	.word	0x08003101
 80030a8:	08003101 	.word	0x08003101
 80030ac:	08003101 	.word	0x08003101
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003101 	.word	0x08003101
 80030b8:	08003101 	.word	0x08003101
 80030bc:	08003101 	.word	0x08003101
 80030c0:	08003101 	.word	0x08003101
 80030c4:	08003101 	.word	0x08003101
 80030c8:	08003101 	.word	0x08003101
 80030cc:	08003101 	.word	0x08003101
 80030d0:	08003101 	.word	0x08003101
 80030d4:	08003101 	.word	0x08003101
 80030d8:	080030fd 	.word	0x080030fd
		case 0x04:	return PICC_TYPE_NOT_COMPLETE;	// UID not complete
 80030dc:	23ff      	movs	r3, #255	; 0xff
 80030de:	e010      	b.n	8003102 <PICC_GetType+0x14e>
		case 0x09:	return PICC_TYPE_MIFARE_MINI;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e00e      	b.n	8003102 <PICC_GetType+0x14e>
		case 0x08:	return PICC_TYPE_MIFARE_1K;
 80030e4:	2304      	movs	r3, #4
 80030e6:	e00c      	b.n	8003102 <PICC_GetType+0x14e>
		case 0x18:	return PICC_TYPE_MIFARE_4K;
 80030e8:	2305      	movs	r3, #5
 80030ea:	e00a      	b.n	8003102 <PICC_GetType+0x14e>
		case 0x00:	return PICC_TYPE_MIFARE_UL;
 80030ec:	2306      	movs	r3, #6
 80030ee:	e008      	b.n	8003102 <PICC_GetType+0x14e>
		case 0x10:
		case 0x11:	return PICC_TYPE_MIFARE_PLUS;
 80030f0:	2307      	movs	r3, #7
 80030f2:	e006      	b.n	8003102 <PICC_GetType+0x14e>
		case 0x01:	return PICC_TYPE_TNP3XXX;
 80030f4:	2309      	movs	r3, #9
 80030f6:	e004      	b.n	8003102 <PICC_GetType+0x14e>
		case 0x20:	return PICC_TYPE_ISO_14443_4;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e002      	b.n	8003102 <PICC_GetType+0x14e>
		case 0x40:	return PICC_TYPE_ISO_18092;
 80030fc:	2302      	movs	r3, #2
 80030fe:	e000      	b.n	8003102 <PICC_GetType+0x14e>
		default:	return PICC_TYPE_UNKNOWN;
 8003100:	2300      	movs	r3, #0
	}
} // End PICC_GetType()
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <PICC_GetTypeName>:
 * Returns a __FlashStringHelper pointer to the PICC type name.
 * 
 * @return const __FlashStringHelper *
 */
const char *PICC_GetTypeName(MFRC *dev, PICC_Type piccType	///< One of the PICC_Type enums.
													) {
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
	switch (piccType) {
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	2b09      	cmp	r3, #9
 8003120:	dc1a      	bgt.n	8003158 <PICC_GetTypeName+0x48>
 8003122:	2b00      	cmp	r3, #0
 8003124:	dd2f      	ble.n	8003186 <PICC_GetTypeName+0x76>
 8003126:	3b01      	subs	r3, #1
 8003128:	2b08      	cmp	r3, #8
 800312a:	d82c      	bhi.n	8003186 <PICC_GetTypeName+0x76>
 800312c:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <PICC_GetTypeName+0x24>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	0800315f 	.word	0x0800315f
 8003138:	08003163 	.word	0x08003163
 800313c:	08003167 	.word	0x08003167
 8003140:	0800316b 	.word	0x0800316b
 8003144:	0800316f 	.word	0x0800316f
 8003148:	08003173 	.word	0x08003173
 800314c:	08003177 	.word	0x08003177
 8003150:	0800317b 	.word	0x0800317b
 8003154:	0800317f 	.word	0x0800317f
 8003158:	2bff      	cmp	r3, #255	; 0xff
 800315a:	d012      	beq.n	8003182 <PICC_GetTypeName+0x72>
 800315c:	e013      	b.n	8003186 <PICC_GetTypeName+0x76>
		case PICC_TYPE_ISO_14443_4:		return "PICC compliant with ISO/IEC 14443-4";
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <PICC_GetTypeName+0x84>)
 8003160:	e012      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_ISO_18092:		return "PICC compliant with ISO/IEC 18092 (NFC)";
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <PICC_GetTypeName+0x88>)
 8003164:	e010      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_MIFARE_MINI:		return "MIFARE Mini, 320 bytes";
 8003166:	4b0d      	ldr	r3, [pc, #52]	; (800319c <PICC_GetTypeName+0x8c>)
 8003168:	e00e      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_MIFARE_1K:		return "MIFARE 1KB";
 800316a:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <PICC_GetTypeName+0x90>)
 800316c:	e00c      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_MIFARE_4K:		return "MIFARE 4KB";
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <PICC_GetTypeName+0x94>)
 8003170:	e00a      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_MIFARE_UL:		return "MIFARE Ultralight or Ultralight C";
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <PICC_GetTypeName+0x98>)
 8003174:	e008      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_MIFARE_PLUS:		return "MIFARE Plus";
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <PICC_GetTypeName+0x9c>)
 8003178:	e006      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_MIFARE_DESFIRE:	return "MIFARE DESFire";
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <PICC_GetTypeName+0xa0>)
 800317c:	e004      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_TNP3XXX:			return "MIFARE TNP3XXX";
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <PICC_GetTypeName+0xa4>)
 8003180:	e002      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_NOT_COMPLETE:	return "SAK indicates UID is not complete.";
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <PICC_GetTypeName+0xa8>)
 8003184:	e000      	b.n	8003188 <PICC_GetTypeName+0x78>
		case PICC_TYPE_UNKNOWN:
		default:						return "Unknown type";
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <PICC_GetTypeName+0xac>)
	}
} // End PICC_GetTypeName()
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	0801bd9c 	.word	0x0801bd9c
 8003198:	0801bdc0 	.word	0x0801bdc0
 800319c:	0801bde8 	.word	0x0801bde8
 80031a0:	0801be00 	.word	0x0801be00
 80031a4:	0801be0c 	.word	0x0801be0c
 80031a8:	0801be18 	.word	0x0801be18
 80031ac:	0801be3c 	.word	0x0801be3c
 80031b0:	0801be48 	.word	0x0801be48
 80031b4:	0801be58 	.word	0x0801be58
 80031b8:	0801be68 	.word	0x0801be68
 80031bc:	0801be8c 	.word	0x0801be8c

080031c0 <PCD_DumpVersionToSerial>:

/**
 * Dumps debug info about the connected PCD to Serial.
 * Shows all known firmware versions
 */
void PCD_DumpVersionToSerial(MFRC *dev) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	// Get the MFRC522 firmware version
	uint8_t v = PCD_ReadRegister(dev, VersionReg);
 80031c8:	216e      	movs	r1, #110	; 0x6e
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe fee8 	bl	8001fa0 <PCD_ReadRegister>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]
	SEGGER_RTT_printf(0, "Firmware Version: 0x");
 80031d4:	492d      	ldr	r1, [pc, #180]	; (800328c <PCD_DumpVersionToSerial+0xcc>)
 80031d6:	2000      	movs	r0, #0
 80031d8:	f017 fb86 	bl	801a8e8 <SEGGER_RTT_printf>
	SEGGER_RTT_printf(0,  "%x", v);
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	461a      	mov	r2, r3
 80031e0:	492b      	ldr	r1, [pc, #172]	; (8003290 <PCD_DumpVersionToSerial+0xd0>)
 80031e2:	2000      	movs	r0, #0
 80031e4:	f017 fb80 	bl	801a8e8 <SEGGER_RTT_printf>
	// Lookup which version
	switch(v) {
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b12      	cmp	r3, #18
 80031ec:	d036      	beq.n	800325c <PCD_DumpVersionToSerial+0x9c>
 80031ee:	2b12      	cmp	r3, #18
 80031f0:	db39      	blt.n	8003266 <PCD_DumpVersionToSerial+0xa6>
 80031f2:	2b92      	cmp	r3, #146	; 0x92
 80031f4:	dc37      	bgt.n	8003266 <PCD_DumpVersionToSerial+0xa6>
 80031f6:	2b88      	cmp	r3, #136	; 0x88
 80031f8:	db35      	blt.n	8003266 <PCD_DumpVersionToSerial+0xa6>
 80031fa:	3b88      	subs	r3, #136	; 0x88
 80031fc:	2b0a      	cmp	r3, #10
 80031fe:	d832      	bhi.n	8003266 <PCD_DumpVersionToSerial+0xa6>
 8003200:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <PCD_DumpVersionToSerial+0x48>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	08003235 	.word	0x08003235
 800320c:	08003267 	.word	0x08003267
 8003210:	08003267 	.word	0x08003267
 8003214:	08003267 	.word	0x08003267
 8003218:	08003267 	.word	0x08003267
 800321c:	08003267 	.word	0x08003267
 8003220:	08003267 	.word	0x08003267
 8003224:	08003267 	.word	0x08003267
 8003228:	0800323f 	.word	0x0800323f
 800322c:	08003249 	.word	0x08003249
 8003230:	08003253 	.word	0x08003253
		case 0x88: SEGGER_RTT_printf(0, " = (clone)");  break;
 8003234:	4917      	ldr	r1, [pc, #92]	; (8003294 <PCD_DumpVersionToSerial+0xd4>)
 8003236:	2000      	movs	r0, #0
 8003238:	f017 fb56 	bl	801a8e8 <SEGGER_RTT_printf>
 800323c:	e017      	b.n	800326e <PCD_DumpVersionToSerial+0xae>
		case 0x90: SEGGER_RTT_printf(0, " = v0.0");     break;
 800323e:	4916      	ldr	r1, [pc, #88]	; (8003298 <PCD_DumpVersionToSerial+0xd8>)
 8003240:	2000      	movs	r0, #0
 8003242:	f017 fb51 	bl	801a8e8 <SEGGER_RTT_printf>
 8003246:	e012      	b.n	800326e <PCD_DumpVersionToSerial+0xae>
		case 0x91: SEGGER_RTT_printf(0, " = v1.0");     break;
 8003248:	4914      	ldr	r1, [pc, #80]	; (800329c <PCD_DumpVersionToSerial+0xdc>)
 800324a:	2000      	movs	r0, #0
 800324c:	f017 fb4c 	bl	801a8e8 <SEGGER_RTT_printf>
 8003250:	e00d      	b.n	800326e <PCD_DumpVersionToSerial+0xae>
		case 0x92: SEGGER_RTT_printf(0, " = v2.0");     break;
 8003252:	4913      	ldr	r1, [pc, #76]	; (80032a0 <PCD_DumpVersionToSerial+0xe0>)
 8003254:	2000      	movs	r0, #0
 8003256:	f017 fb47 	bl	801a8e8 <SEGGER_RTT_printf>
 800325a:	e008      	b.n	800326e <PCD_DumpVersionToSerial+0xae>
		case 0x12: SEGGER_RTT_printf(0, " = counterfeit chip");     break;
 800325c:	4911      	ldr	r1, [pc, #68]	; (80032a4 <PCD_DumpVersionToSerial+0xe4>)
 800325e:	2000      	movs	r0, #0
 8003260:	f017 fb42 	bl	801a8e8 <SEGGER_RTT_printf>
 8003264:	e003      	b.n	800326e <PCD_DumpVersionToSerial+0xae>
		default:   SEGGER_RTT_printf(0, " = (unknown)");
 8003266:	4910      	ldr	r1, [pc, #64]	; (80032a8 <PCD_DumpVersionToSerial+0xe8>)
 8003268:	2000      	movs	r0, #0
 800326a:	f017 fb3d 	bl	801a8e8 <SEGGER_RTT_printf>
	}
	// When 0x00 or 0xFF is returned, communication probably failed
	if ((v == 0x00) || (v == 0xFF))
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <PCD_DumpVersionToSerial+0xba>
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2bff      	cmp	r3, #255	; 0xff
 8003278:	d103      	bne.n	8003282 <PCD_DumpVersionToSerial+0xc2>
		SEGGER_RTT_printf(0, "WARNING: Communication failure, is the MFRC522 properly connected?");
 800327a:	490c      	ldr	r1, [pc, #48]	; (80032ac <PCD_DumpVersionToSerial+0xec>)
 800327c:	2000      	movs	r0, #0
 800327e:	f017 fb33 	bl	801a8e8 <SEGGER_RTT_printf>
} // End PCD_DumpVersionToSerial()
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	0801be9c 	.word	0x0801be9c
 8003290:	0801beb4 	.word	0x0801beb4
 8003294:	0801beb8 	.word	0x0801beb8
 8003298:	0801bec4 	.word	0x0801bec4
 800329c:	0801becc 	.word	0x0801becc
 80032a0:	0801bed4 	.word	0x0801bed4
 80032a4:	0801bedc 	.word	0x0801bedc
 80032a8:	0801bef0 	.word	0x0801bef0
 80032ac:	0801bf00 	.word	0x0801bf00

080032b0 <PICC_IsNewCardPresent>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool PICC_IsNewCardPresent(MFRC *dev) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	uint8_t bufferATQA[2];
	uint8_t bufferSize = sizeof(bufferATQA);
 80032b8:	2302      	movs	r3, #2
 80032ba:	72fb      	strb	r3, [r7, #11]

	// Reset baud rates
	PCD_WriteRegister(dev, TxModeReg, 0x00);
 80032bc:	2200      	movs	r2, #0
 80032be:	2124      	movs	r1, #36	; 0x24
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fe fe0e 	bl	8001ee2 <PCD_WriteRegister>
	PCD_WriteRegister(dev, RxModeReg, 0x00);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2126      	movs	r1, #38	; 0x26
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe fe09 	bl	8001ee2 <PCD_WriteRegister>
	// Reset ModWidthReg
	PCD_WriteRegister(dev, ModWidthReg, 0x26);
 80032d0:	2226      	movs	r2, #38	; 0x26
 80032d2:	2148      	movs	r1, #72	; 0x48
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7fe fe04 	bl	8001ee2 <PCD_WriteRegister>

	StatusCode result = PICC_RequestA(dev, bufferATQA, &bufferSize);
 80032da:	f107 020b 	add.w	r2, r7, #11
 80032de:	f107 030c 	add.w	r3, r7, #12
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff f9d2 	bl	800268e <PICC_RequestA>
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <PICC_IsNewCardPresent+0x4a>
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d101      	bne.n	80032fe <PICC_IsNewCardPresent+0x4e>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <PICC_IsNewCardPresent+0x50>
 80032fe:	2300      	movs	r3, #0
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	b2db      	uxtb	r3, r3
} // End PICC_IsNewCardPresent()
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <PICC_ReadCardSerial>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool PICC_ReadCardSerial(MFRC *dev) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	StatusCode result = PICC_Select(dev, &dev->uid, 0);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3314      	adds	r3, #20
 800331c:	2200      	movs	r2, #0
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fa02 	bl	800272a <PICC_Select>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]

	SEGGER_RTT_printf(0, "PICC_Select return value: %d", result);
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	461a      	mov	r2, r3
 800332e:	4907      	ldr	r1, [pc, #28]	; (800334c <PICC_ReadCardSerial+0x3c>)
 8003330:	2000      	movs	r0, #0
 8003332:	f017 fad9 	bl	801a8e8 <SEGGER_RTT_printf>
	return (result == STATUS_OK);
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
} // End 
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	0801c320 	.word	0x0801c320

08003350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_Init+0x40>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <HAL_Init+0x40>)
 800335a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800335e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_Init+0x40>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_Init+0x40>)
 8003366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_Init+0x40>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a07      	ldr	r2, [pc, #28]	; (8003390 <HAL_Init+0x40>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003378:	2003      	movs	r0, #3
 800337a:	f000 f8fc 	bl	8003576 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800337e:	200f      	movs	r0, #15
 8003380:	f7fe fbae 	bl	8001ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003384:	f7fe f8f4 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023c00 	.word	0x40023c00

08003394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_IncTick+0x20>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_IncTick+0x24>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_IncTick+0x24>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000034 	.word	0x20000034
 80033b8:	200010f4 	.word	0x200010f4

080033bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return uwTick;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_GetTick+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	200010f4 	.word	0x200010f4

080033d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7ff ffee 	bl	80033bc <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d005      	beq.n	80033fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_Delay+0x44>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033fa:	bf00      	nop
 80033fc:	f7ff ffde 	bl	80033bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d8f7      	bhi.n	80033fc <HAL_Delay+0x28>
  {
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000034 	.word	0x20000034

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	; (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db0a      	blt.n	80034e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	490c      	ldr	r1, [pc, #48]	; (8003508 <__NVIC_SetPriority+0x4c>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e4:	e00a      	b.n	80034fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4908      	ldr	r1, [pc, #32]	; (800350c <__NVIC_SetPriority+0x50>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	3b04      	subs	r3, #4
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	761a      	strb	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000e100 	.word	0xe000e100
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f1c3 0307 	rsb	r3, r3, #7
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf28      	it	cs
 800352e:	2304      	movcs	r3, #4
 8003530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	2b06      	cmp	r3, #6
 8003538:	d902      	bls.n	8003540 <NVIC_EncodePriority+0x30>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3b03      	subs	r3, #3
 800353e:	e000      	b.n	8003542 <NVIC_EncodePriority+0x32>
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43d9      	mvns	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	; 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ff4c 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800359e:	f7ff ff61 	bl	8003464 <__NVIC_GetPriorityGrouping>
 80035a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	6978      	ldr	r0, [r7, #20]
 80035aa:	f7ff ffb1 	bl	8003510 <NVIC_EncodePriority>
 80035ae:	4602      	mov	r2, r0
 80035b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff80 	bl	80034bc <__NVIC_SetPriority>
}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff54 	bl	8003480 <__NVIC_EnableIRQ>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035ec:	f7ff fee6 	bl	80033bc <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e099      	b.n	8003730 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800361c:	e00f      	b.n	800363e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800361e:	f7ff fecd 	bl	80033bc <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b05      	cmp	r3, #5
 800362a:	d908      	bls.n	800363e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2203      	movs	r2, #3
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e078      	b.n	8003730 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e8      	bne.n	800361e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4b38      	ldr	r3, [pc, #224]	; (8003738 <HAL_DMA_Init+0x158>)
 8003658:	4013      	ands	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800366a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003676:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003682:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2b04      	cmp	r3, #4
 8003696:	d107      	bne.n	80036a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	4313      	orrs	r3, r2
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0307 	bic.w	r3, r3, #7
 80036be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d117      	bne.n	8003702 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00e      	beq.n	8003702 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fa7b 	bl	8003be0 <DMA_CheckFifoParam>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2240      	movs	r2, #64	; 0x40
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036fe:	2301      	movs	r3, #1
 8003700:	e016      	b.n	8003730 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa32 	bl	8003b74 <DMA_CalcBaseAndBitshift>
 8003710:	4603      	mov	r3, r0
 8003712:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	223f      	movs	r2, #63	; 0x3f
 800371a:	409a      	lsls	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	f010803f 	.word	0xf010803f

0800373c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800374a:	f7ff fe37 	bl	80033bc <HAL_GetTick>
 800374e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d008      	beq.n	800376e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e052      	b.n	8003814 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0216 	bic.w	r2, r2, #22
 800377c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800378c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_DMA_Abort+0x62>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037be:	e013      	b.n	80037e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037c0:	f7ff fdfc 	bl	80033bc <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d90c      	bls.n	80037e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2203      	movs	r2, #3
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e015      	b.n	8003814 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e4      	bne.n	80037c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	223f      	movs	r2, #63	; 0x3f
 80037fc:	409a      	lsls	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d004      	beq.n	800383a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e00c      	b.n	8003854 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2205      	movs	r2, #5
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800386c:	4b8e      	ldr	r3, [pc, #568]	; (8003aa8 <HAL_DMA_IRQHandler+0x248>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a8e      	ldr	r2, [pc, #568]	; (8003aac <HAL_DMA_IRQHandler+0x24c>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	2208      	movs	r2, #8
 800388c:	409a      	lsls	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01a      	beq.n	80038cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0204 	bic.w	r2, r2, #4
 80038b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	2208      	movs	r2, #8
 80038ba:	409a      	lsls	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d012      	beq.n	8003902 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	2201      	movs	r2, #1
 80038f0:	409a      	lsls	r2, r3
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	f043 0202 	orr.w	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003906:	2204      	movs	r2, #4
 8003908:	409a      	lsls	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d012      	beq.n	8003938 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	2204      	movs	r2, #4
 8003926:	409a      	lsls	r2, r3
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	2210      	movs	r2, #16
 800393e:	409a      	lsls	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d043      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d03c      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	2210      	movs	r2, #16
 800395c:	409a      	lsls	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d024      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
 800398e:	e01f      	b.n	80039d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01b      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
 80039a0:	e016      	b.n	80039d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0208 	bic.w	r2, r2, #8
 80039be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	2220      	movs	r2, #32
 80039d6:	409a      	lsls	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 808f 	beq.w	8003b00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8087 	beq.w	8003b00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	2220      	movs	r2, #32
 80039f8:	409a      	lsls	r2, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	d136      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0216 	bic.w	r2, r2, #22
 8003a18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_DMA_IRQHandler+0x1da>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0208 	bic.w	r2, r2, #8
 8003a48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	223f      	movs	r2, #63	; 0x3f
 8003a50:	409a      	lsls	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d07e      	beq.n	8003b6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
        }
        return;
 8003a76:	e079      	b.n	8003b6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01d      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d031      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
 8003aa4:	e02c      	b.n	8003b00 <HAL_DMA_IRQHandler+0x2a0>
 8003aa6:	bf00      	nop
 8003aa8:	2000002c 	.word	0x2000002c
 8003aac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	e01e      	b.n	8003b00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10f      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0210 	bic.w	r2, r2, #16
 8003ade:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d032      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d022      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2205      	movs	r2, #5
 8003b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d307      	bcc.n	8003b48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f2      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x2cc>
 8003b46:	e000      	b.n	8003b4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
 8003b6a:	e000      	b.n	8003b6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b6c:	bf00      	nop
    }
  }
}
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	3b10      	subs	r3, #16
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b8e:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <DMA_CalcBaseAndBitshift+0x68>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d909      	bls.n	8003bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	1d1a      	adds	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8003bb4:	e007      	b.n	8003bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	aaaaaaab 	.word	0xaaaaaaab
 8003bdc:	0801f30c 	.word	0x0801f30c

08003be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d11f      	bne.n	8003c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d856      	bhi.n	8003cae <DMA_CheckFifoParam+0xce>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <DMA_CheckFifoParam+0x28>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c2b 	.word	0x08003c2b
 8003c10:	08003c19 	.word	0x08003c19
 8003c14:	08003caf 	.word	0x08003caf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d046      	beq.n	8003cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c28:	e043      	b.n	8003cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c32:	d140      	bne.n	8003cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c38:	e03d      	b.n	8003cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c42:	d121      	bne.n	8003c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d837      	bhi.n	8003cba <DMA_CheckFifoParam+0xda>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <DMA_CheckFifoParam+0x70>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c61 	.word	0x08003c61
 8003c54:	08003c67 	.word	0x08003c67
 8003c58:	08003c61 	.word	0x08003c61
 8003c5c:	08003c79 	.word	0x08003c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
      break;
 8003c64:	e030      	b.n	8003cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d025      	beq.n	8003cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c76:	e022      	b.n	8003cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c80:	d11f      	bne.n	8003cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c86:	e01c      	b.n	8003cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d903      	bls.n	8003c96 <DMA_CheckFifoParam+0xb6>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d003      	beq.n	8003c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c94:	e018      	b.n	8003cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
      break;
 8003c9a:	e015      	b.n	8003cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cac:	e00b      	b.n	8003cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e00a      	b.n	8003cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e008      	b.n	8003cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e006      	b.n	8003cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e004      	b.n	8003cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop

08003cd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06c      	b.n	8003dc4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2223      	movs	r2, #35	; 0x23
 8003cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f869 	bl	8003dd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_ETH_Init+0xf4>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <HAL_ETH_Init+0xf4>)
 8003d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d10:	6453      	str	r3, [r2, #68]	; 0x44
 8003d12:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <HAL_ETH_Init+0xf4>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <HAL_ETH_Init+0xf8>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <HAL_ETH_Init+0xf8>)
 8003d24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d28:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d2a:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <HAL_ETH_Init+0xf8>)
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	4927      	ldr	r1, [pc, #156]	; (8003dd0 <HAL_ETH_Init+0xf8>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_ETH_Init+0xf8>)
 8003d3a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d54:	f7ff fb32 	bl	80033bc <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d5a:	e011      	b.n	8003d80 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003d5c:	f7ff fb2e 	bl	80033bc <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d6a:	d909      	bls.n	8003d80 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2204      	movs	r2, #4
 8003d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	22e0      	movs	r2, #224	; 0xe0
 8003d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e021      	b.n	8003dc4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e4      	bne.n	8003d5c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fc36 	bl	8004604 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fcdd 	bl	8004758 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fd33 	bl	800480a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	461a      	mov	r2, r3
 8003daa:	2100      	movs	r1, #0
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fc9b 	bl	80046e8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40013800 	.word	0x40013800

08003dd4 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e045      	b.n	8003e98 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e12:	2b23      	cmp	r3, #35	; 0x23
 8003e14:	d13f      	bne.n	8003e96 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fd5e 	bl	80048e4 <ETH_Prepare_Tx_Descriptors>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f043 0202 	orr.w	r2, r3, #2
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e02a      	b.n	8003e98 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e42:	f3bf 8f4f 	dsb	sy
}
 8003e46:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d904      	bls.n	8003e64 <HAL_ETH_Transmit_IT+0x7c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	1f1a      	subs	r2, r3, #4
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00d      	beq.n	8003e92 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2304      	movs	r3, #4
 8003e82:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2300      	movs	r3, #0
 8003e90:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0a8      	b.n	800401e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed2:	2b23      	cmp	r3, #35	; 0x23
 8003ed4:	d001      	beq.n	8003eda <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e0a1      	b.n	800401e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	3212      	adds	r2, #18
 8003ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eea:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef0:	f1c3 0304 	rsb	r3, r3, #4
 8003ef4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003ef6:	e06a      	b.n	8003fce <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <HAL_ETH_ReadData+0x88>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d040      	beq.n	8003faa <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00c      	beq.n	8003f6c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f5c:	3b04      	subs	r3, #4
 8003f5e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003f84:	461a      	mov	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f005 fa9d 	bl	80094c8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3301      	adds	r3, #1
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d902      	bls.n	8003fbc <HAL_ETH_ReadData+0x11c>
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3b04      	subs	r3, #4
 8003fba:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	3212      	adds	r2, #18
 8003fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	db06      	blt.n	8003fe4 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d202      	bcs.n	8003fe4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d089      	beq.n	8003ef8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	441a      	add	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f815 	bl	8004028 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d108      	bne.n	800401c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
}
 800401e:	4618      	mov	r0, r3
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004034:	2301      	movs	r3, #1
 8004036:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800403c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	3212      	adds	r2, #18
 8004044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004048:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004050:	e040      	b.n	80040d4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d112      	bne.n	8004080 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	4618      	mov	r0, r3
 8004060:	f005 fa02 	bl	8009468 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	74fb      	strb	r3, [r7, #19]
 800406e:	e007      	b.n	8004080 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	461a      	mov	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	461a      	mov	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d026      	beq.n	80040d4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4a1e      	ldr	r2, [pc, #120]	; (800410c <ETH_UpdateDescriptor+0xe4>)
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	e003      	b.n	800409e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800409c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800409e:	f3bf 8f5f 	dmb	sy
}
 80040a2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	3301      	adds	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d902      	bls.n	80040c2 <ETH_UpdateDescriptor+0x9a>
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3b04      	subs	r3, #4
 80040c0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	3212      	adds	r2, #18
 80040c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040cc:	617b      	str	r3, [r7, #20]
      desccount--;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <ETH_UpdateDescriptor+0xb8>
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1b8      	bne.n	8004052 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d00c      	beq.n	8004104 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f2:	461a      	mov	r2, r3
 80040f4:	2300      	movs	r3, #0
 80040f6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004104:	bf00      	nop
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	80004600 	.word	0x80004600

08004110 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3318      	adds	r3, #24
 800411c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800412e:	e03f      	b.n	80041b0 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004130:	2301      	movs	r3, #1
 8004132:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3b01      	subs	r3, #1
 8004138:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3304      	adds	r3, #4
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3301      	adds	r3, #1
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d028      	beq.n	80041b0 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68d9      	ldr	r1, [r3, #12]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	440b      	add	r3, r1
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	db1b      	blt.n	80041ac <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3304      	adds	r3, #4
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	f005 f9e1 	bl	8009548 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	3304      	adds	r3, #4
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3301      	adds	r3, #1
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80041aa:	e001      	b.n	80041b0 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_ETH_ReleaseTxPacket+0xac>
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1b9      	bne.n	8004130 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d112      	bne.n	8004208 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d109      	bne.n	8004208 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b50      	ldr	r3, [pc, #320]	; (8004340 <HAL_ETH_IRQHandler+0x178>)
 8004200:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f004 ff0a 	bl	800901c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d113      	bne.n	8004242 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10a      	bne.n	8004242 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004234:	461a      	mov	r2, r3
 8004236:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800423a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f004 fefd 	bl	800903c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004254:	d14c      	bne.n	80042f0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d142      	bne.n	80042f0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f043 0208 	orr.w	r2, r3, #8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428c:	d11a      	bne.n	80042c4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <HAL_ETH_IRQHandler+0x17c>)
 800429a:	4013      	ands	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80042b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042b8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	22e0      	movs	r2, #224	; 0xe0
 80042be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80042c2:	e012      	b.n	80042ea <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	f248 6380 	movw	r3, #34432	; 0x8680
 80042d2:	4013      	ands	r3, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e2:	461a      	mov	r2, r3
 80042e4:	f248 6380 	movw	r3, #34432	; 0x8680
 80042e8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f004 feb6 	bl	800905c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d10e      	bne.n	800431c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f81c 	bl	800434c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_ETH_IRQHandler+0x180>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d006      	beq.n	8004336 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004328:	4b07      	ldr	r3, [pc, #28]	; (8004348 <HAL_ETH_IRQHandler+0x180>)
 800432a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800432e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f815 	bl	8004360 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	00010040 	.word	0x00010040
 8004344:	007e2000 	.word	0x007e2000
 8004348:	40013c00 	.word	0x40013c00

0800434c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8004382:	4618      	mov	r0, r3
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4b51      	ldr	r3, [pc, #324]	; (80044ec <ETH_SetMACConfig+0x15c>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	7c1b      	ldrb	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <ETH_SetMACConfig+0x28>
 80043b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80043b6:	e000      	b.n	80043ba <ETH_SetMACConfig+0x2a>
 80043b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	7c5b      	ldrb	r3, [r3, #17]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <ETH_SetMACConfig+0x38>
 80043c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043c6:	e000      	b.n	80043ca <ETH_SetMACConfig+0x3a>
 80043c8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80043ca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80043d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	7fdb      	ldrb	r3, [r3, #31]
 80043d6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80043d8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80043de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	7f92      	ldrb	r2, [r2, #30]
 80043e4:	2a00      	cmp	r2, #0
 80043e6:	d102      	bne.n	80043ee <ETH_SetMACConfig+0x5e>
 80043e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043ec:	e000      	b.n	80043f0 <ETH_SetMACConfig+0x60>
 80043ee:	2200      	movs	r2, #0
                        macconf->Speed |
 80043f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	7f1b      	ldrb	r3, [r3, #28]
 80043f6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80043f8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80043fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	791b      	ldrb	r3, [r3, #4]
 8004404:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004406:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800440e:	2a00      	cmp	r2, #0
 8004410:	d102      	bne.n	8004418 <ETH_SetMACConfig+0x88>
 8004412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004416:	e000      	b.n	800441a <ETH_SetMACConfig+0x8a>
 8004418:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800441a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	7bdb      	ldrb	r3, [r3, #15]
 8004420:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004422:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004428:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004430:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004432:	4313      	orrs	r3, r2
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800444a:	2001      	movs	r0, #1
 800444c:	f7fe ffc2 	bl	80033d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004466:	4013      	ands	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004476:	2a00      	cmp	r2, #0
 8004478:	d101      	bne.n	800447e <ETH_SetMACConfig+0xee>
 800447a:	2280      	movs	r2, #128	; 0x80
 800447c:	e000      	b.n	8004480 <ETH_SetMACConfig+0xf0>
 800447e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004480:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004486:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800448e:	2a01      	cmp	r2, #1
 8004490:	d101      	bne.n	8004496 <ETH_SetMACConfig+0x106>
 8004492:	2208      	movs	r2, #8
 8004494:	e000      	b.n	8004498 <ETH_SetMACConfig+0x108>
 8004496:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004498:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80044a0:	2a01      	cmp	r2, #1
 80044a2:	d101      	bne.n	80044a8 <ETH_SetMACConfig+0x118>
 80044a4:	2204      	movs	r2, #4
 80044a6:	e000      	b.n	80044aa <ETH_SetMACConfig+0x11a>
 80044a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80044aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80044b2:	2a01      	cmp	r2, #1
 80044b4:	d101      	bne.n	80044ba <ETH_SetMACConfig+0x12a>
 80044b6:	2202      	movs	r2, #2
 80044b8:	e000      	b.n	80044bc <ETH_SetMACConfig+0x12c>
 80044ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80044bc:	4313      	orrs	r3, r2
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044d4:	2001      	movs	r0, #1
 80044d6:	f7fe ff7d 	bl	80033d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	619a      	str	r2, [r3, #24]
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	ff20810f 	.word	0xff20810f

080044f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4b3d      	ldr	r3, [pc, #244]	; (8004600 <ETH_SetDMAConfig+0x110>)
 800450a:	4013      	ands	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	7b1b      	ldrb	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <ETH_SetDMAConfig+0x2c>
 8004516:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800451a:	e000      	b.n	800451e <ETH_SetDMAConfig+0x2e>
 800451c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	7b5b      	ldrb	r3, [r3, #13]
 8004522:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004524:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	7f52      	ldrb	r2, [r2, #29]
 800452a:	2a00      	cmp	r2, #0
 800452c:	d102      	bne.n	8004534 <ETH_SetDMAConfig+0x44>
 800452e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004532:	e000      	b.n	8004536 <ETH_SetDMAConfig+0x46>
 8004534:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004536:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	7b9b      	ldrb	r3, [r3, #14]
 800453c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800453e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004544:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	7f1b      	ldrb	r3, [r3, #28]
 800454a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800454c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	7f9b      	ldrb	r3, [r3, #30]
 8004552:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004554:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800455a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004562:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004564:	4313      	orrs	r3, r2
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004574:	461a      	mov	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004586:	2001      	movs	r0, #1
 8004588:	f7fe ff24 	bl	80033d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004594:	461a      	mov	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	791b      	ldrb	r3, [r3, #4]
 800459e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80045a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80045aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80045b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80045ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80045c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80045c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045e4:	2001      	movs	r0, #1
 80045e6:	f7fe fef5 	bl	80033d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6013      	str	r3, [r2, #0]
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	f8de3f23 	.word	0xf8de3f23

08004604 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b0a6      	sub	sp, #152	; 0x98
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004618:	2300      	movs	r3, #0
 800461a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004628:	2300      	movs	r3, #0
 800462a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004640:	2300      	movs	r3, #0
 8004642:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800464a:	2300      	movs	r3, #0
 800464c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004660:	2300      	movs	r3, #0
 8004662:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004666:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800466c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004670:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004672:	2300      	movs	r3, #0
 8004674:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004678:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fe86 	bl	8004390 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004684:	2301      	movs	r3, #1
 8004686:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004688:	2301      	movs	r3, #1
 800468a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800468c:	2301      	movs	r3, #1
 800468e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004692:	2301      	movs	r3, #1
 8004694:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800469a:	2300      	movs	r3, #0
 800469c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80046a6:	2300      	movs	r3, #0
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80046b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046b8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80046ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046be:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80046c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80046d4:	f107 0308 	add.w	r3, r7, #8
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ff08 	bl	80044f0 <ETH_SetDMAConfig>
}
 80046e0:	bf00      	nop
 80046e2:	3798      	adds	r7, #152	; 0x98
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3305      	adds	r3, #5
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	3204      	adds	r2, #4
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <ETH_MACAddressConfig+0x68>)
 800470a:	4413      	add	r3, r2
 800470c:	461a      	mov	r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3303      	adds	r3, #3
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	061a      	lsls	r2, r3, #24
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3302      	adds	r3, #2
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3301      	adds	r3, #1
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	4313      	orrs	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <ETH_MACAddressConfig+0x6c>)
 800473a:	4413      	add	r3, r2
 800473c:	461a      	mov	r2, r3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	6013      	str	r3, [r2, #0]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40028040 	.word	0x40028040
 8004754:	40028044 	.word	0x40028044

08004758 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e03e      	b.n	80047e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68d9      	ldr	r1, [r3, #12]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	440b      	add	r3, r1
 8004776:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2200      	movs	r2, #0
 800478e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	3206      	adds	r2, #6
 8004798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d80c      	bhi.n	80047c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68d9      	ldr	r1, [r3, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	440b      	add	r3, r1
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	e004      	b.n	80047d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d9bd      	bls.n	8004766 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fc:	611a      	str	r2, [r3, #16]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e046      	b.n	80048a6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6919      	ldr	r1, [r3, #16]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	440b      	add	r3, r1
 8004828:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2200      	movs	r2, #0
 800483a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2200      	movs	r2, #0
 8004840:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2200      	movs	r2, #0
 8004846:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004854:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800485c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	3212      	adds	r2, #18
 8004872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d80c      	bhi.n	8004896 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6919      	ldr	r1, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	e004      	b.n	80048a0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d9b5      	bls.n	8004818 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d6:	60da      	str	r2, [r3, #12]
}
 80048d8:	bf00      	nop
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b08d      	sub	sp, #52	; 0x34
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3318      	adds	r3, #24
 80048f4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800490a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004926:	d007      	beq.n	8004938 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	3304      	adds	r3, #4
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004938:	2302      	movs	r3, #2
 800493a:	e103      	b.n	8004b44 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	3301      	adds	r3, #1
 8004940:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004954:	f023 031f 	bic.w	r3, r3, #31
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	6852      	ldr	r2, [r2, #4]
 800495c:	431a      	orrs	r2, r3
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	431a      	orrs	r2, r3
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	431a      	orrs	r2, r3
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80049c2:	f3bf 8f5f 	dmb	sy
}
 80049c6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80049d4:	e084      	b.n	8004ae0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d006      	beq.n	80049f6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e005      	b.n	8004a02 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	3301      	adds	r3, #1
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d902      	bls.n	8004a14 <ETH_Prepare_Tx_Descriptors+0x130>
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	3b04      	subs	r3, #4
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a36:	d007      	beq.n	8004a48 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d029      	beq.n	8004a9c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a54:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5a:	e019      	b.n	8004a90 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8004a5c:	f3bf 8f5f 	dmb	sy
}
 8004a60:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	3301      	adds	r3, #1
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d902      	bls.n	8004a80 <ETH_Prepare_Tx_Descriptors+0x19c>
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	3b04      	subs	r3, #4
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a88:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d3e1      	bcc.n	8004a5c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e053      	b.n	8004b44 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004aba:	f023 031f 	bic.w	r3, r3, #31
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	6852      	ldr	r2, [r2, #4]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	3301      	adds	r3, #1
 8004acc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004ace:	f3bf 8f5f 	dmb	sy
}
 8004ad2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f47f af76 	bne.w	80049d6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e005      	b.n	8004b0a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b1a:	6979      	ldr	r1, [r7, #20]
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	3304      	adds	r3, #4
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b2c:	b672      	cpsid	i
}
 8004b2e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	4413      	add	r3, r2
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004b3e:	b662      	cpsie	i
}
 8004b40:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3734      	adds	r7, #52	; 0x34
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
 8004b6a:	e177      	b.n	8004e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	f040 8166 	bne.w	8004e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d005      	beq.n	8004ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d130      	bne.n	8004c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	2203      	movs	r2, #3
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bd8:	2201      	movs	r2, #1
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4013      	ands	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 0201 	and.w	r2, r3, #1
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d017      	beq.n	8004c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d123      	bne.n	8004c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	08da      	lsrs	r2, r3, #3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3208      	adds	r2, #8
 8004c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	220f      	movs	r2, #15
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	08da      	lsrs	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3208      	adds	r2, #8
 8004c8e:	69b9      	ldr	r1, [r7, #24]
 8004c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0203 	and.w	r2, r3, #3
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80c0 	beq.w	8004e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	4b66      	ldr	r3, [pc, #408]	; (8004e74 <HAL_GPIO_Init+0x324>)
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	4a65      	ldr	r2, [pc, #404]	; (8004e74 <HAL_GPIO_Init+0x324>)
 8004ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ce6:	4b63      	ldr	r3, [pc, #396]	; (8004e74 <HAL_GPIO_Init+0x324>)
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cf2:	4a61      	ldr	r2, [pc, #388]	; (8004e78 <HAL_GPIO_Init+0x328>)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	220f      	movs	r2, #15
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a58      	ldr	r2, [pc, #352]	; (8004e7c <HAL_GPIO_Init+0x32c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d037      	beq.n	8004d8e <HAL_GPIO_Init+0x23e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a57      	ldr	r2, [pc, #348]	; (8004e80 <HAL_GPIO_Init+0x330>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d031      	beq.n	8004d8a <HAL_GPIO_Init+0x23a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a56      	ldr	r2, [pc, #344]	; (8004e84 <HAL_GPIO_Init+0x334>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d02b      	beq.n	8004d86 <HAL_GPIO_Init+0x236>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a55      	ldr	r2, [pc, #340]	; (8004e88 <HAL_GPIO_Init+0x338>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d025      	beq.n	8004d82 <HAL_GPIO_Init+0x232>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a54      	ldr	r2, [pc, #336]	; (8004e8c <HAL_GPIO_Init+0x33c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01f      	beq.n	8004d7e <HAL_GPIO_Init+0x22e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a53      	ldr	r2, [pc, #332]	; (8004e90 <HAL_GPIO_Init+0x340>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d019      	beq.n	8004d7a <HAL_GPIO_Init+0x22a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a52      	ldr	r2, [pc, #328]	; (8004e94 <HAL_GPIO_Init+0x344>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <HAL_GPIO_Init+0x226>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a51      	ldr	r2, [pc, #324]	; (8004e98 <HAL_GPIO_Init+0x348>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00d      	beq.n	8004d72 <HAL_GPIO_Init+0x222>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a50      	ldr	r2, [pc, #320]	; (8004e9c <HAL_GPIO_Init+0x34c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <HAL_GPIO_Init+0x21e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a4f      	ldr	r2, [pc, #316]	; (8004ea0 <HAL_GPIO_Init+0x350>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d101      	bne.n	8004d6a <HAL_GPIO_Init+0x21a>
 8004d66:	2309      	movs	r3, #9
 8004d68:	e012      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d6a:	230a      	movs	r3, #10
 8004d6c:	e010      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d6e:	2308      	movs	r3, #8
 8004d70:	e00e      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d72:	2307      	movs	r3, #7
 8004d74:	e00c      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d76:	2306      	movs	r3, #6
 8004d78:	e00a      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d7a:	2305      	movs	r3, #5
 8004d7c:	e008      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d7e:	2304      	movs	r3, #4
 8004d80:	e006      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d82:	2303      	movs	r3, #3
 8004d84:	e004      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e002      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <HAL_GPIO_Init+0x240>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	f002 0203 	and.w	r2, r2, #3
 8004d96:	0092      	lsls	r2, r2, #2
 8004d98:	4093      	lsls	r3, r2
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004da0:	4935      	ldr	r1, [pc, #212]	; (8004e78 <HAL_GPIO_Init+0x328>)
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	089b      	lsrs	r3, r3, #2
 8004da6:	3302      	adds	r3, #2
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dae:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <HAL_GPIO_Init+0x354>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	43db      	mvns	r3, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dd2:	4a34      	ldr	r2, [pc, #208]	; (8004ea4 <HAL_GPIO_Init+0x354>)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <HAL_GPIO_Init+0x354>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dfc:	4a29      	ldr	r2, [pc, #164]	; (8004ea4 <HAL_GPIO_Init+0x354>)
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e02:	4b28      	ldr	r3, [pc, #160]	; (8004ea4 <HAL_GPIO_Init+0x354>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e26:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <HAL_GPIO_Init+0x354>)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <HAL_GPIO_Init+0x354>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e50:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <HAL_GPIO_Init+0x354>)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	f67f ae84 	bls.w	8004b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3724      	adds	r7, #36	; 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800
 8004e78:	40013800 	.word	0x40013800
 8004e7c:	40020000 	.word	0x40020000
 8004e80:	40020400 	.word	0x40020400
 8004e84:	40020800 	.word	0x40020800
 8004e88:	40020c00 	.word	0x40020c00
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40021400 	.word	0x40021400
 8004e94:	40021800 	.word	0x40021800
 8004e98:	40021c00 	.word	0x40021c00
 8004e9c:	40022000 	.word	0x40022000
 8004ea0:	40022400 	.word	0x40022400
 8004ea4:	40013c00 	.word	0x40013c00

08004ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	887b      	ldrh	r3, [r7, #2]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e001      	b.n	8004eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	807b      	strh	r3, [r7, #2]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ee8:	787b      	ldrb	r3, [r7, #1]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ef4:	e003      	b.n	8004efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ef6:	887b      	ldrh	r3, [r7, #2]
 8004ef8:	041a      	lsls	r2, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	619a      	str	r2, [r3, #24]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d006      	beq.n	8004f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f22:	4a05      	ldr	r2, [pc, #20]	; (8004f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fc fa00 	bl	8001330 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40013c00 	.word	0x40013c00

08004f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e12b      	b.n	80051a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fc fb30 	bl	80015c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2224      	movs	r2, #36	; 0x24
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f000 ff18 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4a81      	ldr	r2, [pc, #516]	; (80051b0 <HAL_I2C_Init+0x274>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d807      	bhi.n	8004fc0 <HAL_I2C_Init+0x84>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4a80      	ldr	r2, [pc, #512]	; (80051b4 <HAL_I2C_Init+0x278>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	bf94      	ite	ls
 8004fb8:	2301      	movls	r3, #1
 8004fba:	2300      	movhi	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e006      	b.n	8004fce <HAL_I2C_Init+0x92>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a7d      	ldr	r2, [pc, #500]	; (80051b8 <HAL_I2C_Init+0x27c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	bf94      	ite	ls
 8004fc8:	2301      	movls	r3, #1
 8004fca:	2300      	movhi	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e0e7      	b.n	80051a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a78      	ldr	r2, [pc, #480]	; (80051bc <HAL_I2C_Init+0x280>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	0c9b      	lsrs	r3, r3, #18
 8004fe0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4a6a      	ldr	r2, [pc, #424]	; (80051b0 <HAL_I2C_Init+0x274>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d802      	bhi.n	8005010 <HAL_I2C_Init+0xd4>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	3301      	adds	r3, #1
 800500e:	e009      	b.n	8005024 <HAL_I2C_Init+0xe8>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	4a69      	ldr	r2, [pc, #420]	; (80051c0 <HAL_I2C_Init+0x284>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	099b      	lsrs	r3, r3, #6
 8005022:	3301      	adds	r3, #1
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	430b      	orrs	r3, r1
 800502a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005036:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	495c      	ldr	r1, [pc, #368]	; (80051b0 <HAL_I2C_Init+0x274>)
 8005040:	428b      	cmp	r3, r1
 8005042:	d819      	bhi.n	8005078 <HAL_I2C_Init+0x13c>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	1e59      	subs	r1, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005052:	1c59      	adds	r1, r3, #1
 8005054:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005058:	400b      	ands	r3, r1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_I2C_Init+0x138>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1e59      	subs	r1, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	fbb1 f3f3 	udiv	r3, r1, r3
 800506c:	3301      	adds	r3, #1
 800506e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005072:	e051      	b.n	8005118 <HAL_I2C_Init+0x1dc>
 8005074:	2304      	movs	r3, #4
 8005076:	e04f      	b.n	8005118 <HAL_I2C_Init+0x1dc>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d111      	bne.n	80050a4 <HAL_I2C_Init+0x168>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	1e58      	subs	r0, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6859      	ldr	r1, [r3, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	440b      	add	r3, r1
 800508e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005092:	3301      	adds	r3, #1
 8005094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e012      	b.n	80050ca <HAL_I2C_Init+0x18e>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1e58      	subs	r0, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6859      	ldr	r1, [r3, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	0099      	lsls	r1, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ba:	3301      	adds	r3, #1
 80050bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	bf0c      	ite	eq
 80050c4:	2301      	moveq	r3, #1
 80050c6:	2300      	movne	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_I2C_Init+0x196>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e022      	b.n	8005118 <HAL_I2C_Init+0x1dc>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10e      	bne.n	80050f8 <HAL_I2C_Init+0x1bc>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1e58      	subs	r0, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6859      	ldr	r1, [r3, #4]
 80050e2:	460b      	mov	r3, r1
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	440b      	add	r3, r1
 80050e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ec:	3301      	adds	r3, #1
 80050ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f6:	e00f      	b.n	8005118 <HAL_I2C_Init+0x1dc>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1e58      	subs	r0, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	0099      	lsls	r1, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	fbb0 f3f3 	udiv	r3, r0, r3
 800510e:	3301      	adds	r3, #1
 8005110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	6809      	ldr	r1, [r1, #0]
 800511c:	4313      	orrs	r3, r2
 800511e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69da      	ldr	r2, [r3, #28]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6911      	ldr	r1, [r2, #16]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	68d2      	ldr	r2, [r2, #12]
 8005152:	4311      	orrs	r1, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	430b      	orrs	r3, r1
 800515a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	000186a0 	.word	0x000186a0
 80051b4:	001e847f 	.word	0x001e847f
 80051b8:	003d08ff 	.word	0x003d08ff
 80051bc:	431bde83 	.word	0x431bde83
 80051c0:	10624dd3 	.word	0x10624dd3

080051c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d129      	bne.n	800522e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2224      	movs	r2, #36	; 0x24
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0210 	bic.w	r2, r2, #16
 8005200:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e000      	b.n	8005230 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b20      	cmp	r3, #32
 8005254:	d12a      	bne.n	80052ac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2224      	movs	r2, #36	; 0x24
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005276:	89fb      	ldrh	r3, [r7, #14]
 8005278:	f023 030f 	bic.w	r3, r3, #15
 800527c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	b29a      	uxth	r2, r3
 8005282:	89fb      	ldrh	r3, [r7, #14]
 8005284:	4313      	orrs	r3, r2
 8005286:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	89fa      	ldrh	r2, [r7, #14]
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052bc:	b08f      	sub	sp, #60	; 0x3c
 80052be:	af0a      	add	r7, sp, #40	; 0x28
 80052c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e10f      	b.n	80054ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fba0 	bl	8001a2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2203      	movs	r2, #3
 80052f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d102      	bne.n	8005306 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f003 fb79 	bl	8008a02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	687e      	ldr	r6, [r7, #4]
 8005318:	466d      	mov	r5, sp
 800531a:	f106 0410 	add.w	r4, r6, #16
 800531e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005326:	e894 0003 	ldmia.w	r4, {r0, r1}
 800532a:	e885 0003 	stmia.w	r5, {r0, r1}
 800532e:	1d33      	adds	r3, r6, #4
 8005330:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005332:	6838      	ldr	r0, [r7, #0]
 8005334:	f003 fb04 	bl	8008940 <USB_CoreInit>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e0d0      	b.n	80054ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f003 fb67 	bl	8008a24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]
 800535a:	e04a      	b.n	80053f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800535c:	7bfa      	ldrb	r2, [r7, #15]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	333d      	adds	r3, #61	; 0x3d
 800536c:	2201      	movs	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005370:	7bfa      	ldrb	r2, [r7, #15]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	333c      	adds	r3, #60	; 0x3c
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	b298      	uxth	r0, r3
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	3344      	adds	r3, #68	; 0x44
 8005398:	4602      	mov	r2, r0
 800539a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800539c:	7bfa      	ldrb	r2, [r7, #15]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	3340      	adds	r3, #64	; 0x40
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053b0:	7bfa      	ldrb	r2, [r7, #15]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	3348      	adds	r3, #72	; 0x48
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053c4:	7bfa      	ldrb	r2, [r7, #15]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	334c      	adds	r3, #76	; 0x4c
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053d8:	7bfa      	ldrb	r2, [r7, #15]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3354      	adds	r3, #84	; 0x54
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	3301      	adds	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
 80053f2:	7bfa      	ldrb	r2, [r7, #15]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d3af      	bcc.n	800535c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053fc:	2300      	movs	r3, #0
 80053fe:	73fb      	strb	r3, [r7, #15]
 8005400:	e044      	b.n	800548c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005402:	7bfa      	ldrb	r2, [r7, #15]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005414:	2200      	movs	r2, #0
 8005416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005418:	7bfa      	ldrb	r2, [r7, #15]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800542a:	7bfa      	ldrb	r2, [r7, #15]
 800542c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800542e:	7bfa      	ldrb	r2, [r7, #15]
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005444:	7bfa      	ldrb	r2, [r7, #15]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800545a:	7bfa      	ldrb	r2, [r7, #15]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005470:	7bfa      	ldrb	r2, [r7, #15]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	3301      	adds	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	7bfa      	ldrb	r2, [r7, #15]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	429a      	cmp	r2, r3
 8005494:	d3b5      	bcc.n	8005402 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	687e      	ldr	r6, [r7, #4]
 800549e:	466d      	mov	r5, sp
 80054a0:	f106 0410 	add.w	r4, r6, #16
 80054a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80054b4:	1d33      	adds	r3, r6, #4
 80054b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054b8:	6838      	ldr	r0, [r7, #0]
 80054ba:	f003 faff 	bl	8008abc <USB_DevInit>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e00d      	b.n	80054ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f003 fcca 	bl	8008e7e <USB_DevDisconnect>

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e267      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d075      	beq.n	80055fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005512:	4b88      	ldr	r3, [pc, #544]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b04      	cmp	r3, #4
 800551c:	d00c      	beq.n	8005538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551e:	4b85      	ldr	r3, [pc, #532]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005526:	2b08      	cmp	r3, #8
 8005528:	d112      	bne.n	8005550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800552a:	4b82      	ldr	r3, [pc, #520]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005536:	d10b      	bne.n	8005550 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005538:	4b7e      	ldr	r3, [pc, #504]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d05b      	beq.n	80055fc <HAL_RCC_OscConfig+0x108>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d157      	bne.n	80055fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e242      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005558:	d106      	bne.n	8005568 <HAL_RCC_OscConfig+0x74>
 800555a:	4b76      	ldr	r3, [pc, #472]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a75      	ldr	r2, [pc, #468]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e01d      	b.n	80055a4 <HAL_RCC_OscConfig+0xb0>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0x98>
 8005572:	4b70      	ldr	r3, [pc, #448]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6f      	ldr	r2, [pc, #444]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4b6d      	ldr	r3, [pc, #436]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a6c      	ldr	r2, [pc, #432]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e00b      	b.n	80055a4 <HAL_RCC_OscConfig+0xb0>
 800558c:	4b69      	ldr	r3, [pc, #420]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a68      	ldr	r2, [pc, #416]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b66      	ldr	r3, [pc, #408]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a65      	ldr	r2, [pc, #404]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800559e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fd ff06 	bl	80033bc <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fd ff02 	bl	80033bc <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e207      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	4b5b      	ldr	r3, [pc, #364]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0xc0>
 80055d2:	e014      	b.n	80055fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d4:	f7fd fef2 	bl	80033bc <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055dc:	f7fd feee 	bl	80033bc <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	; 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e1f3      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ee:	4b51      	ldr	r3, [pc, #324]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0xe8>
 80055fa:	e000      	b.n	80055fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d063      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800560a:	4b4a      	ldr	r3, [pc, #296]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005616:	4b47      	ldr	r3, [pc, #284]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800561e:	2b08      	cmp	r3, #8
 8005620:	d11c      	bne.n	800565c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005622:	4b44      	ldr	r3, [pc, #272]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d116      	bne.n	800565c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562e:	4b41      	ldr	r3, [pc, #260]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_RCC_OscConfig+0x152>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d001      	beq.n	8005646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e1c7      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005646:	4b3b      	ldr	r3, [pc, #236]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	4937      	ldr	r1, [pc, #220]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565a:	e03a      	b.n	80056d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d020      	beq.n	80056a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005664:	4b34      	ldr	r3, [pc, #208]	; (8005738 <HAL_RCC_OscConfig+0x244>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fd fea7 	bl	80033bc <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005672:	f7fd fea3 	bl	80033bc <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e1a8      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005684:	4b2b      	ldr	r3, [pc, #172]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005690:	4b28      	ldr	r3, [pc, #160]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4925      	ldr	r1, [pc, #148]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
 80056a4:	e015      	b.n	80056d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <HAL_RCC_OscConfig+0x244>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fd fe86 	bl	80033bc <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b4:	f7fd fe82 	bl	80033bc <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e187      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c6:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d036      	beq.n	800574c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d016      	beq.n	8005714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e6:	4b15      	ldr	r3, [pc, #84]	; (800573c <HAL_RCC_OscConfig+0x248>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ec:	f7fd fe66 	bl	80033bc <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f4:	f7fd fe62 	bl	80033bc <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e167      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x200>
 8005712:	e01b      	b.n	800574c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <HAL_RCC_OscConfig+0x248>)
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571a:	f7fd fe4f 	bl	80033bc <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005720:	e00e      	b.n	8005740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005722:	f7fd fe4b 	bl	80033bc <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d907      	bls.n	8005740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e150      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
 8005734:	40023800 	.word	0x40023800
 8005738:	42470000 	.word	0x42470000
 800573c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005740:	4b88      	ldr	r3, [pc, #544]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ea      	bne.n	8005722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8097 	beq.w	8005888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800575e:	4b81      	ldr	r3, [pc, #516]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	4b7d      	ldr	r3, [pc, #500]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	4a7c      	ldr	r2, [pc, #496]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005778:	6413      	str	r3, [r2, #64]	; 0x40
 800577a:	4b7a      	ldr	r3, [pc, #488]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005786:	2301      	movs	r3, #1
 8005788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578a:	4b77      	ldr	r3, [pc, #476]	; (8005968 <HAL_RCC_OscConfig+0x474>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d118      	bne.n	80057c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005796:	4b74      	ldr	r3, [pc, #464]	; (8005968 <HAL_RCC_OscConfig+0x474>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a73      	ldr	r2, [pc, #460]	; (8005968 <HAL_RCC_OscConfig+0x474>)
 800579c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a2:	f7fd fe0b 	bl	80033bc <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057aa:	f7fd fe07 	bl	80033bc <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e10c      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057bc:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <HAL_RCC_OscConfig+0x474>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <HAL_RCC_OscConfig+0x2ea>
 80057d0:	4b64      	ldr	r3, [pc, #400]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a63      	ldr	r2, [pc, #396]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
 80057dc:	e01c      	b.n	8005818 <HAL_RCC_OscConfig+0x324>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0x30c>
 80057e6:	4b5f      	ldr	r3, [pc, #380]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	4a5e      	ldr	r2, [pc, #376]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057ec:	f043 0304 	orr.w	r3, r3, #4
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
 80057f2:	4b5c      	ldr	r3, [pc, #368]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4a5b      	ldr	r2, [pc, #364]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	6713      	str	r3, [r2, #112]	; 0x70
 80057fe:	e00b      	b.n	8005818 <HAL_RCC_OscConfig+0x324>
 8005800:	4b58      	ldr	r3, [pc, #352]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a57      	ldr	r2, [pc, #348]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
 800580c:	4b55      	ldr	r3, [pc, #340]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4a54      	ldr	r2, [pc, #336]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005812:	f023 0304 	bic.w	r3, r3, #4
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d015      	beq.n	800584c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fd fdcc 	bl	80033bc <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005826:	e00a      	b.n	800583e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005828:	f7fd fdc8 	bl	80033bc <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	; 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e0cb      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583e:	4b49      	ldr	r3, [pc, #292]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0ee      	beq.n	8005828 <HAL_RCC_OscConfig+0x334>
 800584a:	e014      	b.n	8005876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800584c:	f7fd fdb6 	bl	80033bc <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005852:	e00a      	b.n	800586a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005854:	f7fd fdb2 	bl	80033bc <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0b5      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586a:	4b3e      	ldr	r3, [pc, #248]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1ee      	bne.n	8005854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d105      	bne.n	8005888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800587c:	4b39      	ldr	r3, [pc, #228]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	4a38      	ldr	r2, [pc, #224]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80a1 	beq.w	80059d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005892:	4b34      	ldr	r3, [pc, #208]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b08      	cmp	r3, #8
 800589c:	d05c      	beq.n	8005958 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d141      	bne.n	800592a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a6:	4b31      	ldr	r3, [pc, #196]	; (800596c <HAL_RCC_OscConfig+0x478>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fd fd86 	bl	80033bc <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b4:	f7fd fd82 	bl	80033bc <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e087      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c6:	4b27      	ldr	r3, [pc, #156]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69da      	ldr	r2, [r3, #28]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	3b01      	subs	r3, #1
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	491b      	ldr	r1, [pc, #108]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <HAL_RCC_OscConfig+0x478>)
 80058fe:	2201      	movs	r2, #1
 8005900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005902:	f7fd fd5b 	bl	80033bc <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590a:	f7fd fd57 	bl	80033bc <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e05c      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591c:	4b11      	ldr	r3, [pc, #68]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f0      	beq.n	800590a <HAL_RCC_OscConfig+0x416>
 8005928:	e054      	b.n	80059d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592a:	4b10      	ldr	r3, [pc, #64]	; (800596c <HAL_RCC_OscConfig+0x478>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fd fd44 	bl	80033bc <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005938:	f7fd fd40 	bl	80033bc <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e045      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x444>
 8005956:	e03d      	b.n	80059d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d107      	bne.n	8005970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e038      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
 8005964:	40023800 	.word	0x40023800
 8005968:	40007000 	.word	0x40007000
 800596c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005970:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <HAL_RCC_OscConfig+0x4ec>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d028      	beq.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d121      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d11a      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d111      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	3b01      	subs	r3, #1
 80059ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d107      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d001      	beq.n	80059d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40023800 	.word	0x40023800

080059e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0cc      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059f8:	4b68      	ldr	r3, [pc, #416]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d90c      	bls.n	8005a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a06:	4b65      	ldr	r3, [pc, #404]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b63      	ldr	r3, [pc, #396]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0b8      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d020      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a38:	4b59      	ldr	r3, [pc, #356]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4a58      	ldr	r2, [pc, #352]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a50:	4b53      	ldr	r3, [pc, #332]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4a52      	ldr	r2, [pc, #328]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a5c:	4b50      	ldr	r3, [pc, #320]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	494d      	ldr	r1, [pc, #308]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d044      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a82:	4b47      	ldr	r3, [pc, #284]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d119      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e07f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d003      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d107      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa2:	4b3f      	ldr	r3, [pc, #252]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e06f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab2:	4b3b      	ldr	r3, [pc, #236]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e067      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ac2:	4b37      	ldr	r3, [pc, #220]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f023 0203 	bic.w	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	4934      	ldr	r1, [pc, #208]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ad4:	f7fd fc72 	bl	80033bc <HAL_GetTick>
 8005ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ada:	e00a      	b.n	8005af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005adc:	f7fd fc6e 	bl	80033bc <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e04f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af2:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 020c 	and.w	r2, r3, #12
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d1eb      	bne.n	8005adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b04:	4b25      	ldr	r3, [pc, #148]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d20c      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b22      	ldr	r3, [pc, #136]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e032      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b38:	4b19      	ldr	r3, [pc, #100]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4916      	ldr	r1, [pc, #88]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	490e      	ldr	r1, [pc, #56]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b6a:	f000 f821 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	490a      	ldr	r1, [pc, #40]	; (8005ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b7c:	5ccb      	ldrb	r3, [r1, r3]
 8005b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b82:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <HAL_RCC_ClockConfig+0x1c8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fb ffa8 	bl	8001ae0 <HAL_InitTick>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40023c00 	.word	0x40023c00
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	0801f2f4 	.word	0x0801f2f4
 8005ba8:	2000002c 	.word	0x2000002c
 8005bac:	20000030 	.word	0x20000030

08005bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb4:	b094      	sub	sp, #80	; 0x50
 8005bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	647b      	str	r3, [r7, #68]	; 0x44
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc8:	4b79      	ldr	r3, [pc, #484]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 030c 	and.w	r3, r3, #12
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d00d      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	f200 80e1 	bhi.w	8005d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_GetSysClockFreq+0x3a>
 8005be2:	e0db      	b.n	8005d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005be4:	4b73      	ldr	r3, [pc, #460]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005be6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005be8:	e0db      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bea:	4b73      	ldr	r3, [pc, #460]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bee:	e0d8      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bf0:	4b6f      	ldr	r3, [pc, #444]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bfa:	4b6d      	ldr	r3, [pc, #436]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d063      	beq.n	8005cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c06:	4b6a      	ldr	r3, [pc, #424]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	099b      	lsrs	r3, r3, #6
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	633b      	str	r3, [r7, #48]	; 0x30
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	f04f 0000 	mov.w	r0, #0
 8005c2a:	f04f 0100 	mov.w	r1, #0
 8005c2e:	0159      	lsls	r1, r3, #5
 8005c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c34:	0150      	lsls	r0, r2, #5
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	1a51      	subs	r1, r2, r1
 8005c3e:	6139      	str	r1, [r7, #16]
 8005c40:	4629      	mov	r1, r5
 8005c42:	eb63 0301 	sbc.w	r3, r3, r1
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c54:	4659      	mov	r1, fp
 8005c56:	018b      	lsls	r3, r1, #6
 8005c58:	4651      	mov	r1, sl
 8005c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c5e:	4651      	mov	r1, sl
 8005c60:	018a      	lsls	r2, r1, #6
 8005c62:	4651      	mov	r1, sl
 8005c64:	ebb2 0801 	subs.w	r8, r2, r1
 8005c68:	4659      	mov	r1, fp
 8005c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	f04f 0300 	mov.w	r3, #0
 8005c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c82:	4690      	mov	r8, r2
 8005c84:	4699      	mov	r9, r3
 8005c86:	4623      	mov	r3, r4
 8005c88:	eb18 0303 	adds.w	r3, r8, r3
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	462b      	mov	r3, r5
 8005c90:	eb49 0303 	adc.w	r3, r9, r3
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	024b      	lsls	r3, r1, #9
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cac:	4621      	mov	r1, r4
 8005cae:	024a      	lsls	r2, r1, #9
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cc0:	f7fa faee 	bl	80002a0 <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4613      	mov	r3, r2
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ccc:	e058      	b.n	8005d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cce:	4b38      	ldr	r3, [pc, #224]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	099b      	lsrs	r3, r3, #6
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	4611      	mov	r1, r2
 8005cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	f04f 0000 	mov.w	r0, #0
 8005cf0:	f04f 0100 	mov.w	r1, #0
 8005cf4:	0159      	lsls	r1, r3, #5
 8005cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cfa:	0150      	lsls	r0, r2, #5
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4641      	mov	r1, r8
 8005d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d06:	4649      	mov	r1, r9
 8005d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d20:	ebb2 040a 	subs.w	r4, r2, sl
 8005d24:	eb63 050b 	sbc.w	r5, r3, fp
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	00eb      	lsls	r3, r5, #3
 8005d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d36:	00e2      	lsls	r2, r4, #3
 8005d38:	4614      	mov	r4, r2
 8005d3a:	461d      	mov	r5, r3
 8005d3c:	4643      	mov	r3, r8
 8005d3e:	18e3      	adds	r3, r4, r3
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	464b      	mov	r3, r9
 8005d44:	eb45 0303 	adc.w	r3, r5, r3
 8005d48:	607b      	str	r3, [r7, #4]
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d56:	4629      	mov	r1, r5
 8005d58:	028b      	lsls	r3, r1, #10
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d60:	4621      	mov	r1, r4
 8005d62:	028a      	lsls	r2, r1, #10
 8005d64:	4610      	mov	r0, r2
 8005d66:	4619      	mov	r1, r3
 8005d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	61fa      	str	r2, [r7, #28]
 8005d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d74:	f7fa fa94 	bl	80002a0 <__aeabi_uldivmod>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d9a:	e002      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3750      	adds	r7, #80	; 0x50
 8005da8:	46bd      	mov	sp, r7
 8005daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dae:	bf00      	nop
 8005db0:	40023800 	.word	0x40023800
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	007a1200 	.word	0x007a1200

08005dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc0:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	2000002c 	.word	0x2000002c

08005dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dd8:	f7ff fff0 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	0a9b      	lsrs	r3, r3, #10
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	4903      	ldr	r1, [pc, #12]	; (8005df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dea:	5ccb      	ldrb	r3, [r1, r3]
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40023800 	.word	0x40023800
 8005df8:	0801f304 	.word	0x0801f304

08005dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e00:	f7ff ffdc 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8005e04:	4602      	mov	r2, r0
 8005e06:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	0b5b      	lsrs	r3, r3, #13
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	4903      	ldr	r1, [pc, #12]	; (8005e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e12:	5ccb      	ldrb	r3, [r1, r3]
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	0801f304 	.word	0x0801f304

08005e24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	220f      	movs	r2, #15
 8005e32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e34:	4b12      	ldr	r3, [pc, #72]	; (8005e80 <HAL_RCC_GetClockConfig+0x5c>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 0203 	and.w	r2, r3, #3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e40:	4b0f      	ldr	r3, [pc, #60]	; (8005e80 <HAL_RCC_GetClockConfig+0x5c>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e4c:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <HAL_RCC_GetClockConfig+0x5c>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e58:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <HAL_RCC_GetClockConfig+0x5c>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	08db      	lsrs	r3, r3, #3
 8005e5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e66:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <HAL_RCC_GetClockConfig+0x60>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 020f 	and.w	r2, r3, #15
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	601a      	str	r2, [r3, #0]
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40023800 	.word	0x40023800
 8005e84:	40023c00 	.word	0x40023c00

08005e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e07b      	b.n	8005f92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d108      	bne.n	8005eb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eaa:	d009      	beq.n	8005ec0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	61da      	str	r2, [r3, #28]
 8005eb2:	e005      	b.n	8005ec0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fb fbbc 	bl	8001658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f44:	ea42 0103 	orr.w	r1, r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	0c1b      	lsrs	r3, r3, #16
 8005f5e:	f003 0104 	and.w	r1, r3, #4
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	f003 0210 	and.w	r2, r3, #16
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b088      	sub	sp, #32
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_SPI_Transmit+0x22>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e126      	b.n	800620a <HAL_SPI_Transmit+0x270>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fc4:	f7fd f9fa 	bl	80033bc <HAL_GetTick>
 8005fc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d002      	beq.n	8005fe0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fde:	e10b      	b.n	80061f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_SPI_Transmit+0x52>
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ff0:	e102      	b.n	80061f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2203      	movs	r2, #3
 8005ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006038:	d10f      	bne.n	800605a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006048:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d007      	beq.n	8006078 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006080:	d14b      	bne.n	800611a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_SPI_Transmit+0xf6>
 800608a:	8afb      	ldrh	r3, [r7, #22]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d13e      	bne.n	800610e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	881a      	ldrh	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	1c9a      	adds	r2, r3, #2
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060b4:	e02b      	b.n	800610e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d112      	bne.n	80060ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	1c9a      	adds	r2, r3, #2
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80060e8:	e011      	b.n	800610e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ea:	f7fd f967 	bl	80033bc <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d803      	bhi.n	8006102 <HAL_SPI_Transmit+0x168>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d102      	bne.n	8006108 <HAL_SPI_Transmit+0x16e>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800610c:	e074      	b.n	80061f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1ce      	bne.n	80060b6 <HAL_SPI_Transmit+0x11c>
 8006118:	e04c      	b.n	80061b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_SPI_Transmit+0x18e>
 8006122:	8afb      	ldrh	r3, [r7, #22]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d140      	bne.n	80061aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800614e:	e02c      	b.n	80061aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b02      	cmp	r3, #2
 800615c:	d113      	bne.n	8006186 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	7812      	ldrb	r2, [r2, #0]
 800616a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	86da      	strh	r2, [r3, #54]	; 0x36
 8006184:	e011      	b.n	80061aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006186:	f7fd f919 	bl	80033bc <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d803      	bhi.n	800619e <HAL_SPI_Transmit+0x204>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d102      	bne.n	80061a4 <HAL_SPI_Transmit+0x20a>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061a8:	e026      	b.n	80061f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1cd      	bne.n	8006150 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fbcb 	bl	8006954 <SPI_EndRxTxTransaction>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e000      	b.n	80061f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80061f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006208:	7ffb      	ldrb	r3, [r7, #31]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b088      	sub	sp, #32
 8006216:	af02      	add	r7, sp, #8
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800622e:	d112      	bne.n	8006256 <HAL_SPI_Receive+0x44>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10e      	bne.n	8006256 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2204      	movs	r2, #4
 800623c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006240:	88fa      	ldrh	r2, [r7, #6]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	4613      	mov	r3, r2
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f8f1 	bl	8006434 <HAL_SPI_TransmitReceive>
 8006252:	4603      	mov	r3, r0
 8006254:	e0ea      	b.n	800642c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_SPI_Receive+0x52>
 8006260:	2302      	movs	r3, #2
 8006262:	e0e3      	b.n	800642c <HAL_SPI_Receive+0x21a>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800626c:	f7fd f8a6 	bl	80033bc <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d002      	beq.n	8006284 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800627e:	2302      	movs	r3, #2
 8006280:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006282:	e0ca      	b.n	800641a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_SPI_Receive+0x7e>
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006294:	e0c1      	b.n	800641a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2204      	movs	r2, #4
 800629a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	88fa      	ldrh	r2, [r7, #6]
 80062b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062dc:	d10f      	bne.n	80062fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d007      	beq.n	800631c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d162      	bne.n	80063ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006324:	e02e      	b.n	8006384 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b01      	cmp	r3, #1
 8006332:	d115      	bne.n	8006360 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f103 020c 	add.w	r2, r3, #12
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800635e:	e011      	b.n	8006384 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006360:	f7fd f82c 	bl	80033bc <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d803      	bhi.n	8006378 <HAL_SPI_Receive+0x166>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006376:	d102      	bne.n	800637e <HAL_SPI_Receive+0x16c>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006382:	e04a      	b.n	800641a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1cb      	bne.n	8006326 <HAL_SPI_Receive+0x114>
 800638e:	e031      	b.n	80063f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b01      	cmp	r3, #1
 800639c:	d113      	bne.n	80063c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	b292      	uxth	r2, r2
 80063aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	1c9a      	adds	r2, r3, #2
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063c4:	e011      	b.n	80063ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c6:	f7fc fff9 	bl	80033bc <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d803      	bhi.n	80063de <HAL_SPI_Receive+0x1cc>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d102      	bne.n	80063e4 <HAL_SPI_Receive+0x1d2>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063e8:	e017      	b.n	800641a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1cd      	bne.n	8006390 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fa45 	bl	8006888 <SPI_EndRxTransaction>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	75fb      	strb	r3, [r7, #23]
 8006416:	e000      	b.n	800641a <HAL_SPI_Receive+0x208>
  }

error :
 8006418:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08c      	sub	sp, #48	; 0x30
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006442:	2301      	movs	r3, #1
 8006444:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_SPI_TransmitReceive+0x26>
 8006456:	2302      	movs	r3, #2
 8006458:	e18a      	b.n	8006770 <HAL_SPI_TransmitReceive+0x33c>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006462:	f7fc ffab 	bl	80033bc <HAL_GetTick>
 8006466:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006478:	887b      	ldrh	r3, [r7, #2]
 800647a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800647c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006480:	2b01      	cmp	r3, #1
 8006482:	d00f      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x70>
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800648a:	d107      	bne.n	800649c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <HAL_SPI_TransmitReceive+0x68>
 8006494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006498:	2b04      	cmp	r3, #4
 800649a:	d003      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800649c:	2302      	movs	r3, #2
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064a2:	e15b      	b.n	800675c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x82>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x82>
 80064b0:	887b      	ldrh	r3, [r7, #2]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064bc:	e14e      	b.n	800675c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d003      	beq.n	80064d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2205      	movs	r2, #5
 80064ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	887a      	ldrh	r2, [r7, #2]
 80064e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	887a      	ldrh	r2, [r7, #2]
 80064e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	887a      	ldrh	r2, [r7, #2]
 80064f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	887a      	ldrh	r2, [r7, #2]
 80064fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d007      	beq.n	8006526 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006524:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800652e:	d178      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_SPI_TransmitReceive+0x10a>
 8006538:	8b7b      	ldrh	r3, [r7, #26]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d166      	bne.n	800660c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006542:	881a      	ldrh	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	1c9a      	adds	r2, r3, #2
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006562:	e053      	b.n	800660c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d11b      	bne.n	80065aa <HAL_SPI_TransmitReceive+0x176>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d016      	beq.n	80065aa <HAL_SPI_TransmitReceive+0x176>
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d113      	bne.n	80065aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	881a      	ldrh	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	1c9a      	adds	r2, r3, #2
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d119      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x1b8>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d014      	beq.n	80065ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	b292      	uxth	r2, r2
 80065ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	1c9a      	adds	r2, r3, #2
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065e8:	2301      	movs	r3, #1
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065ec:	f7fc fee6 	bl	80033bc <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d807      	bhi.n	800660c <HAL_SPI_TransmitReceive+0x1d8>
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d003      	beq.n	800660c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800660a:	e0a7      	b.n	800675c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1a6      	bne.n	8006564 <HAL_SPI_TransmitReceive+0x130>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1a1      	bne.n	8006564 <HAL_SPI_TransmitReceive+0x130>
 8006620:	e07c      	b.n	800671c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x1fc>
 800662a:	8b7b      	ldrh	r3, [r7, #26]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d16b      	bne.n	8006708 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006656:	e057      	b.n	8006708 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d11c      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x26c>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d017      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0x26c>
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d114      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d119      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x2ae>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d014      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066de:	2301      	movs	r3, #1
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066e2:	f7fc fe6b 	bl	80033bc <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d803      	bhi.n	80066fa <HAL_SPI_TransmitReceive+0x2c6>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f8:	d102      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x2cc>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006706:	e029      	b.n	800675c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1a2      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x224>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d19d      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800671c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f917 	bl	8006954 <SPI_EndRxTxTransaction>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d006      	beq.n	800673a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006738:	e010      	b.n	800675c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10b      	bne.n	800675a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	e000      	b.n	800675c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800675a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800676c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006770:	4618      	mov	r0, r3
 8006772:	3730      	adds	r7, #48	; 0x30
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4613      	mov	r3, r2
 8006786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006788:	f7fc fe18 	bl	80033bc <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	4413      	add	r3, r2
 8006796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006798:	f7fc fe10 	bl	80033bc <HAL_GetTick>
 800679c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800679e:	4b39      	ldr	r3, [pc, #228]	; (8006884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	015b      	lsls	r3, r3, #5
 80067a4:	0d1b      	lsrs	r3, r3, #20
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	fb02 f303 	mul.w	r3, r2, r3
 80067ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ae:	e054      	b.n	800685a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d050      	beq.n	800685a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067b8:	f7fc fe00 	bl	80033bc <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d902      	bls.n	80067ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d13d      	bne.n	800684a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e6:	d111      	bne.n	800680c <SPI_WaitFlagStateUntilTimeout+0x94>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f0:	d004      	beq.n	80067fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fa:	d107      	bne.n	800680c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006814:	d10f      	bne.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e017      	b.n	800687a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	3b01      	subs	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4013      	ands	r3, r2
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	bf0c      	ite	eq
 800686a:	2301      	moveq	r3, #1
 800686c:	2300      	movne	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	429a      	cmp	r2, r3
 8006876:	d19b      	bne.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	2000002c 	.word	0x2000002c

08006888 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af02      	add	r7, sp, #8
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800689c:	d111      	bne.n	80068c2 <SPI_EndRxTransaction+0x3a>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a6:	d004      	beq.n	80068b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b0:	d107      	bne.n	80068c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ca:	d12a      	bne.n	8006922 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d4:	d012      	beq.n	80068fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2200      	movs	r2, #0
 80068de:	2180      	movs	r1, #128	; 0x80
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f7ff ff49 	bl	8006778 <SPI_WaitFlagStateUntilTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d02d      	beq.n	8006948 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e026      	b.n	800694a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2200      	movs	r2, #0
 8006904:	2101      	movs	r1, #1
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff ff36 	bl	8006778 <SPI_WaitFlagStateUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01a      	beq.n	8006948 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006916:	f043 0220 	orr.w	r2, r3, #32
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e013      	b.n	800694a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	2101      	movs	r1, #1
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff ff23 	bl	8006778 <SPI_WaitFlagStateUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693c:	f043 0220 	orr.w	r2, r3, #32
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e000      	b.n	800694a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006960:	4b1b      	ldr	r3, [pc, #108]	; (80069d0 <SPI_EndRxTxTransaction+0x7c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <SPI_EndRxTxTransaction+0x80>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	0d5b      	lsrs	r3, r3, #21
 800696c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006970:	fb02 f303 	mul.w	r3, r2, r3
 8006974:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800697e:	d112      	bne.n	80069a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2200      	movs	r2, #0
 8006988:	2180      	movs	r1, #128	; 0x80
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fef4 	bl	8006778 <SPI_WaitFlagStateUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d016      	beq.n	80069c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f043 0220 	orr.w	r2, r3, #32
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e00f      	b.n	80069c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069bc:	2b80      	cmp	r3, #128	; 0x80
 80069be:	d0f2      	beq.n	80069a6 <SPI_EndRxTxTransaction+0x52>
 80069c0:	e000      	b.n	80069c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80069c2:	bf00      	nop
  }

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	2000002c 	.word	0x2000002c
 80069d4:	165e9f81 	.word	0x165e9f81

080069d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e041      	b.n	8006a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fa fe92 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f000 fbb2 	bl	8007180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d001      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e04e      	b.n	8006b2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a23      	ldr	r2, [pc, #140]	; (8006b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d022      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x80>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aba:	d01d      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x80>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d018      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x80>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1e      	ldr	r2, [pc, #120]	; (8006b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x80>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1c      	ldr	r2, [pc, #112]	; (8006b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00e      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x80>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1b      	ldr	r2, [pc, #108]	; (8006b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d009      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x80>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a19      	ldr	r2, [pc, #100]	; (8006b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x80>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a18      	ldr	r2, [pc, #96]	; (8006b54 <HAL_TIM_Base_Start_IT+0xdc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d111      	bne.n	8006b1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b06      	cmp	r3, #6
 8006b08:	d010      	beq.n	8006b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0201 	orr.w	r2, r2, #1
 8006b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1a:	e007      	b.n	8006b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40010000 	.word	0x40010000
 8006b40:	40000400 	.word	0x40000400
 8006b44:	40000800 	.word	0x40000800
 8006b48:	40000c00 	.word	0x40000c00
 8006b4c:	40010400 	.word	0x40010400
 8006b50:	40014000 	.word	0x40014000
 8006b54:	40001800 	.word	0x40001800

08006b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e041      	b.n	8006bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f839 	bl	8006bf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4619      	mov	r1, r3
 8006b96:	4610      	mov	r0, r2
 8006b98:	f000 faf2 	bl	8007180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d122      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d11b      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f06f 0202 	mvn.w	r2, #2
 8006c36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fa78 	bl	8007142 <HAL_TIM_IC_CaptureCallback>
 8006c52:	e005      	b.n	8006c60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fa6a 	bl	800712e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa7b 	bl	8007156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d122      	bne.n	8006cba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d11b      	bne.n	8006cba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f06f 0204 	mvn.w	r2, #4
 8006c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fa4e 	bl	8007142 <HAL_TIM_IC_CaptureCallback>
 8006ca6:	e005      	b.n	8006cb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fa40 	bl	800712e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa51 	bl	8007156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d122      	bne.n	8006d0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d11b      	bne.n	8006d0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f06f 0208 	mvn.w	r2, #8
 8006cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	f003 0303 	and.w	r3, r3, #3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fa24 	bl	8007142 <HAL_TIM_IC_CaptureCallback>
 8006cfa:	e005      	b.n	8006d08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa16 	bl	800712e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa27 	bl	8007156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d122      	bne.n	8006d62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f003 0310 	and.w	r3, r3, #16
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d11b      	bne.n	8006d62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f06f 0210 	mvn.w	r2, #16
 8006d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2208      	movs	r2, #8
 8006d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f9fa 	bl	8007142 <HAL_TIM_IC_CaptureCallback>
 8006d4e:	e005      	b.n	8006d5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f9ec 	bl	800712e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f9fd 	bl	8007156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d10e      	bne.n	8006d8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d107      	bne.n	8006d8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f06f 0201 	mvn.w	r2, #1
 8006d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7fa fbdd 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	d10e      	bne.n	8006dba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da6:	2b80      	cmp	r3, #128	; 0x80
 8006da8:	d107      	bne.n	8006dba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fda5 	bl	8007904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc4:	2b40      	cmp	r3, #64	; 0x40
 8006dc6:	d10e      	bne.n	8006de6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d107      	bne.n	8006de6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f9c2 	bl	800716a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d10e      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	d107      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f06f 0220 	mvn.w	r2, #32
 8006e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fd6f 	bl	80078f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e0ae      	b.n	8006f98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	f200 809f 	bhi.w	8006f88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e85 	.word	0x08006e85
 8006e54:	08006f89 	.word	0x08006f89
 8006e58:	08006f89 	.word	0x08006f89
 8006e5c:	08006f89 	.word	0x08006f89
 8006e60:	08006ec5 	.word	0x08006ec5
 8006e64:	08006f89 	.word	0x08006f89
 8006e68:	08006f89 	.word	0x08006f89
 8006e6c:	08006f89 	.word	0x08006f89
 8006e70:	08006f07 	.word	0x08006f07
 8006e74:	08006f89 	.word	0x08006f89
 8006e78:	08006f89 	.word	0x08006f89
 8006e7c:	08006f89 	.word	0x08006f89
 8006e80:	08006f47 	.word	0x08006f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fa18 	bl	80072c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0208 	orr.w	r2, r2, #8
 8006e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0204 	bic.w	r2, r2, #4
 8006eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6999      	ldr	r1, [r3, #24]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	619a      	str	r2, [r3, #24]
      break;
 8006ec2:	e064      	b.n	8006f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fa68 	bl	80073a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6999      	ldr	r1, [r3, #24]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	021a      	lsls	r2, r3, #8
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	619a      	str	r2, [r3, #24]
      break;
 8006f04:	e043      	b.n	8006f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fabd 	bl	800748c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0208 	orr.w	r2, r2, #8
 8006f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0204 	bic.w	r2, r2, #4
 8006f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	61da      	str	r2, [r3, #28]
      break;
 8006f44:	e023      	b.n	8006f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fb11 	bl	8007574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69d9      	ldr	r1, [r3, #28]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	021a      	lsls	r2, r3, #8
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	61da      	str	r2, [r3, #28]
      break;
 8006f86:	e002      	b.n	8006f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIM_ConfigClockSource+0x1c>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e0b4      	b.n	8007126 <HAL_TIM_ConfigClockSource+0x186>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff4:	d03e      	beq.n	8007074 <HAL_TIM_ConfigClockSource+0xd4>
 8006ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffa:	f200 8087 	bhi.w	800710c <HAL_TIM_ConfigClockSource+0x16c>
 8006ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007002:	f000 8086 	beq.w	8007112 <HAL_TIM_ConfigClockSource+0x172>
 8007006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800700a:	d87f      	bhi.n	800710c <HAL_TIM_ConfigClockSource+0x16c>
 800700c:	2b70      	cmp	r3, #112	; 0x70
 800700e:	d01a      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0xa6>
 8007010:	2b70      	cmp	r3, #112	; 0x70
 8007012:	d87b      	bhi.n	800710c <HAL_TIM_ConfigClockSource+0x16c>
 8007014:	2b60      	cmp	r3, #96	; 0x60
 8007016:	d050      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x11a>
 8007018:	2b60      	cmp	r3, #96	; 0x60
 800701a:	d877      	bhi.n	800710c <HAL_TIM_ConfigClockSource+0x16c>
 800701c:	2b50      	cmp	r3, #80	; 0x50
 800701e:	d03c      	beq.n	800709a <HAL_TIM_ConfigClockSource+0xfa>
 8007020:	2b50      	cmp	r3, #80	; 0x50
 8007022:	d873      	bhi.n	800710c <HAL_TIM_ConfigClockSource+0x16c>
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	d058      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x13a>
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d86f      	bhi.n	800710c <HAL_TIM_ConfigClockSource+0x16c>
 800702c:	2b30      	cmp	r3, #48	; 0x30
 800702e:	d064      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x15a>
 8007030:	2b30      	cmp	r3, #48	; 0x30
 8007032:	d86b      	bhi.n	800710c <HAL_TIM_ConfigClockSource+0x16c>
 8007034:	2b20      	cmp	r3, #32
 8007036:	d060      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x15a>
 8007038:	2b20      	cmp	r3, #32
 800703a:	d867      	bhi.n	800710c <HAL_TIM_ConfigClockSource+0x16c>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d05c      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x15a>
 8007040:	2b10      	cmp	r3, #16
 8007042:	d05a      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x15a>
 8007044:	e062      	b.n	800710c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6899      	ldr	r1, [r3, #8]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f000 fb5d 	bl	8007714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	609a      	str	r2, [r3, #8]
      break;
 8007072:	e04f      	b.n	8007114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	6899      	ldr	r1, [r3, #8]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f000 fb46 	bl	8007714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007096:	609a      	str	r2, [r3, #8]
      break;
 8007098:	e03c      	b.n	8007114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f000 faba 	bl	8007620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2150      	movs	r1, #80	; 0x50
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fb13 	bl	80076de <TIM_ITRx_SetConfig>
      break;
 80070b8:	e02c      	b.n	8007114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6859      	ldr	r1, [r3, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f000 fad9 	bl	800767e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2160      	movs	r1, #96	; 0x60
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fb03 	bl	80076de <TIM_ITRx_SetConfig>
      break;
 80070d8:	e01c      	b.n	8007114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	6859      	ldr	r1, [r3, #4]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f000 fa9a 	bl	8007620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2140      	movs	r1, #64	; 0x40
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 faf3 	bl	80076de <TIM_ITRx_SetConfig>
      break;
 80070f8:	e00c      	b.n	8007114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4619      	mov	r1, r3
 8007104:	4610      	mov	r0, r2
 8007106:	f000 faea 	bl	80076de <TIM_ITRx_SetConfig>
      break;
 800710a:	e003      	b.n	8007114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]
      break;
 8007110:	e000      	b.n	8007114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
	...

08007180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a40      	ldr	r2, [pc, #256]	; (8007294 <TIM_Base_SetConfig+0x114>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719e:	d00f      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a3d      	ldr	r2, [pc, #244]	; (8007298 <TIM_Base_SetConfig+0x118>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00b      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a3c      	ldr	r2, [pc, #240]	; (800729c <TIM_Base_SetConfig+0x11c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a3b      	ldr	r2, [pc, #236]	; (80072a0 <TIM_Base_SetConfig+0x120>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a3a      	ldr	r2, [pc, #232]	; (80072a4 <TIM_Base_SetConfig+0x124>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d108      	bne.n	80071d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a2f      	ldr	r2, [pc, #188]	; (8007294 <TIM_Base_SetConfig+0x114>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d02b      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e0:	d027      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a2c      	ldr	r2, [pc, #176]	; (8007298 <TIM_Base_SetConfig+0x118>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d023      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a2b      	ldr	r2, [pc, #172]	; (800729c <TIM_Base_SetConfig+0x11c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d01f      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a2a      	ldr	r2, [pc, #168]	; (80072a0 <TIM_Base_SetConfig+0x120>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01b      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a29      	ldr	r2, [pc, #164]	; (80072a4 <TIM_Base_SetConfig+0x124>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d017      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a28      	ldr	r2, [pc, #160]	; (80072a8 <TIM_Base_SetConfig+0x128>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a27      	ldr	r2, [pc, #156]	; (80072ac <TIM_Base_SetConfig+0x12c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00f      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a26      	ldr	r2, [pc, #152]	; (80072b0 <TIM_Base_SetConfig+0x130>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00b      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a25      	ldr	r2, [pc, #148]	; (80072b4 <TIM_Base_SetConfig+0x134>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d007      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a24      	ldr	r2, [pc, #144]	; (80072b8 <TIM_Base_SetConfig+0x138>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d003      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a23      	ldr	r2, [pc, #140]	; (80072bc <TIM_Base_SetConfig+0x13c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d108      	bne.n	8007244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a0a      	ldr	r2, [pc, #40]	; (8007294 <TIM_Base_SetConfig+0x114>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_Base_SetConfig+0xf8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a0c      	ldr	r2, [pc, #48]	; (80072a4 <TIM_Base_SetConfig+0x124>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d103      	bne.n	8007280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	615a      	str	r2, [r3, #20]
}
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	40010000 	.word	0x40010000
 8007298:	40000400 	.word	0x40000400
 800729c:	40000800 	.word	0x40000800
 80072a0:	40000c00 	.word	0x40000c00
 80072a4:	40010400 	.word	0x40010400
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40014400 	.word	0x40014400
 80072b0:	40014800 	.word	0x40014800
 80072b4:	40001800 	.word	0x40001800
 80072b8:	40001c00 	.word	0x40001c00
 80072bc:	40002000 	.word	0x40002000

080072c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 0201 	bic.w	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0303 	bic.w	r3, r3, #3
 80072f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 0302 	bic.w	r3, r3, #2
 8007308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	4313      	orrs	r3, r2
 8007312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a20      	ldr	r2, [pc, #128]	; (8007398 <TIM_OC1_SetConfig+0xd8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_OC1_SetConfig+0x64>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1f      	ldr	r2, [pc, #124]	; (800739c <TIM_OC1_SetConfig+0xdc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d10c      	bne.n	800733e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f023 0308 	bic.w	r3, r3, #8
 800732a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f023 0304 	bic.w	r3, r3, #4
 800733c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a15      	ldr	r2, [pc, #84]	; (8007398 <TIM_OC1_SetConfig+0xd8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d003      	beq.n	800734e <TIM_OC1_SetConfig+0x8e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a14      	ldr	r2, [pc, #80]	; (800739c <TIM_OC1_SetConfig+0xdc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d111      	bne.n	8007372 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800735c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	621a      	str	r2, [r3, #32]
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400

080073a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f023 0210 	bic.w	r2, r3, #16
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f023 0320 	bic.w	r3, r3, #32
 80073ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a22      	ldr	r2, [pc, #136]	; (8007484 <TIM_OC2_SetConfig+0xe4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_OC2_SetConfig+0x68>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a21      	ldr	r2, [pc, #132]	; (8007488 <TIM_OC2_SetConfig+0xe8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d10d      	bne.n	8007424 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800740e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4313      	orrs	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a17      	ldr	r2, [pc, #92]	; (8007484 <TIM_OC2_SetConfig+0xe4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d003      	beq.n	8007434 <TIM_OC2_SetConfig+0x94>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a16      	ldr	r2, [pc, #88]	; (8007488 <TIM_OC2_SetConfig+0xe8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d113      	bne.n	800745c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800743a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40010000 	.word	0x40010000
 8007488:	40010400 	.word	0x40010400

0800748c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a21      	ldr	r2, [pc, #132]	; (800756c <TIM_OC3_SetConfig+0xe0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_OC3_SetConfig+0x66>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a20      	ldr	r2, [pc, #128]	; (8007570 <TIM_OC3_SetConfig+0xe4>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d10d      	bne.n	800750e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	021b      	lsls	r3, r3, #8
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800750c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a16      	ldr	r2, [pc, #88]	; (800756c <TIM_OC3_SetConfig+0xe0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d003      	beq.n	800751e <TIM_OC3_SetConfig+0x92>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a15      	ldr	r2, [pc, #84]	; (8007570 <TIM_OC3_SetConfig+0xe4>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d113      	bne.n	8007546 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800752c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	621a      	str	r2, [r3, #32]
}
 8007560:	bf00      	nop
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	40010000 	.word	0x40010000
 8007570:	40010400 	.word	0x40010400

08007574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	021b      	lsls	r3, r3, #8
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	031b      	lsls	r3, r3, #12
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a12      	ldr	r2, [pc, #72]	; (8007618 <TIM_OC4_SetConfig+0xa4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d003      	beq.n	80075dc <TIM_OC4_SetConfig+0x68>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a11      	ldr	r2, [pc, #68]	; (800761c <TIM_OC4_SetConfig+0xa8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d109      	bne.n	80075f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	019b      	lsls	r3, r3, #6
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40010000 	.word	0x40010000
 800761c:	40010400 	.word	0x40010400

08007620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f023 0201 	bic.w	r2, r3, #1
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800764a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 030a 	bic.w	r3, r3, #10
 800765c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4313      	orrs	r3, r2
 8007664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	621a      	str	r2, [r3, #32]
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800767e:	b480      	push	{r7}
 8007680:	b087      	sub	sp, #28
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f023 0210 	bic.w	r2, r3, #16
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	031b      	lsls	r3, r3, #12
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	621a      	str	r2, [r3, #32]
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f043 0307 	orr.w	r3, r3, #7
 8007700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	609a      	str	r2, [r3, #8]
}
 8007708:	bf00      	nop
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800772e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	021a      	lsls	r2, r3, #8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	431a      	orrs	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4313      	orrs	r3, r2
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	609a      	str	r2, [r3, #8]
}
 8007748:	bf00      	nop
 800774a:	371c      	adds	r7, #28
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007768:	2302      	movs	r3, #2
 800776a:	e05a      	b.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a21      	ldr	r2, [pc, #132]	; (8007830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d022      	beq.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b8:	d01d      	beq.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d018      	beq.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a1b      	ldr	r2, [pc, #108]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d013      	beq.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1a      	ldr	r2, [pc, #104]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00e      	beq.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a18      	ldr	r2, [pc, #96]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d009      	beq.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a17      	ldr	r2, [pc, #92]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d004      	beq.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a15      	ldr	r2, [pc, #84]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d10c      	bne.n	8007810 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	4313      	orrs	r3, r2
 8007806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40010000 	.word	0x40010000
 8007834:	40000400 	.word	0x40000400
 8007838:	40000800 	.word	0x40000800
 800783c:	40000c00 	.word	0x40000c00
 8007840:	40010400 	.word	0x40010400
 8007844:	40014000 	.word	0x40014000
 8007848:	40001800 	.word	0x40001800

0800784c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007864:	2302      	movs	r3, #2
 8007866:	e03d      	b.n	80078e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e03f      	b.n	80079aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7f9 ff9e 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2224      	movs	r2, #36	; 0x24
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800795a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fd7b 	bl	8008458 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	695a      	ldr	r2, [r3, #20]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b08a      	sub	sp, #40	; 0x28
 80079b6:	af02      	add	r7, sp, #8
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	603b      	str	r3, [r7, #0]
 80079be:	4613      	mov	r3, r2
 80079c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d17c      	bne.n	8007acc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_UART_Transmit+0x2c>
 80079d8:	88fb      	ldrh	r3, [r7, #6]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e075      	b.n	8007ace <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_UART_Transmit+0x3e>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e06e      	b.n	8007ace <HAL_UART_Transmit+0x11c>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2221      	movs	r2, #33	; 0x21
 8007a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a06:	f7fb fcd9 	bl	80033bc <HAL_GetTick>
 8007a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	88fa      	ldrh	r2, [r7, #6]
 8007a16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a20:	d108      	bne.n	8007a34 <HAL_UART_Transmit+0x82>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d104      	bne.n	8007a34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	e003      	b.n	8007a3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a44:	e02a      	b.n	8007a9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2180      	movs	r1, #128	; 0x80
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 faf9 	bl	8008048 <UART_WaitOnFlagUntilTimeout>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e036      	b.n	8007ace <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10b      	bne.n	8007a7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	3302      	adds	r3, #2
 8007a7a:	61bb      	str	r3, [r7, #24]
 8007a7c:	e007      	b.n	8007a8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	781a      	ldrb	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1cf      	bne.n	8007a46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2200      	movs	r2, #0
 8007aae:	2140      	movs	r1, #64	; 0x40
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fac9 	bl	8008048 <UART_WaitOnFlagUntilTimeout>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e006      	b.n	8007ace <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e000      	b.n	8007ace <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007acc:	2302      	movs	r3, #2
  }
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b0ba      	sub	sp, #232	; 0xe8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10f      	bne.n	8007b3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <HAL_UART_IRQHandler+0x66>
 8007b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fbd3 	bl	80082e2 <UART_Receive_IT>
      return;
 8007b3c:	e256      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80de 	beq.w	8007d04 <HAL_UART_IRQHandler+0x22c>
 8007b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80d1 	beq.w	8007d04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_UART_IRQHandler+0xae>
 8007b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f043 0201 	orr.w	r2, r3, #1
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <HAL_UART_IRQHandler+0xd2>
 8007b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	f043 0202 	orr.w	r2, r3, #2
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <HAL_UART_IRQHandler+0xf6>
 8007bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d005      	beq.n	8007bce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f043 0204 	orr.w	r2, r3, #4
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d011      	beq.n	8007bfe <HAL_UART_IRQHandler+0x126>
 8007bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d105      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	f043 0208 	orr.w	r2, r3, #8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 81ed 	beq.w	8007fe2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d008      	beq.n	8007c26 <HAL_UART_IRQHandler+0x14e>
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fb5e 	bl	80082e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c30:	2b40      	cmp	r3, #64	; 0x40
 8007c32:	bf0c      	ite	eq
 8007c34:	2301      	moveq	r3, #1
 8007c36:	2300      	movne	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <HAL_UART_IRQHandler+0x17a>
 8007c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d04f      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa66 	bl	8008124 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	d141      	bne.n	8007cea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3314      	adds	r3, #20
 8007c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3314      	adds	r3, #20
 8007c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1d9      	bne.n	8007c66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d013      	beq.n	8007ce2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	4a7d      	ldr	r2, [pc, #500]	; (8007eb4 <HAL_UART_IRQHandler+0x3dc>)
 8007cc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fb fda8 	bl	800381c <HAL_DMA_Abort_IT>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d016      	beq.n	8007d00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	e00e      	b.n	8007d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f99a 	bl	800801c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce8:	e00a      	b.n	8007d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f996 	bl	800801c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf0:	e006      	b.n	8007d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f992 	bl	800801c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007cfe:	e170      	b.n	8007fe2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d00:	bf00      	nop
    return;
 8007d02:	e16e      	b.n	8007fe2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	f040 814a 	bne.w	8007fa2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d12:	f003 0310 	and.w	r3, r3, #16
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 8143 	beq.w	8007fa2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 813c 	beq.w	8007fa2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60bb      	str	r3, [r7, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	60bb      	str	r3, [r7, #8]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	60bb      	str	r3, [r7, #8]
 8007d3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	f040 80b4 	bne.w	8007eb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 8140 	beq.w	8007fe6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	f080 8139 	bcs.w	8007fe6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d86:	f000 8088 	beq.w	8007e9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	330c      	adds	r3, #12
 8007d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007db6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1d9      	bne.n	8007d8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3314      	adds	r3, #20
 8007ddc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3314      	adds	r3, #20
 8007df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e1      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3314      	adds	r3, #20
 8007e18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3314      	adds	r3, #20
 8007e32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e3      	bne.n	8007e12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	330c      	adds	r3, #12
 8007e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e6a:	f023 0310 	bic.w	r3, r3, #16
 8007e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	330c      	adds	r3, #12
 8007e78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e3      	bne.n	8007e58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fb fc51 	bl	800373c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f8c0 	bl	8008030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eb0:	e099      	b.n	8007fe6 <HAL_UART_IRQHandler+0x50e>
 8007eb2:	bf00      	nop
 8007eb4:	080081eb 	.word	0x080081eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 808b 	beq.w	8007fea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 8086 	beq.w	8007fea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	330c      	adds	r3, #12
 8007ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f02:	647a      	str	r2, [r7, #68]	; 0x44
 8007f04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e3      	bne.n	8007ede <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	623b      	str	r3, [r7, #32]
   return(result);
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	f023 0301 	bic.w	r3, r3, #1
 8007f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3314      	adds	r3, #20
 8007f36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e3      	bne.n	8007f16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	330c      	adds	r3, #12
 8007f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0310 	bic.w	r3, r3, #16
 8007f72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	330c      	adds	r3, #12
 8007f7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f80:	61fa      	str	r2, [r7, #28]
 8007f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	69b9      	ldr	r1, [r7, #24]
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e3      	bne.n	8007f5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f848 	bl	8008030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fa0:	e023      	b.n	8007fea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x4ea>
 8007fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f929 	bl	8008212 <UART_Transmit_IT>
    return;
 8007fc0:	e014      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <HAL_UART_IRQHandler+0x514>
 8007fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d008      	beq.n	8007fec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f969 	bl	80082b2 <UART_EndTransmit_IT>
    return;
 8007fe0:	e004      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
    return;
 8007fe2:	bf00      	nop
 8007fe4:	e002      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
      return;
 8007fe6:	bf00      	nop
 8007fe8:	e000      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
      return;
 8007fea:	bf00      	nop
  }
}
 8007fec:	37e8      	adds	r7, #232	; 0xe8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop

08007ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b090      	sub	sp, #64	; 0x40
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	4613      	mov	r3, r2
 8008056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008058:	e050      	b.n	80080fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800805a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d04c      	beq.n	80080fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008064:	2b00      	cmp	r3, #0
 8008066:	d007      	beq.n	8008078 <UART_WaitOnFlagUntilTimeout+0x30>
 8008068:	f7fb f9a8 	bl	80033bc <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008074:	429a      	cmp	r2, r3
 8008076:	d241      	bcs.n	80080fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	330c      	adds	r3, #12
 8008096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008098:	637a      	str	r2, [r7, #52]	; 0x34
 800809a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800809e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e5      	bne.n	8008078 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3314      	adds	r3, #20
 80080b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	e853 3f00 	ldrex	r3, [r3]
 80080ba:	613b      	str	r3, [r7, #16]
   return(result);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f023 0301 	bic.w	r3, r3, #1
 80080c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3314      	adds	r3, #20
 80080ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080cc:	623a      	str	r2, [r7, #32]
 80080ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	69f9      	ldr	r1, [r7, #28]
 80080d2:	6a3a      	ldr	r2, [r7, #32]
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e5      	bne.n	80080ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2220      	movs	r2, #32
 80080ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e00f      	b.n	800811c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	4013      	ands	r3, r2
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	429a      	cmp	r2, r3
 800810a:	bf0c      	ite	eq
 800810c:	2301      	moveq	r3, #1
 800810e:	2300      	movne	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	461a      	mov	r2, r3
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	429a      	cmp	r2, r3
 8008118:	d09f      	beq.n	800805a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3740      	adds	r7, #64	; 0x40
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008124:	b480      	push	{r7}
 8008126:	b095      	sub	sp, #84	; 0x54
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	330c      	adds	r3, #12
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800814c:	643a      	str	r2, [r7, #64]	; 0x40
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008154:	e841 2300 	strex	r3, r2, [r1]
 8008158:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e5      	bne.n	800812c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3314      	adds	r3, #20
 8008166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f023 0301 	bic.w	r3, r3, #1
 8008176:	64bb      	str	r3, [r7, #72]	; 0x48
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3314      	adds	r3, #20
 800817e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008180:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008188:	e841 2300 	strex	r3, r2, [r1]
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e5      	bne.n	8008160 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	2b01      	cmp	r3, #1
 800819a:	d119      	bne.n	80081d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	330c      	adds	r3, #12
 80081a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	e853 3f00 	ldrex	r3, [r3]
 80081aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f023 0310 	bic.w	r3, r3, #16
 80081b2:	647b      	str	r3, [r7, #68]	; 0x44
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	330c      	adds	r3, #12
 80081ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081bc:	61ba      	str	r2, [r7, #24]
 80081be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c0:	6979      	ldr	r1, [r7, #20]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	e841 2300 	strex	r3, r2, [r1]
 80081c8:	613b      	str	r3, [r7, #16]
   return(result);
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e5      	bne.n	800819c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081de:	bf00      	nop
 80081e0:	3754      	adds	r7, #84	; 0x54
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff ff09 	bl	800801c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b21      	cmp	r3, #33	; 0x21
 8008224:	d13e      	bne.n	80082a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800822e:	d114      	bne.n	800825a <UART_Transmit_IT+0x48>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d110      	bne.n	800825a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800824c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	1c9a      	adds	r2, r3, #2
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	621a      	str	r2, [r3, #32]
 8008258:	e008      	b.n	800826c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	1c59      	adds	r1, r3, #1
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6211      	str	r1, [r2, #32]
 8008264:	781a      	ldrb	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	b29b      	uxth	r3, r3
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	4619      	mov	r1, r3
 800827a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10f      	bne.n	80082a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800828e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800829e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	e000      	b.n	80082a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082a4:	2302      	movs	r3, #2
  }
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68da      	ldr	r2, [r3, #12]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fe8e 	bl	8007ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b08c      	sub	sp, #48	; 0x30
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b22      	cmp	r3, #34	; 0x22
 80082f4:	f040 80ab 	bne.w	800844e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008300:	d117      	bne.n	8008332 <UART_Receive_IT+0x50>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d113      	bne.n	8008332 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	b29b      	uxth	r3, r3
 800831c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008320:	b29a      	uxth	r2, r3
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832a:	1c9a      	adds	r2, r3, #2
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	629a      	str	r2, [r3, #40]	; 0x28
 8008330:	e026      	b.n	8008380 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008338:	2300      	movs	r3, #0
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008344:	d007      	beq.n	8008356 <UART_Receive_IT+0x74>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10a      	bne.n	8008364 <UART_Receive_IT+0x82>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d106      	bne.n	8008364 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	b2da      	uxtb	r2, r3
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	701a      	strb	r2, [r3, #0]
 8008362:	e008      	b.n	8008376 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008370:	b2da      	uxtb	r2, r3
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008374:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008384:	b29b      	uxth	r3, r3
 8008386:	3b01      	subs	r3, #1
 8008388:	b29b      	uxth	r3, r3
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	4619      	mov	r1, r3
 800838e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008390:	2b00      	cmp	r3, #0
 8008392:	d15a      	bne.n	800844a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0220 	bic.w	r2, r2, #32
 80083a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	695a      	ldr	r2, [r3, #20]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0201 	bic.w	r2, r2, #1
 80083c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d135      	bne.n	8008440 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	330c      	adds	r3, #12
 80083e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	613b      	str	r3, [r7, #16]
   return(result);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f023 0310 	bic.w	r3, r3, #16
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	330c      	adds	r3, #12
 80083f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fa:	623a      	str	r2, [r7, #32]
 80083fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fe:	69f9      	ldr	r1, [r7, #28]
 8008400:	6a3a      	ldr	r2, [r7, #32]
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	61bb      	str	r3, [r7, #24]
   return(result);
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e5      	bne.n	80083da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b10      	cmp	r3, #16
 800841a:	d10a      	bne.n	8008432 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800841c:	2300      	movs	r3, #0
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff fdf9 	bl	8008030 <HAL_UARTEx_RxEventCallback>
 800843e:	e002      	b.n	8008446 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff fde1 	bl	8008008 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	e002      	b.n	8008450 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	e000      	b.n	8008450 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800844e:	2302      	movs	r3, #2
  }
}
 8008450:	4618      	mov	r0, r3
 8008452:	3730      	adds	r7, #48	; 0x30
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800845c:	b0c0      	sub	sp, #256	; 0x100
 800845e:	af00      	add	r7, sp, #0
 8008460:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008474:	68d9      	ldr	r1, [r3, #12]
 8008476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	ea40 0301 	orr.w	r3, r0, r1
 8008480:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	431a      	orrs	r2, r3
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	431a      	orrs	r2, r3
 8008498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	4313      	orrs	r3, r2
 80084a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084b0:	f021 010c 	bic.w	r1, r1, #12
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084be:	430b      	orrs	r3, r1
 80084c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d2:	6999      	ldr	r1, [r3, #24]
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	ea40 0301 	orr.w	r3, r0, r1
 80084de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	4b8f      	ldr	r3, [pc, #572]	; (8008724 <UART_SetConfig+0x2cc>)
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d005      	beq.n	80084f8 <UART_SetConfig+0xa0>
 80084ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b8d      	ldr	r3, [pc, #564]	; (8008728 <UART_SetConfig+0x2d0>)
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d104      	bne.n	8008502 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084f8:	f7fd fc80 	bl	8005dfc <HAL_RCC_GetPCLK2Freq>
 80084fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008500:	e003      	b.n	800850a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008502:	f7fd fc67 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
 8008506:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800850a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008514:	f040 810c 	bne.w	8008730 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800851c:	2200      	movs	r2, #0
 800851e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008522:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008526:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800852a:	4622      	mov	r2, r4
 800852c:	462b      	mov	r3, r5
 800852e:	1891      	adds	r1, r2, r2
 8008530:	65b9      	str	r1, [r7, #88]	; 0x58
 8008532:	415b      	adcs	r3, r3
 8008534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008536:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800853a:	4621      	mov	r1, r4
 800853c:	eb12 0801 	adds.w	r8, r2, r1
 8008540:	4629      	mov	r1, r5
 8008542:	eb43 0901 	adc.w	r9, r3, r1
 8008546:	f04f 0200 	mov.w	r2, #0
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800855a:	4690      	mov	r8, r2
 800855c:	4699      	mov	r9, r3
 800855e:	4623      	mov	r3, r4
 8008560:	eb18 0303 	adds.w	r3, r8, r3
 8008564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008568:	462b      	mov	r3, r5
 800856a:	eb49 0303 	adc.w	r3, r9, r3
 800856e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800857e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008582:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008586:	460b      	mov	r3, r1
 8008588:	18db      	adds	r3, r3, r3
 800858a:	653b      	str	r3, [r7, #80]	; 0x50
 800858c:	4613      	mov	r3, r2
 800858e:	eb42 0303 	adc.w	r3, r2, r3
 8008592:	657b      	str	r3, [r7, #84]	; 0x54
 8008594:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008598:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800859c:	f7f7 fe80 	bl	80002a0 <__aeabi_uldivmod>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4b61      	ldr	r3, [pc, #388]	; (800872c <UART_SetConfig+0x2d4>)
 80085a6:	fba3 2302 	umull	r2, r3, r3, r2
 80085aa:	095b      	lsrs	r3, r3, #5
 80085ac:	011c      	lsls	r4, r3, #4
 80085ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085c0:	4642      	mov	r2, r8
 80085c2:	464b      	mov	r3, r9
 80085c4:	1891      	adds	r1, r2, r2
 80085c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80085c8:	415b      	adcs	r3, r3
 80085ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085d0:	4641      	mov	r1, r8
 80085d2:	eb12 0a01 	adds.w	sl, r2, r1
 80085d6:	4649      	mov	r1, r9
 80085d8:	eb43 0b01 	adc.w	fp, r3, r1
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	f04f 0300 	mov.w	r3, #0
 80085e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085f0:	4692      	mov	sl, r2
 80085f2:	469b      	mov	fp, r3
 80085f4:	4643      	mov	r3, r8
 80085f6:	eb1a 0303 	adds.w	r3, sl, r3
 80085fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085fe:	464b      	mov	r3, r9
 8008600:	eb4b 0303 	adc.w	r3, fp, r3
 8008604:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008614:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008618:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800861c:	460b      	mov	r3, r1
 800861e:	18db      	adds	r3, r3, r3
 8008620:	643b      	str	r3, [r7, #64]	; 0x40
 8008622:	4613      	mov	r3, r2
 8008624:	eb42 0303 	adc.w	r3, r2, r3
 8008628:	647b      	str	r3, [r7, #68]	; 0x44
 800862a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800862e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008632:	f7f7 fe35 	bl	80002a0 <__aeabi_uldivmod>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	4611      	mov	r1, r2
 800863c:	4b3b      	ldr	r3, [pc, #236]	; (800872c <UART_SetConfig+0x2d4>)
 800863e:	fba3 2301 	umull	r2, r3, r3, r1
 8008642:	095b      	lsrs	r3, r3, #5
 8008644:	2264      	movs	r2, #100	; 0x64
 8008646:	fb02 f303 	mul.w	r3, r2, r3
 800864a:	1acb      	subs	r3, r1, r3
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008652:	4b36      	ldr	r3, [pc, #216]	; (800872c <UART_SetConfig+0x2d4>)
 8008654:	fba3 2302 	umull	r2, r3, r3, r2
 8008658:	095b      	lsrs	r3, r3, #5
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008660:	441c      	add	r4, r3
 8008662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008666:	2200      	movs	r2, #0
 8008668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800866c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008670:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008674:	4642      	mov	r2, r8
 8008676:	464b      	mov	r3, r9
 8008678:	1891      	adds	r1, r2, r2
 800867a:	63b9      	str	r1, [r7, #56]	; 0x38
 800867c:	415b      	adcs	r3, r3
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008680:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008684:	4641      	mov	r1, r8
 8008686:	1851      	adds	r1, r2, r1
 8008688:	6339      	str	r1, [r7, #48]	; 0x30
 800868a:	4649      	mov	r1, r9
 800868c:	414b      	adcs	r3, r1
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
 8008690:	f04f 0200 	mov.w	r2, #0
 8008694:	f04f 0300 	mov.w	r3, #0
 8008698:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800869c:	4659      	mov	r1, fp
 800869e:	00cb      	lsls	r3, r1, #3
 80086a0:	4651      	mov	r1, sl
 80086a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086a6:	4651      	mov	r1, sl
 80086a8:	00ca      	lsls	r2, r1, #3
 80086aa:	4610      	mov	r0, r2
 80086ac:	4619      	mov	r1, r3
 80086ae:	4603      	mov	r3, r0
 80086b0:	4642      	mov	r2, r8
 80086b2:	189b      	adds	r3, r3, r2
 80086b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086b8:	464b      	mov	r3, r9
 80086ba:	460a      	mov	r2, r1
 80086bc:	eb42 0303 	adc.w	r3, r2, r3
 80086c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086d8:	460b      	mov	r3, r1
 80086da:	18db      	adds	r3, r3, r3
 80086dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80086de:	4613      	mov	r3, r2
 80086e0:	eb42 0303 	adc.w	r3, r2, r3
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80086ee:	f7f7 fdd7 	bl	80002a0 <__aeabi_uldivmod>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	4b0d      	ldr	r3, [pc, #52]	; (800872c <UART_SetConfig+0x2d4>)
 80086f8:	fba3 1302 	umull	r1, r3, r3, r2
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	2164      	movs	r1, #100	; 0x64
 8008700:	fb01 f303 	mul.w	r3, r1, r3
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	3332      	adds	r3, #50	; 0x32
 800870a:	4a08      	ldr	r2, [pc, #32]	; (800872c <UART_SetConfig+0x2d4>)
 800870c:	fba2 2303 	umull	r2, r3, r2, r3
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	f003 0207 	and.w	r2, r3, #7
 8008716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4422      	add	r2, r4
 800871e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008720:	e106      	b.n	8008930 <UART_SetConfig+0x4d8>
 8008722:	bf00      	nop
 8008724:	40011000 	.word	0x40011000
 8008728:	40011400 	.word	0x40011400
 800872c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008734:	2200      	movs	r2, #0
 8008736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800873a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800873e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008742:	4642      	mov	r2, r8
 8008744:	464b      	mov	r3, r9
 8008746:	1891      	adds	r1, r2, r2
 8008748:	6239      	str	r1, [r7, #32]
 800874a:	415b      	adcs	r3, r3
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
 800874e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008752:	4641      	mov	r1, r8
 8008754:	1854      	adds	r4, r2, r1
 8008756:	4649      	mov	r1, r9
 8008758:	eb43 0501 	adc.w	r5, r3, r1
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	00eb      	lsls	r3, r5, #3
 8008766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800876a:	00e2      	lsls	r2, r4, #3
 800876c:	4614      	mov	r4, r2
 800876e:	461d      	mov	r5, r3
 8008770:	4643      	mov	r3, r8
 8008772:	18e3      	adds	r3, r4, r3
 8008774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008778:	464b      	mov	r3, r9
 800877a:	eb45 0303 	adc.w	r3, r5, r3
 800877e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800878e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800879e:	4629      	mov	r1, r5
 80087a0:	008b      	lsls	r3, r1, #2
 80087a2:	4621      	mov	r1, r4
 80087a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087a8:	4621      	mov	r1, r4
 80087aa:	008a      	lsls	r2, r1, #2
 80087ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087b0:	f7f7 fd76 	bl	80002a0 <__aeabi_uldivmod>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4b60      	ldr	r3, [pc, #384]	; (800893c <UART_SetConfig+0x4e4>)
 80087ba:	fba3 2302 	umull	r2, r3, r3, r2
 80087be:	095b      	lsrs	r3, r3, #5
 80087c0:	011c      	lsls	r4, r3, #4
 80087c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087d4:	4642      	mov	r2, r8
 80087d6:	464b      	mov	r3, r9
 80087d8:	1891      	adds	r1, r2, r2
 80087da:	61b9      	str	r1, [r7, #24]
 80087dc:	415b      	adcs	r3, r3
 80087de:	61fb      	str	r3, [r7, #28]
 80087e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087e4:	4641      	mov	r1, r8
 80087e6:	1851      	adds	r1, r2, r1
 80087e8:	6139      	str	r1, [r7, #16]
 80087ea:	4649      	mov	r1, r9
 80087ec:	414b      	adcs	r3, r1
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	f04f 0200 	mov.w	r2, #0
 80087f4:	f04f 0300 	mov.w	r3, #0
 80087f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087fc:	4659      	mov	r1, fp
 80087fe:	00cb      	lsls	r3, r1, #3
 8008800:	4651      	mov	r1, sl
 8008802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008806:	4651      	mov	r1, sl
 8008808:	00ca      	lsls	r2, r1, #3
 800880a:	4610      	mov	r0, r2
 800880c:	4619      	mov	r1, r3
 800880e:	4603      	mov	r3, r0
 8008810:	4642      	mov	r2, r8
 8008812:	189b      	adds	r3, r3, r2
 8008814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008818:	464b      	mov	r3, r9
 800881a:	460a      	mov	r2, r1
 800881c:	eb42 0303 	adc.w	r3, r2, r3
 8008820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	67bb      	str	r3, [r7, #120]	; 0x78
 800882e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800883c:	4649      	mov	r1, r9
 800883e:	008b      	lsls	r3, r1, #2
 8008840:	4641      	mov	r1, r8
 8008842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008846:	4641      	mov	r1, r8
 8008848:	008a      	lsls	r2, r1, #2
 800884a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800884e:	f7f7 fd27 	bl	80002a0 <__aeabi_uldivmod>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4611      	mov	r1, r2
 8008858:	4b38      	ldr	r3, [pc, #224]	; (800893c <UART_SetConfig+0x4e4>)
 800885a:	fba3 2301 	umull	r2, r3, r3, r1
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	2264      	movs	r2, #100	; 0x64
 8008862:	fb02 f303 	mul.w	r3, r2, r3
 8008866:	1acb      	subs	r3, r1, r3
 8008868:	011b      	lsls	r3, r3, #4
 800886a:	3332      	adds	r3, #50	; 0x32
 800886c:	4a33      	ldr	r2, [pc, #204]	; (800893c <UART_SetConfig+0x4e4>)
 800886e:	fba2 2303 	umull	r2, r3, r2, r3
 8008872:	095b      	lsrs	r3, r3, #5
 8008874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008878:	441c      	add	r4, r3
 800887a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800887e:	2200      	movs	r2, #0
 8008880:	673b      	str	r3, [r7, #112]	; 0x70
 8008882:	677a      	str	r2, [r7, #116]	; 0x74
 8008884:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008888:	4642      	mov	r2, r8
 800888a:	464b      	mov	r3, r9
 800888c:	1891      	adds	r1, r2, r2
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	415b      	adcs	r3, r3
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008898:	4641      	mov	r1, r8
 800889a:	1851      	adds	r1, r2, r1
 800889c:	6039      	str	r1, [r7, #0]
 800889e:	4649      	mov	r1, r9
 80088a0:	414b      	adcs	r3, r1
 80088a2:	607b      	str	r3, [r7, #4]
 80088a4:	f04f 0200 	mov.w	r2, #0
 80088a8:	f04f 0300 	mov.w	r3, #0
 80088ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088b0:	4659      	mov	r1, fp
 80088b2:	00cb      	lsls	r3, r1, #3
 80088b4:	4651      	mov	r1, sl
 80088b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ba:	4651      	mov	r1, sl
 80088bc:	00ca      	lsls	r2, r1, #3
 80088be:	4610      	mov	r0, r2
 80088c0:	4619      	mov	r1, r3
 80088c2:	4603      	mov	r3, r0
 80088c4:	4642      	mov	r2, r8
 80088c6:	189b      	adds	r3, r3, r2
 80088c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80088ca:	464b      	mov	r3, r9
 80088cc:	460a      	mov	r2, r1
 80088ce:	eb42 0303 	adc.w	r3, r2, r3
 80088d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	663b      	str	r3, [r7, #96]	; 0x60
 80088de:	667a      	str	r2, [r7, #100]	; 0x64
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80088ec:	4649      	mov	r1, r9
 80088ee:	008b      	lsls	r3, r1, #2
 80088f0:	4641      	mov	r1, r8
 80088f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088f6:	4641      	mov	r1, r8
 80088f8:	008a      	lsls	r2, r1, #2
 80088fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80088fe:	f7f7 fccf 	bl	80002a0 <__aeabi_uldivmod>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4b0d      	ldr	r3, [pc, #52]	; (800893c <UART_SetConfig+0x4e4>)
 8008908:	fba3 1302 	umull	r1, r3, r3, r2
 800890c:	095b      	lsrs	r3, r3, #5
 800890e:	2164      	movs	r1, #100	; 0x64
 8008910:	fb01 f303 	mul.w	r3, r1, r3
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	3332      	adds	r3, #50	; 0x32
 800891a:	4a08      	ldr	r2, [pc, #32]	; (800893c <UART_SetConfig+0x4e4>)
 800891c:	fba2 2303 	umull	r2, r3, r2, r3
 8008920:	095b      	lsrs	r3, r3, #5
 8008922:	f003 020f 	and.w	r2, r3, #15
 8008926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4422      	add	r2, r4
 800892e:	609a      	str	r2, [r3, #8]
}
 8008930:	bf00      	nop
 8008932:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008936:	46bd      	mov	sp, r7
 8008938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800893c:	51eb851f 	.word	0x51eb851f

08008940 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008940:	b084      	sub	sp, #16
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	f107 001c 	add.w	r0, r7, #28
 800894e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	2b01      	cmp	r3, #1
 8008956:	d122      	bne.n	800899e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800896c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008982:	2b01      	cmp	r3, #1
 8008984:	d105      	bne.n	8008992 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 faa2 	bl	8008edc <USB_CoreReset>
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]
 800899c:	e01a      	b.n	80089d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa96 	bl	8008edc <USB_CoreReset>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	639a      	str	r2, [r3, #56]	; 0x38
 80089c6:	e005      	b.n	80089d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d10b      	bne.n	80089f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f043 0206 	orr.w	r2, r3, #6
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f043 0220 	orr.w	r2, r3, #32
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089fe:	b004      	add	sp, #16
 8008a00:	4770      	bx	lr

08008a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f023 0201 	bic.w	r2, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d115      	bne.n	8008a72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a52:	2001      	movs	r0, #1
 8008a54:	f7fa fcbe 	bl	80033d4 <HAL_Delay>
      ms++;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa2e 	bl	8008ec0 <USB_GetMode>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d01e      	beq.n	8008aa8 <USB_SetCurrentMode+0x84>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2b31      	cmp	r3, #49	; 0x31
 8008a6e:	d9f0      	bls.n	8008a52 <USB_SetCurrentMode+0x2e>
 8008a70:	e01a      	b.n	8008aa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d115      	bne.n	8008aa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a84:	2001      	movs	r0, #1
 8008a86:	f7fa fca5 	bl	80033d4 <HAL_Delay>
      ms++;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fa15 	bl	8008ec0 <USB_GetMode>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <USB_SetCurrentMode+0x84>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b31      	cmp	r3, #49	; 0x31
 8008aa0:	d9f0      	bls.n	8008a84 <USB_SetCurrentMode+0x60>
 8008aa2:	e001      	b.n	8008aa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e005      	b.n	8008ab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b32      	cmp	r3, #50	; 0x32
 8008aac:	d101      	bne.n	8008ab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008abc:	b084      	sub	sp, #16
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	e009      	b.n	8008af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	3340      	adds	r3, #64	; 0x40
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3301      	adds	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	2b0e      	cmp	r3, #14
 8008af4:	d9f2      	bls.n	8008adc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d11c      	bne.n	8008b36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b0a:	f043 0302 	orr.w	r3, r3, #2
 8008b0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	639a      	str	r2, [r3, #56]	; 0x38
 8008b34:	e00b      	b.n	8008b4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b54:	461a      	mov	r2, r3
 8008b56:	2300      	movs	r3, #0
 8008b58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b60:	4619      	mov	r1, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b68:	461a      	mov	r2, r3
 8008b6a:	680b      	ldr	r3, [r1, #0]
 8008b6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d10c      	bne.n	8008b8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d104      	bne.n	8008b84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f965 	bl	8008e4c <USB_SetDevSpeed>
 8008b82:	e008      	b.n	8008b96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b84:	2101      	movs	r1, #1
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f960 	bl	8008e4c <USB_SetDevSpeed>
 8008b8c:	e003      	b.n	8008b96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b8e:	2103      	movs	r1, #3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f95b 	bl	8008e4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b96:	2110      	movs	r1, #16
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f8f3 	bl	8008d84 <USB_FlushTxFifo>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f91f 	bl	8008dec <USB_FlushRxFifo>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bca:	461a      	mov	r2, r3
 8008bcc:	2300      	movs	r3, #0
 8008bce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
 8008be0:	e043      	b.n	8008c6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bf8:	d118      	bne.n	8008c2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	e013      	b.n	8008c3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c22:	461a      	mov	r2, r3
 8008c24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	e008      	b.n	8008c3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c38:	461a      	mov	r2, r3
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	3301      	adds	r3, #1
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d3b7      	bcc.n	8008be2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c72:	2300      	movs	r3, #0
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	e043      	b.n	8008d00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c8e:	d118      	bne.n	8008cc2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10a      	bne.n	8008cac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	e013      	b.n	8008cd4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb8:	461a      	mov	r2, r3
 8008cba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	e008      	b.n	8008cd4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cce:	461a      	mov	r2, r3
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d3b7      	bcc.n	8008c78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d105      	bne.n	8008d3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	f043 0210 	orr.w	r2, r3, #16
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	699a      	ldr	r2, [r3, #24]
 8008d40:	4b0f      	ldr	r3, [pc, #60]	; (8008d80 <USB_DevInit+0x2c4>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	f043 0208 	orr.w	r2, r3, #8
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d107      	bne.n	8008d70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d68:	f043 0304 	orr.w	r3, r3, #4
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d7c:	b004      	add	sp, #16
 8008d7e:	4770      	bx	lr
 8008d80:	803c3800 	.word	0x803c3800

08008d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3301      	adds	r3, #1
 8008d96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a13      	ldr	r2, [pc, #76]	; (8008de8 <USB_FlushTxFifo+0x64>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d901      	bls.n	8008da4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e01b      	b.n	8008ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	daf2      	bge.n	8008d92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	019b      	lsls	r3, r3, #6
 8008db4:	f043 0220 	orr.w	r2, r3, #32
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4a08      	ldr	r2, [pc, #32]	; (8008de8 <USB_FlushTxFifo+0x64>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d901      	bls.n	8008dce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e006      	b.n	8008ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d0f0      	beq.n	8008dbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	00030d40 	.word	0x00030d40

08008dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4a11      	ldr	r2, [pc, #68]	; (8008e48 <USB_FlushRxFifo+0x5c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d901      	bls.n	8008e0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e018      	b.n	8008e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	daf2      	bge.n	8008df8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2210      	movs	r2, #16
 8008e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4a08      	ldr	r2, [pc, #32]	; (8008e48 <USB_FlushRxFifo+0x5c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d901      	bls.n	8008e2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e006      	b.n	8008e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f003 0310 	and.w	r3, r3, #16
 8008e36:	2b10      	cmp	r3, #16
 8008e38:	d0f0      	beq.n	8008e1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	00030d40 	.word	0x00030d40

08008e4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b085      	sub	sp, #20
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e98:	f023 0303 	bic.w	r3, r3, #3
 8008e9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eac:	f043 0302 	orr.w	r3, r3, #2
 8008eb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3301      	adds	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	4a13      	ldr	r2, [pc, #76]	; (8008f40 <USB_CoreReset+0x64>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d901      	bls.n	8008efa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e01b      	b.n	8008f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	daf2      	bge.n	8008ee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f043 0201 	orr.w	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <USB_CoreReset+0x64>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d901      	bls.n	8008f24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e006      	b.n	8008f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d0f0      	beq.n	8008f12 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	00030d40 	.word	0x00030d40

08008f44 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f004 fa8d 	bl	800d46c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8008f52:	4b23      	ldr	r3, [pc, #140]	; (8008fe0 <MX_LWIP_Init+0x9c>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008f58:	4b22      	ldr	r3, [pc, #136]	; (8008fe4 <MX_LWIP_Init+0xa0>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8008f5e:	4b22      	ldr	r3, [pc, #136]	; (8008fe8 <MX_LWIP_Init+0xa4>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008f64:	4b21      	ldr	r3, [pc, #132]	; (8008fec <MX_LWIP_Init+0xa8>)
 8008f66:	9302      	str	r3, [sp, #8]
 8008f68:	4b21      	ldr	r3, [pc, #132]	; (8008ff0 <MX_LWIP_Init+0xac>)
 8008f6a:	9301      	str	r3, [sp, #4]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <MX_LWIP_Init+0xa4>)
 8008f72:	4a1c      	ldr	r2, [pc, #112]	; (8008fe4 <MX_LWIP_Init+0xa0>)
 8008f74:	491a      	ldr	r1, [pc, #104]	; (8008fe0 <MX_LWIP_Init+0x9c>)
 8008f76:	481f      	ldr	r0, [pc, #124]	; (8008ff4 <MX_LWIP_Init+0xb0>)
 8008f78:	f005 fb30 	bl	800e5dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008f7c:	481d      	ldr	r0, [pc, #116]	; (8008ff4 <MX_LWIP_Init+0xb0>)
 8008f7e:	f005 fce7 	bl	800e950 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008f82:	4b1c      	ldr	r3, [pc, #112]	; (8008ff4 <MX_LWIP_Init+0xb0>)
 8008f84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f88:	089b      	lsrs	r3, r3, #2
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008f94:	4817      	ldr	r0, [pc, #92]	; (8008ff4 <MX_LWIP_Init+0xb0>)
 8008f96:	f005 fceb 	bl	800e970 <netif_set_up>
 8008f9a:	e002      	b.n	8008fa2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008f9c:	4815      	ldr	r0, [pc, #84]	; (8008ff4 <MX_LWIP_Init+0xb0>)
 8008f9e:	f005 fd53 	bl	800ea48 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008fa2:	4915      	ldr	r1, [pc, #84]	; (8008ff8 <MX_LWIP_Init+0xb4>)
 8008fa4:	4813      	ldr	r0, [pc, #76]	; (8008ff4 <MX_LWIP_Init+0xb0>)
 8008fa6:	f005 fd81 	bl	800eaac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008faa:	2224      	movs	r2, #36	; 0x24
 8008fac:	2100      	movs	r1, #0
 8008fae:	4813      	ldr	r0, [pc, #76]	; (8008ffc <MX_LWIP_Init+0xb8>)
 8008fb0:	f011 fe17 	bl	801abe2 <memset>
  attributes.name = "EthLink";
 8008fb4:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <MX_LWIP_Init+0xb8>)
 8008fb6:	4a12      	ldr	r2, [pc, #72]	; (8009000 <MX_LWIP_Init+0xbc>)
 8008fb8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008fba:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <MX_LWIP_Init+0xb8>)
 8008fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fc0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8008fc2:	4b0e      	ldr	r3, [pc, #56]	; (8008ffc <MX_LWIP_Init+0xb8>)
 8008fc4:	2210      	movs	r2, #16
 8008fc6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8008fc8:	4a0c      	ldr	r2, [pc, #48]	; (8008ffc <MX_LWIP_Init+0xb8>)
 8008fca:	490a      	ldr	r1, [pc, #40]	; (8008ff4 <MX_LWIP_Init+0xb0>)
 8008fcc:	480d      	ldr	r0, [pc, #52]	; (8009004 <MX_LWIP_Init+0xc0>)
 8008fce:	f000 fb6a 	bl	80096a6 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8008fd2:	4808      	ldr	r0, [pc, #32]	; (8008ff4 <MX_LWIP_Init+0xb0>)
 8008fd4:	f00d f8a6 	bl	8016124 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008fd8:	bf00      	nop
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20001130 	.word	0x20001130
 8008fe4:	20001134 	.word	0x20001134
 8008fe8:	20001138 	.word	0x20001138
 8008fec:	0800d3a9 	.word	0x0800d3a9
 8008ff0:	080093ad 	.word	0x080093ad
 8008ff4:	200010f8 	.word	0x200010f8
 8008ff8:	08009009 	.word	0x08009009
 8008ffc:	2000113c 	.word	0x2000113c
 8009000:	0801c340 	.word	0x0801c340
 8009004:	08009457 	.word	0x08009457

08009008 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009024:	4b04      	ldr	r3, [pc, #16]	; (8009038 <HAL_ETH_RxCpltCallback+0x1c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fdd3 	bl	8009bd4 <osSemaphoreRelease>
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20005c2c 	.word	0x20005c2c

0800903c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8009044:	4b04      	ldr	r3, [pc, #16]	; (8009058 <HAL_ETH_TxCpltCallback+0x1c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fdc3 	bl	8009bd4 <osSemaphoreRelease>
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20005c30 	.word	0x20005c30

0800905c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fb f985 	bl	8004374 <HAL_ETH_GetDMAError>
 800906a:	4603      	mov	r3, r0
 800906c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009070:	2b80      	cmp	r3, #128	; 0x80
 8009072:	d104      	bne.n	800907e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8009074:	4b04      	ldr	r3, [pc, #16]	; (8009088 <HAL_ETH_ErrorCallback+0x2c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fdab 	bl	8009bd4 <osSemaphoreRelease>
  }
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20005c2c 	.word	0x20005c2c

0800908c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08e      	sub	sp, #56	; 0x38
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800909a:	4b4e      	ldr	r3, [pc, #312]	; (80091d4 <low_level_init+0x148>)
 800909c:	4a4e      	ldr	r2, [pc, #312]	; (80091d8 <low_level_init+0x14c>)
 800909e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80090a0:	2300      	movs	r3, #0
 80090a2:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80090a4:	2380      	movs	r3, #128	; 0x80
 80090a6:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80090a8:	23e1      	movs	r3, #225	; 0xe1
 80090aa:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80090ac:	2300      	movs	r3, #0
 80090ae:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80090b0:	2300      	movs	r3, #0
 80090b2:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80090b4:	2300      	movs	r3, #0
 80090b6:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80090b8:	4a46      	ldr	r2, [pc, #280]	; (80091d4 <low_level_init+0x148>)
 80090ba:	f107 0308 	add.w	r3, r7, #8
 80090be:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80090c0:	4b44      	ldr	r3, [pc, #272]	; (80091d4 <low_level_init+0x148>)
 80090c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80090c6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80090c8:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <low_level_init+0x148>)
 80090ca:	4a44      	ldr	r2, [pc, #272]	; (80091dc <low_level_init+0x150>)
 80090cc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80090ce:	4b41      	ldr	r3, [pc, #260]	; (80091d4 <low_level_init+0x148>)
 80090d0:	4a43      	ldr	r2, [pc, #268]	; (80091e0 <low_level_init+0x154>)
 80090d2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80090d4:	4b3f      	ldr	r3, [pc, #252]	; (80091d4 <low_level_init+0x148>)
 80090d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80090da:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80090dc:	483d      	ldr	r0, [pc, #244]	; (80091d4 <low_level_init+0x148>)
 80090de:	f7fa fdfb 	bl	8003cd8 <HAL_ETH_Init>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80090e8:	2238      	movs	r2, #56	; 0x38
 80090ea:	2100      	movs	r1, #0
 80090ec:	483d      	ldr	r0, [pc, #244]	; (80091e4 <low_level_init+0x158>)
 80090ee:	f011 fd78 	bl	801abe2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80090f2:	4b3c      	ldr	r3, [pc, #240]	; (80091e4 <low_level_init+0x158>)
 80090f4:	2221      	movs	r2, #33	; 0x21
 80090f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80090f8:	4b3a      	ldr	r3, [pc, #232]	; (80091e4 <low_level_init+0x158>)
 80090fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80090fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009100:	4b38      	ldr	r3, [pc, #224]	; (80091e4 <low_level_init+0x158>)
 8009102:	2200      	movs	r2, #0
 8009104:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009106:	4838      	ldr	r0, [pc, #224]	; (80091e8 <low_level_init+0x15c>)
 8009108:	f005 f922 	bl	800e350 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2206      	movs	r2, #6
 8009110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009114:	4b2f      	ldr	r3, [pc, #188]	; (80091d4 <low_level_init+0x148>)
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	781a      	ldrb	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009120:	4b2c      	ldr	r3, [pc, #176]	; (80091d4 <low_level_init+0x148>)
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	785a      	ldrb	r2, [r3, #1]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800912c:	4b29      	ldr	r3, [pc, #164]	; (80091d4 <low_level_init+0x148>)
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	789a      	ldrb	r2, [r3, #2]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009138:	4b26      	ldr	r3, [pc, #152]	; (80091d4 <low_level_init+0x148>)
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	78da      	ldrb	r2, [r3, #3]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009144:	4b23      	ldr	r3, [pc, #140]	; (80091d4 <low_level_init+0x148>)
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	791a      	ldrb	r2, [r3, #4]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009150:	4b20      	ldr	r3, [pc, #128]	; (80091d4 <low_level_init+0x148>)
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	795a      	ldrb	r2, [r3, #5]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009162:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800916a:	f043 030a 	orr.w	r3, r3, #10
 800916e:	b2da      	uxtb	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8009176:	2200      	movs	r2, #0
 8009178:	2101      	movs	r1, #1
 800917a:	2001      	movs	r0, #1
 800917c:	f000 fc4e 	bl	8009a1c <osSemaphoreNew>
 8009180:	4603      	mov	r3, r0
 8009182:	4a1a      	ldr	r2, [pc, #104]	; (80091ec <low_level_init+0x160>)
 8009184:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8009186:	2200      	movs	r2, #0
 8009188:	2101      	movs	r1, #1
 800918a:	2001      	movs	r0, #1
 800918c:	f000 fc46 	bl	8009a1c <osSemaphoreNew>
 8009190:	4603      	mov	r3, r0
 8009192:	4a17      	ldr	r2, [pc, #92]	; (80091f0 <low_level_init+0x164>)
 8009194:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009196:	f107 0310 	add.w	r3, r7, #16
 800919a:	2224      	movs	r2, #36	; 0x24
 800919c:	2100      	movs	r1, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f011 fd1f 	bl	801abe2 <memset>
  attributes.name = "EthIf";
 80091a4:	4b13      	ldr	r3, [pc, #76]	; (80091f4 <low_level_init+0x168>)
 80091a6:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80091a8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 80091ae:	2330      	movs	r3, #48	; 0x30
 80091b0:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 80091b2:	f107 0310 	add.w	r3, r7, #16
 80091b6:	461a      	mov	r2, r3
 80091b8:	6879      	ldr	r1, [r7, #4]
 80091ba:	480f      	ldr	r0, [pc, #60]	; (80091f8 <low_level_init+0x16c>)
 80091bc:	f000 fa73 	bl	80096a6 <osThreadNew>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 80091c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <low_level_init+0x140>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 80091c8:	f7f8 f9cd 	bl	8001566 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80091cc:	bf00      	nop
 80091ce:	3738      	adds	r7, #56	; 0x38
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	20005c34 	.word	0x20005c34
 80091d8:	40028000 	.word	0x40028000
 80091dc:	20005b8c 	.word	0x20005b8c
 80091e0:	20005aec 	.word	0x20005aec
 80091e4:	20005ce4 	.word	0x20005ce4
 80091e8:	0801f314 	.word	0x0801f314
 80091ec:	20005c2c 	.word	0x20005c2c
 80091f0:	20005c30 	.word	0x20005c30
 80091f4:	0801c348 	.word	0x0801c348
 80091f8:	08009359 	.word	0x08009359

080091fc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b092      	sub	sp, #72	; 0x48
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800920a:	2300      	movs	r3, #0
 800920c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009214:	f107 030c 	add.w	r3, r7, #12
 8009218:	2230      	movs	r2, #48	; 0x30
 800921a:	2100      	movs	r1, #0
 800921c:	4618      	mov	r0, r3
 800921e:	f011 fce0 	bl	801abe2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009222:	f107 030c 	add.w	r3, r7, #12
 8009226:	2230      	movs	r2, #48	; 0x30
 8009228:	2100      	movs	r1, #0
 800922a:	4618      	mov	r0, r3
 800922c:	f011 fcd9 	bl	801abe2 <memset>

  for(q = p; q != NULL; q = q->next)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	643b      	str	r3, [r7, #64]	; 0x40
 8009234:	e045      	b.n	80092c2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009238:	2b03      	cmp	r3, #3
 800923a:	d902      	bls.n	8009242 <low_level_output+0x46>
      return ERR_IF;
 800923c:	f06f 030b 	mvn.w	r3, #11
 8009240:	e065      	b.n	800930e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8009242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009244:	6859      	ldr	r1, [r3, #4]
 8009246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009248:	4613      	mov	r3, r2
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	3348      	adds	r3, #72	; 0x48
 8009252:	443b      	add	r3, r7
 8009254:	3b3c      	subs	r3, #60	; 0x3c
 8009256:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800925a:	895b      	ldrh	r3, [r3, #10]
 800925c:	4619      	mov	r1, r3
 800925e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009260:	4613      	mov	r3, r2
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	3348      	adds	r3, #72	; 0x48
 800926a:	443b      	add	r3, r7
 800926c:	3b38      	subs	r3, #56	; 0x38
 800926e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009272:	2b00      	cmp	r3, #0
 8009274:	d011      	beq.n	800929a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009278:	1e5a      	subs	r2, r3, #1
 800927a:	f107 000c 	add.w	r0, r7, #12
 800927e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009280:	460b      	mov	r3, r1
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	440b      	add	r3, r1
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	18c1      	adds	r1, r0, r3
 800928a:	4613      	mov	r3, r2
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	3348      	adds	r3, #72	; 0x48
 8009294:	443b      	add	r3, r7
 8009296:	3b34      	subs	r3, #52	; 0x34
 8009298:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800929a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d109      	bne.n	80092b6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80092a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092a4:	4613      	mov	r3, r2
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	3348      	adds	r3, #72	; 0x48
 80092ae:	443b      	add	r3, r7
 80092b0:	3b34      	subs	r3, #52	; 0x34
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80092b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b8:	3301      	adds	r3, #1
 80092ba:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80092bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	643b      	str	r3, [r7, #64]	; 0x40
 80092c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1b6      	bne.n	8009236 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	891b      	ldrh	r3, [r3, #8]
 80092cc:	461a      	mov	r2, r3
 80092ce:	4b12      	ldr	r3, [pc, #72]	; (8009318 <low_level_output+0x11c>)
 80092d0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80092d2:	4a11      	ldr	r2, [pc, #68]	; (8009318 <low_level_output+0x11c>)
 80092d4:	f107 030c 	add.w	r3, r7, #12
 80092d8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80092da:	4a0f      	ldr	r2, [pc, #60]	; (8009318 <low_level_output+0x11c>)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80092e0:	6838      	ldr	r0, [r7, #0]
 80092e2:	f006 f837 	bl	800f354 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80092e6:	490c      	ldr	r1, [pc, #48]	; (8009318 <low_level_output+0x11c>)
 80092e8:	480c      	ldr	r0, [pc, #48]	; (800931c <low_level_output+0x120>)
 80092ea:	f7fa fd7d 	bl	8003de8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80092ee:	bf00      	nop
 80092f0:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <low_level_output+0x124>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f04f 31ff 	mov.w	r1, #4294967295
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 fc19 	bl	8009b30 <osSemaphoreAcquire>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1f5      	bne.n	80092f0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8009304:	4805      	ldr	r0, [pc, #20]	; (800931c <low_level_output+0x120>)
 8009306:	f7fa ff03 	bl	8004110 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800930a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800930e:	4618      	mov	r0, r3
 8009310:	3748      	adds	r7, #72	; 0x48
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20005ce4 	.word	0x20005ce4
 800931c:	20005c34 	.word	0x20005c34
 8009320:	20005c30 	.word	0x20005c30

08009324 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800932c:	2300      	movs	r3, #0
 800932e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009330:	4b07      	ldr	r3, [pc, #28]	; (8009350 <low_level_input+0x2c>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d105      	bne.n	8009344 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009338:	f107 030c 	add.w	r3, r7, #12
 800933c:	4619      	mov	r1, r3
 800933e:	4805      	ldr	r0, [pc, #20]	; (8009354 <low_level_input+0x30>)
 8009340:	f7fa fdae 	bl	8003ea0 <HAL_ETH_ReadData>
  }

  return p;
 8009344:	68fb      	ldr	r3, [r7, #12]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20005ae8 	.word	0x20005ae8
 8009354:	20005c34 	.word	0x20005c34

08009358 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009368:	4b0f      	ldr	r3, [pc, #60]	; (80093a8 <ethernetif_input+0x50>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f04f 31ff 	mov.w	r1, #4294967295
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fbdd 	bl	8009b30 <osSemaphoreAcquire>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1f5      	bne.n	8009368 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800937c:	68b8      	ldr	r0, [r7, #8]
 800937e:	f7ff ffd1 	bl	8009324 <low_level_input>
 8009382:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	68b9      	ldr	r1, [r7, #8]
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	4798      	blx	r3
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f005 ff34 	bl	800f208 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1ea      	bne.n	800937c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80093a6:	e7df      	b.n	8009368 <ethernetif_input+0x10>
 80093a8:	20005c2c 	.word	0x20005c2c

080093ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d106      	bne.n	80093c8 <ethernetif_init+0x1c>
 80093ba:	4b0e      	ldr	r3, [pc, #56]	; (80093f4 <ethernetif_init+0x48>)
 80093bc:	f240 12ab 	movw	r2, #427	; 0x1ab
 80093c0:	490d      	ldr	r1, [pc, #52]	; (80093f8 <ethernetif_init+0x4c>)
 80093c2:	480e      	ldr	r0, [pc, #56]	; (80093fc <ethernetif_init+0x50>)
 80093c4:	f011 fba8 	bl	801ab18 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2273      	movs	r2, #115	; 0x73
 80093cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2274      	movs	r2, #116	; 0x74
 80093d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a09      	ldr	r2, [pc, #36]	; (8009400 <ethernetif_init+0x54>)
 80093dc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a08      	ldr	r2, [pc, #32]	; (8009404 <ethernetif_init+0x58>)
 80093e2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff fe51 	bl	800908c <low_level_init>

  return ERR_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	0801c350 	.word	0x0801c350
 80093f8:	0801c36c 	.word	0x0801c36c
 80093fc:	0801c37c 	.word	0x0801c37c
 8009400:	08017fd9 	.word	0x08017fd9
 8009404:	080091fd 	.word	0x080091fd

08009408 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009414:	68f9      	ldr	r1, [r7, #12]
 8009416:	4809      	ldr	r0, [pc, #36]	; (800943c <pbuf_free_custom+0x34>)
 8009418:	f005 f88a 	bl	800e530 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800941c:	4b08      	ldr	r3, [pc, #32]	; (8009440 <pbuf_free_custom+0x38>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d107      	bne.n	8009434 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009424:	4b06      	ldr	r3, [pc, #24]	; (8009440 <pbuf_free_custom+0x38>)
 8009426:	2200      	movs	r2, #0
 8009428:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800942a:	4b06      	ldr	r3, [pc, #24]	; (8009444 <pbuf_free_custom+0x3c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f000 fbd0 	bl	8009bd4 <osSemaphoreRelease>
  }
}
 8009434:	bf00      	nop
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	0801f314 	.word	0x0801f314
 8009440:	20005ae8 	.word	0x20005ae8
 8009444:	20005c2c 	.word	0x20005c2c

08009448 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800944c:	f7f9 ffb6 	bl	80033bc <HAL_GetTick>
 8009450:	4603      	mov	r3, r0
}
 8009452:	4618      	mov	r0, r3
 8009454:	bd80      	pop	{r7, pc}

08009456 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800945e:	2064      	movs	r0, #100	; 0x64
 8009460:	f000 f9b3 	bl	80097ca <osDelay>
 8009464:	e7fb      	b.n	800945e <ethernet_link_thread+0x8>
	...

08009468 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af02      	add	r7, sp, #8
 800946e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009470:	4812      	ldr	r0, [pc, #72]	; (80094bc <HAL_ETH_RxAllocateCallback+0x54>)
 8009472:	f004 ffe9 	bl	800e448 <memp_malloc_pool>
 8009476:	60f8      	str	r0, [r7, #12]
  if (p)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d014      	beq.n	80094a8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f103 0220 	add.w	r2, r3, #32
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4a0d      	ldr	r2, [pc, #52]	; (80094c0 <HAL_ETH_RxAllocateCallback+0x58>)
 800948c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009496:	9201      	str	r2, [sp, #4]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2241      	movs	r2, #65	; 0x41
 800949e:	2100      	movs	r1, #0
 80094a0:	2000      	movs	r0, #0
 80094a2:	f005 fcf7 	bl	800ee94 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80094a6:	e005      	b.n	80094b4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80094a8:	4b06      	ldr	r3, [pc, #24]	; (80094c4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
}
 80094b4:	bf00      	nop
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	0801f314 	.word	0x0801f314
 80094c0:	08009409 	.word	0x08009409
 80094c4:	20005ae8 	.word	0x20005ae8

080094c8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b089      	sub	sp, #36	; 0x24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3b20      	subs	r3, #32
 80094e6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	2200      	movs	r2, #0
 80094f2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	887a      	ldrh	r2, [r7, #2]
 80094f8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d103      	bne.n	800950a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	69fa      	ldr	r2, [r7, #28]
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	e003      	b.n	8009512 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	69fa      	ldr	r2, [r7, #28]
 8009516:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	e009      	b.n	8009534 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	891a      	ldrh	r2, [r3, #8]
 8009524:	887b      	ldrh	r3, [r7, #2]
 8009526:	4413      	add	r3, r2
 8009528:	b29a      	uxth	r2, r3
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	61fb      	str	r3, [r7, #28]
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1f2      	bne.n	8009520 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800953a:	bf00      	nop
 800953c:	bf00      	nop
 800953e:	3724      	adds	r7, #36	; 0x24
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f005 fe59 	bl	800f208 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <__NVIC_SetPriority>:
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	6039      	str	r1, [r7, #0]
 800956a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800956c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009570:	2b00      	cmp	r3, #0
 8009572:	db0a      	blt.n	800958a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	b2da      	uxtb	r2, r3
 8009578:	490c      	ldr	r1, [pc, #48]	; (80095ac <__NVIC_SetPriority+0x4c>)
 800957a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800957e:	0112      	lsls	r2, r2, #4
 8009580:	b2d2      	uxtb	r2, r2
 8009582:	440b      	add	r3, r1
 8009584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009588:	e00a      	b.n	80095a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	b2da      	uxtb	r2, r3
 800958e:	4908      	ldr	r1, [pc, #32]	; (80095b0 <__NVIC_SetPriority+0x50>)
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	f003 030f 	and.w	r3, r3, #15
 8009596:	3b04      	subs	r3, #4
 8009598:	0112      	lsls	r2, r2, #4
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	440b      	add	r3, r1
 800959e:	761a      	strb	r2, [r3, #24]
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	e000e100 	.word	0xe000e100
 80095b0:	e000ed00 	.word	0xe000ed00

080095b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <SysTick_Handler+0x1c>)
 80095ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80095bc:	f002 fc96 	bl	800beec <xTaskGetSchedulerState>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d001      	beq.n	80095ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80095c6:	f003 fb7f 	bl	800ccc8 <xPortSysTickHandler>
  }
}
 80095ca:	bf00      	nop
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	e000e010 	.word	0xe000e010

080095d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80095d8:	2100      	movs	r1, #0
 80095da:	f06f 0004 	mvn.w	r0, #4
 80095de:	f7ff ffbf 	bl	8009560 <__NVIC_SetPriority>
#endif
}
 80095e2:	bf00      	nop
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ee:	f3ef 8305 	mrs	r3, IPSR
 80095f2:	603b      	str	r3, [r7, #0]
  return(result);
 80095f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095fa:	f06f 0305 	mvn.w	r3, #5
 80095fe:	607b      	str	r3, [r7, #4]
 8009600:	e00c      	b.n	800961c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009602:	4b0a      	ldr	r3, [pc, #40]	; (800962c <osKernelInitialize+0x44>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d105      	bne.n	8009616 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800960a:	4b08      	ldr	r3, [pc, #32]	; (800962c <osKernelInitialize+0x44>)
 800960c:	2201      	movs	r2, #1
 800960e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009610:	2300      	movs	r3, #0
 8009612:	607b      	str	r3, [r7, #4]
 8009614:	e002      	b.n	800961c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009616:	f04f 33ff 	mov.w	r3, #4294967295
 800961a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800961c:	687b      	ldr	r3, [r7, #4]
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20005d1c 	.word	0x20005d1c

08009630 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009636:	f3ef 8305 	mrs	r3, IPSR
 800963a:	603b      	str	r3, [r7, #0]
  return(result);
 800963c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009642:	f06f 0305 	mvn.w	r3, #5
 8009646:	607b      	str	r3, [r7, #4]
 8009648:	e010      	b.n	800966c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800964a:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <osKernelStart+0x48>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d109      	bne.n	8009666 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009652:	f7ff ffbf 	bl	80095d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009656:	4b08      	ldr	r3, [pc, #32]	; (8009678 <osKernelStart+0x48>)
 8009658:	2202      	movs	r2, #2
 800965a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800965c:	f001 ffc8 	bl	800b5f0 <vTaskStartScheduler>
      stat = osOK;
 8009660:	2300      	movs	r3, #0
 8009662:	607b      	str	r3, [r7, #4]
 8009664:	e002      	b.n	800966c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009666:	f04f 33ff 	mov.w	r3, #4294967295
 800966a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800966c:	687b      	ldr	r3, [r7, #4]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20005d1c 	.word	0x20005d1c

0800967c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009682:	f3ef 8305 	mrs	r3, IPSR
 8009686:	603b      	str	r3, [r7, #0]
  return(result);
 8009688:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800968e:	f002 f8db 	bl	800b848 <xTaskGetTickCountFromISR>
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	e002      	b.n	800969c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009696:	f002 f8c7 	bl	800b828 <xTaskGetTickCount>
 800969a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800969c:	687b      	ldr	r3, [r7, #4]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b08e      	sub	sp, #56	; 0x38
 80096aa:	af04      	add	r7, sp, #16
 80096ac:	60f8      	str	r0, [r7, #12]
 80096ae:	60b9      	str	r1, [r7, #8]
 80096b0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096b6:	f3ef 8305 	mrs	r3, IPSR
 80096ba:	617b      	str	r3, [r7, #20]
  return(result);
 80096bc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d17e      	bne.n	80097c0 <osThreadNew+0x11a>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d07b      	beq.n	80097c0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80096c8:	2380      	movs	r3, #128	; 0x80
 80096ca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80096cc:	2318      	movs	r3, #24
 80096ce:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096d0:	2300      	movs	r3, #0
 80096d2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80096d4:	f04f 33ff 	mov.w	r3, #4294967295
 80096d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d045      	beq.n	800976c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <osThreadNew+0x48>
        name = attr->name;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d008      	beq.n	8009714 <osThreadNew+0x6e>
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	2b38      	cmp	r3, #56	; 0x38
 8009706:	d805      	bhi.n	8009714 <osThreadNew+0x6e>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <osThreadNew+0x72>
        return (NULL);
 8009714:	2300      	movs	r3, #0
 8009716:	e054      	b.n	80097c2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	089b      	lsrs	r3, r3, #2
 8009726:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00e      	beq.n	800974e <osThreadNew+0xa8>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	2ba7      	cmp	r3, #167	; 0xa7
 8009736:	d90a      	bls.n	800974e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800973c:	2b00      	cmp	r3, #0
 800973e:	d006      	beq.n	800974e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <osThreadNew+0xa8>
        mem = 1;
 8009748:	2301      	movs	r3, #1
 800974a:	61bb      	str	r3, [r7, #24]
 800974c:	e010      	b.n	8009770 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10c      	bne.n	8009770 <osThreadNew+0xca>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d108      	bne.n	8009770 <osThreadNew+0xca>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d104      	bne.n	8009770 <osThreadNew+0xca>
          mem = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	e001      	b.n	8009770 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d110      	bne.n	8009798 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800977e:	9202      	str	r2, [sp, #8]
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6a3a      	ldr	r2, [r7, #32]
 800978a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f001 fd43 	bl	800b218 <xTaskCreateStatic>
 8009792:	4603      	mov	r3, r0
 8009794:	613b      	str	r3, [r7, #16]
 8009796:	e013      	b.n	80097c0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d110      	bne.n	80097c0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	f107 0310 	add.w	r3, r7, #16
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f001 fd8e 	bl	800b2d2 <xTaskCreate>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d001      	beq.n	80097c0 <osThreadNew+0x11a>
            hTask = NULL;
 80097bc:	2300      	movs	r3, #0
 80097be:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097c0:	693b      	ldr	r3, [r7, #16]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3728      	adds	r7, #40	; 0x28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d2:	f3ef 8305 	mrs	r3, IPSR
 80097d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80097d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <osDelay+0x1c>
    stat = osErrorISR;
 80097de:	f06f 0305 	mvn.w	r3, #5
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e007      	b.n	80097f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 fec9 	bl	800b588 <vTaskDelay>
    }
  }

  return (stat);
 80097f6:	68fb      	ldr	r3, [r7, #12]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009800:	b580      	push	{r7, lr}
 8009802:	b088      	sub	sp, #32
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009808:	2300      	movs	r3, #0
 800980a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800980c:	f3ef 8305 	mrs	r3, IPSR
 8009810:	60bb      	str	r3, [r7, #8]
  return(result);
 8009812:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009814:	2b00      	cmp	r3, #0
 8009816:	d174      	bne.n	8009902 <osMutexNew+0x102>
    if (attr != NULL) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <osMutexNew+0x26>
      type = attr->attr_bits;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	61bb      	str	r3, [r7, #24]
 8009824:	e001      	b.n	800982a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009826:	2300      	movs	r3, #0
 8009828:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d002      	beq.n	800983a <osMutexNew+0x3a>
      rmtx = 1U;
 8009834:	2301      	movs	r3, #1
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e001      	b.n	800983e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	f003 0308 	and.w	r3, r3, #8
 8009844:	2b00      	cmp	r3, #0
 8009846:	d15c      	bne.n	8009902 <osMutexNew+0x102>
      mem = -1;
 8009848:	f04f 33ff 	mov.w	r3, #4294967295
 800984c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d015      	beq.n	8009880 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d006      	beq.n	800986a <osMutexNew+0x6a>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	2b4f      	cmp	r3, #79	; 0x4f
 8009862:	d902      	bls.n	800986a <osMutexNew+0x6a>
          mem = 1;
 8009864:	2301      	movs	r3, #1
 8009866:	613b      	str	r3, [r7, #16]
 8009868:	e00c      	b.n	8009884 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d108      	bne.n	8009884 <osMutexNew+0x84>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d104      	bne.n	8009884 <osMutexNew+0x84>
            mem = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	613b      	str	r3, [r7, #16]
 800987e:	e001      	b.n	8009884 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d112      	bne.n	80098b0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d007      	beq.n	80098a0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	4619      	mov	r1, r3
 8009896:	2004      	movs	r0, #4
 8009898:	f000 fd69 	bl	800a36e <xQueueCreateMutexStatic>
 800989c:	61f8      	str	r0, [r7, #28]
 800989e:	e016      	b.n	80098ce <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	4619      	mov	r1, r3
 80098a6:	2001      	movs	r0, #1
 80098a8:	f000 fd61 	bl	800a36e <xQueueCreateMutexStatic>
 80098ac:	61f8      	str	r0, [r7, #28]
 80098ae:	e00e      	b.n	80098ce <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10b      	bne.n	80098ce <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80098bc:	2004      	movs	r0, #4
 80098be:	f000 fd3e 	bl	800a33e <xQueueCreateMutex>
 80098c2:	61f8      	str	r0, [r7, #28]
 80098c4:	e003      	b.n	80098ce <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80098c6:	2001      	movs	r0, #1
 80098c8:	f000 fd39 	bl	800a33e <xQueueCreateMutex>
 80098cc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00c      	beq.n	80098ee <osMutexNew+0xee>
        if (attr != NULL) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <osMutexNew+0xe2>
          name = attr->name;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	e001      	b.n	80098e6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	69f8      	ldr	r0, [r7, #28]
 80098ea:	f001 fc0d 	bl	800b108 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d006      	beq.n	8009902 <osMutexNew+0x102>
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	f043 0301 	orr.w	r3, r3, #1
 8009900:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009902:	69fb      	ldr	r3, [r7, #28]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f023 0301 	bic.w	r3, r3, #1
 800991c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800992a:	f3ef 8305 	mrs	r3, IPSR
 800992e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009930:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009936:	f06f 0305 	mvn.w	r3, #5
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	e02c      	b.n	8009998 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d103      	bne.n	800994c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009944:	f06f 0303 	mvn.w	r3, #3
 8009948:	617b      	str	r3, [r7, #20]
 800994a:	e025      	b.n	8009998 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d011      	beq.n	8009976 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6938      	ldr	r0, [r7, #16]
 8009956:	f000 fd59 	bl	800a40c <xQueueTakeMutexRecursive>
 800995a:	4603      	mov	r3, r0
 800995c:	2b01      	cmp	r3, #1
 800995e:	d01b      	beq.n	8009998 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009966:	f06f 0301 	mvn.w	r3, #1
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	e014      	b.n	8009998 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800996e:	f06f 0302 	mvn.w	r3, #2
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e010      	b.n	8009998 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6938      	ldr	r0, [r7, #16]
 800997a:	f001 f8ed 	bl	800ab58 <xQueueSemaphoreTake>
 800997e:	4603      	mov	r3, r0
 8009980:	2b01      	cmp	r3, #1
 8009982:	d009      	beq.n	8009998 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800998a:	f06f 0301 	mvn.w	r3, #1
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	e002      	b.n	8009998 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009992:	f06f 0302 	mvn.w	r3, #2
 8009996:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009998:	697b      	ldr	r3, [r7, #20]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3718      	adds	r7, #24
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b086      	sub	sp, #24
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f023 0301 	bic.w	r3, r3, #1
 80099b0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099be:	f3ef 8305 	mrs	r3, IPSR
 80099c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80099c4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <osMutexRelease+0x30>
    stat = osErrorISR;
 80099ca:	f06f 0305 	mvn.w	r3, #5
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	e01f      	b.n	8009a12 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d103      	bne.n	80099e0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80099d8:	f06f 0303 	mvn.w	r3, #3
 80099dc:	617b      	str	r3, [r7, #20]
 80099de:	e018      	b.n	8009a12 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d009      	beq.n	80099fa <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80099e6:	6938      	ldr	r0, [r7, #16]
 80099e8:	f000 fcdc 	bl	800a3a4 <xQueueGiveMutexRecursive>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d00f      	beq.n	8009a12 <osMutexRelease+0x70>
        stat = osErrorResource;
 80099f2:	f06f 0302 	mvn.w	r3, #2
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	e00b      	b.n	8009a12 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80099fa:	2300      	movs	r3, #0
 80099fc:	2200      	movs	r2, #0
 80099fe:	2100      	movs	r1, #0
 8009a00:	6938      	ldr	r0, [r7, #16]
 8009a02:	f000 fda3 	bl	800a54c <xQueueGenericSend>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d002      	beq.n	8009a12 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009a0c:	f06f 0302 	mvn.w	r3, #2
 8009a10:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009a12:	697b      	ldr	r3, [r7, #20]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	; 0x28
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a2c:	f3ef 8305 	mrs	r3, IPSR
 8009a30:	613b      	str	r3, [r7, #16]
  return(result);
 8009a32:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d175      	bne.n	8009b24 <osSemaphoreNew+0x108>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d072      	beq.n	8009b24 <osSemaphoreNew+0x108>
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d86e      	bhi.n	8009b24 <osSemaphoreNew+0x108>
    mem = -1;
 8009a46:	f04f 33ff 	mov.w	r3, #4294967295
 8009a4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d015      	beq.n	8009a7e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d006      	beq.n	8009a68 <osSemaphoreNew+0x4c>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	2b4f      	cmp	r3, #79	; 0x4f
 8009a60:	d902      	bls.n	8009a68 <osSemaphoreNew+0x4c>
        mem = 1;
 8009a62:	2301      	movs	r3, #1
 8009a64:	61bb      	str	r3, [r7, #24]
 8009a66:	e00c      	b.n	8009a82 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d108      	bne.n	8009a82 <osSemaphoreNew+0x66>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d104      	bne.n	8009a82 <osSemaphoreNew+0x66>
          mem = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	61bb      	str	r3, [r7, #24]
 8009a7c:	e001      	b.n	8009a82 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a88:	d04c      	beq.n	8009b24 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d128      	bne.n	8009ae2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d10a      	bne.n	8009aac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	2203      	movs	r2, #3
 8009a9c:	9200      	str	r2, [sp, #0]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	f000 fb5c 	bl	800a160 <xQueueGenericCreateStatic>
 8009aa8:	61f8      	str	r0, [r7, #28]
 8009aaa:	e005      	b.n	8009ab8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009aac:	2203      	movs	r2, #3
 8009aae:	2100      	movs	r1, #0
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	f000 fbcd 	bl	800a250 <xQueueGenericCreate>
 8009ab6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d022      	beq.n	8009b04 <osSemaphoreNew+0xe8>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01f      	beq.n	8009b04 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2100      	movs	r1, #0
 8009aca:	69f8      	ldr	r0, [r7, #28]
 8009acc:	f000 fd3e 	bl	800a54c <xQueueGenericSend>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d016      	beq.n	8009b04 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009ad6:	69f8      	ldr	r0, [r7, #28]
 8009ad8:	f001 f9ca 	bl	800ae70 <vQueueDelete>
            hSemaphore = NULL;
 8009adc:	2300      	movs	r3, #0
 8009ade:	61fb      	str	r3, [r7, #28]
 8009ae0:	e010      	b.n	8009b04 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d108      	bne.n	8009afa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	461a      	mov	r2, r3
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 fcc1 	bl	800a478 <xQueueCreateCountingSemaphoreStatic>
 8009af6:	61f8      	str	r0, [r7, #28]
 8009af8:	e004      	b.n	8009b04 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009afa:	68b9      	ldr	r1, [r7, #8]
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 fcf2 	bl	800a4e6 <xQueueCreateCountingSemaphore>
 8009b02:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00c      	beq.n	8009b24 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	617b      	str	r3, [r7, #20]
 8009b16:	e001      	b.n	8009b1c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009b1c:	6979      	ldr	r1, [r7, #20]
 8009b1e:	69f8      	ldr	r0, [r7, #28]
 8009b20:	f001 faf2 	bl	800b108 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009b24:	69fb      	ldr	r3, [r7, #28]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3720      	adds	r7, #32
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d103      	bne.n	8009b50 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009b48:	f06f 0303 	mvn.w	r3, #3
 8009b4c:	617b      	str	r3, [r7, #20]
 8009b4e:	e039      	b.n	8009bc4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b50:	f3ef 8305 	mrs	r3, IPSR
 8009b54:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b56:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d022      	beq.n	8009ba2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009b62:	f06f 0303 	mvn.w	r3, #3
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	e02c      	b.n	8009bc4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009b6e:	f107 0308 	add.w	r3, r7, #8
 8009b72:	461a      	mov	r2, r3
 8009b74:	2100      	movs	r1, #0
 8009b76:	6938      	ldr	r0, [r7, #16]
 8009b78:	f001 f8fa 	bl	800ad70 <xQueueReceiveFromISR>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d003      	beq.n	8009b8a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009b82:	f06f 0302 	mvn.w	r3, #2
 8009b86:	617b      	str	r3, [r7, #20]
 8009b88:	e01c      	b.n	8009bc4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d019      	beq.n	8009bc4 <osSemaphoreAcquire+0x94>
 8009b90:	4b0f      	ldr	r3, [pc, #60]	; (8009bd0 <osSemaphoreAcquire+0xa0>)
 8009b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	e010      	b.n	8009bc4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6938      	ldr	r0, [r7, #16]
 8009ba6:	f000 ffd7 	bl	800ab58 <xQueueSemaphoreTake>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d009      	beq.n	8009bc4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009bb6:	f06f 0301 	mvn.w	r3, #1
 8009bba:	617b      	str	r3, [r7, #20]
 8009bbc:	e002      	b.n	8009bc4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009bbe:	f06f 0302 	mvn.w	r3, #2
 8009bc2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009bc4:	697b      	ldr	r3, [r7, #20]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	e000ed04 	.word	0xe000ed04

08009bd4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d103      	bne.n	8009bf2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009bea:	f06f 0303 	mvn.w	r3, #3
 8009bee:	617b      	str	r3, [r7, #20]
 8009bf0:	e02c      	b.n	8009c4c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bf2:	f3ef 8305 	mrs	r3, IPSR
 8009bf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01a      	beq.n	8009c34 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	4619      	mov	r1, r3
 8009c08:	6938      	ldr	r0, [r7, #16]
 8009c0a:	f000 fe38 	bl	800a87e <xQueueGiveFromISR>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d003      	beq.n	8009c1c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009c14:	f06f 0302 	mvn.w	r3, #2
 8009c18:	617b      	str	r3, [r7, #20]
 8009c1a:	e017      	b.n	8009c4c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d014      	beq.n	8009c4c <osSemaphoreRelease+0x78>
 8009c22:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <osSemaphoreRelease+0x84>)
 8009c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c28:	601a      	str	r2, [r3, #0]
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	e00b      	b.n	8009c4c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009c34:	2300      	movs	r3, #0
 8009c36:	2200      	movs	r2, #0
 8009c38:	2100      	movs	r1, #0
 8009c3a:	6938      	ldr	r0, [r7, #16]
 8009c3c:	f000 fc86 	bl	800a54c <xQueueGenericSend>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d002      	beq.n	8009c4c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009c46:	f06f 0302 	mvn.w	r3, #2
 8009c4a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009c4c:	697b      	ldr	r3, [r7, #20]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08a      	sub	sp, #40	; 0x28
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c6c:	f3ef 8305 	mrs	r3, IPSR
 8009c70:	613b      	str	r3, [r7, #16]
  return(result);
 8009c72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d15f      	bne.n	8009d38 <osMessageQueueNew+0xdc>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d05c      	beq.n	8009d38 <osMessageQueueNew+0xdc>
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d059      	beq.n	8009d38 <osMessageQueueNew+0xdc>
    mem = -1;
 8009c84:	f04f 33ff 	mov.w	r3, #4294967295
 8009c88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d029      	beq.n	8009ce4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d012      	beq.n	8009cbe <osMessageQueueNew+0x62>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	2b4f      	cmp	r3, #79	; 0x4f
 8009c9e:	d90e      	bls.n	8009cbe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00a      	beq.n	8009cbe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	695a      	ldr	r2, [r3, #20]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	68b9      	ldr	r1, [r7, #8]
 8009cb0:	fb01 f303 	mul.w	r3, r1, r3
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d302      	bcc.n	8009cbe <osMessageQueueNew+0x62>
        mem = 1;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	61bb      	str	r3, [r7, #24]
 8009cbc:	e014      	b.n	8009ce8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d110      	bne.n	8009ce8 <osMessageQueueNew+0x8c>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10c      	bne.n	8009ce8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d108      	bne.n	8009ce8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d104      	bne.n	8009ce8 <osMessageQueueNew+0x8c>
          mem = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	61bb      	str	r3, [r7, #24]
 8009ce2:	e001      	b.n	8009ce8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10b      	bne.n	8009d06 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691a      	ldr	r2, [r3, #16]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	9100      	str	r1, [sp, #0]
 8009cfa:	68b9      	ldr	r1, [r7, #8]
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f000 fa2f 	bl	800a160 <xQueueGenericCreateStatic>
 8009d02:	61f8      	str	r0, [r7, #28]
 8009d04:	e008      	b.n	8009d18 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d105      	bne.n	8009d18 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fa9d 	bl	800a250 <xQueueGenericCreate>
 8009d16:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00c      	beq.n	8009d38 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d003      	beq.n	8009d2c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	e001      	b.n	8009d30 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d30:	6979      	ldr	r1, [r7, #20]
 8009d32:	69f8      	ldr	r0, [r7, #28]
 8009d34:	f001 f9e8 	bl	800b108 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d38:	69fb      	ldr	r3, [r7, #28]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3720      	adds	r7, #32
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	4613      	mov	r3, r2
 8009d52:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d5c:	f3ef 8305 	mrs	r3, IPSR
 8009d60:	617b      	str	r3, [r7, #20]
  return(result);
 8009d62:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d028      	beq.n	8009dba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d005      	beq.n	8009d7a <osMessageQueuePut+0x36>
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <osMessageQueuePut+0x36>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009d7a:	f06f 0303 	mvn.w	r3, #3
 8009d7e:	61fb      	str	r3, [r7, #28]
 8009d80:	e038      	b.n	8009df4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009d82:	2300      	movs	r3, #0
 8009d84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009d86:	f107 0210 	add.w	r2, r7, #16
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	69b8      	ldr	r0, [r7, #24]
 8009d90:	f000 fcda 	bl	800a748 <xQueueGenericSendFromISR>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d003      	beq.n	8009da2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009d9a:	f06f 0302 	mvn.w	r3, #2
 8009d9e:	61fb      	str	r3, [r7, #28]
 8009da0:	e028      	b.n	8009df4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d025      	beq.n	8009df4 <osMessageQueuePut+0xb0>
 8009da8:	4b15      	ldr	r3, [pc, #84]	; (8009e00 <osMessageQueuePut+0xbc>)
 8009daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	e01c      	b.n	8009df4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <osMessageQueuePut+0x82>
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d103      	bne.n	8009dce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009dc6:	f06f 0303 	mvn.w	r3, #3
 8009dca:	61fb      	str	r3, [r7, #28]
 8009dcc:	e012      	b.n	8009df4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009dce:	2300      	movs	r3, #0
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	69b8      	ldr	r0, [r7, #24]
 8009dd6:	f000 fbb9 	bl	800a54c <xQueueGenericSend>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d009      	beq.n	8009df4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009de6:	f06f 0301 	mvn.w	r3, #1
 8009dea:	61fb      	str	r3, [r7, #28]
 8009dec:	e002      	b.n	8009df4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009dee:	f06f 0302 	mvn.w	r3, #2
 8009df2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009df4:	69fb      	ldr	r3, [r7, #28]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3720      	adds	r7, #32
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	e000ed04 	.word	0xe000ed04

08009e04 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e1a:	f3ef 8305 	mrs	r3, IPSR
 8009e1e:	617b      	str	r3, [r7, #20]
  return(result);
 8009e20:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d028      	beq.n	8009e78 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d005      	beq.n	8009e38 <osMessageQueueGet+0x34>
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d002      	beq.n	8009e38 <osMessageQueueGet+0x34>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009e38:	f06f 0303 	mvn.w	r3, #3
 8009e3c:	61fb      	str	r3, [r7, #28]
 8009e3e:	e037      	b.n	8009eb0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009e40:	2300      	movs	r3, #0
 8009e42:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009e44:	f107 0310 	add.w	r3, r7, #16
 8009e48:	461a      	mov	r2, r3
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	69b8      	ldr	r0, [r7, #24]
 8009e4e:	f000 ff8f 	bl	800ad70 <xQueueReceiveFromISR>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d003      	beq.n	8009e60 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009e58:	f06f 0302 	mvn.w	r3, #2
 8009e5c:	61fb      	str	r3, [r7, #28]
 8009e5e:	e027      	b.n	8009eb0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d024      	beq.n	8009eb0 <osMessageQueueGet+0xac>
 8009e66:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <osMessageQueueGet+0xb8>)
 8009e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	e01b      	b.n	8009eb0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <osMessageQueueGet+0x80>
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d103      	bne.n	8009e8c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009e84:	f06f 0303 	mvn.w	r3, #3
 8009e88:	61fb      	str	r3, [r7, #28]
 8009e8a:	e011      	b.n	8009eb0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	69b8      	ldr	r0, [r7, #24]
 8009e92:	f000 fd81 	bl	800a998 <xQueueReceive>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d009      	beq.n	8009eb0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009ea2:	f06f 0301 	mvn.w	r3, #1
 8009ea6:	61fb      	str	r3, [r7, #28]
 8009ea8:	e002      	b.n	8009eb0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009eaa:	f06f 0302 	mvn.w	r3, #2
 8009eae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009eb0:	69fb      	ldr	r3, [r7, #28]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3720      	adds	r7, #32
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	e000ed04 	.word	0xe000ed04

08009ec0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4a07      	ldr	r2, [pc, #28]	; (8009eec <vApplicationGetIdleTaskMemory+0x2c>)
 8009ed0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	4a06      	ldr	r2, [pc, #24]	; (8009ef0 <vApplicationGetIdleTaskMemory+0x30>)
 8009ed6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2280      	movs	r2, #128	; 0x80
 8009edc:	601a      	str	r2, [r3, #0]
}
 8009ede:	bf00      	nop
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	20005d20 	.word	0x20005d20
 8009ef0:	20005dc8 	.word	0x20005dc8

08009ef4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a07      	ldr	r2, [pc, #28]	; (8009f20 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	4a06      	ldr	r2, [pc, #24]	; (8009f24 <vApplicationGetTimerTaskMemory+0x30>)
 8009f0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f12:	601a      	str	r2, [r3, #0]
}
 8009f14:	bf00      	nop
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	20005fc8 	.word	0x20005fc8
 8009f24:	20006070 	.word	0x20006070

08009f28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f103 0208 	add.w	r2, r3, #8
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f103 0208 	add.w	r2, r3, #8
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f103 0208 	add.w	r2, r3, #8
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f82:	b480      	push	{r7}
 8009f84:	b085      	sub	sp, #20
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	601a      	str	r2, [r3, #0]
}
 8009fbe:	bf00      	nop
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b085      	sub	sp, #20
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe0:	d103      	bne.n	8009fea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	e00c      	b.n	800a004 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3308      	adds	r3, #8
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	e002      	b.n	8009ff8 <vListInsert+0x2e>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	429a      	cmp	r2, r3
 800a002:	d2f6      	bcs.n	8009ff2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	601a      	str	r2, [r3, #0]
}
 800a030:	bf00      	nop
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	6892      	ldr	r2, [r2, #8]
 800a052:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	6852      	ldr	r2, [r2, #4]
 800a05c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	429a      	cmp	r2, r3
 800a066:	d103      	bne.n	800a070 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	1e5a      	subs	r2, r3, #1
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10a      	bne.n	800a0ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0ba:	f002 fd73 	bl	800cba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c6:	68f9      	ldr	r1, [r7, #12]
 800a0c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0ca:	fb01 f303 	mul.w	r3, r1, r3
 800a0ce:	441a      	add	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0f0:	fb01 f303 	mul.w	r3, r1, r3
 800a0f4:	441a      	add	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	22ff      	movs	r2, #255	; 0xff
 800a0fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	22ff      	movs	r2, #255	; 0xff
 800a106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d114      	bne.n	800a13a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01a      	beq.n	800a14e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3310      	adds	r3, #16
 800a11c:	4618      	mov	r0, r3
 800a11e:	f001 fd13 	bl	800bb48 <xTaskRemoveFromEventList>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d012      	beq.n	800a14e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a128:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <xQueueGenericReset+0xcc>)
 800a12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	e009      	b.n	800a14e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3310      	adds	r3, #16
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff fef2 	bl	8009f28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3324      	adds	r3, #36	; 0x24
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff feed 	bl	8009f28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a14e:	f002 fd59 	bl	800cc04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a152:	2301      	movs	r3, #1
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	e000ed04 	.word	0xe000ed04

0800a160 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08e      	sub	sp, #56	; 0x38
 800a164:	af02      	add	r7, sp, #8
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a186:	bf00      	nop
 800a188:	e7fe      	b.n	800a188 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <xQueueGenericCreateStatic+0x52>
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <xQueueGenericCreateStatic+0x56>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <xQueueGenericCreateStatic+0x58>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	623b      	str	r3, [r7, #32]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d102      	bne.n	800a1de <xQueueGenericCreateStatic+0x7e>
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <xQueueGenericCreateStatic+0x82>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <xQueueGenericCreateStatic+0x84>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10a      	bne.n	800a1fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	61fb      	str	r3, [r7, #28]
}
 800a1fa:	bf00      	nop
 800a1fc:	e7fe      	b.n	800a1fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1fe:	2350      	movs	r3, #80	; 0x50
 800a200:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2b50      	cmp	r3, #80	; 0x50
 800a206:	d00a      	beq.n	800a21e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	61bb      	str	r3, [r7, #24]
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a21e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00d      	beq.n	800a246 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a232:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4613      	mov	r3, r2
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f83f 	bl	800a2c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a248:	4618      	mov	r0, r3
 800a24a:	3730      	adds	r7, #48	; 0x30
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08a      	sub	sp, #40	; 0x28
 800a254:	af02      	add	r7, sp, #8
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	4613      	mov	r3, r2
 800a25c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	613b      	str	r3, [r7, #16]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	fb02 f303 	mul.w	r3, r2, r3
 800a282:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	3350      	adds	r3, #80	; 0x50
 800a288:	4618      	mov	r0, r3
 800a28a:	f002 fdad 	bl	800cde8 <pvPortMalloc>
 800a28e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d011      	beq.n	800a2ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	3350      	adds	r3, #80	; 0x50
 800a29e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2a8:	79fa      	ldrb	r2, [r7, #7]
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	68b9      	ldr	r1, [r7, #8]
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 f805 	bl	800a2c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2ba:	69bb      	ldr	r3, [r7, #24]
	}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3720      	adds	r7, #32
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	69ba      	ldr	r2, [r7, #24]
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	e002      	b.n	800a2e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	69b8      	ldr	r0, [r7, #24]
 800a2f6:	f7ff fecb 	bl	800a090 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	78fa      	ldrb	r2, [r7, #3]
 800a2fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a302:	bf00      	nop
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b082      	sub	sp, #8
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00e      	beq.n	800a336 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a32a:	2300      	movs	r3, #0
 800a32c:	2200      	movs	r2, #0
 800a32e:	2100      	movs	r1, #0
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f90b 	bl	800a54c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b086      	sub	sp, #24
 800a342:	af00      	add	r7, sp, #0
 800a344:	4603      	mov	r3, r0
 800a346:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a348:	2301      	movs	r3, #1
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	2300      	movs	r3, #0
 800a34e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	461a      	mov	r2, r3
 800a354:	6939      	ldr	r1, [r7, #16]
 800a356:	6978      	ldr	r0, [r7, #20]
 800a358:	f7ff ff7a 	bl	800a250 <xQueueGenericCreate>
 800a35c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff ffd3 	bl	800a30a <prvInitialiseMutex>

		return xNewQueue;
 800a364:	68fb      	ldr	r3, [r7, #12]
	}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b088      	sub	sp, #32
 800a372:	af02      	add	r7, sp, #8
 800a374:	4603      	mov	r3, r0
 800a376:	6039      	str	r1, [r7, #0]
 800a378:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a37a:	2301      	movs	r3, #1
 800a37c:	617b      	str	r3, [r7, #20]
 800a37e:	2300      	movs	r3, #0
 800a380:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2200      	movs	r2, #0
 800a38a:	6939      	ldr	r1, [r7, #16]
 800a38c:	6978      	ldr	r0, [r7, #20]
 800a38e:	f7ff fee7 	bl	800a160 <xQueueGenericCreateStatic>
 800a392:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f7ff ffb8 	bl	800a30a <prvInitialiseMutex>

		return xNewQueue;
 800a39a:	68fb      	ldr	r3, [r7, #12]
	}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a3a4:	b590      	push	{r4, r7, lr}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	60fb      	str	r3, [r7, #12]
}
 800a3c8:	bf00      	nop
 800a3ca:	e7fe      	b.n	800a3ca <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	689c      	ldr	r4, [r3, #8]
 800a3d0:	f001 fd7c 	bl	800becc <xTaskGetCurrentTaskHandle>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	429c      	cmp	r4, r3
 800a3d8:	d111      	bne.n	800a3fe <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	1e5a      	subs	r2, r3, #1
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d105      	bne.n	800a3f8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	6938      	ldr	r0, [r7, #16]
 800a3f4:	f000 f8aa 	bl	800a54c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	e001      	b.n	800a402 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a402:	697b      	ldr	r3, [r7, #20]
	}
 800a404:	4618      	mov	r0, r3
 800a406:	371c      	adds	r7, #28
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd90      	pop	{r4, r7, pc}

0800a40c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a40c:	b590      	push	{r4, r7, lr}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10a      	bne.n	800a436 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	60fb      	str	r3, [r7, #12]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	689c      	ldr	r4, [r3, #8]
 800a43a:	f001 fd47 	bl	800becc <xTaskGetCurrentTaskHandle>
 800a43e:	4603      	mov	r3, r0
 800a440:	429c      	cmp	r4, r3
 800a442:	d107      	bne.n	800a454 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a44e:	2301      	movs	r3, #1
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	e00c      	b.n	800a46e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6938      	ldr	r0, [r7, #16]
 800a458:	f000 fb7e 	bl	800ab58 <xQueueSemaphoreTake>
 800a45c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d004      	beq.n	800a46e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a46e:	697b      	ldr	r3, [r7, #20]
	}
 800a470:	4618      	mov	r0, r3
 800a472:	371c      	adds	r7, #28
 800a474:	46bd      	mov	sp, r7
 800a476:	bd90      	pop	{r4, r7, pc}

0800a478 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08a      	sub	sp, #40	; 0x28
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10a      	bne.n	800a4a0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	61bb      	str	r3, [r7, #24]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d90a      	bls.n	800a4be <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	617b      	str	r3, [r7, #20]
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a4be:	2302      	movs	r3, #2
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f7ff fe49 	bl	800a160 <xQueueGenericCreateStatic>
 800a4ce:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d002      	beq.n	800a4dc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
	}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3720      	adds	r7, #32
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b086      	sub	sp, #24
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	613b      	str	r3, [r7, #16]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	429a      	cmp	r2, r3
 800a512:	d90a      	bls.n	800a52a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	60fb      	str	r3, [r7, #12]
}
 800a526:	bf00      	nop
 800a528:	e7fe      	b.n	800a528 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a52a:	2202      	movs	r2, #2
 800a52c:	2100      	movs	r1, #0
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff fe8e 	bl	800a250 <xQueueGenericCreate>
 800a534:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a542:	697b      	ldr	r3, [r7, #20]
	}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08e      	sub	sp, #56	; 0x38
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10a      	bne.n	800a57e <xQueueGenericSend+0x32>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a57a:	bf00      	nop
 800a57c:	e7fe      	b.n	800a57c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d103      	bne.n	800a58c <xQueueGenericSend+0x40>
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <xQueueGenericSend+0x44>
 800a58c:	2301      	movs	r3, #1
 800a58e:	e000      	b.n	800a592 <xQueueGenericSend+0x46>
 800a590:	2300      	movs	r3, #0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10a      	bne.n	800a5ac <xQueueGenericSend+0x60>
	__asm volatile
 800a596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5a8:	bf00      	nop
 800a5aa:	e7fe      	b.n	800a5aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d103      	bne.n	800a5ba <xQueueGenericSend+0x6e>
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d101      	bne.n	800a5be <xQueueGenericSend+0x72>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e000      	b.n	800a5c0 <xQueueGenericSend+0x74>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10a      	bne.n	800a5da <xQueueGenericSend+0x8e>
	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	623b      	str	r3, [r7, #32]
}
 800a5d6:	bf00      	nop
 800a5d8:	e7fe      	b.n	800a5d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5da:	f001 fc87 	bl	800beec <xTaskGetSchedulerState>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d102      	bne.n	800a5ea <xQueueGenericSend+0x9e>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <xQueueGenericSend+0xa2>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <xQueueGenericSend+0xa4>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10a      	bne.n	800a60a <xQueueGenericSend+0xbe>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	61fb      	str	r3, [r7, #28]
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a60a:	f002 facb 	bl	800cba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a616:	429a      	cmp	r2, r3
 800a618:	d302      	bcc.n	800a620 <xQueueGenericSend+0xd4>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d129      	bne.n	800a674 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	68b9      	ldr	r1, [r7, #8]
 800a624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a626:	f000 fc5e 	bl	800aee6 <prvCopyDataToQueue>
 800a62a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	d010      	beq.n	800a656 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	3324      	adds	r3, #36	; 0x24
 800a638:	4618      	mov	r0, r3
 800a63a:	f001 fa85 	bl	800bb48 <xTaskRemoveFromEventList>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d013      	beq.n	800a66c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a644:	4b3f      	ldr	r3, [pc, #252]	; (800a744 <xQueueGenericSend+0x1f8>)
 800a646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a64a:	601a      	str	r2, [r3, #0]
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	e00a      	b.n	800a66c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d007      	beq.n	800a66c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a65c:	4b39      	ldr	r3, [pc, #228]	; (800a744 <xQueueGenericSend+0x1f8>)
 800a65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a66c:	f002 faca 	bl	800cc04 <vPortExitCritical>
				return pdPASS;
 800a670:	2301      	movs	r3, #1
 800a672:	e063      	b.n	800a73c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d103      	bne.n	800a682 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a67a:	f002 fac3 	bl	800cc04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a67e:	2300      	movs	r3, #0
 800a680:	e05c      	b.n	800a73c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a684:	2b00      	cmp	r3, #0
 800a686:	d106      	bne.n	800a696 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a688:	f107 0314 	add.w	r3, r7, #20
 800a68c:	4618      	mov	r0, r3
 800a68e:	f001 fabf 	bl	800bc10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a692:	2301      	movs	r3, #1
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a696:	f002 fab5 	bl	800cc04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a69a:	f001 f819 	bl	800b6d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a69e:	f002 fa81 	bl	800cba4 <vPortEnterCritical>
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6a8:	b25b      	sxtb	r3, r3
 800a6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ae:	d103      	bne.n	800a6b8 <xQueueGenericSend+0x16c>
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6be:	b25b      	sxtb	r3, r3
 800a6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c4:	d103      	bne.n	800a6ce <xQueueGenericSend+0x182>
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ce:	f002 fa99 	bl	800cc04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6d2:	1d3a      	adds	r2, r7, #4
 800a6d4:	f107 0314 	add.w	r3, r7, #20
 800a6d8:	4611      	mov	r1, r2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 faae 	bl	800bc3c <xTaskCheckForTimeOut>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d124      	bne.n	800a730 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a6e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6e8:	f000 fcf5 	bl	800b0d6 <prvIsQueueFull>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d018      	beq.n	800a724 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f001 f9d4 	bl	800baa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a702:	f000 fc80 	bl	800b006 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a706:	f000 fff1 	bl	800b6ec <xTaskResumeAll>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f47f af7c 	bne.w	800a60a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a712:	4b0c      	ldr	r3, [pc, #48]	; (800a744 <xQueueGenericSend+0x1f8>)
 800a714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	e772      	b.n	800a60a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a726:	f000 fc6e 	bl	800b006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a72a:	f000 ffdf 	bl	800b6ec <xTaskResumeAll>
 800a72e:	e76c      	b.n	800a60a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a732:	f000 fc68 	bl	800b006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a736:	f000 ffd9 	bl	800b6ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a73a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3738      	adds	r7, #56	; 0x38
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	e000ed04 	.word	0xe000ed04

0800a748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b090      	sub	sp, #64	; 0x40
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
 800a754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10a      	bne.n	800a776 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a772:	bf00      	nop
 800a774:	e7fe      	b.n	800a774 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d103      	bne.n	800a784 <xQueueGenericSendFromISR+0x3c>
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <xQueueGenericSendFromISR+0x40>
 800a784:	2301      	movs	r3, #1
 800a786:	e000      	b.n	800a78a <xQueueGenericSendFromISR+0x42>
 800a788:	2300      	movs	r3, #0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10a      	bne.n	800a7a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7a0:	bf00      	nop
 800a7a2:	e7fe      	b.n	800a7a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d103      	bne.n	800a7b2 <xQueueGenericSendFromISR+0x6a>
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d101      	bne.n	800a7b6 <xQueueGenericSendFromISR+0x6e>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e000      	b.n	800a7b8 <xQueueGenericSendFromISR+0x70>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10a      	bne.n	800a7d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	623b      	str	r3, [r7, #32]
}
 800a7ce:	bf00      	nop
 800a7d0:	e7fe      	b.n	800a7d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7d2:	f002 fac9 	bl	800cd68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a7d6:	f3ef 8211 	mrs	r2, BASEPRI
 800a7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7de:	f383 8811 	msr	BASEPRI, r3
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	61fa      	str	r2, [r7, #28]
 800a7ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a7ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d302      	bcc.n	800a804 <xQueueGenericSendFromISR+0xbc>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b02      	cmp	r3, #2
 800a802:	d12f      	bne.n	800a864 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a80a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a812:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a81a:	f000 fb64 	bl	800aee6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a81e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a826:	d112      	bne.n	800a84e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d016      	beq.n	800a85e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	3324      	adds	r3, #36	; 0x24
 800a834:	4618      	mov	r0, r3
 800a836:	f001 f987 	bl	800bb48 <xTaskRemoveFromEventList>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00e      	beq.n	800a85e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	e007      	b.n	800a85e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a84e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a852:	3301      	adds	r3, #1
 800a854:	b2db      	uxtb	r3, r3
 800a856:	b25a      	sxtb	r2, r3
 800a858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a85e:	2301      	movs	r3, #1
 800a860:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a862:	e001      	b.n	800a868 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a864:	2300      	movs	r3, #0
 800a866:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a872:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a876:	4618      	mov	r0, r3
 800a878:	3740      	adds	r7, #64	; 0x40
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b08e      	sub	sp, #56	; 0x38
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10a      	bne.n	800a8a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	623b      	str	r3, [r7, #32]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00a      	beq.n	800a8c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	61fb      	str	r3, [r7, #28]
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d103      	bne.n	800a8d6 <xQueueGiveFromISR+0x58>
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <xQueueGiveFromISR+0x5c>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e000      	b.n	800a8dc <xQueueGiveFromISR+0x5e>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	61bb      	str	r3, [r7, #24]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8f6:	f002 fa37 	bl	800cd68 <vPortValidateInterruptPriority>
	__asm volatile
 800a8fa:	f3ef 8211 	mrs	r2, BASEPRI
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	617a      	str	r2, [r7, #20]
 800a910:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a912:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a914:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a922:	429a      	cmp	r2, r3
 800a924:	d22b      	bcs.n	800a97e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a92c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a938:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a940:	d112      	bne.n	800a968 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	2b00      	cmp	r3, #0
 800a948:	d016      	beq.n	800a978 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	3324      	adds	r3, #36	; 0x24
 800a94e:	4618      	mov	r0, r3
 800a950:	f001 f8fa 	bl	800bb48 <xTaskRemoveFromEventList>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00e      	beq.n	800a978 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00b      	beq.n	800a978 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	2201      	movs	r2, #1
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	e007      	b.n	800a978 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a96c:	3301      	adds	r3, #1
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	b25a      	sxtb	r2, r3
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a978:	2301      	movs	r3, #1
 800a97a:	637b      	str	r3, [r7, #52]	; 0x34
 800a97c:	e001      	b.n	800a982 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	637b      	str	r3, [r7, #52]	; 0x34
 800a982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a984:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f383 8811 	msr	BASEPRI, r3
}
 800a98c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a990:	4618      	mov	r0, r3
 800a992:	3738      	adds	r7, #56	; 0x38
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08c      	sub	sp, #48	; 0x30
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10a      	bne.n	800a9c8 <xQueueReceive+0x30>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	623b      	str	r3, [r7, #32]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d103      	bne.n	800a9d6 <xQueueReceive+0x3e>
 800a9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <xQueueReceive+0x42>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e000      	b.n	800a9dc <xQueueReceive+0x44>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10a      	bne.n	800a9f6 <xQueueReceive+0x5e>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	61fb      	str	r3, [r7, #28]
}
 800a9f2:	bf00      	nop
 800a9f4:	e7fe      	b.n	800a9f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9f6:	f001 fa79 	bl	800beec <xTaskGetSchedulerState>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <xQueueReceive+0x6e>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <xQueueReceive+0x72>
 800aa06:	2301      	movs	r3, #1
 800aa08:	e000      	b.n	800aa0c <xQueueReceive+0x74>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <xQueueReceive+0x8e>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	61bb      	str	r3, [r7, #24]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa26:	f002 f8bd 	bl	800cba4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d01f      	beq.n	800aa76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa36:	68b9      	ldr	r1, [r7, #8]
 800aa38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3a:	f000 fabe 	bl	800afba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	1e5a      	subs	r2, r3, #1
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00f      	beq.n	800aa6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	3310      	adds	r3, #16
 800aa52:	4618      	mov	r0, r3
 800aa54:	f001 f878 	bl	800bb48 <xTaskRemoveFromEventList>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d007      	beq.n	800aa6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa5e:	4b3d      	ldr	r3, [pc, #244]	; (800ab54 <xQueueReceive+0x1bc>)
 800aa60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa6e:	f002 f8c9 	bl	800cc04 <vPortExitCritical>
				return pdPASS;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e069      	b.n	800ab4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d103      	bne.n	800aa84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa7c:	f002 f8c2 	bl	800cc04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa80:	2300      	movs	r3, #0
 800aa82:	e062      	b.n	800ab4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa8a:	f107 0310 	add.w	r3, r7, #16
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f001 f8be 	bl	800bc10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa94:	2301      	movs	r3, #1
 800aa96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa98:	f002 f8b4 	bl	800cc04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa9c:	f000 fe18 	bl	800b6d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaa0:	f002 f880 	bl	800cba4 <vPortEnterCritical>
 800aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab0:	d103      	bne.n	800aaba <xQueueReceive+0x122>
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aac0:	b25b      	sxtb	r3, r3
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac6:	d103      	bne.n	800aad0 <xQueueReceive+0x138>
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aad0:	f002 f898 	bl	800cc04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aad4:	1d3a      	adds	r2, r7, #4
 800aad6:	f107 0310 	add.w	r3, r7, #16
 800aada:	4611      	mov	r1, r2
 800aadc:	4618      	mov	r0, r3
 800aade:	f001 f8ad 	bl	800bc3c <xTaskCheckForTimeOut>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d123      	bne.n	800ab30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaea:	f000 fade 	bl	800b0aa <prvIsQueueEmpty>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d017      	beq.n	800ab24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	3324      	adds	r3, #36	; 0x24
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	4611      	mov	r1, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 ffd3 	bl	800baa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab04:	f000 fa7f 	bl	800b006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab08:	f000 fdf0 	bl	800b6ec <xTaskResumeAll>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d189      	bne.n	800aa26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab12:	4b10      	ldr	r3, [pc, #64]	; (800ab54 <xQueueReceive+0x1bc>)
 800ab14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	e780      	b.n	800aa26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab26:	f000 fa6e 	bl	800b006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab2a:	f000 fddf 	bl	800b6ec <xTaskResumeAll>
 800ab2e:	e77a      	b.n	800aa26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab32:	f000 fa68 	bl	800b006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab36:	f000 fdd9 	bl	800b6ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab3c:	f000 fab5 	bl	800b0aa <prvIsQueueEmpty>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f43f af6f 	beq.w	800aa26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3730      	adds	r7, #48	; 0x30
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	e000ed04 	.word	0xe000ed04

0800ab58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08e      	sub	sp, #56	; 0x38
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10a      	bne.n	800ab8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	623b      	str	r3, [r7, #32]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	61fb      	str	r3, [r7, #28]
}
 800aba4:	bf00      	nop
 800aba6:	e7fe      	b.n	800aba6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aba8:	f001 f9a0 	bl	800beec <xTaskGetSchedulerState>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <xQueueSemaphoreTake+0x60>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <xQueueSemaphoreTake+0x64>
 800abb8:	2301      	movs	r3, #1
 800abba:	e000      	b.n	800abbe <xQueueSemaphoreTake+0x66>
 800abbc:	2300      	movs	r3, #0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10a      	bne.n	800abd8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	61bb      	str	r3, [r7, #24]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abd8:	f001 ffe4 	bl	800cba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d024      	beq.n	800ac32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	1e5a      	subs	r2, r3, #1
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d104      	bne.n	800ac02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800abf8:	f001 faee 	bl	800c1d8 <pvTaskIncrementMutexHeldCount>
 800abfc:	4602      	mov	r2, r0
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00f      	beq.n	800ac2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0c:	3310      	adds	r3, #16
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 ff9a 	bl	800bb48 <xTaskRemoveFromEventList>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d007      	beq.n	800ac2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac1a:	4b54      	ldr	r3, [pc, #336]	; (800ad6c <xQueueSemaphoreTake+0x214>)
 800ac1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac2a:	f001 ffeb 	bl	800cc04 <vPortExitCritical>
				return pdPASS;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e097      	b.n	800ad62 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d111      	bne.n	800ac5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	617b      	str	r3, [r7, #20]
}
 800ac50:	bf00      	nop
 800ac52:	e7fe      	b.n	800ac52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac54:	f001 ffd6 	bl	800cc04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	e082      	b.n	800ad62 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d106      	bne.n	800ac70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac62:	f107 030c 	add.w	r3, r7, #12
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 ffd2 	bl	800bc10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac70:	f001 ffc8 	bl	800cc04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac74:	f000 fd2c 	bl	800b6d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac78:	f001 ff94 	bl	800cba4 <vPortEnterCritical>
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac82:	b25b      	sxtb	r3, r3
 800ac84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac88:	d103      	bne.n	800ac92 <xQueueSemaphoreTake+0x13a>
 800ac8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac98:	b25b      	sxtb	r3, r3
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9e:	d103      	bne.n	800aca8 <xQueueSemaphoreTake+0x150>
 800aca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aca8:	f001 ffac 	bl	800cc04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acac:	463a      	mov	r2, r7
 800acae:	f107 030c 	add.w	r3, r7, #12
 800acb2:	4611      	mov	r1, r2
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 ffc1 	bl	800bc3c <xTaskCheckForTimeOut>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d132      	bne.n	800ad26 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acc2:	f000 f9f2 	bl	800b0aa <prvIsQueueEmpty>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d026      	beq.n	800ad1a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800accc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d109      	bne.n	800ace8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800acd4:	f001 ff66 	bl	800cba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	4618      	mov	r0, r3
 800acde:	f001 f923 	bl	800bf28 <xTaskPriorityInherit>
 800ace2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ace4:	f001 ff8e 	bl	800cc04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	3324      	adds	r3, #36	; 0x24
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fed9 	bl	800baa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acf8:	f000 f985 	bl	800b006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acfc:	f000 fcf6 	bl	800b6ec <xTaskResumeAll>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f47f af68 	bne.w	800abd8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ad08:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <xQueueSemaphoreTake+0x214>)
 800ad0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	e75e      	b.n	800abd8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad1c:	f000 f973 	bl	800b006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad20:	f000 fce4 	bl	800b6ec <xTaskResumeAll>
 800ad24:	e758      	b.n	800abd8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad28:	f000 f96d 	bl	800b006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad2c:	f000 fcde 	bl	800b6ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad32:	f000 f9ba 	bl	800b0aa <prvIsQueueEmpty>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f43f af4d 	beq.w	800abd8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00d      	beq.n	800ad60 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ad44:	f001 ff2e 	bl	800cba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad4a:	f000 f8b4 	bl	800aeb6 <prvGetDisinheritPriorityAfterTimeout>
 800ad4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad56:	4618      	mov	r0, r3
 800ad58:	f001 f9bc 	bl	800c0d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad5c:	f001 ff52 	bl	800cc04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3738      	adds	r7, #56	; 0x38
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	e000ed04 	.word	0xe000ed04

0800ad70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08e      	sub	sp, #56	; 0x38
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10a      	bne.n	800ad9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	623b      	str	r3, [r7, #32]
}
 800ad98:	bf00      	nop
 800ad9a:	e7fe      	b.n	800ad9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d103      	bne.n	800adaa <xQueueReceiveFromISR+0x3a>
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <xQueueReceiveFromISR+0x3e>
 800adaa:	2301      	movs	r3, #1
 800adac:	e000      	b.n	800adb0 <xQueueReceiveFromISR+0x40>
 800adae:	2300      	movs	r3, #0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10a      	bne.n	800adca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	61fb      	str	r3, [r7, #28]
}
 800adc6:	bf00      	nop
 800adc8:	e7fe      	b.n	800adc8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adca:	f001 ffcd 	bl	800cd68 <vPortValidateInterruptPriority>
	__asm volatile
 800adce:	f3ef 8211 	mrs	r2, BASEPRI
 800add2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	61ba      	str	r2, [r7, #24]
 800ade4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ade6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ade8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d02f      	beq.n	800ae56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae00:	68b9      	ldr	r1, [r7, #8]
 800ae02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae04:	f000 f8d9 	bl	800afba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	1e5a      	subs	r2, r3, #1
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ae10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae18:	d112      	bne.n	800ae40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d016      	beq.n	800ae50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	3310      	adds	r3, #16
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 fe8e 	bl	800bb48 <xTaskRemoveFromEventList>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00e      	beq.n	800ae50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00b      	beq.n	800ae50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	e007      	b.n	800ae50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae44:	3301      	adds	r3, #1
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	b25a      	sxtb	r2, r3
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ae50:	2301      	movs	r3, #1
 800ae52:	637b      	str	r3, [r7, #52]	; 0x34
 800ae54:	e001      	b.n	800ae5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	637b      	str	r3, [r7, #52]	; 0x34
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	f383 8811 	msr	BASEPRI, r3
}
 800ae64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3738      	adds	r7, #56	; 0x38
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10a      	bne.n	800ae98 <vQueueDelete+0x28>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	60bb      	str	r3, [r7, #8]
}
 800ae94:	bf00      	nop
 800ae96:	e7fe      	b.n	800ae96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 f95f 	bl	800b15c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d102      	bne.n	800aeae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f002 f869 	bl	800cf80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aeae:	bf00      	nop
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b085      	sub	sp, #20
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d006      	beq.n	800aed4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	e001      	b.n	800aed8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aed4:	2300      	movs	r3, #0
 800aed6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aed8:	68fb      	ldr	r3, [r7, #12]
	}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3714      	adds	r7, #20
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b086      	sub	sp, #24
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	60f8      	str	r0, [r7, #12]
 800aeee:	60b9      	str	r1, [r7, #8]
 800aef0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aef2:	2300      	movs	r3, #0
 800aef4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10d      	bne.n	800af20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d14d      	bne.n	800afa8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	4618      	mov	r0, r3
 800af12:	f001 f871 	bl	800bff8 <xTaskPriorityDisinherit>
 800af16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	609a      	str	r2, [r3, #8]
 800af1e:	e043      	b.n	800afa8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d119      	bne.n	800af5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6858      	ldr	r0, [r3, #4]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2e:	461a      	mov	r2, r3
 800af30:	68b9      	ldr	r1, [r7, #8]
 800af32:	f00f ff28 	bl	801ad86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	685a      	ldr	r2, [r3, #4]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3e:	441a      	add	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d32b      	bcc.n	800afa8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	605a      	str	r2, [r3, #4]
 800af58:	e026      	b.n	800afa8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	68d8      	ldr	r0, [r3, #12]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af62:	461a      	mov	r2, r3
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	f00f ff0e 	bl	801ad86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	68da      	ldr	r2, [r3, #12]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af72:	425b      	negs	r3, r3
 800af74:	441a      	add	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	429a      	cmp	r2, r3
 800af84:	d207      	bcs.n	800af96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	689a      	ldr	r2, [r3, #8]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	425b      	negs	r3, r3
 800af90:	441a      	add	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d105      	bne.n	800afa8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d002      	beq.n	800afa8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afb0:	697b      	ldr	r3, [r7, #20]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3718      	adds	r7, #24
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d018      	beq.n	800affe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	68da      	ldr	r2, [r3, #12]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd4:	441a      	add	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68da      	ldr	r2, [r3, #12]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d303      	bcc.n	800afee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68d9      	ldr	r1, [r3, #12]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff6:	461a      	mov	r2, r3
 800aff8:	6838      	ldr	r0, [r7, #0]
 800affa:	f00f fec4 	bl	801ad86 <memcpy>
	}
}
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b00e:	f001 fdc9 	bl	800cba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b018:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b01a:	e011      	b.n	800b040 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	2b00      	cmp	r3, #0
 800b022:	d012      	beq.n	800b04a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3324      	adds	r3, #36	; 0x24
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fd8d 	bl	800bb48 <xTaskRemoveFromEventList>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b034:	f000 fe64 	bl	800bd00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b044:	2b00      	cmp	r3, #0
 800b046:	dce9      	bgt.n	800b01c <prvUnlockQueue+0x16>
 800b048:	e000      	b.n	800b04c <prvUnlockQueue+0x46>
					break;
 800b04a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	22ff      	movs	r2, #255	; 0xff
 800b050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b054:	f001 fdd6 	bl	800cc04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b058:	f001 fda4 	bl	800cba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b062:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b064:	e011      	b.n	800b08a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d012      	beq.n	800b094 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3310      	adds	r3, #16
 800b072:	4618      	mov	r0, r3
 800b074:	f000 fd68 	bl	800bb48 <xTaskRemoveFromEventList>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b07e:	f000 fe3f 	bl	800bd00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b082:	7bbb      	ldrb	r3, [r7, #14]
 800b084:	3b01      	subs	r3, #1
 800b086:	b2db      	uxtb	r3, r3
 800b088:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b08a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dce9      	bgt.n	800b066 <prvUnlockQueue+0x60>
 800b092:	e000      	b.n	800b096 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b094:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	22ff      	movs	r2, #255	; 0xff
 800b09a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b09e:	f001 fdb1 	bl	800cc04 <vPortExitCritical>
}
 800b0a2:	bf00      	nop
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0b2:	f001 fd77 	bl	800cba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d102      	bne.n	800b0c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	e001      	b.n	800b0c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0c8:	f001 fd9c 	bl	800cc04 <vPortExitCritical>

	return xReturn;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0de:	f001 fd61 	bl	800cba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d102      	bne.n	800b0f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]
 800b0f2:	e001      	b.n	800b0f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0f8:	f001 fd84 	bl	800cc04 <vPortExitCritical>

	return xReturn;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
	...

0800b108 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	e014      	b.n	800b142 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b118:	4a0f      	ldr	r2, [pc, #60]	; (800b158 <vQueueAddToRegistry+0x50>)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10b      	bne.n	800b13c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b124:	490c      	ldr	r1, [pc, #48]	; (800b158 <vQueueAddToRegistry+0x50>)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b12e:	4a0a      	ldr	r2, [pc, #40]	; (800b158 <vQueueAddToRegistry+0x50>)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	4413      	add	r3, r2
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b13a:	e006      	b.n	800b14a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	3301      	adds	r3, #1
 800b140:	60fb      	str	r3, [r7, #12]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2b07      	cmp	r3, #7
 800b146:	d9e7      	bls.n	800b118 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b148:	bf00      	nop
 800b14a:	bf00      	nop
 800b14c:	3714      	adds	r7, #20
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	20006470 	.word	0x20006470

0800b15c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b164:	2300      	movs	r3, #0
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	e016      	b.n	800b198 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b16a:	4a10      	ldr	r2, [pc, #64]	; (800b1ac <vQueueUnregisterQueue+0x50>)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	4413      	add	r3, r2
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	429a      	cmp	r2, r3
 800b178:	d10b      	bne.n	800b192 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b17a:	4a0c      	ldr	r2, [pc, #48]	; (800b1ac <vQueueUnregisterQueue+0x50>)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2100      	movs	r1, #0
 800b180:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b184:	4a09      	ldr	r2, [pc, #36]	; (800b1ac <vQueueUnregisterQueue+0x50>)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	4413      	add	r3, r2
 800b18c:	2200      	movs	r2, #0
 800b18e:	605a      	str	r2, [r3, #4]
				break;
 800b190:	e006      	b.n	800b1a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b07      	cmp	r3, #7
 800b19c:	d9e5      	bls.n	800b16a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b19e:	bf00      	nop
 800b1a0:	bf00      	nop
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	20006470 	.word	0x20006470

0800b1b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b1c0:	f001 fcf0 	bl	800cba4 <vPortEnterCritical>
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1ca:	b25b      	sxtb	r3, r3
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d0:	d103      	bne.n	800b1da <vQueueWaitForMessageRestricted+0x2a>
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1e0:	b25b      	sxtb	r3, r3
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e6:	d103      	bne.n	800b1f0 <vQueueWaitForMessageRestricted+0x40>
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1f0:	f001 fd08 	bl	800cc04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d106      	bne.n	800b20a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	3324      	adds	r3, #36	; 0x24
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	68b9      	ldr	r1, [r7, #8]
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fc73 	bl	800baf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b20a:	6978      	ldr	r0, [r7, #20]
 800b20c:	f7ff fefb 	bl	800b006 <prvUnlockQueue>
	}
 800b210:	bf00      	nop
 800b212:	3718      	adds	r7, #24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08e      	sub	sp, #56	; 0x38
 800b21c:	af04      	add	r7, sp, #16
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10a      	bne.n	800b242 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	623b      	str	r3, [r7, #32]
}
 800b23e:	bf00      	nop
 800b240:	e7fe      	b.n	800b240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xTaskCreateStatic+0x46>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	61fb      	str	r3, [r7, #28]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b25e:	23a8      	movs	r3, #168	; 0xa8
 800b260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2ba8      	cmp	r3, #168	; 0xa8
 800b266:	d00a      	beq.n	800b27e <xTaskCreateStatic+0x66>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	61bb      	str	r3, [r7, #24]
}
 800b27a:	bf00      	nop
 800b27c:	e7fe      	b.n	800b27c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b27e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	2b00      	cmp	r3, #0
 800b284:	d01e      	beq.n	800b2c4 <xTaskCreateStatic+0xac>
 800b286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d01b      	beq.n	800b2c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b294:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	2202      	movs	r2, #2
 800b29a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b29e:	2300      	movs	r3, #0
 800b2a0:	9303      	str	r3, [sp, #12]
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	9302      	str	r3, [sp, #8]
 800b2a6:	f107 0314 	add.w	r3, r7, #20
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	68b9      	ldr	r1, [r7, #8]
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 f850 	bl	800b35c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2be:	f000 f8f3 	bl	800b4a8 <prvAddNewTaskToReadyList>
 800b2c2:	e001      	b.n	800b2c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b2c8:	697b      	ldr	r3, [r7, #20]
	}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3728      	adds	r7, #40	; 0x28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b08c      	sub	sp, #48	; 0x30
 800b2d6:	af04      	add	r7, sp, #16
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	60b9      	str	r1, [r7, #8]
 800b2dc:	603b      	str	r3, [r7, #0]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b2e2:	88fb      	ldrh	r3, [r7, #6]
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f001 fd7e 	bl	800cde8 <pvPortMalloc>
 800b2ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00e      	beq.n	800b312 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b2f4:	20a8      	movs	r0, #168	; 0xa8
 800b2f6:	f001 fd77 	bl	800cde8 <pvPortMalloc>
 800b2fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	631a      	str	r2, [r3, #48]	; 0x30
 800b308:	e005      	b.n	800b316 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b30a:	6978      	ldr	r0, [r7, #20]
 800b30c:	f001 fe38 	bl	800cf80 <vPortFree>
 800b310:	e001      	b.n	800b316 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d017      	beq.n	800b34c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b324:	88fa      	ldrh	r2, [r7, #6]
 800b326:	2300      	movs	r3, #0
 800b328:	9303      	str	r3, [sp, #12]
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	9302      	str	r3, [sp, #8]
 800b32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b330:	9301      	str	r3, [sp, #4]
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68b9      	ldr	r1, [r7, #8]
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f000 f80e 	bl	800b35c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b340:	69f8      	ldr	r0, [r7, #28]
 800b342:	f000 f8b1 	bl	800b4a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b346:	2301      	movs	r3, #1
 800b348:	61bb      	str	r3, [r7, #24]
 800b34a:	e002      	b.n	800b352 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295
 800b350:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b352:	69bb      	ldr	r3, [r7, #24]
	}
 800b354:	4618      	mov	r0, r3
 800b356:	3720      	adds	r7, #32
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
 800b368:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	461a      	mov	r2, r3
 800b374:	21a5      	movs	r1, #165	; 0xa5
 800b376:	f00f fc34 	bl	801abe2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b384:	3b01      	subs	r3, #1
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	4413      	add	r3, r2
 800b38a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	f023 0307 	bic.w	r3, r3, #7
 800b392:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00a      	beq.n	800b3b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	617b      	str	r3, [r7, #20]
}
 800b3b0:	bf00      	nop
 800b3b2:	e7fe      	b.n	800b3b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d01f      	beq.n	800b3fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	61fb      	str	r3, [r7, #28]
 800b3be:	e012      	b.n	800b3e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	7819      	ldrb	r1, [r3, #0]
 800b3c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	3334      	adds	r3, #52	; 0x34
 800b3d0:	460a      	mov	r2, r1
 800b3d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	4413      	add	r3, r2
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d006      	beq.n	800b3ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	61fb      	str	r3, [r7, #28]
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	2b0f      	cmp	r3, #15
 800b3ea:	d9e9      	bls.n	800b3c0 <prvInitialiseNewTask+0x64>
 800b3ec:	e000      	b.n	800b3f0 <prvInitialiseNewTask+0x94>
			{
				break;
 800b3ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3f8:	e003      	b.n	800b402 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b404:	2b37      	cmp	r3, #55	; 0x37
 800b406:	d901      	bls.n	800b40c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b408:	2337      	movs	r3, #55	; 0x37
 800b40a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b410:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b416:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	2200      	movs	r2, #0
 800b41c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b420:	3304      	adds	r3, #4
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe fda0 	bl	8009f68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42a:	3318      	adds	r3, #24
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fe fd9b 	bl	8009f68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b436:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b446:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44a:	2200      	movs	r2, #0
 800b44c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	2200      	movs	r2, #0
 800b454:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	3354      	adds	r3, #84	; 0x54
 800b45c:	224c      	movs	r2, #76	; 0x4c
 800b45e:	2100      	movs	r1, #0
 800b460:	4618      	mov	r0, r3
 800b462:	f00f fbbe 	bl	801abe2 <memset>
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	4a0c      	ldr	r2, [pc, #48]	; (800b49c <prvInitialiseNewTask+0x140>)
 800b46a:	659a      	str	r2, [r3, #88]	; 0x58
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	4a0c      	ldr	r2, [pc, #48]	; (800b4a0 <prvInitialiseNewTask+0x144>)
 800b470:	65da      	str	r2, [r3, #92]	; 0x5c
 800b472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b474:	4a0b      	ldr	r2, [pc, #44]	; (800b4a4 <prvInitialiseNewTask+0x148>)
 800b476:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	68f9      	ldr	r1, [r7, #12]
 800b47c:	69b8      	ldr	r0, [r7, #24]
 800b47e:	f001 fa61 	bl	800c944 <pxPortInitialiseStack>
 800b482:	4602      	mov	r2, r0
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b492:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b494:	bf00      	nop
 800b496:	3720      	adds	r7, #32
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	200128d4 	.word	0x200128d4
 800b4a0:	2001293c 	.word	0x2001293c
 800b4a4:	200129a4 	.word	0x200129a4

0800b4a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4b0:	f001 fb78 	bl	800cba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4b4:	4b2d      	ldr	r3, [pc, #180]	; (800b56c <prvAddNewTaskToReadyList+0xc4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	4a2c      	ldr	r2, [pc, #176]	; (800b56c <prvAddNewTaskToReadyList+0xc4>)
 800b4bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4be:	4b2c      	ldr	r3, [pc, #176]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d109      	bne.n	800b4da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4c6:	4a2a      	ldr	r2, [pc, #168]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4cc:	4b27      	ldr	r3, [pc, #156]	; (800b56c <prvAddNewTaskToReadyList+0xc4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d110      	bne.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4d4:	f000 fc38 	bl	800bd48 <prvInitialiseTaskLists>
 800b4d8:	e00d      	b.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4da:	4b26      	ldr	r3, [pc, #152]	; (800b574 <prvAddNewTaskToReadyList+0xcc>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d109      	bne.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b4e2:	4b23      	ldr	r3, [pc, #140]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d802      	bhi.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b4f0:	4a1f      	ldr	r2, [pc, #124]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b4f6:	4b20      	ldr	r3, [pc, #128]	; (800b578 <prvAddNewTaskToReadyList+0xd0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	4a1e      	ldr	r2, [pc, #120]	; (800b578 <prvAddNewTaskToReadyList+0xd0>)
 800b4fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b500:	4b1d      	ldr	r3, [pc, #116]	; (800b578 <prvAddNewTaskToReadyList+0xd0>)
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50c:	4b1b      	ldr	r3, [pc, #108]	; (800b57c <prvAddNewTaskToReadyList+0xd4>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	429a      	cmp	r2, r3
 800b512:	d903      	bls.n	800b51c <prvAddNewTaskToReadyList+0x74>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4a18      	ldr	r2, [pc, #96]	; (800b57c <prvAddNewTaskToReadyList+0xd4>)
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b520:	4613      	mov	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4a15      	ldr	r2, [pc, #84]	; (800b580 <prvAddNewTaskToReadyList+0xd8>)
 800b52a:	441a      	add	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3304      	adds	r3, #4
 800b530:	4619      	mov	r1, r3
 800b532:	4610      	mov	r0, r2
 800b534:	f7fe fd25 	bl	8009f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b538:	f001 fb64 	bl	800cc04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b53c:	4b0d      	ldr	r3, [pc, #52]	; (800b574 <prvAddNewTaskToReadyList+0xcc>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00e      	beq.n	800b562 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b544:	4b0a      	ldr	r3, [pc, #40]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54e:	429a      	cmp	r2, r3
 800b550:	d207      	bcs.n	800b562 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b552:	4b0c      	ldr	r3, [pc, #48]	; (800b584 <prvAddNewTaskToReadyList+0xdc>)
 800b554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b562:	bf00      	nop
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20006984 	.word	0x20006984
 800b570:	200064b0 	.word	0x200064b0
 800b574:	20006990 	.word	0x20006990
 800b578:	200069a0 	.word	0x200069a0
 800b57c:	2000698c 	.word	0x2000698c
 800b580:	200064b4 	.word	0x200064b4
 800b584:	e000ed04 	.word	0xe000ed04

0800b588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d017      	beq.n	800b5ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b59a:	4b13      	ldr	r3, [pc, #76]	; (800b5e8 <vTaskDelay+0x60>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <vTaskDelay+0x30>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	60bb      	str	r3, [r7, #8]
}
 800b5b4:	bf00      	nop
 800b5b6:	e7fe      	b.n	800b5b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5b8:	f000 f88a 	bl	800b6d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5bc:	2100      	movs	r1, #0
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fe1e 	bl	800c200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5c4:	f000 f892 	bl	800b6ec <xTaskResumeAll>
 800b5c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d107      	bne.n	800b5e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5d0:	4b06      	ldr	r3, [pc, #24]	; (800b5ec <vTaskDelay+0x64>)
 800b5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5e0:	bf00      	nop
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	200069ac 	.word	0x200069ac
 800b5ec:	e000ed04 	.word	0xe000ed04

0800b5f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08a      	sub	sp, #40	; 0x28
 800b5f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5fe:	463a      	mov	r2, r7
 800b600:	1d39      	adds	r1, r7, #4
 800b602:	f107 0308 	add.w	r3, r7, #8
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fc5a 	bl	8009ec0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	9202      	str	r2, [sp, #8]
 800b614:	9301      	str	r3, [sp, #4]
 800b616:	2300      	movs	r3, #0
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	2300      	movs	r3, #0
 800b61c:	460a      	mov	r2, r1
 800b61e:	4924      	ldr	r1, [pc, #144]	; (800b6b0 <vTaskStartScheduler+0xc0>)
 800b620:	4824      	ldr	r0, [pc, #144]	; (800b6b4 <vTaskStartScheduler+0xc4>)
 800b622:	f7ff fdf9 	bl	800b218 <xTaskCreateStatic>
 800b626:	4603      	mov	r3, r0
 800b628:	4a23      	ldr	r2, [pc, #140]	; (800b6b8 <vTaskStartScheduler+0xc8>)
 800b62a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b62c:	4b22      	ldr	r3, [pc, #136]	; (800b6b8 <vTaskStartScheduler+0xc8>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b634:	2301      	movs	r3, #1
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	e001      	b.n	800b63e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b63a:	2300      	movs	r3, #0
 800b63c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d102      	bne.n	800b64a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b644:	f000 fe30 	bl	800c2a8 <xTimerCreateTimerTask>
 800b648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d11b      	bne.n	800b688 <vTaskStartScheduler+0x98>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	613b      	str	r3, [r7, #16]
}
 800b662:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b664:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <vTaskStartScheduler+0xcc>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	3354      	adds	r3, #84	; 0x54
 800b66a:	4a15      	ldr	r2, [pc, #84]	; (800b6c0 <vTaskStartScheduler+0xd0>)
 800b66c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b66e:	4b15      	ldr	r3, [pc, #84]	; (800b6c4 <vTaskStartScheduler+0xd4>)
 800b670:	f04f 32ff 	mov.w	r2, #4294967295
 800b674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b676:	4b14      	ldr	r3, [pc, #80]	; (800b6c8 <vTaskStartScheduler+0xd8>)
 800b678:	2201      	movs	r2, #1
 800b67a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b67c:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <vTaskStartScheduler+0xdc>)
 800b67e:	2200      	movs	r2, #0
 800b680:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b682:	f001 f9ed 	bl	800ca60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b686:	e00e      	b.n	800b6a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68e:	d10a      	bne.n	800b6a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	60fb      	str	r3, [r7, #12]
}
 800b6a2:	bf00      	nop
 800b6a4:	e7fe      	b.n	800b6a4 <vTaskStartScheduler+0xb4>
}
 800b6a6:	bf00      	nop
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	0801c3a4 	.word	0x0801c3a4
 800b6b4:	0800bd19 	.word	0x0800bd19
 800b6b8:	200069a8 	.word	0x200069a8
 800b6bc:	200064b0 	.word	0x200064b0
 800b6c0:	200000a4 	.word	0x200000a4
 800b6c4:	200069a4 	.word	0x200069a4
 800b6c8:	20006990 	.word	0x20006990
 800b6cc:	20006988 	.word	0x20006988

0800b6d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b6d4:	4b04      	ldr	r3, [pc, #16]	; (800b6e8 <vTaskSuspendAll+0x18>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	4a03      	ldr	r2, [pc, #12]	; (800b6e8 <vTaskSuspendAll+0x18>)
 800b6dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6de:	bf00      	nop
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	200069ac 	.word	0x200069ac

0800b6ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6fa:	4b42      	ldr	r3, [pc, #264]	; (800b804 <xTaskResumeAll+0x118>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10a      	bne.n	800b718 <xTaskResumeAll+0x2c>
	__asm volatile
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	603b      	str	r3, [r7, #0]
}
 800b714:	bf00      	nop
 800b716:	e7fe      	b.n	800b716 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b718:	f001 fa44 	bl	800cba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b71c:	4b39      	ldr	r3, [pc, #228]	; (800b804 <xTaskResumeAll+0x118>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3b01      	subs	r3, #1
 800b722:	4a38      	ldr	r2, [pc, #224]	; (800b804 <xTaskResumeAll+0x118>)
 800b724:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b726:	4b37      	ldr	r3, [pc, #220]	; (800b804 <xTaskResumeAll+0x118>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d162      	bne.n	800b7f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b72e:	4b36      	ldr	r3, [pc, #216]	; (800b808 <xTaskResumeAll+0x11c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d05e      	beq.n	800b7f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b736:	e02f      	b.n	800b798 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b738:	4b34      	ldr	r3, [pc, #208]	; (800b80c <xTaskResumeAll+0x120>)
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	3318      	adds	r3, #24
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe fc79 	bl	800a03c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe fc74 	bl	800a03c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b758:	4b2d      	ldr	r3, [pc, #180]	; (800b810 <xTaskResumeAll+0x124>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d903      	bls.n	800b768 <xTaskResumeAll+0x7c>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	4a2a      	ldr	r2, [pc, #168]	; (800b810 <xTaskResumeAll+0x124>)
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4a27      	ldr	r2, [pc, #156]	; (800b814 <xTaskResumeAll+0x128>)
 800b776:	441a      	add	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3304      	adds	r3, #4
 800b77c:	4619      	mov	r1, r3
 800b77e:	4610      	mov	r0, r2
 800b780:	f7fe fbff 	bl	8009f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b788:	4b23      	ldr	r3, [pc, #140]	; (800b818 <xTaskResumeAll+0x12c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78e:	429a      	cmp	r2, r3
 800b790:	d302      	bcc.n	800b798 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b792:	4b22      	ldr	r3, [pc, #136]	; (800b81c <xTaskResumeAll+0x130>)
 800b794:	2201      	movs	r2, #1
 800b796:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b798:	4b1c      	ldr	r3, [pc, #112]	; (800b80c <xTaskResumeAll+0x120>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1cb      	bne.n	800b738 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7a6:	f000 fb71 	bl	800be8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7aa:	4b1d      	ldr	r3, [pc, #116]	; (800b820 <xTaskResumeAll+0x134>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d010      	beq.n	800b7d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7b6:	f000 f859 	bl	800b86c <xTaskIncrementTick>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b7c0:	4b16      	ldr	r3, [pc, #88]	; (800b81c <xTaskResumeAll+0x130>)
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1f1      	bne.n	800b7b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b7d2:	4b13      	ldr	r3, [pc, #76]	; (800b820 <xTaskResumeAll+0x134>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7d8:	4b10      	ldr	r3, [pc, #64]	; (800b81c <xTaskResumeAll+0x130>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d009      	beq.n	800b7f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7e4:	4b0f      	ldr	r3, [pc, #60]	; (800b824 <xTaskResumeAll+0x138>)
 800b7e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7f4:	f001 fa06 	bl	800cc04 <vPortExitCritical>

	return xAlreadyYielded;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	200069ac 	.word	0x200069ac
 800b808:	20006984 	.word	0x20006984
 800b80c:	20006944 	.word	0x20006944
 800b810:	2000698c 	.word	0x2000698c
 800b814:	200064b4 	.word	0x200064b4
 800b818:	200064b0 	.word	0x200064b0
 800b81c:	20006998 	.word	0x20006998
 800b820:	20006994 	.word	0x20006994
 800b824:	e000ed04 	.word	0xe000ed04

0800b828 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b82e:	4b05      	ldr	r3, [pc, #20]	; (800b844 <xTaskGetTickCount+0x1c>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b834:	687b      	ldr	r3, [r7, #4]
}
 800b836:	4618      	mov	r0, r3
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	20006988 	.word	0x20006988

0800b848 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b84e:	f001 fa8b 	bl	800cd68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b852:	2300      	movs	r3, #0
 800b854:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b856:	4b04      	ldr	r3, [pc, #16]	; (800b868 <xTaskGetTickCountFromISR+0x20>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b85c:	683b      	ldr	r3, [r7, #0]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20006988 	.word	0x20006988

0800b86c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b872:	2300      	movs	r3, #0
 800b874:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b876:	4b4f      	ldr	r3, [pc, #316]	; (800b9b4 <xTaskIncrementTick+0x148>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f040 808f 	bne.w	800b99e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b880:	4b4d      	ldr	r3, [pc, #308]	; (800b9b8 <xTaskIncrementTick+0x14c>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3301      	adds	r3, #1
 800b886:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b888:	4a4b      	ldr	r2, [pc, #300]	; (800b9b8 <xTaskIncrementTick+0x14c>)
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d120      	bne.n	800b8d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b894:	4b49      	ldr	r3, [pc, #292]	; (800b9bc <xTaskIncrementTick+0x150>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	603b      	str	r3, [r7, #0]
}
 800b8b0:	bf00      	nop
 800b8b2:	e7fe      	b.n	800b8b2 <xTaskIncrementTick+0x46>
 800b8b4:	4b41      	ldr	r3, [pc, #260]	; (800b9bc <xTaskIncrementTick+0x150>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	60fb      	str	r3, [r7, #12]
 800b8ba:	4b41      	ldr	r3, [pc, #260]	; (800b9c0 <xTaskIncrementTick+0x154>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a3f      	ldr	r2, [pc, #252]	; (800b9bc <xTaskIncrementTick+0x150>)
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	4a3f      	ldr	r2, [pc, #252]	; (800b9c0 <xTaskIncrementTick+0x154>)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	4b3e      	ldr	r3, [pc, #248]	; (800b9c4 <xTaskIncrementTick+0x158>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	4a3d      	ldr	r2, [pc, #244]	; (800b9c4 <xTaskIncrementTick+0x158>)
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	f000 fadb 	bl	800be8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8d6:	4b3c      	ldr	r3, [pc, #240]	; (800b9c8 <xTaskIncrementTick+0x15c>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d349      	bcc.n	800b974 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8e0:	4b36      	ldr	r3, [pc, #216]	; (800b9bc <xTaskIncrementTick+0x150>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d104      	bne.n	800b8f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8ea:	4b37      	ldr	r3, [pc, #220]	; (800b9c8 <xTaskIncrementTick+0x15c>)
 800b8ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f0:	601a      	str	r2, [r3, #0]
					break;
 800b8f2:	e03f      	b.n	800b974 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f4:	4b31      	ldr	r3, [pc, #196]	; (800b9bc <xTaskIncrementTick+0x150>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d203      	bcs.n	800b914 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b90c:	4a2e      	ldr	r2, [pc, #184]	; (800b9c8 <xTaskIncrementTick+0x15c>)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b912:	e02f      	b.n	800b974 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	3304      	adds	r3, #4
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fe fb8f 	bl	800a03c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b922:	2b00      	cmp	r3, #0
 800b924:	d004      	beq.n	800b930 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	3318      	adds	r3, #24
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fe fb86 	bl	800a03c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b934:	4b25      	ldr	r3, [pc, #148]	; (800b9cc <xTaskIncrementTick+0x160>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d903      	bls.n	800b944 <xTaskIncrementTick+0xd8>
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b940:	4a22      	ldr	r2, [pc, #136]	; (800b9cc <xTaskIncrementTick+0x160>)
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4a1f      	ldr	r2, [pc, #124]	; (800b9d0 <xTaskIncrementTick+0x164>)
 800b952:	441a      	add	r2, r3
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	3304      	adds	r3, #4
 800b958:	4619      	mov	r1, r3
 800b95a:	4610      	mov	r0, r2
 800b95c:	f7fe fb11 	bl	8009f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b964:	4b1b      	ldr	r3, [pc, #108]	; (800b9d4 <xTaskIncrementTick+0x168>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d3b8      	bcc.n	800b8e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b96e:	2301      	movs	r3, #1
 800b970:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b972:	e7b5      	b.n	800b8e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b974:	4b17      	ldr	r3, [pc, #92]	; (800b9d4 <xTaskIncrementTick+0x168>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97a:	4915      	ldr	r1, [pc, #84]	; (800b9d0 <xTaskIncrementTick+0x164>)
 800b97c:	4613      	mov	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	440b      	add	r3, r1
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d901      	bls.n	800b990 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b98c:	2301      	movs	r3, #1
 800b98e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b990:	4b11      	ldr	r3, [pc, #68]	; (800b9d8 <xTaskIncrementTick+0x16c>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d007      	beq.n	800b9a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b998:	2301      	movs	r3, #1
 800b99a:	617b      	str	r3, [r7, #20]
 800b99c:	e004      	b.n	800b9a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b99e:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <xTaskIncrementTick+0x170>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	4a0d      	ldr	r2, [pc, #52]	; (800b9dc <xTaskIncrementTick+0x170>)
 800b9a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b9a8:	697b      	ldr	r3, [r7, #20]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	200069ac 	.word	0x200069ac
 800b9b8:	20006988 	.word	0x20006988
 800b9bc:	2000693c 	.word	0x2000693c
 800b9c0:	20006940 	.word	0x20006940
 800b9c4:	2000699c 	.word	0x2000699c
 800b9c8:	200069a4 	.word	0x200069a4
 800b9cc:	2000698c 	.word	0x2000698c
 800b9d0:	200064b4 	.word	0x200064b4
 800b9d4:	200064b0 	.word	0x200064b0
 800b9d8:	20006998 	.word	0x20006998
 800b9dc:	20006994 	.word	0x20006994

0800b9e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9e6:	4b2a      	ldr	r3, [pc, #168]	; (800ba90 <vTaskSwitchContext+0xb0>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9ee:	4b29      	ldr	r3, [pc, #164]	; (800ba94 <vTaskSwitchContext+0xb4>)
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9f4:	e046      	b.n	800ba84 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b9f6:	4b27      	ldr	r3, [pc, #156]	; (800ba94 <vTaskSwitchContext+0xb4>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9fc:	4b26      	ldr	r3, [pc, #152]	; (800ba98 <vTaskSwitchContext+0xb8>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	60fb      	str	r3, [r7, #12]
 800ba02:	e010      	b.n	800ba26 <vTaskSwitchContext+0x46>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10a      	bne.n	800ba20 <vTaskSwitchContext+0x40>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	607b      	str	r3, [r7, #4]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <vTaskSwitchContext+0x3e>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	3b01      	subs	r3, #1
 800ba24:	60fb      	str	r3, [r7, #12]
 800ba26:	491d      	ldr	r1, [pc, #116]	; (800ba9c <vTaskSwitchContext+0xbc>)
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	440b      	add	r3, r1
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0e4      	beq.n	800ba04 <vTaskSwitchContext+0x24>
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4413      	add	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4a15      	ldr	r2, [pc, #84]	; (800ba9c <vTaskSwitchContext+0xbc>)
 800ba46:	4413      	add	r3, r2
 800ba48:	60bb      	str	r3, [r7, #8]
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	605a      	str	r2, [r3, #4]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d104      	bne.n	800ba6a <vTaskSwitchContext+0x8a>
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	605a      	str	r2, [r3, #4]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	4a0b      	ldr	r2, [pc, #44]	; (800baa0 <vTaskSwitchContext+0xc0>)
 800ba72:	6013      	str	r3, [r2, #0]
 800ba74:	4a08      	ldr	r2, [pc, #32]	; (800ba98 <vTaskSwitchContext+0xb8>)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba7a:	4b09      	ldr	r3, [pc, #36]	; (800baa0 <vTaskSwitchContext+0xc0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3354      	adds	r3, #84	; 0x54
 800ba80:	4a08      	ldr	r2, [pc, #32]	; (800baa4 <vTaskSwitchContext+0xc4>)
 800ba82:	6013      	str	r3, [r2, #0]
}
 800ba84:	bf00      	nop
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr
 800ba90:	200069ac 	.word	0x200069ac
 800ba94:	20006998 	.word	0x20006998
 800ba98:	2000698c 	.word	0x2000698c
 800ba9c:	200064b4 	.word	0x200064b4
 800baa0:	200064b0 	.word	0x200064b0
 800baa4:	200000a4 	.word	0x200000a4

0800baa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	60fb      	str	r3, [r7, #12]
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bace:	4b07      	ldr	r3, [pc, #28]	; (800baec <vTaskPlaceOnEventList+0x44>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3318      	adds	r3, #24
 800bad4:	4619      	mov	r1, r3
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f7fe fa77 	bl	8009fca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800badc:	2101      	movs	r1, #1
 800bade:	6838      	ldr	r0, [r7, #0]
 800bae0:	f000 fb8e 	bl	800c200 <prvAddCurrentTaskToDelayedList>
}
 800bae4:	bf00      	nop
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	200064b0 	.word	0x200064b0

0800baf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10a      	bne.n	800bb18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	617b      	str	r3, [r7, #20]
}
 800bb14:	bf00      	nop
 800bb16:	e7fe      	b.n	800bb16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb18:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3318      	adds	r3, #24
 800bb1e:	4619      	mov	r1, r3
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7fe fa2e 	bl	8009f82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb32:	6879      	ldr	r1, [r7, #4]
 800bb34:	68b8      	ldr	r0, [r7, #8]
 800bb36:	f000 fb63 	bl	800c200 <prvAddCurrentTaskToDelayedList>
	}
 800bb3a:	bf00      	nop
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	200064b0 	.word	0x200064b0

0800bb48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10a      	bne.n	800bb74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	60fb      	str	r3, [r7, #12]
}
 800bb70:	bf00      	nop
 800bb72:	e7fe      	b.n	800bb72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	3318      	adds	r3, #24
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fe fa5f 	bl	800a03c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb7e:	4b1e      	ldr	r3, [pc, #120]	; (800bbf8 <xTaskRemoveFromEventList+0xb0>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d11d      	bne.n	800bbc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe fa56 	bl	800a03c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb94:	4b19      	ldr	r3, [pc, #100]	; (800bbfc <xTaskRemoveFromEventList+0xb4>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d903      	bls.n	800bba4 <xTaskRemoveFromEventList+0x5c>
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	4a16      	ldr	r2, [pc, #88]	; (800bbfc <xTaskRemoveFromEventList+0xb4>)
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba8:	4613      	mov	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4a13      	ldr	r2, [pc, #76]	; (800bc00 <xTaskRemoveFromEventList+0xb8>)
 800bbb2:	441a      	add	r2, r3
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4610      	mov	r0, r2
 800bbbc:	f7fe f9e1 	bl	8009f82 <vListInsertEnd>
 800bbc0:	e005      	b.n	800bbce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	3318      	adds	r3, #24
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	480e      	ldr	r0, [pc, #56]	; (800bc04 <xTaskRemoveFromEventList+0xbc>)
 800bbca:	f7fe f9da 	bl	8009f82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd2:	4b0d      	ldr	r3, [pc, #52]	; (800bc08 <xTaskRemoveFromEventList+0xc0>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d905      	bls.n	800bbe8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbe0:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <xTaskRemoveFromEventList+0xc4>)
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	e001      	b.n	800bbec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbec:	697b      	ldr	r3, [r7, #20]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	200069ac 	.word	0x200069ac
 800bbfc:	2000698c 	.word	0x2000698c
 800bc00:	200064b4 	.word	0x200064b4
 800bc04:	20006944 	.word	0x20006944
 800bc08:	200064b0 	.word	0x200064b0
 800bc0c:	20006998 	.word	0x20006998

0800bc10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc18:	4b06      	ldr	r3, [pc, #24]	; (800bc34 <vTaskInternalSetTimeOutState+0x24>)
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc20:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <vTaskInternalSetTimeOutState+0x28>)
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	605a      	str	r2, [r3, #4]
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr
 800bc34:	2000699c 	.word	0x2000699c
 800bc38:	20006988 	.word	0x20006988

0800bc3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b088      	sub	sp, #32
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10a      	bne.n	800bc62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	613b      	str	r3, [r7, #16]
}
 800bc5e:	bf00      	nop
 800bc60:	e7fe      	b.n	800bc60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	60fb      	str	r3, [r7, #12]
}
 800bc7a:	bf00      	nop
 800bc7c:	e7fe      	b.n	800bc7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc7e:	f000 ff91 	bl	800cba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc82:	4b1d      	ldr	r3, [pc, #116]	; (800bcf8 <xTaskCheckForTimeOut+0xbc>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	69ba      	ldr	r2, [r7, #24]
 800bc8e:	1ad3      	subs	r3, r2, r3
 800bc90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9a:	d102      	bne.n	800bca2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	61fb      	str	r3, [r7, #28]
 800bca0:	e023      	b.n	800bcea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <xTaskCheckForTimeOut+0xc0>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d007      	beq.n	800bcbe <xTaskCheckForTimeOut+0x82>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	69ba      	ldr	r2, [r7, #24]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d302      	bcc.n	800bcbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	61fb      	str	r3, [r7, #28]
 800bcbc:	e015      	b.n	800bcea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d20b      	bcs.n	800bce0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	1ad2      	subs	r2, r2, r3
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff ff9b 	bl	800bc10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	61fb      	str	r3, [r7, #28]
 800bcde:	e004      	b.n	800bcea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bce6:	2301      	movs	r3, #1
 800bce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcea:	f000 ff8b 	bl	800cc04 <vPortExitCritical>

	return xReturn;
 800bcee:	69fb      	ldr	r3, [r7, #28]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3720      	adds	r7, #32
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20006988 	.word	0x20006988
 800bcfc:	2000699c 	.word	0x2000699c

0800bd00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd00:	b480      	push	{r7}
 800bd02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd04:	4b03      	ldr	r3, [pc, #12]	; (800bd14 <vTaskMissedYield+0x14>)
 800bd06:	2201      	movs	r2, #1
 800bd08:	601a      	str	r2, [r3, #0]
}
 800bd0a:	bf00      	nop
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	20006998 	.word	0x20006998

0800bd18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd20:	f000 f852 	bl	800bdc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd24:	4b06      	ldr	r3, [pc, #24]	; (800bd40 <prvIdleTask+0x28>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d9f9      	bls.n	800bd20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd2c:	4b05      	ldr	r3, [pc, #20]	; (800bd44 <prvIdleTask+0x2c>)
 800bd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd3c:	e7f0      	b.n	800bd20 <prvIdleTask+0x8>
 800bd3e:	bf00      	nop
 800bd40:	200064b4 	.word	0x200064b4
 800bd44:	e000ed04 	.word	0xe000ed04

0800bd48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd4e:	2300      	movs	r3, #0
 800bd50:	607b      	str	r3, [r7, #4]
 800bd52:	e00c      	b.n	800bd6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	4613      	mov	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4a12      	ldr	r2, [pc, #72]	; (800bda8 <prvInitialiseTaskLists+0x60>)
 800bd60:	4413      	add	r3, r2
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe f8e0 	bl	8009f28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	607b      	str	r3, [r7, #4]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b37      	cmp	r3, #55	; 0x37
 800bd72:	d9ef      	bls.n	800bd54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd74:	480d      	ldr	r0, [pc, #52]	; (800bdac <prvInitialiseTaskLists+0x64>)
 800bd76:	f7fe f8d7 	bl	8009f28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd7a:	480d      	ldr	r0, [pc, #52]	; (800bdb0 <prvInitialiseTaskLists+0x68>)
 800bd7c:	f7fe f8d4 	bl	8009f28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd80:	480c      	ldr	r0, [pc, #48]	; (800bdb4 <prvInitialiseTaskLists+0x6c>)
 800bd82:	f7fe f8d1 	bl	8009f28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd86:	480c      	ldr	r0, [pc, #48]	; (800bdb8 <prvInitialiseTaskLists+0x70>)
 800bd88:	f7fe f8ce 	bl	8009f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd8c:	480b      	ldr	r0, [pc, #44]	; (800bdbc <prvInitialiseTaskLists+0x74>)
 800bd8e:	f7fe f8cb 	bl	8009f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd92:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <prvInitialiseTaskLists+0x78>)
 800bd94:	4a05      	ldr	r2, [pc, #20]	; (800bdac <prvInitialiseTaskLists+0x64>)
 800bd96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd98:	4b0a      	ldr	r3, [pc, #40]	; (800bdc4 <prvInitialiseTaskLists+0x7c>)
 800bd9a:	4a05      	ldr	r2, [pc, #20]	; (800bdb0 <prvInitialiseTaskLists+0x68>)
 800bd9c:	601a      	str	r2, [r3, #0]
}
 800bd9e:	bf00      	nop
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	200064b4 	.word	0x200064b4
 800bdac:	20006914 	.word	0x20006914
 800bdb0:	20006928 	.word	0x20006928
 800bdb4:	20006944 	.word	0x20006944
 800bdb8:	20006958 	.word	0x20006958
 800bdbc:	20006970 	.word	0x20006970
 800bdc0:	2000693c 	.word	0x2000693c
 800bdc4:	20006940 	.word	0x20006940

0800bdc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdce:	e019      	b.n	800be04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdd0:	f000 fee8 	bl	800cba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd4:	4b10      	ldr	r3, [pc, #64]	; (800be18 <prvCheckTasksWaitingTermination+0x50>)
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	3304      	adds	r3, #4
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fe f92b 	bl	800a03c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bde6:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <prvCheckTasksWaitingTermination+0x54>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	4a0b      	ldr	r2, [pc, #44]	; (800be1c <prvCheckTasksWaitingTermination+0x54>)
 800bdee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdf0:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <prvCheckTasksWaitingTermination+0x58>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	4a0a      	ldr	r2, [pc, #40]	; (800be20 <prvCheckTasksWaitingTermination+0x58>)
 800bdf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdfa:	f000 ff03 	bl	800cc04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f810 	bl	800be24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be04:	4b06      	ldr	r3, [pc, #24]	; (800be20 <prvCheckTasksWaitingTermination+0x58>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1e1      	bne.n	800bdd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be0c:	bf00      	nop
 800be0e:	bf00      	nop
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20006958 	.word	0x20006958
 800be1c:	20006984 	.word	0x20006984
 800be20:	2000696c 	.word	0x2000696c

0800be24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3354      	adds	r3, #84	; 0x54
 800be30:	4618      	mov	r0, r3
 800be32:	f00e feef 	bl	801ac14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d108      	bne.n	800be52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be44:	4618      	mov	r0, r3
 800be46:	f001 f89b 	bl	800cf80 <vPortFree>
				vPortFree( pxTCB );
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f001 f898 	bl	800cf80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be50:	e018      	b.n	800be84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d103      	bne.n	800be64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f001 f88f 	bl	800cf80 <vPortFree>
	}
 800be62:	e00f      	b.n	800be84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800be6a:	2b02      	cmp	r3, #2
 800be6c:	d00a      	beq.n	800be84 <prvDeleteTCB+0x60>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	60fb      	str	r3, [r7, #12]
}
 800be80:	bf00      	nop
 800be82:	e7fe      	b.n	800be82 <prvDeleteTCB+0x5e>
	}
 800be84:	bf00      	nop
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be92:	4b0c      	ldr	r3, [pc, #48]	; (800bec4 <prvResetNextTaskUnblockTime+0x38>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d104      	bne.n	800bea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be9c:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <prvResetNextTaskUnblockTime+0x3c>)
 800be9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bea4:	e008      	b.n	800beb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea6:	4b07      	ldr	r3, [pc, #28]	; (800bec4 <prvResetNextTaskUnblockTime+0x38>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	4a04      	ldr	r2, [pc, #16]	; (800bec8 <prvResetNextTaskUnblockTime+0x3c>)
 800beb6:	6013      	str	r3, [r2, #0]
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr
 800bec4:	2000693c 	.word	0x2000693c
 800bec8:	200069a4 	.word	0x200069a4

0800becc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bed2:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <xTaskGetCurrentTaskHandle+0x1c>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bed8:	687b      	ldr	r3, [r7, #4]
	}
 800beda:	4618      	mov	r0, r3
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	200064b0 	.word	0x200064b0

0800beec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bef2:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <xTaskGetSchedulerState+0x34>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d102      	bne.n	800bf00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800befa:	2301      	movs	r3, #1
 800befc:	607b      	str	r3, [r7, #4]
 800befe:	e008      	b.n	800bf12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf00:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <xTaskGetSchedulerState+0x38>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d102      	bne.n	800bf0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf08:	2302      	movs	r3, #2
 800bf0a:	607b      	str	r3, [r7, #4]
 800bf0c:	e001      	b.n	800bf12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf12:	687b      	ldr	r3, [r7, #4]
	}
 800bf14:	4618      	mov	r0, r3
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	20006990 	.word	0x20006990
 800bf24:	200069ac 	.word	0x200069ac

0800bf28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf34:	2300      	movs	r3, #0
 800bf36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d051      	beq.n	800bfe2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf42:	4b2a      	ldr	r3, [pc, #168]	; (800bfec <xTaskPriorityInherit+0xc4>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d241      	bcs.n	800bfd0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	db06      	blt.n	800bf62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf54:	4b25      	ldr	r3, [pc, #148]	; (800bfec <xTaskPriorityInherit+0xc4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	6959      	ldr	r1, [r3, #20]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4a1f      	ldr	r2, [pc, #124]	; (800bff0 <xTaskPriorityInherit+0xc8>)
 800bf74:	4413      	add	r3, r2
 800bf76:	4299      	cmp	r1, r3
 800bf78:	d122      	bne.n	800bfc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fe f85c 	bl	800a03c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf84:	4b19      	ldr	r3, [pc, #100]	; (800bfec <xTaskPriorityInherit+0xc4>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf92:	4b18      	ldr	r3, [pc, #96]	; (800bff4 <xTaskPriorityInherit+0xcc>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d903      	bls.n	800bfa2 <xTaskPriorityInherit+0x7a>
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9e:	4a15      	ldr	r2, [pc, #84]	; (800bff4 <xTaskPriorityInherit+0xcc>)
 800bfa0:	6013      	str	r3, [r2, #0]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4a10      	ldr	r2, [pc, #64]	; (800bff0 <xTaskPriorityInherit+0xc8>)
 800bfb0:	441a      	add	r2, r3
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	4610      	mov	r0, r2
 800bfba:	f7fd ffe2 	bl	8009f82 <vListInsertEnd>
 800bfbe:	e004      	b.n	800bfca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	; (800bfec <xTaskPriorityInherit+0xc4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	60fb      	str	r3, [r7, #12]
 800bfce:	e008      	b.n	800bfe2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfd4:	4b05      	ldr	r3, [pc, #20]	; (800bfec <xTaskPriorityInherit+0xc4>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d201      	bcs.n	800bfe2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
	}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	200064b0 	.word	0x200064b0
 800bff0:	200064b4 	.word	0x200064b4
 800bff4:	2000698c 	.word	0x2000698c

0800bff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c004:	2300      	movs	r3, #0
 800c006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d056      	beq.n	800c0bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c00e:	4b2e      	ldr	r3, [pc, #184]	; (800c0c8 <xTaskPriorityDisinherit+0xd0>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	693a      	ldr	r2, [r7, #16]
 800c014:	429a      	cmp	r2, r3
 800c016:	d00a      	beq.n	800c02e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01c:	f383 8811 	msr	BASEPRI, r3
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	60fb      	str	r3, [r7, #12]
}
 800c02a:	bf00      	nop
 800c02c:	e7fe      	b.n	800c02c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10a      	bne.n	800c04c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	60bb      	str	r3, [r7, #8]
}
 800c048:	bf00      	nop
 800c04a:	e7fe      	b.n	800c04a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c050:	1e5a      	subs	r2, r3, #1
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c05e:	429a      	cmp	r2, r3
 800c060:	d02c      	beq.n	800c0bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c066:	2b00      	cmp	r3, #0
 800c068:	d128      	bne.n	800c0bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	3304      	adds	r3, #4
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fd ffe4 	bl	800a03c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c080:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08c:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <xTaskPriorityDisinherit+0xd4>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d903      	bls.n	800c09c <xTaskPriorityDisinherit+0xa4>
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	4a0c      	ldr	r2, [pc, #48]	; (800c0cc <xTaskPriorityDisinherit+0xd4>)
 800c09a:	6013      	str	r3, [r2, #0]
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4a09      	ldr	r2, [pc, #36]	; (800c0d0 <xTaskPriorityDisinherit+0xd8>)
 800c0aa:	441a      	add	r2, r3
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	f7fd ff65 	bl	8009f82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0bc:	697b      	ldr	r3, [r7, #20]
	}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3718      	adds	r7, #24
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	200064b0 	.word	0x200064b0
 800c0cc:	2000698c 	.word	0x2000698c
 800c0d0:	200064b4 	.word	0x200064b4

0800c0d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d06a      	beq.n	800c1c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	60fb      	str	r3, [r7, #12]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	429a      	cmp	r2, r3
 800c112:	d902      	bls.n	800c11a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	61fb      	str	r3, [r7, #28]
 800c118:	e002      	b.n	800c120 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c11e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c124:	69fa      	ldr	r2, [r7, #28]
 800c126:	429a      	cmp	r2, r3
 800c128:	d04b      	beq.n	800c1c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	429a      	cmp	r2, r3
 800c132:	d146      	bne.n	800c1c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c134:	4b25      	ldr	r3, [pc, #148]	; (800c1cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d10a      	bne.n	800c154 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	60bb      	str	r3, [r7, #8]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c158:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	69fa      	ldr	r2, [r7, #28]
 800c15e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	2b00      	cmp	r3, #0
 800c166:	db04      	blt.n	800c172 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	6959      	ldr	r1, [r3, #20]
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	4613      	mov	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4a13      	ldr	r2, [pc, #76]	; (800c1d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c182:	4413      	add	r3, r2
 800c184:	4299      	cmp	r1, r3
 800c186:	d11c      	bne.n	800c1c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	3304      	adds	r3, #4
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fd ff55 	bl	800a03c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c196:	4b0f      	ldr	r3, [pc, #60]	; (800c1d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d903      	bls.n	800c1a6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a2:	4a0c      	ldr	r2, [pc, #48]	; (800c1d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c1a4:	6013      	str	r3, [r2, #0]
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4a07      	ldr	r2, [pc, #28]	; (800c1d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c1b4:	441a      	add	r2, r3
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	4610      	mov	r0, r2
 800c1be:	f7fd fee0 	bl	8009f82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1c2:	bf00      	nop
 800c1c4:	3720      	adds	r7, #32
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	200064b0 	.word	0x200064b0
 800c1d0:	200064b4 	.word	0x200064b4
 800c1d4:	2000698c 	.word	0x2000698c

0800c1d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c1d8:	b480      	push	{r7}
 800c1da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1dc:	4b07      	ldr	r3, [pc, #28]	; (800c1fc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d004      	beq.n	800c1ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1e4:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1ea:	3201      	adds	r2, #1
 800c1ec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c1ee:	4b03      	ldr	r3, [pc, #12]	; (800c1fc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
	}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	200064b0 	.word	0x200064b0

0800c200 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c20a:	4b21      	ldr	r3, [pc, #132]	; (800c290 <prvAddCurrentTaskToDelayedList+0x90>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c210:	4b20      	ldr	r3, [pc, #128]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3304      	adds	r3, #4
 800c216:	4618      	mov	r0, r3
 800c218:	f7fd ff10 	bl	800a03c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c222:	d10a      	bne.n	800c23a <prvAddCurrentTaskToDelayedList+0x3a>
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d007      	beq.n	800c23a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c22a:	4b1a      	ldr	r3, [pc, #104]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3304      	adds	r3, #4
 800c230:	4619      	mov	r1, r3
 800c232:	4819      	ldr	r0, [pc, #100]	; (800c298 <prvAddCurrentTaskToDelayedList+0x98>)
 800c234:	f7fd fea5 	bl	8009f82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c238:	e026      	b.n	800c288 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4413      	add	r3, r2
 800c240:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c242:	4b14      	ldr	r3, [pc, #80]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d209      	bcs.n	800c266 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c252:	4b12      	ldr	r3, [pc, #72]	; (800c29c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	4b0f      	ldr	r3, [pc, #60]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3304      	adds	r3, #4
 800c25c:	4619      	mov	r1, r3
 800c25e:	4610      	mov	r0, r2
 800c260:	f7fd feb3 	bl	8009fca <vListInsert>
}
 800c264:	e010      	b.n	800c288 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c266:	4b0e      	ldr	r3, [pc, #56]	; (800c2a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	3304      	adds	r3, #4
 800c270:	4619      	mov	r1, r3
 800c272:	4610      	mov	r0, r2
 800c274:	f7fd fea9 	bl	8009fca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c278:	4b0a      	ldr	r3, [pc, #40]	; (800c2a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d202      	bcs.n	800c288 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c282:	4a08      	ldr	r2, [pc, #32]	; (800c2a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	6013      	str	r3, [r2, #0]
}
 800c288:	bf00      	nop
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	20006988 	.word	0x20006988
 800c294:	200064b0 	.word	0x200064b0
 800c298:	20006970 	.word	0x20006970
 800c29c:	20006940 	.word	0x20006940
 800c2a0:	2000693c 	.word	0x2000693c
 800c2a4:	200069a4 	.word	0x200069a4

0800c2a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b08a      	sub	sp, #40	; 0x28
 800c2ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2b2:	f000 fb07 	bl	800c8c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2b6:	4b1c      	ldr	r3, [pc, #112]	; (800c328 <xTimerCreateTimerTask+0x80>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d021      	beq.n	800c302 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2c6:	1d3a      	adds	r2, r7, #4
 800c2c8:	f107 0108 	add.w	r1, r7, #8
 800c2cc:	f107 030c 	add.w	r3, r7, #12
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fd fe0f 	bl	8009ef4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c2d6:	6879      	ldr	r1, [r7, #4]
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	9202      	str	r2, [sp, #8]
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	460a      	mov	r2, r1
 800c2e8:	4910      	ldr	r1, [pc, #64]	; (800c32c <xTimerCreateTimerTask+0x84>)
 800c2ea:	4811      	ldr	r0, [pc, #68]	; (800c330 <xTimerCreateTimerTask+0x88>)
 800c2ec:	f7fe ff94 	bl	800b218 <xTaskCreateStatic>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	4a10      	ldr	r2, [pc, #64]	; (800c334 <xTimerCreateTimerTask+0x8c>)
 800c2f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2f6:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <xTimerCreateTimerTask+0x8c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2fe:	2301      	movs	r3, #1
 800c300:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10a      	bne.n	800c31e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	613b      	str	r3, [r7, #16]
}
 800c31a:	bf00      	nop
 800c31c:	e7fe      	b.n	800c31c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c31e:	697b      	ldr	r3, [r7, #20]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	200069e0 	.word	0x200069e0
 800c32c:	0801c3ac 	.word	0x0801c3ac
 800c330:	0800c46d 	.word	0x0800c46d
 800c334:	200069e4 	.word	0x200069e4

0800c338 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08a      	sub	sp, #40	; 0x28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c346:	2300      	movs	r3, #0
 800c348:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	623b      	str	r3, [r7, #32]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c366:	4b1a      	ldr	r3, [pc, #104]	; (800c3d0 <xTimerGenericCommand+0x98>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d02a      	beq.n	800c3c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	2b05      	cmp	r3, #5
 800c37e:	dc18      	bgt.n	800c3b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c380:	f7ff fdb4 	bl	800beec <xTaskGetSchedulerState>
 800c384:	4603      	mov	r3, r0
 800c386:	2b02      	cmp	r3, #2
 800c388:	d109      	bne.n	800c39e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c38a:	4b11      	ldr	r3, [pc, #68]	; (800c3d0 <xTimerGenericCommand+0x98>)
 800c38c:	6818      	ldr	r0, [r3, #0]
 800c38e:	f107 0110 	add.w	r1, r7, #16
 800c392:	2300      	movs	r3, #0
 800c394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c396:	f7fe f8d9 	bl	800a54c <xQueueGenericSend>
 800c39a:	6278      	str	r0, [r7, #36]	; 0x24
 800c39c:	e012      	b.n	800c3c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c39e:	4b0c      	ldr	r3, [pc, #48]	; (800c3d0 <xTimerGenericCommand+0x98>)
 800c3a0:	6818      	ldr	r0, [r3, #0]
 800c3a2:	f107 0110 	add.w	r1, r7, #16
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f7fe f8cf 	bl	800a54c <xQueueGenericSend>
 800c3ae:	6278      	str	r0, [r7, #36]	; 0x24
 800c3b0:	e008      	b.n	800c3c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3b2:	4b07      	ldr	r3, [pc, #28]	; (800c3d0 <xTimerGenericCommand+0x98>)
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	f107 0110 	add.w	r1, r7, #16
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	683a      	ldr	r2, [r7, #0]
 800c3be:	f7fe f9c3 	bl	800a748 <xQueueGenericSendFromISR>
 800c3c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3728      	adds	r7, #40	; 0x28
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	200069e0 	.word	0x200069e0

0800c3d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b088      	sub	sp, #32
 800c3d8:	af02      	add	r7, sp, #8
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3de:	4b22      	ldr	r3, [pc, #136]	; (800c468 <prvProcessExpiredTimer+0x94>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fd fe25 	bl	800a03c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3f8:	f003 0304 	and.w	r3, r3, #4
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d022      	beq.n	800c446 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	699a      	ldr	r2, [r3, #24]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	18d1      	adds	r1, r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	6978      	ldr	r0, [r7, #20]
 800c40e:	f000 f8d1 	bl	800c5b4 <prvInsertTimerInActiveList>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d01f      	beq.n	800c458 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c418:	2300      	movs	r3, #0
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	2300      	movs	r3, #0
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	2100      	movs	r1, #0
 800c422:	6978      	ldr	r0, [r7, #20]
 800c424:	f7ff ff88 	bl	800c338 <xTimerGenericCommand>
 800c428:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d113      	bne.n	800c458 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	60fb      	str	r3, [r7, #12]
}
 800c442:	bf00      	nop
 800c444:	e7fe      	b.n	800c444 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c44c:	f023 0301 	bic.w	r3, r3, #1
 800c450:	b2da      	uxtb	r2, r3
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	6a1b      	ldr	r3, [r3, #32]
 800c45c:	6978      	ldr	r0, [r7, #20]
 800c45e:	4798      	blx	r3
}
 800c460:	bf00      	nop
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	200069d8 	.word	0x200069d8

0800c46c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c474:	f107 0308 	add.w	r3, r7, #8
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 f857 	bl	800c52c <prvGetNextExpireTime>
 800c47e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	4619      	mov	r1, r3
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 f803 	bl	800c490 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c48a:	f000 f8d5 	bl	800c638 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c48e:	e7f1      	b.n	800c474 <prvTimerTask+0x8>

0800c490 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c49a:	f7ff f919 	bl	800b6d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c49e:	f107 0308 	add.w	r3, r7, #8
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f000 f866 	bl	800c574 <prvSampleTimeNow>
 800c4a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d130      	bne.n	800c512 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10a      	bne.n	800c4cc <prvProcessTimerOrBlockTask+0x3c>
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d806      	bhi.n	800c4cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c4be:	f7ff f915 	bl	800b6ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c4c2:	68f9      	ldr	r1, [r7, #12]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7ff ff85 	bl	800c3d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4ca:	e024      	b.n	800c516 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d008      	beq.n	800c4e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4d2:	4b13      	ldr	r3, [pc, #76]	; (800c520 <prvProcessTimerOrBlockTask+0x90>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d101      	bne.n	800c4e0 <prvProcessTimerOrBlockTask+0x50>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e000      	b.n	800c4e2 <prvProcessTimerOrBlockTask+0x52>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4e4:	4b0f      	ldr	r3, [pc, #60]	; (800c524 <prvProcessTimerOrBlockTask+0x94>)
 800c4e6:	6818      	ldr	r0, [r3, #0]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	f7fe fe5d 	bl	800b1b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4f6:	f7ff f8f9 	bl	800b6ec <xTaskResumeAll>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c500:	4b09      	ldr	r3, [pc, #36]	; (800c528 <prvProcessTimerOrBlockTask+0x98>)
 800c502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	f3bf 8f6f 	isb	sy
}
 800c510:	e001      	b.n	800c516 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c512:	f7ff f8eb 	bl	800b6ec <xTaskResumeAll>
}
 800c516:	bf00      	nop
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	200069dc 	.word	0x200069dc
 800c524:	200069e0 	.word	0x200069e0
 800c528:	e000ed04 	.word	0xe000ed04

0800c52c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c534:	4b0e      	ldr	r3, [pc, #56]	; (800c570 <prvGetNextExpireTime+0x44>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d101      	bne.n	800c542 <prvGetNextExpireTime+0x16>
 800c53e:	2201      	movs	r2, #1
 800c540:	e000      	b.n	800c544 <prvGetNextExpireTime+0x18>
 800c542:	2200      	movs	r2, #0
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d105      	bne.n	800c55c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c550:	4b07      	ldr	r3, [pc, #28]	; (800c570 <prvGetNextExpireTime+0x44>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	60fb      	str	r3, [r7, #12]
 800c55a:	e001      	b.n	800c560 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c55c:	2300      	movs	r3, #0
 800c55e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c560:	68fb      	ldr	r3, [r7, #12]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	200069d8 	.word	0x200069d8

0800c574 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c57c:	f7ff f954 	bl	800b828 <xTaskGetTickCount>
 800c580:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c582:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <prvSampleTimeNow+0x3c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d205      	bcs.n	800c598 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c58c:	f000 f936 	bl	800c7fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	e002      	b.n	800c59e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c59e:	4a04      	ldr	r2, [pc, #16]	; (800c5b0 <prvSampleTimeNow+0x3c>)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	200069e8 	.word	0x200069e8

0800c5b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d812      	bhi.n	800c600 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	1ad2      	subs	r2, r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d302      	bcc.n	800c5ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	617b      	str	r3, [r7, #20]
 800c5ec:	e01b      	b.n	800c626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5ee:	4b10      	ldr	r3, [pc, #64]	; (800c630 <prvInsertTimerInActiveList+0x7c>)
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	f7fd fce6 	bl	8009fca <vListInsert>
 800c5fe:	e012      	b.n	800c626 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	429a      	cmp	r2, r3
 800c606:	d206      	bcs.n	800c616 <prvInsertTimerInActiveList+0x62>
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d302      	bcc.n	800c616 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c610:	2301      	movs	r3, #1
 800c612:	617b      	str	r3, [r7, #20]
 800c614:	e007      	b.n	800c626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c616:	4b07      	ldr	r3, [pc, #28]	; (800c634 <prvInsertTimerInActiveList+0x80>)
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3304      	adds	r3, #4
 800c61e:	4619      	mov	r1, r3
 800c620:	4610      	mov	r0, r2
 800c622:	f7fd fcd2 	bl	8009fca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c626:	697b      	ldr	r3, [r7, #20]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3718      	adds	r7, #24
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	200069dc 	.word	0x200069dc
 800c634:	200069d8 	.word	0x200069d8

0800c638 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08e      	sub	sp, #56	; 0x38
 800c63c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c63e:	e0ca      	b.n	800c7d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	da18      	bge.n	800c678 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c646:	1d3b      	adds	r3, r7, #4
 800c648:	3304      	adds	r3, #4
 800c64a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	61fb      	str	r3, [r7, #28]
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c66e:	6850      	ldr	r0, [r2, #4]
 800c670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c672:	6892      	ldr	r2, [r2, #8]
 800c674:	4611      	mov	r1, r2
 800c676:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f2c0 80ab 	blt.w	800c7d6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d004      	beq.n	800c696 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	3304      	adds	r3, #4
 800c690:	4618      	mov	r0, r3
 800c692:	f7fd fcd3 	bl	800a03c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c696:	463b      	mov	r3, r7
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff ff6b 	bl	800c574 <prvSampleTimeNow>
 800c69e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b09      	cmp	r3, #9
 800c6a4:	f200 8096 	bhi.w	800c7d4 <prvProcessReceivedCommands+0x19c>
 800c6a8:	a201      	add	r2, pc, #4	; (adr r2, 800c6b0 <prvProcessReceivedCommands+0x78>)
 800c6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ae:	bf00      	nop
 800c6b0:	0800c6d9 	.word	0x0800c6d9
 800c6b4:	0800c6d9 	.word	0x0800c6d9
 800c6b8:	0800c6d9 	.word	0x0800c6d9
 800c6bc:	0800c74d 	.word	0x0800c74d
 800c6c0:	0800c761 	.word	0x0800c761
 800c6c4:	0800c7ab 	.word	0x0800c7ab
 800c6c8:	0800c6d9 	.word	0x0800c6d9
 800c6cc:	0800c6d9 	.word	0x0800c6d9
 800c6d0:	0800c74d 	.word	0x0800c74d
 800c6d4:	0800c761 	.word	0x0800c761
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6de:	f043 0301 	orr.w	r3, r3, #1
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	18d1      	adds	r1, r2, r3
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f8:	f7ff ff5c 	bl	800c5b4 <prvInsertTimerInActiveList>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d069      	beq.n	800c7d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	6a1b      	ldr	r3, [r3, #32]
 800c706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c708:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c710:	f003 0304 	and.w	r3, r3, #4
 800c714:	2b00      	cmp	r3, #0
 800c716:	d05e      	beq.n	800c7d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	441a      	add	r2, r3
 800c720:	2300      	movs	r3, #0
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	2300      	movs	r3, #0
 800c726:	2100      	movs	r1, #0
 800c728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c72a:	f7ff fe05 	bl	800c338 <xTimerGenericCommand>
 800c72e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d14f      	bne.n	800c7d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	61bb      	str	r3, [r7, #24]
}
 800c748:	bf00      	nop
 800c74a:	e7fe      	b.n	800c74a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c752:	f023 0301 	bic.w	r3, r3, #1
 800c756:	b2da      	uxtb	r2, r3
 800c758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c75e:	e03a      	b.n	800c7d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c766:	f043 0301 	orr.w	r3, r3, #1
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d10a      	bne.n	800c796 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c784:	f383 8811 	msr	BASEPRI, r3
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	617b      	str	r3, [r7, #20]
}
 800c792:	bf00      	nop
 800c794:	e7fe      	b.n	800c794 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c798:	699a      	ldr	r2, [r3, #24]
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	18d1      	adds	r1, r2, r3
 800c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a4:	f7ff ff06 	bl	800c5b4 <prvInsertTimerInActiveList>
					break;
 800c7a8:	e015      	b.n	800c7d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7b0:	f003 0302 	and.w	r3, r3, #2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d103      	bne.n	800c7c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c7b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ba:	f000 fbe1 	bl	800cf80 <vPortFree>
 800c7be:	e00a      	b.n	800c7d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7c6:	f023 0301 	bic.w	r3, r3, #1
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7d2:	e000      	b.n	800c7d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c7d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7d6:	4b08      	ldr	r3, [pc, #32]	; (800c7f8 <prvProcessReceivedCommands+0x1c0>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	1d39      	adds	r1, r7, #4
 800c7dc:	2200      	movs	r2, #0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fe f8da 	bl	800a998 <xQueueReceive>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f47f af2a 	bne.w	800c640 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c7ec:	bf00      	nop
 800c7ee:	bf00      	nop
 800c7f0:	3730      	adds	r7, #48	; 0x30
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	200069e0 	.word	0x200069e0

0800c7fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c802:	e048      	b.n	800c896 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c804:	4b2d      	ldr	r3, [pc, #180]	; (800c8bc <prvSwitchTimerLists+0xc0>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c80e:	4b2b      	ldr	r3, [pc, #172]	; (800c8bc <prvSwitchTimerLists+0xc0>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	3304      	adds	r3, #4
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fd fc0d 	bl	800a03c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c830:	f003 0304 	and.w	r3, r3, #4
 800c834:	2b00      	cmp	r3, #0
 800c836:	d02e      	beq.n	800c896 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	4413      	add	r3, r2
 800c840:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	429a      	cmp	r2, r3
 800c848:	d90e      	bls.n	800c868 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c856:	4b19      	ldr	r3, [pc, #100]	; (800c8bc <prvSwitchTimerLists+0xc0>)
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3304      	adds	r3, #4
 800c85e:	4619      	mov	r1, r3
 800c860:	4610      	mov	r0, r2
 800c862:	f7fd fbb2 	bl	8009fca <vListInsert>
 800c866:	e016      	b.n	800c896 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c868:	2300      	movs	r3, #0
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	2300      	movs	r3, #0
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	2100      	movs	r1, #0
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f7ff fd60 	bl	800c338 <xTimerGenericCommand>
 800c878:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10a      	bne.n	800c896 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	603b      	str	r3, [r7, #0]
}
 800c892:	bf00      	nop
 800c894:	e7fe      	b.n	800c894 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c896:	4b09      	ldr	r3, [pc, #36]	; (800c8bc <prvSwitchTimerLists+0xc0>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1b1      	bne.n	800c804 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8a0:	4b06      	ldr	r3, [pc, #24]	; (800c8bc <prvSwitchTimerLists+0xc0>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8a6:	4b06      	ldr	r3, [pc, #24]	; (800c8c0 <prvSwitchTimerLists+0xc4>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a04      	ldr	r2, [pc, #16]	; (800c8bc <prvSwitchTimerLists+0xc0>)
 800c8ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8ae:	4a04      	ldr	r2, [pc, #16]	; (800c8c0 <prvSwitchTimerLists+0xc4>)
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	6013      	str	r3, [r2, #0]
}
 800c8b4:	bf00      	nop
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	200069d8 	.word	0x200069d8
 800c8c0:	200069dc 	.word	0x200069dc

0800c8c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8ca:	f000 f96b 	bl	800cba4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8ce:	4b15      	ldr	r3, [pc, #84]	; (800c924 <prvCheckForValidListAndQueue+0x60>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d120      	bne.n	800c918 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8d6:	4814      	ldr	r0, [pc, #80]	; (800c928 <prvCheckForValidListAndQueue+0x64>)
 800c8d8:	f7fd fb26 	bl	8009f28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8dc:	4813      	ldr	r0, [pc, #76]	; (800c92c <prvCheckForValidListAndQueue+0x68>)
 800c8de:	f7fd fb23 	bl	8009f28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8e2:	4b13      	ldr	r3, [pc, #76]	; (800c930 <prvCheckForValidListAndQueue+0x6c>)
 800c8e4:	4a10      	ldr	r2, [pc, #64]	; (800c928 <prvCheckForValidListAndQueue+0x64>)
 800c8e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8e8:	4b12      	ldr	r3, [pc, #72]	; (800c934 <prvCheckForValidListAndQueue+0x70>)
 800c8ea:	4a10      	ldr	r2, [pc, #64]	; (800c92c <prvCheckForValidListAndQueue+0x68>)
 800c8ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	4b11      	ldr	r3, [pc, #68]	; (800c938 <prvCheckForValidListAndQueue+0x74>)
 800c8f4:	4a11      	ldr	r2, [pc, #68]	; (800c93c <prvCheckForValidListAndQueue+0x78>)
 800c8f6:	2110      	movs	r1, #16
 800c8f8:	200a      	movs	r0, #10
 800c8fa:	f7fd fc31 	bl	800a160 <xQueueGenericCreateStatic>
 800c8fe:	4603      	mov	r3, r0
 800c900:	4a08      	ldr	r2, [pc, #32]	; (800c924 <prvCheckForValidListAndQueue+0x60>)
 800c902:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c904:	4b07      	ldr	r3, [pc, #28]	; (800c924 <prvCheckForValidListAndQueue+0x60>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d005      	beq.n	800c918 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c90c:	4b05      	ldr	r3, [pc, #20]	; (800c924 <prvCheckForValidListAndQueue+0x60>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	490b      	ldr	r1, [pc, #44]	; (800c940 <prvCheckForValidListAndQueue+0x7c>)
 800c912:	4618      	mov	r0, r3
 800c914:	f7fe fbf8 	bl	800b108 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c918:	f000 f974 	bl	800cc04 <vPortExitCritical>
}
 800c91c:	bf00      	nop
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	200069e0 	.word	0x200069e0
 800c928:	200069b0 	.word	0x200069b0
 800c92c:	200069c4 	.word	0x200069c4
 800c930:	200069d8 	.word	0x200069d8
 800c934:	200069dc 	.word	0x200069dc
 800c938:	20006a8c 	.word	0x20006a8c
 800c93c:	200069ec 	.word	0x200069ec
 800c940:	0801c3b4 	.word	0x0801c3b4

0800c944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	3b04      	subs	r3, #4
 800c954:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c95c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	3b04      	subs	r3, #4
 800c962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	f023 0201 	bic.w	r2, r3, #1
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3b04      	subs	r3, #4
 800c972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c974:	4a0c      	ldr	r2, [pc, #48]	; (800c9a8 <pxPortInitialiseStack+0x64>)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3b14      	subs	r3, #20
 800c97e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3b04      	subs	r3, #4
 800c98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f06f 0202 	mvn.w	r2, #2
 800c992:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3b20      	subs	r3, #32
 800c998:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c99a:	68fb      	ldr	r3, [r7, #12]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3714      	adds	r7, #20
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr
 800c9a8:	0800c9ad 	.word	0x0800c9ad

0800c9ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b085      	sub	sp, #20
 800c9b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9b6:	4b12      	ldr	r3, [pc, #72]	; (800ca00 <prvTaskExitError+0x54>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9be:	d00a      	beq.n	800c9d6 <prvTaskExitError+0x2a>
	__asm volatile
 800c9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c4:	f383 8811 	msr	BASEPRI, r3
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	60fb      	str	r3, [r7, #12]
}
 800c9d2:	bf00      	nop
 800c9d4:	e7fe      	b.n	800c9d4 <prvTaskExitError+0x28>
	__asm volatile
 800c9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	60bb      	str	r3, [r7, #8]
}
 800c9e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9ea:	bf00      	nop
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d0fc      	beq.n	800c9ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9f2:	bf00      	nop
 800c9f4:	bf00      	nop
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	20000038 	.word	0x20000038
	...

0800ca10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca10:	4b07      	ldr	r3, [pc, #28]	; (800ca30 <pxCurrentTCBConst2>)
 800ca12:	6819      	ldr	r1, [r3, #0]
 800ca14:	6808      	ldr	r0, [r1, #0]
 800ca16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1a:	f380 8809 	msr	PSP, r0
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f04f 0000 	mov.w	r0, #0
 800ca26:	f380 8811 	msr	BASEPRI, r0
 800ca2a:	4770      	bx	lr
 800ca2c:	f3af 8000 	nop.w

0800ca30 <pxCurrentTCBConst2>:
 800ca30:	200064b0 	.word	0x200064b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca34:	bf00      	nop
 800ca36:	bf00      	nop

0800ca38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca38:	4808      	ldr	r0, [pc, #32]	; (800ca5c <prvPortStartFirstTask+0x24>)
 800ca3a:	6800      	ldr	r0, [r0, #0]
 800ca3c:	6800      	ldr	r0, [r0, #0]
 800ca3e:	f380 8808 	msr	MSP, r0
 800ca42:	f04f 0000 	mov.w	r0, #0
 800ca46:	f380 8814 	msr	CONTROL, r0
 800ca4a:	b662      	cpsie	i
 800ca4c:	b661      	cpsie	f
 800ca4e:	f3bf 8f4f 	dsb	sy
 800ca52:	f3bf 8f6f 	isb	sy
 800ca56:	df00      	svc	0
 800ca58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca5a:	bf00      	nop
 800ca5c:	e000ed08 	.word	0xe000ed08

0800ca60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca66:	4b46      	ldr	r3, [pc, #280]	; (800cb80 <xPortStartScheduler+0x120>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a46      	ldr	r2, [pc, #280]	; (800cb84 <xPortStartScheduler+0x124>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d10a      	bne.n	800ca86 <xPortStartScheduler+0x26>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	613b      	str	r3, [r7, #16]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca86:	4b3e      	ldr	r3, [pc, #248]	; (800cb80 <xPortStartScheduler+0x120>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a3f      	ldr	r2, [pc, #252]	; (800cb88 <xPortStartScheduler+0x128>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d10a      	bne.n	800caa6 <xPortStartScheduler+0x46>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	60fb      	str	r3, [r7, #12]
}
 800caa2:	bf00      	nop
 800caa4:	e7fe      	b.n	800caa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800caa6:	4b39      	ldr	r3, [pc, #228]	; (800cb8c <xPortStartScheduler+0x12c>)
 800caa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	22ff      	movs	r2, #255	; 0xff
 800cab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cac8:	b2da      	uxtb	r2, r3
 800caca:	4b31      	ldr	r3, [pc, #196]	; (800cb90 <xPortStartScheduler+0x130>)
 800cacc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cace:	4b31      	ldr	r3, [pc, #196]	; (800cb94 <xPortStartScheduler+0x134>)
 800cad0:	2207      	movs	r2, #7
 800cad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cad4:	e009      	b.n	800caea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cad6:	4b2f      	ldr	r3, [pc, #188]	; (800cb94 <xPortStartScheduler+0x134>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3b01      	subs	r3, #1
 800cadc:	4a2d      	ldr	r2, [pc, #180]	; (800cb94 <xPortStartScheduler+0x134>)
 800cade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	005b      	lsls	r3, r3, #1
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caea:	78fb      	ldrb	r3, [r7, #3]
 800caec:	b2db      	uxtb	r3, r3
 800caee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caf2:	2b80      	cmp	r3, #128	; 0x80
 800caf4:	d0ef      	beq.n	800cad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800caf6:	4b27      	ldr	r3, [pc, #156]	; (800cb94 <xPortStartScheduler+0x134>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f1c3 0307 	rsb	r3, r3, #7
 800cafe:	2b04      	cmp	r3, #4
 800cb00:	d00a      	beq.n	800cb18 <xPortStartScheduler+0xb8>
	__asm volatile
 800cb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	60bb      	str	r3, [r7, #8]
}
 800cb14:	bf00      	nop
 800cb16:	e7fe      	b.n	800cb16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb18:	4b1e      	ldr	r3, [pc, #120]	; (800cb94 <xPortStartScheduler+0x134>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	021b      	lsls	r3, r3, #8
 800cb1e:	4a1d      	ldr	r2, [pc, #116]	; (800cb94 <xPortStartScheduler+0x134>)
 800cb20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb22:	4b1c      	ldr	r3, [pc, #112]	; (800cb94 <xPortStartScheduler+0x134>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb2a:	4a1a      	ldr	r2, [pc, #104]	; (800cb94 <xPortStartScheduler+0x134>)
 800cb2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb36:	4b18      	ldr	r3, [pc, #96]	; (800cb98 <xPortStartScheduler+0x138>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a17      	ldr	r2, [pc, #92]	; (800cb98 <xPortStartScheduler+0x138>)
 800cb3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb42:	4b15      	ldr	r3, [pc, #84]	; (800cb98 <xPortStartScheduler+0x138>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a14      	ldr	r2, [pc, #80]	; (800cb98 <xPortStartScheduler+0x138>)
 800cb48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb4e:	f000 f8dd 	bl	800cd0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb52:	4b12      	ldr	r3, [pc, #72]	; (800cb9c <xPortStartScheduler+0x13c>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb58:	f000 f8fc 	bl	800cd54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb5c:	4b10      	ldr	r3, [pc, #64]	; (800cba0 <xPortStartScheduler+0x140>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a0f      	ldr	r2, [pc, #60]	; (800cba0 <xPortStartScheduler+0x140>)
 800cb62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb68:	f7ff ff66 	bl	800ca38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb6c:	f7fe ff38 	bl	800b9e0 <vTaskSwitchContext>
	prvTaskExitError();
 800cb70:	f7ff ff1c 	bl	800c9ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	e000ed00 	.word	0xe000ed00
 800cb84:	410fc271 	.word	0x410fc271
 800cb88:	410fc270 	.word	0x410fc270
 800cb8c:	e000e400 	.word	0xe000e400
 800cb90:	20006adc 	.word	0x20006adc
 800cb94:	20006ae0 	.word	0x20006ae0
 800cb98:	e000ed20 	.word	0xe000ed20
 800cb9c:	20000038 	.word	0x20000038
 800cba0:	e000ef34 	.word	0xe000ef34

0800cba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	607b      	str	r3, [r7, #4]
}
 800cbbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cbbe:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <vPortEnterCritical+0x58>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	4a0d      	ldr	r2, [pc, #52]	; (800cbfc <vPortEnterCritical+0x58>)
 800cbc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cbc8:	4b0c      	ldr	r3, [pc, #48]	; (800cbfc <vPortEnterCritical+0x58>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d10f      	bne.n	800cbf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cbd0:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <vPortEnterCritical+0x5c>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00a      	beq.n	800cbf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbde:	f383 8811 	msr	BASEPRI, r3
 800cbe2:	f3bf 8f6f 	isb	sy
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	603b      	str	r3, [r7, #0]
}
 800cbec:	bf00      	nop
 800cbee:	e7fe      	b.n	800cbee <vPortEnterCritical+0x4a>
	}
}
 800cbf0:	bf00      	nop
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr
 800cbfc:	20000038 	.word	0x20000038
 800cc00:	e000ed04 	.word	0xe000ed04

0800cc04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc0a:	4b12      	ldr	r3, [pc, #72]	; (800cc54 <vPortExitCritical+0x50>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10a      	bne.n	800cc28 <vPortExitCritical+0x24>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	607b      	str	r3, [r7, #4]
}
 800cc24:	bf00      	nop
 800cc26:	e7fe      	b.n	800cc26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc28:	4b0a      	ldr	r3, [pc, #40]	; (800cc54 <vPortExitCritical+0x50>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	4a09      	ldr	r2, [pc, #36]	; (800cc54 <vPortExitCritical+0x50>)
 800cc30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc32:	4b08      	ldr	r3, [pc, #32]	; (800cc54 <vPortExitCritical+0x50>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d105      	bne.n	800cc46 <vPortExitCritical+0x42>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	f383 8811 	msr	BASEPRI, r3
}
 800cc44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc46:	bf00      	nop
 800cc48:	370c      	adds	r7, #12
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	20000038 	.word	0x20000038
	...

0800cc60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc60:	f3ef 8009 	mrs	r0, PSP
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	4b15      	ldr	r3, [pc, #84]	; (800ccc0 <pxCurrentTCBConst>)
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	f01e 0f10 	tst.w	lr, #16
 800cc70:	bf08      	it	eq
 800cc72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7a:	6010      	str	r0, [r2, #0]
 800cc7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc84:	f380 8811 	msr	BASEPRI, r0
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f7fe fea6 	bl	800b9e0 <vTaskSwitchContext>
 800cc94:	f04f 0000 	mov.w	r0, #0
 800cc98:	f380 8811 	msr	BASEPRI, r0
 800cc9c:	bc09      	pop	{r0, r3}
 800cc9e:	6819      	ldr	r1, [r3, #0]
 800cca0:	6808      	ldr	r0, [r1, #0]
 800cca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca6:	f01e 0f10 	tst.w	lr, #16
 800ccaa:	bf08      	it	eq
 800ccac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ccb0:	f380 8809 	msr	PSP, r0
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	f3af 8000 	nop.w

0800ccc0 <pxCurrentTCBConst>:
 800ccc0:	200064b0 	.word	0x200064b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ccc4:	bf00      	nop
 800ccc6:	bf00      	nop

0800ccc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	607b      	str	r3, [r7, #4]
}
 800cce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cce2:	f7fe fdc3 	bl	800b86c <xTaskIncrementTick>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d003      	beq.n	800ccf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ccec:	4b06      	ldr	r3, [pc, #24]	; (800cd08 <xPortSysTickHandler+0x40>)
 800ccee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf2:	601a      	str	r2, [r3, #0]
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	f383 8811 	msr	BASEPRI, r3
}
 800ccfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd00:	bf00      	nop
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	e000ed04 	.word	0xe000ed04

0800cd0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd10:	4b0b      	ldr	r3, [pc, #44]	; (800cd40 <vPortSetupTimerInterrupt+0x34>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd16:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <vPortSetupTimerInterrupt+0x38>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd1c:	4b0a      	ldr	r3, [pc, #40]	; (800cd48 <vPortSetupTimerInterrupt+0x3c>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a0a      	ldr	r2, [pc, #40]	; (800cd4c <vPortSetupTimerInterrupt+0x40>)
 800cd22:	fba2 2303 	umull	r2, r3, r2, r3
 800cd26:	099b      	lsrs	r3, r3, #6
 800cd28:	4a09      	ldr	r2, [pc, #36]	; (800cd50 <vPortSetupTimerInterrupt+0x44>)
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd2e:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <vPortSetupTimerInterrupt+0x34>)
 800cd30:	2207      	movs	r2, #7
 800cd32:	601a      	str	r2, [r3, #0]
}
 800cd34:	bf00      	nop
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	e000e010 	.word	0xe000e010
 800cd44:	e000e018 	.word	0xe000e018
 800cd48:	2000002c 	.word	0x2000002c
 800cd4c:	10624dd3 	.word	0x10624dd3
 800cd50:	e000e014 	.word	0xe000e014

0800cd54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd64 <vPortEnableVFP+0x10>
 800cd58:	6801      	ldr	r1, [r0, #0]
 800cd5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd5e:	6001      	str	r1, [r0, #0]
 800cd60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd62:	bf00      	nop
 800cd64:	e000ed88 	.word	0xe000ed88

0800cd68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd6e:	f3ef 8305 	mrs	r3, IPSR
 800cd72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2b0f      	cmp	r3, #15
 800cd78:	d914      	bls.n	800cda4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd7a:	4a17      	ldr	r2, [pc, #92]	; (800cdd8 <vPortValidateInterruptPriority+0x70>)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	4413      	add	r3, r2
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd84:	4b15      	ldr	r3, [pc, #84]	; (800cddc <vPortValidateInterruptPriority+0x74>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	7afa      	ldrb	r2, [r7, #11]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d20a      	bcs.n	800cda4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	607b      	str	r3, [r7, #4]
}
 800cda0:	bf00      	nop
 800cda2:	e7fe      	b.n	800cda2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cda4:	4b0e      	ldr	r3, [pc, #56]	; (800cde0 <vPortValidateInterruptPriority+0x78>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdac:	4b0d      	ldr	r3, [pc, #52]	; (800cde4 <vPortValidateInterruptPriority+0x7c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d90a      	bls.n	800cdca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	603b      	str	r3, [r7, #0]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <vPortValidateInterruptPriority+0x60>
	}
 800cdca:	bf00      	nop
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	e000e3f0 	.word	0xe000e3f0
 800cddc:	20006adc 	.word	0x20006adc
 800cde0:	e000ed0c 	.word	0xe000ed0c
 800cde4:	20006ae0 	.word	0x20006ae0

0800cde8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08a      	sub	sp, #40	; 0x28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cdf4:	f7fe fc6c 	bl	800b6d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cdf8:	4b5b      	ldr	r3, [pc, #364]	; (800cf68 <pvPortMalloc+0x180>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce00:	f000 f920 	bl	800d044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce04:	4b59      	ldr	r3, [pc, #356]	; (800cf6c <pvPortMalloc+0x184>)
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f040 8093 	bne.w	800cf38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d01d      	beq.n	800ce54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce18:	2208      	movs	r2, #8
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f003 0307 	and.w	r3, r3, #7
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d014      	beq.n	800ce54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f023 0307 	bic.w	r3, r3, #7
 800ce30:	3308      	adds	r3, #8
 800ce32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00a      	beq.n	800ce54 <pvPortMalloc+0x6c>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	617b      	str	r3, [r7, #20]
}
 800ce50:	bf00      	nop
 800ce52:	e7fe      	b.n	800ce52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d06e      	beq.n	800cf38 <pvPortMalloc+0x150>
 800ce5a:	4b45      	ldr	r3, [pc, #276]	; (800cf70 <pvPortMalloc+0x188>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d869      	bhi.n	800cf38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce64:	4b43      	ldr	r3, [pc, #268]	; (800cf74 <pvPortMalloc+0x18c>)
 800ce66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce68:	4b42      	ldr	r3, [pc, #264]	; (800cf74 <pvPortMalloc+0x18c>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce6e:	e004      	b.n	800ce7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d903      	bls.n	800ce8c <pvPortMalloc+0xa4>
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1f1      	bne.n	800ce70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce8c:	4b36      	ldr	r3, [pc, #216]	; (800cf68 <pvPortMalloc+0x180>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d050      	beq.n	800cf38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce96:	6a3b      	ldr	r3, [r7, #32]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2208      	movs	r2, #8
 800ce9c:	4413      	add	r3, r2
 800ce9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	6a3b      	ldr	r3, [r7, #32]
 800cea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	1ad2      	subs	r2, r2, r3
 800ceb0:	2308      	movs	r3, #8
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d91f      	bls.n	800cef8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ceb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4413      	add	r3, r2
 800cebe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	f003 0307 	and.w	r3, r3, #7
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <pvPortMalloc+0xf8>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	613b      	str	r3, [r7, #16]
}
 800cedc:	bf00      	nop
 800cede:	e7fe      	b.n	800cede <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	685a      	ldr	r2, [r3, #4]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	1ad2      	subs	r2, r2, r3
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cef2:	69b8      	ldr	r0, [r7, #24]
 800cef4:	f000 f908 	bl	800d108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cef8:	4b1d      	ldr	r3, [pc, #116]	; (800cf70 <pvPortMalloc+0x188>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	4a1b      	ldr	r2, [pc, #108]	; (800cf70 <pvPortMalloc+0x188>)
 800cf04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf06:	4b1a      	ldr	r3, [pc, #104]	; (800cf70 <pvPortMalloc+0x188>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	4b1b      	ldr	r3, [pc, #108]	; (800cf78 <pvPortMalloc+0x190>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d203      	bcs.n	800cf1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf12:	4b17      	ldr	r3, [pc, #92]	; (800cf70 <pvPortMalloc+0x188>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a18      	ldr	r2, [pc, #96]	; (800cf78 <pvPortMalloc+0x190>)
 800cf18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	4b13      	ldr	r3, [pc, #76]	; (800cf6c <pvPortMalloc+0x184>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	431a      	orrs	r2, r3
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf2e:	4b13      	ldr	r3, [pc, #76]	; (800cf7c <pvPortMalloc+0x194>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	3301      	adds	r3, #1
 800cf34:	4a11      	ldr	r2, [pc, #68]	; (800cf7c <pvPortMalloc+0x194>)
 800cf36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf38:	f7fe fbd8 	bl	800b6ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	f003 0307 	and.w	r3, r3, #7
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00a      	beq.n	800cf5c <pvPortMalloc+0x174>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	60fb      	str	r3, [r7, #12]
}
 800cf58:	bf00      	nop
 800cf5a:	e7fe      	b.n	800cf5a <pvPortMalloc+0x172>
	return pvReturn;
 800cf5c:	69fb      	ldr	r3, [r7, #28]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3728      	adds	r7, #40	; 0x28
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	2000a6ec 	.word	0x2000a6ec
 800cf6c:	2000a700 	.word	0x2000a700
 800cf70:	2000a6f0 	.word	0x2000a6f0
 800cf74:	2000a6e4 	.word	0x2000a6e4
 800cf78:	2000a6f4 	.word	0x2000a6f4
 800cf7c:	2000a6f8 	.word	0x2000a6f8

0800cf80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b086      	sub	sp, #24
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d04d      	beq.n	800d02e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf92:	2308      	movs	r3, #8
 800cf94:	425b      	negs	r3, r3
 800cf96:	697a      	ldr	r2, [r7, #20]
 800cf98:	4413      	add	r3, r2
 800cf9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	4b24      	ldr	r3, [pc, #144]	; (800d038 <vPortFree+0xb8>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d10a      	bne.n	800cfc4 <vPortFree+0x44>
	__asm volatile
 800cfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	60fb      	str	r3, [r7, #12]
}
 800cfc0:	bf00      	nop
 800cfc2:	e7fe      	b.n	800cfc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00a      	beq.n	800cfe2 <vPortFree+0x62>
	__asm volatile
 800cfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	60bb      	str	r3, [r7, #8]
}
 800cfde:	bf00      	nop
 800cfe0:	e7fe      	b.n	800cfe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	685a      	ldr	r2, [r3, #4]
 800cfe6:	4b14      	ldr	r3, [pc, #80]	; (800d038 <vPortFree+0xb8>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4013      	ands	r3, r2
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d01e      	beq.n	800d02e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d11a      	bne.n	800d02e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	4b0e      	ldr	r3, [pc, #56]	; (800d038 <vPortFree+0xb8>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	43db      	mvns	r3, r3
 800d002:	401a      	ands	r2, r3
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d008:	f7fe fb62 	bl	800b6d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	685a      	ldr	r2, [r3, #4]
 800d010:	4b0a      	ldr	r3, [pc, #40]	; (800d03c <vPortFree+0xbc>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4413      	add	r3, r2
 800d016:	4a09      	ldr	r2, [pc, #36]	; (800d03c <vPortFree+0xbc>)
 800d018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d01a:	6938      	ldr	r0, [r7, #16]
 800d01c:	f000 f874 	bl	800d108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d020:	4b07      	ldr	r3, [pc, #28]	; (800d040 <vPortFree+0xc0>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3301      	adds	r3, #1
 800d026:	4a06      	ldr	r2, [pc, #24]	; (800d040 <vPortFree+0xc0>)
 800d028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d02a:	f7fe fb5f 	bl	800b6ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d02e:	bf00      	nop
 800d030:	3718      	adds	r7, #24
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	2000a700 	.word	0x2000a700
 800d03c:	2000a6f0 	.word	0x2000a6f0
 800d040:	2000a6fc 	.word	0x2000a6fc

0800d044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d04a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d050:	4b27      	ldr	r3, [pc, #156]	; (800d0f0 <prvHeapInit+0xac>)
 800d052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f003 0307 	and.w	r3, r3, #7
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00c      	beq.n	800d078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	3307      	adds	r3, #7
 800d062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f023 0307 	bic.w	r3, r3, #7
 800d06a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	4a1f      	ldr	r2, [pc, #124]	; (800d0f0 <prvHeapInit+0xac>)
 800d074:	4413      	add	r3, r2
 800d076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d07c:	4a1d      	ldr	r2, [pc, #116]	; (800d0f4 <prvHeapInit+0xb0>)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d082:	4b1c      	ldr	r3, [pc, #112]	; (800d0f4 <prvHeapInit+0xb0>)
 800d084:	2200      	movs	r2, #0
 800d086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	4413      	add	r3, r2
 800d08e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d090:	2208      	movs	r2, #8
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	1a9b      	subs	r3, r3, r2
 800d096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f023 0307 	bic.w	r3, r3, #7
 800d09e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	4a15      	ldr	r2, [pc, #84]	; (800d0f8 <prvHeapInit+0xb4>)
 800d0a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0a6:	4b14      	ldr	r3, [pc, #80]	; (800d0f8 <prvHeapInit+0xb4>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0ae:	4b12      	ldr	r3, [pc, #72]	; (800d0f8 <prvHeapInit+0xb4>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	1ad2      	subs	r2, r2, r3
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0c4:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <prvHeapInit+0xb4>)
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	4a0a      	ldr	r2, [pc, #40]	; (800d0fc <prvHeapInit+0xb8>)
 800d0d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	4a09      	ldr	r2, [pc, #36]	; (800d100 <prvHeapInit+0xbc>)
 800d0da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0dc:	4b09      	ldr	r3, [pc, #36]	; (800d104 <prvHeapInit+0xc0>)
 800d0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0e2:	601a      	str	r2, [r3, #0]
}
 800d0e4:	bf00      	nop
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	20006ae4 	.word	0x20006ae4
 800d0f4:	2000a6e4 	.word	0x2000a6e4
 800d0f8:	2000a6ec 	.word	0x2000a6ec
 800d0fc:	2000a6f4 	.word	0x2000a6f4
 800d100:	2000a6f0 	.word	0x2000a6f0
 800d104:	2000a700 	.word	0x2000a700

0800d108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d110:	4b28      	ldr	r3, [pc, #160]	; (800d1b4 <prvInsertBlockIntoFreeList+0xac>)
 800d112:	60fb      	str	r3, [r7, #12]
 800d114:	e002      	b.n	800d11c <prvInsertBlockIntoFreeList+0x14>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	60fb      	str	r3, [r7, #12]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	429a      	cmp	r2, r3
 800d124:	d8f7      	bhi.n	800d116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	68ba      	ldr	r2, [r7, #8]
 800d130:	4413      	add	r3, r2
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	429a      	cmp	r2, r3
 800d136:	d108      	bne.n	800d14a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	441a      	add	r2, r3
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	441a      	add	r2, r3
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d118      	bne.n	800d190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	4b15      	ldr	r3, [pc, #84]	; (800d1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	429a      	cmp	r2, r3
 800d168:	d00d      	beq.n	800d186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	441a      	add	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	e008      	b.n	800d198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d186:	4b0c      	ldr	r3, [pc, #48]	; (800d1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	601a      	str	r2, [r3, #0]
 800d18e:	e003      	b.n	800d198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d002      	beq.n	800d1a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1a6:	bf00      	nop
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	2000a6e4 	.word	0x2000a6e4
 800d1b8:	2000a6ec 	.word	0x2000a6ec

0800d1bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d1c6:	f007 fec1 	bl	8014f4c <sys_timeouts_sleeptime>
 800d1ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d2:	d10b      	bne.n	800d1ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d1d4:	4813      	ldr	r0, [pc, #76]	; (800d224 <tcpip_timeouts_mbox_fetch+0x68>)
 800d1d6:	f00c fe3e 	bl	8019e56 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d1da:	2200      	movs	r2, #0
 800d1dc:	6839      	ldr	r1, [r7, #0]
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f00c fdc6 	bl	8019d70 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d1e4:	480f      	ldr	r0, [pc, #60]	; (800d224 <tcpip_timeouts_mbox_fetch+0x68>)
 800d1e6:	f00c fe27 	bl	8019e38 <sys_mutex_lock>
    return;
 800d1ea:	e018      	b.n	800d21e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d102      	bne.n	800d1f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d1f2:	f007 fe71 	bl	8014ed8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d1f6:	e7e6      	b.n	800d1c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d1f8:	480a      	ldr	r0, [pc, #40]	; (800d224 <tcpip_timeouts_mbox_fetch+0x68>)
 800d1fa:	f00c fe2c 	bl	8019e56 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f00c fdb4 	bl	8019d70 <sys_arch_mbox_fetch>
 800d208:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d20a:	4806      	ldr	r0, [pc, #24]	; (800d224 <tcpip_timeouts_mbox_fetch+0x68>)
 800d20c:	f00c fe14 	bl	8019e38 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d216:	d102      	bne.n	800d21e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d218:	f007 fe5e 	bl	8014ed8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d21c:	e7d3      	b.n	800d1c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	2000a710 	.word	0x2000a710

0800d228 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d230:	4810      	ldr	r0, [pc, #64]	; (800d274 <tcpip_thread+0x4c>)
 800d232:	f00c fe01 	bl	8019e38 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d236:	4b10      	ldr	r3, [pc, #64]	; (800d278 <tcpip_thread+0x50>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d005      	beq.n	800d24a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d23e:	4b0e      	ldr	r3, [pc, #56]	; (800d278 <tcpip_thread+0x50>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a0e      	ldr	r2, [pc, #56]	; (800d27c <tcpip_thread+0x54>)
 800d244:	6812      	ldr	r2, [r2, #0]
 800d246:	4610      	mov	r0, r2
 800d248:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d24a:	f107 030c 	add.w	r3, r7, #12
 800d24e:	4619      	mov	r1, r3
 800d250:	480b      	ldr	r0, [pc, #44]	; (800d280 <tcpip_thread+0x58>)
 800d252:	f7ff ffb3 	bl	800d1bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d106      	bne.n	800d26a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d25c:	4b09      	ldr	r3, [pc, #36]	; (800d284 <tcpip_thread+0x5c>)
 800d25e:	2291      	movs	r2, #145	; 0x91
 800d260:	4909      	ldr	r1, [pc, #36]	; (800d288 <tcpip_thread+0x60>)
 800d262:	480a      	ldr	r0, [pc, #40]	; (800d28c <tcpip_thread+0x64>)
 800d264:	f00d fc58 	bl	801ab18 <iprintf>
      continue;
 800d268:	e003      	b.n	800d272 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	4618      	mov	r0, r3
 800d26e:	f000 f80f 	bl	800d290 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d272:	e7ea      	b.n	800d24a <tcpip_thread+0x22>
 800d274:	2000a710 	.word	0x2000a710
 800d278:	2000a704 	.word	0x2000a704
 800d27c:	2000a708 	.word	0x2000a708
 800d280:	2000a70c 	.word	0x2000a70c
 800d284:	0801c3bc 	.word	0x0801c3bc
 800d288:	0801c3ec 	.word	0x0801c3ec
 800d28c:	0801c40c 	.word	0x0801c40c

0800d290 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d026      	beq.n	800d2ee <tcpip_thread_handle_msg+0x5e>
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	dc2b      	bgt.n	800d2fc <tcpip_thread_handle_msg+0x6c>
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d002      	beq.n	800d2ae <tcpip_thread_handle_msg+0x1e>
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d015      	beq.n	800d2d8 <tcpip_thread_handle_msg+0x48>
 800d2ac:	e026      	b.n	800d2fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	6850      	ldr	r0, [r2, #4]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	6892      	ldr	r2, [r2, #8]
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4798      	blx	r3
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d004      	beq.n	800d2ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f001 ff9d 	bl	800f208 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	2009      	movs	r0, #9
 800d2d2:	f001 f951 	bl	800e578 <memp_free>
      break;
 800d2d6:	e018      	b.n	800d30a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	6892      	ldr	r2, [r2, #8]
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d2e4:	6879      	ldr	r1, [r7, #4]
 800d2e6:	2008      	movs	r0, #8
 800d2e8:	f001 f946 	bl	800e578 <memp_free>
      break;
 800d2ec:	e00d      	b.n	800d30a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	6892      	ldr	r2, [r2, #8]
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	4798      	blx	r3
      break;
 800d2fa:	e006      	b.n	800d30a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d2fc:	4b05      	ldr	r3, [pc, #20]	; (800d314 <tcpip_thread_handle_msg+0x84>)
 800d2fe:	22cf      	movs	r2, #207	; 0xcf
 800d300:	4905      	ldr	r1, [pc, #20]	; (800d318 <tcpip_thread_handle_msg+0x88>)
 800d302:	4806      	ldr	r0, [pc, #24]	; (800d31c <tcpip_thread_handle_msg+0x8c>)
 800d304:	f00d fc08 	bl	801ab18 <iprintf>
      break;
 800d308:	bf00      	nop
  }
}
 800d30a:	bf00      	nop
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	0801c3bc 	.word	0x0801c3bc
 800d318:	0801c3ec 	.word	0x0801c3ec
 800d31c:	0801c40c 	.word	0x0801c40c

0800d320 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d32c:	481a      	ldr	r0, [pc, #104]	; (800d398 <tcpip_inpkt+0x78>)
 800d32e:	f00c fd50 	bl	8019dd2 <sys_mbox_valid>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d105      	bne.n	800d344 <tcpip_inpkt+0x24>
 800d338:	4b18      	ldr	r3, [pc, #96]	; (800d39c <tcpip_inpkt+0x7c>)
 800d33a:	22fc      	movs	r2, #252	; 0xfc
 800d33c:	4918      	ldr	r1, [pc, #96]	; (800d3a0 <tcpip_inpkt+0x80>)
 800d33e:	4819      	ldr	r0, [pc, #100]	; (800d3a4 <tcpip_inpkt+0x84>)
 800d340:	f00d fbea 	bl	801ab18 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d344:	2009      	movs	r0, #9
 800d346:	f001 f8a1 	bl	800e48c <memp_malloc>
 800d34a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d102      	bne.n	800d358 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d352:	f04f 33ff 	mov.w	r3, #4294967295
 800d356:	e01a      	b.n	800d38e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	2200      	movs	r2, #0
 800d35c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d370:	6979      	ldr	r1, [r7, #20]
 800d372:	4809      	ldr	r0, [pc, #36]	; (800d398 <tcpip_inpkt+0x78>)
 800d374:	f00c fce2 	bl	8019d3c <sys_mbox_trypost>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d006      	beq.n	800d38c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d37e:	6979      	ldr	r1, [r7, #20]
 800d380:	2009      	movs	r0, #9
 800d382:	f001 f8f9 	bl	800e578 <memp_free>
    return ERR_MEM;
 800d386:	f04f 33ff 	mov.w	r3, #4294967295
 800d38a:	e000      	b.n	800d38e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d38c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3718      	adds	r7, #24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	2000a70c 	.word	0x2000a70c
 800d39c:	0801c3bc 	.word	0x0801c3bc
 800d3a0:	0801c434 	.word	0x0801c434
 800d3a4:	0801c40c 	.word	0x0801c40c

0800d3a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d3b8:	f003 0318 	and.w	r3, r3, #24
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d006      	beq.n	800d3ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d3c0:	4a08      	ldr	r2, [pc, #32]	; (800d3e4 <tcpip_input+0x3c>)
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff ffab 	bl	800d320 <tcpip_inpkt>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	e005      	b.n	800d3da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d3ce:	4a06      	ldr	r2, [pc, #24]	; (800d3e8 <tcpip_input+0x40>)
 800d3d0:	6839      	ldr	r1, [r7, #0]
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7ff ffa4 	bl	800d320 <tcpip_inpkt>
 800d3d8:	4603      	mov	r3, r0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	08019b5d 	.word	0x08019b5d
 800d3e8:	08018a29 	.word	0x08018a29

0800d3ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d3f6:	4819      	ldr	r0, [pc, #100]	; (800d45c <tcpip_try_callback+0x70>)
 800d3f8:	f00c fceb 	bl	8019dd2 <sys_mbox_valid>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d106      	bne.n	800d410 <tcpip_try_callback+0x24>
 800d402:	4b17      	ldr	r3, [pc, #92]	; (800d460 <tcpip_try_callback+0x74>)
 800d404:	f240 125d 	movw	r2, #349	; 0x15d
 800d408:	4916      	ldr	r1, [pc, #88]	; (800d464 <tcpip_try_callback+0x78>)
 800d40a:	4817      	ldr	r0, [pc, #92]	; (800d468 <tcpip_try_callback+0x7c>)
 800d40c:	f00d fb84 	bl	801ab18 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d410:	2008      	movs	r0, #8
 800d412:	f001 f83b 	bl	800e48c <memp_malloc>
 800d416:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d102      	bne.n	800d424 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d41e:	f04f 33ff 	mov.w	r3, #4294967295
 800d422:	e017      	b.n	800d454 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2201      	movs	r2, #1
 800d428:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	683a      	ldr	r2, [r7, #0]
 800d434:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d436:	68f9      	ldr	r1, [r7, #12]
 800d438:	4808      	ldr	r0, [pc, #32]	; (800d45c <tcpip_try_callback+0x70>)
 800d43a:	f00c fc7f 	bl	8019d3c <sys_mbox_trypost>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d006      	beq.n	800d452 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d444:	68f9      	ldr	r1, [r7, #12]
 800d446:	2008      	movs	r0, #8
 800d448:	f001 f896 	bl	800e578 <memp_free>
    return ERR_MEM;
 800d44c:	f04f 33ff 	mov.w	r3, #4294967295
 800d450:	e000      	b.n	800d454 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	2000a70c 	.word	0x2000a70c
 800d460:	0801c3bc 	.word	0x0801c3bc
 800d464:	0801c434 	.word	0x0801c434
 800d468:	0801c40c 	.word	0x0801c40c

0800d46c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af02      	add	r7, sp, #8
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d476:	f000 fb5e 	bl	800db36 <lwip_init>

  tcpip_init_done = initfunc;
 800d47a:	4a17      	ldr	r2, [pc, #92]	; (800d4d8 <tcpip_init+0x6c>)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d480:	4a16      	ldr	r2, [pc, #88]	; (800d4dc <tcpip_init+0x70>)
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d486:	2106      	movs	r1, #6
 800d488:	4815      	ldr	r0, [pc, #84]	; (800d4e0 <tcpip_init+0x74>)
 800d48a:	f00c fc3d 	bl	8019d08 <sys_mbox_new>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d006      	beq.n	800d4a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d494:	4b13      	ldr	r3, [pc, #76]	; (800d4e4 <tcpip_init+0x78>)
 800d496:	f240 2261 	movw	r2, #609	; 0x261
 800d49a:	4913      	ldr	r1, [pc, #76]	; (800d4e8 <tcpip_init+0x7c>)
 800d49c:	4813      	ldr	r0, [pc, #76]	; (800d4ec <tcpip_init+0x80>)
 800d49e:	f00d fb3b 	bl	801ab18 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d4a2:	4813      	ldr	r0, [pc, #76]	; (800d4f0 <tcpip_init+0x84>)
 800d4a4:	f00c fcb2 	bl	8019e0c <sys_mutex_new>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d006      	beq.n	800d4bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d4ae:	4b0d      	ldr	r3, [pc, #52]	; (800d4e4 <tcpip_init+0x78>)
 800d4b0:	f240 2265 	movw	r2, #613	; 0x265
 800d4b4:	490f      	ldr	r1, [pc, #60]	; (800d4f4 <tcpip_init+0x88>)
 800d4b6:	480d      	ldr	r0, [pc, #52]	; (800d4ec <tcpip_init+0x80>)
 800d4b8:	f00d fb2e 	bl	801ab18 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d4bc:	2318      	movs	r3, #24
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	490c      	ldr	r1, [pc, #48]	; (800d4f8 <tcpip_init+0x8c>)
 800d4c8:	480c      	ldr	r0, [pc, #48]	; (800d4fc <tcpip_init+0x90>)
 800d4ca:	f00c fcd1 	bl	8019e70 <sys_thread_new>
}
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	2000a704 	.word	0x2000a704
 800d4dc:	2000a708 	.word	0x2000a708
 800d4e0:	2000a70c 	.word	0x2000a70c
 800d4e4:	0801c3bc 	.word	0x0801c3bc
 800d4e8:	0801c444 	.word	0x0801c444
 800d4ec:	0801c40c 	.word	0x0801c40c
 800d4f0:	2000a710 	.word	0x2000a710
 800d4f4:	0801c468 	.word	0x0801c468
 800d4f8:	0800d229 	.word	0x0800d229
 800d4fc:	0801c48c 	.word	0x0801c48c

0800d500 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d50a:	88fb      	ldrh	r3, [r7, #6]
 800d50c:	021b      	lsls	r3, r3, #8
 800d50e:	b21a      	sxth	r2, r3
 800d510:	88fb      	ldrh	r3, [r7, #6]
 800d512:	0a1b      	lsrs	r3, r3, #8
 800d514:	b29b      	uxth	r3, r3
 800d516:	b21b      	sxth	r3, r3
 800d518:	4313      	orrs	r3, r2
 800d51a:	b21b      	sxth	r3, r3
 800d51c:	b29b      	uxth	r3, r3
}
 800d51e:	4618      	mov	r0, r3
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d52a:	b480      	push	{r7}
 800d52c:	b083      	sub	sp, #12
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	061a      	lsls	r2, r3, #24
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	021b      	lsls	r3, r3, #8
 800d53a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d53e:	431a      	orrs	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	0a1b      	lsrs	r3, r3, #8
 800d544:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d548:	431a      	orrs	r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	0e1b      	lsrs	r3, r3, #24
 800d54e:	4313      	orrs	r3, r2
}
 800d550:	4618      	mov	r0, r3
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800d55c:	b480      	push	{r7}
 800d55e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800d560:	bf00      	nop
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
	...

0800d56c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	4603      	mov	r3, r0
 800d574:	6039      	str	r1, [r7, #0]
 800d576:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800d578:	79fb      	ldrb	r3, [r7, #7]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d80f      	bhi.n	800d59e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d006      	beq.n	800d592 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	4909      	ldr	r1, [pc, #36]	; (800d5ac <dns_setserver+0x40>)
 800d588:	683a      	ldr	r2, [r7, #0]
 800d58a:	6812      	ldr	r2, [r2, #0]
 800d58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800d590:	e005      	b.n	800d59e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	4905      	ldr	r1, [pc, #20]	; (800d5ac <dns_setserver+0x40>)
 800d596:	4a06      	ldr	r2, [pc, #24]	; (800d5b0 <dns_setserver+0x44>)
 800d598:	6812      	ldr	r2, [r2, #0]
 800d59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d59e:	bf00      	nop
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	2000ab94 	.word	0x2000ab94
 800d5b0:	0801f458 	.word	0x0801f458

0800d5b4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800d5b8:	f000 faa8 	bl	800db0c <dns_check_entries>
}
 800d5bc:	bf00      	nop
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b090      	sub	sp, #64	; 0x40
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800d5ca:	79fa      	ldrb	r2, [r7, #7]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	011b      	lsls	r3, r3, #4
 800d5d0:	4413      	add	r3, r2
 800d5d2:	011b      	lsls	r3, r3, #4
 800d5d4:	4a6c      	ldr	r2, [pc, #432]	; (800d788 <dns_send+0x1c8>)
 800d5d6:	4413      	add	r3, r2
 800d5d8:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800d5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5dc:	7adb      	ldrb	r3, [r3, #11]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d906      	bls.n	800d5f0 <dns_send+0x30>
 800d5e2:	4b6a      	ldr	r3, [pc, #424]	; (800d78c <dns_send+0x1cc>)
 800d5e4:	f240 22fa 	movw	r2, #762	; 0x2fa
 800d5e8:	4969      	ldr	r1, [pc, #420]	; (800d790 <dns_send+0x1d0>)
 800d5ea:	486a      	ldr	r0, [pc, #424]	; (800d794 <dns_send+0x1d4>)
 800d5ec:	f00d fa94 	bl	801ab18 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	7adb      	ldrb	r3, [r3, #11]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	4b68      	ldr	r3, [pc, #416]	; (800d798 <dns_send+0x1d8>)
 800d5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d109      	bne.n	800d614 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	2100      	movs	r1, #0
 800d604:	4618      	mov	r0, r3
 800d606:	f000 f8cb 	bl	800d7a0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800d60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60c:	2200      	movs	r2, #0
 800d60e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800d610:	2300      	movs	r3, #0
 800d612:	e0b4      	b.n	800d77e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	3310      	adds	r3, #16
 800d618:	4618      	mov	r0, r3
 800d61a:	f7f2 fde9 	bl	80001f0 <strlen>
 800d61e:	4603      	mov	r3, r0
 800d620:	b29b      	uxth	r3, r3
 800d622:	3312      	adds	r3, #18
 800d624:	b29b      	uxth	r3, r3
 800d626:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d62a:	4619      	mov	r1, r3
 800d62c:	2036      	movs	r0, #54	; 0x36
 800d62e:	f001 fb07 	bl	800ec40 <pbuf_alloc>
 800d632:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800d634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d636:	2b00      	cmp	r3, #0
 800d638:	f000 8095 	beq.w	800d766 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800d63c:	f107 0310 	add.w	r3, r7, #16
 800d640:	220c      	movs	r2, #12
 800d642:	2100      	movs	r1, #0
 800d644:	4618      	mov	r0, r3
 800d646:	f00d facc 	bl	801abe2 <memset>
    hdr.id = lwip_htons(entry->txid);
 800d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64c:	891b      	ldrh	r3, [r3, #8]
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff ff56 	bl	800d500 <lwip_htons>
 800d654:	4603      	mov	r3, r0
 800d656:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800d658:	2301      	movs	r3, #1
 800d65a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800d65c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d660:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800d662:	f107 0310 	add.w	r3, r7, #16
 800d666:	220c      	movs	r2, #12
 800d668:	4619      	mov	r1, r3
 800d66a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d66c:	f002 f880 	bl	800f770 <pbuf_take>
    hostname = entry->name;
 800d670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d672:	3310      	adds	r3, #16
 800d674:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800d676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d678:	3b01      	subs	r3, #1
 800d67a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800d67c:	230c      	movs	r3, #12
 800d67e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800d680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d682:	3301      	adds	r3, #1
 800d684:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800d686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d688:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800d68a:	2300      	movs	r3, #0
 800d68c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d690:	e007      	b.n	800d6a2 <dns_send+0xe2>
        ++n;
 800d692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d696:	3301      	adds	r3, #1
 800d698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800d69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69e:	3301      	adds	r3, #1
 800d6a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d6a8:	d003      	beq.n	800d6b2 <dns_send+0xf2>
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1ef      	bne.n	800d692 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800d6b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800d6ba:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800d6bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6c0:	4413      	add	r3, r2
 800d6c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	dc53      	bgt.n	800d772 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800d6ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d6ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6d4:	f002 f97a 	bl	800f9cc <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800d6d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d6da:	3301      	adds	r3, #1
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6e4:	f002 f8d6 	bl	800f894 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800d6e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d6f0:	4413      	add	r3, r2
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1bf      	bne.n	800d680 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800d700:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d702:	2200      	movs	r2, #0
 800d704:	4619      	mov	r1, r3
 800d706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d708:	f002 f960 	bl	800f9cc <pbuf_put_at>
    query_idx++;
 800d70c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d70e:	3301      	adds	r3, #1
 800d710:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800d712:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d716:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800d718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d71c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800d71e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d720:	f107 010c 	add.w	r1, r7, #12
 800d724:	2204      	movs	r2, #4
 800d726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d728:	f002 f8b4 	bl	800f894 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	7bdb      	ldrb	r3, [r3, #15]
 800d730:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800d734:	2335      	movs	r3, #53	; 0x35
 800d736:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800d738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73a:	7adb      	ldrb	r3, [r3, #11]
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4a16      	ldr	r2, [pc, #88]	; (800d798 <dns_send+0x1d8>)
 800d740:	4413      	add	r3, r2
 800d742:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800d744:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d748:	4a14      	ldr	r2, [pc, #80]	; (800d79c <dns_send+0x1dc>)
 800d74a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d74e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d750:	69fa      	ldr	r2, [r7, #28]
 800d752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d754:	f007 fdf4 	bl	8015340 <udp_sendto>
 800d758:	4603      	mov	r3, r0
 800d75a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800d75e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d760:	f001 fd52 	bl	800f208 <pbuf_free>
 800d764:	e002      	b.n	800d76c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800d766:	23ff      	movs	r3, #255	; 0xff
 800d768:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800d76c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d770:	e005      	b.n	800d77e <dns_send+0x1be>
        goto overflow_return;
 800d772:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800d774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d776:	f001 fd47 	bl	800f208 <pbuf_free>
  return ERR_VAL;
 800d77a:	f06f 0305 	mvn.w	r3, #5
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3740      	adds	r7, #64	; 0x40
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	2000a724 	.word	0x2000a724
 800d78c:	0801c49c 	.word	0x0801c49c
 800d790:	0801c4cc 	.word	0x0801c4cc
 800d794:	0801c4e4 	.word	0x0801c4e4
 800d798:	2000ab94 	.word	0x2000ab94
 800d79c:	2000a714 	.word	0x2000a714

0800d7a0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800d7a0:	b590      	push	{r4, r7, lr}
 800d7a2:	b085      	sub	sp, #20
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	6039      	str	r1, [r7, #0]
 800d7aa:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	73fb      	strb	r3, [r7, #15]
 800d7b0:	e03d      	b.n	800d82e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800d7b2:	7bfa      	ldrb	r2, [r7, #15]
 800d7b4:	4957      	ldr	r1, [pc, #348]	; (800d914 <dns_call_found+0x174>)
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	005b      	lsls	r3, r3, #1
 800d7ba:	4413      	add	r3, r2
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	440b      	add	r3, r1
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d030      	beq.n	800d828 <dns_call_found+0x88>
 800d7c6:	7bfa      	ldrb	r2, [r7, #15]
 800d7c8:	4952      	ldr	r1, [pc, #328]	; (800d914 <dns_call_found+0x174>)
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	005b      	lsls	r3, r3, #1
 800d7ce:	4413      	add	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	440b      	add	r3, r1
 800d7d4:	3308      	adds	r3, #8
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	79fa      	ldrb	r2, [r7, #7]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d124      	bne.n	800d828 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800d7de:	7bfa      	ldrb	r2, [r7, #15]
 800d7e0:	494c      	ldr	r1, [pc, #304]	; (800d914 <dns_call_found+0x174>)
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	4413      	add	r3, r2
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	440b      	add	r3, r1
 800d7ec:	681c      	ldr	r4, [r3, #0]
 800d7ee:	79fa      	ldrb	r2, [r7, #7]
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	011b      	lsls	r3, r3, #4
 800d7f4:	4413      	add	r3, r2
 800d7f6:	011b      	lsls	r3, r3, #4
 800d7f8:	3310      	adds	r3, #16
 800d7fa:	4a47      	ldr	r2, [pc, #284]	; (800d918 <dns_call_found+0x178>)
 800d7fc:	1898      	adds	r0, r3, r2
 800d7fe:	7bfa      	ldrb	r2, [r7, #15]
 800d800:	4944      	ldr	r1, [pc, #272]	; (800d914 <dns_call_found+0x174>)
 800d802:	4613      	mov	r3, r2
 800d804:	005b      	lsls	r3, r3, #1
 800d806:	4413      	add	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	440b      	add	r3, r1
 800d80c:	3304      	adds	r3, #4
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	461a      	mov	r2, r3
 800d812:	6839      	ldr	r1, [r7, #0]
 800d814:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800d816:	7bfa      	ldrb	r2, [r7, #15]
 800d818:	493e      	ldr	r1, [pc, #248]	; (800d914 <dns_call_found+0x174>)
 800d81a:	4613      	mov	r3, r2
 800d81c:	005b      	lsls	r3, r3, #1
 800d81e:	4413      	add	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	440b      	add	r3, r1
 800d824:	2200      	movs	r2, #0
 800d826:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800d828:	7bfb      	ldrb	r3, [r7, #15]
 800d82a:	3301      	adds	r3, #1
 800d82c:	73fb      	strb	r3, [r7, #15]
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	2b03      	cmp	r3, #3
 800d832:	d9be      	bls.n	800d7b2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800d834:	2300      	movs	r3, #0
 800d836:	73fb      	strb	r3, [r7, #15]
 800d838:	e031      	b.n	800d89e <dns_call_found+0xfe>
    if (i == idx) {
 800d83a:	7bfa      	ldrb	r2, [r7, #15]
 800d83c:	79fb      	ldrb	r3, [r7, #7]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d029      	beq.n	800d896 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800d842:	7bfa      	ldrb	r2, [r7, #15]
 800d844:	4934      	ldr	r1, [pc, #208]	; (800d918 <dns_call_found+0x178>)
 800d846:	4613      	mov	r3, r2
 800d848:	011b      	lsls	r3, r3, #4
 800d84a:	4413      	add	r3, r2
 800d84c:	011b      	lsls	r3, r3, #4
 800d84e:	440b      	add	r3, r1
 800d850:	330a      	adds	r3, #10
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	2b02      	cmp	r3, #2
 800d856:	d11f      	bne.n	800d898 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800d858:	7bfa      	ldrb	r2, [r7, #15]
 800d85a:	492f      	ldr	r1, [pc, #188]	; (800d918 <dns_call_found+0x178>)
 800d85c:	4613      	mov	r3, r2
 800d85e:	011b      	lsls	r3, r3, #4
 800d860:	4413      	add	r3, r2
 800d862:	011b      	lsls	r3, r3, #4
 800d864:	440b      	add	r3, r1
 800d866:	330f      	adds	r3, #15
 800d868:	7819      	ldrb	r1, [r3, #0]
 800d86a:	79fa      	ldrb	r2, [r7, #7]
 800d86c:	482a      	ldr	r0, [pc, #168]	; (800d918 <dns_call_found+0x178>)
 800d86e:	4613      	mov	r3, r2
 800d870:	011b      	lsls	r3, r3, #4
 800d872:	4413      	add	r3, r2
 800d874:	011b      	lsls	r3, r3, #4
 800d876:	4403      	add	r3, r0
 800d878:	330f      	adds	r3, #15
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	4299      	cmp	r1, r3
 800d87e:	d10b      	bne.n	800d898 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800d880:	79fa      	ldrb	r2, [r7, #7]
 800d882:	4925      	ldr	r1, [pc, #148]	; (800d918 <dns_call_found+0x178>)
 800d884:	4613      	mov	r3, r2
 800d886:	011b      	lsls	r3, r3, #4
 800d888:	4413      	add	r3, r2
 800d88a:	011b      	lsls	r3, r3, #4
 800d88c:	440b      	add	r3, r1
 800d88e:	330f      	adds	r3, #15
 800d890:	2204      	movs	r2, #4
 800d892:	701a      	strb	r2, [r3, #0]
        break;
 800d894:	e006      	b.n	800d8a4 <dns_call_found+0x104>
      continue; /* only check other requests */
 800d896:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800d898:	7bfb      	ldrb	r3, [r7, #15]
 800d89a:	3301      	adds	r3, #1
 800d89c:	73fb      	strb	r3, [r7, #15]
 800d89e:	7bfb      	ldrb	r3, [r7, #15]
 800d8a0:	2b03      	cmp	r3, #3
 800d8a2:	d9ca      	bls.n	800d83a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800d8a4:	79fa      	ldrb	r2, [r7, #7]
 800d8a6:	491c      	ldr	r1, [pc, #112]	; (800d918 <dns_call_found+0x178>)
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	011b      	lsls	r3, r3, #4
 800d8ac:	4413      	add	r3, r2
 800d8ae:	011b      	lsls	r3, r3, #4
 800d8b0:	440b      	add	r3, r1
 800d8b2:	330f      	adds	r3, #15
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	d827      	bhi.n	800d90a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800d8ba:	79fa      	ldrb	r2, [r7, #7]
 800d8bc:	4916      	ldr	r1, [pc, #88]	; (800d918 <dns_call_found+0x178>)
 800d8be:	4613      	mov	r3, r2
 800d8c0:	011b      	lsls	r3, r3, #4
 800d8c2:	4413      	add	r3, r2
 800d8c4:	011b      	lsls	r3, r3, #4
 800d8c6:	440b      	add	r3, r1
 800d8c8:	330f      	adds	r3, #15
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	4b13      	ldr	r3, [pc, #76]	; (800d91c <dns_call_found+0x17c>)
 800d8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f007 ffff 	bl	80158d8 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800d8da:	79fa      	ldrb	r2, [r7, #7]
 800d8dc:	490e      	ldr	r1, [pc, #56]	; (800d918 <dns_call_found+0x178>)
 800d8de:	4613      	mov	r3, r2
 800d8e0:	011b      	lsls	r3, r3, #4
 800d8e2:	4413      	add	r3, r2
 800d8e4:	011b      	lsls	r3, r3, #4
 800d8e6:	440b      	add	r3, r1
 800d8e8:	330f      	adds	r3, #15
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	4b0b      	ldr	r3, [pc, #44]	; (800d91c <dns_call_found+0x17c>)
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800d8f6:	79fa      	ldrb	r2, [r7, #7]
 800d8f8:	4907      	ldr	r1, [pc, #28]	; (800d918 <dns_call_found+0x178>)
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	011b      	lsls	r3, r3, #4
 800d8fe:	4413      	add	r3, r2
 800d900:	011b      	lsls	r3, r3, #4
 800d902:	440b      	add	r3, r1
 800d904:	330f      	adds	r3, #15
 800d906:	2204      	movs	r2, #4
 800d908:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800d90a:	bf00      	nop
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd90      	pop	{r4, r7, pc}
 800d912:	bf00      	nop
 800d914:	2000ab64 	.word	0x2000ab64
 800d918:	2000a724 	.word	0x2000a724
 800d91c:	2000a714 	.word	0x2000a714

0800d920 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800d926:	f00c fff7 	bl	801a918 <rand>
 800d92a:	4603      	mov	r3, r0
 800d92c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800d92e:	2300      	movs	r3, #0
 800d930:	71fb      	strb	r3, [r7, #7]
 800d932:	e01a      	b.n	800d96a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800d934:	79fa      	ldrb	r2, [r7, #7]
 800d936:	4911      	ldr	r1, [pc, #68]	; (800d97c <dns_create_txid+0x5c>)
 800d938:	4613      	mov	r3, r2
 800d93a:	011b      	lsls	r3, r3, #4
 800d93c:	4413      	add	r3, r2
 800d93e:	011b      	lsls	r3, r3, #4
 800d940:	440b      	add	r3, r1
 800d942:	330a      	adds	r3, #10
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b02      	cmp	r3, #2
 800d948:	d10c      	bne.n	800d964 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800d94a:	79fa      	ldrb	r2, [r7, #7]
 800d94c:	490b      	ldr	r1, [pc, #44]	; (800d97c <dns_create_txid+0x5c>)
 800d94e:	4613      	mov	r3, r2
 800d950:	011b      	lsls	r3, r3, #4
 800d952:	4413      	add	r3, r2
 800d954:	011b      	lsls	r3, r3, #4
 800d956:	440b      	add	r3, r1
 800d958:	3308      	adds	r3, #8
 800d95a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800d95c:	88ba      	ldrh	r2, [r7, #4]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d100      	bne.n	800d964 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800d962:	e7e0      	b.n	800d926 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800d964:	79fb      	ldrb	r3, [r7, #7]
 800d966:	3301      	adds	r3, #1
 800d968:	71fb      	strb	r3, [r7, #7]
 800d96a:	79fb      	ldrb	r3, [r7, #7]
 800d96c:	2b03      	cmp	r3, #3
 800d96e:	d9e1      	bls.n	800d934 <dns_create_txid+0x14>
    }
  }

  return txid;
 800d970:	88bb      	ldrh	r3, [r7, #4]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	2000a724 	.word	0x2000a724

0800d980 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800d988:	2300      	movs	r3, #0
 800d98a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00d      	beq.n	800d9ae <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	7adb      	ldrb	r3, [r3, #11]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d109      	bne.n	800d9ae <dns_backupserver_available+0x2e>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7adb      	ldrb	r3, [r3, #11]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	4a06      	ldr	r2, [pc, #24]	; (800d9bc <dns_backupserver_available+0x3c>)
 800d9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <dns_backupserver_available+0x2e>
      ret = 1;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3714      	adds	r7, #20
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	2000ab94 	.word	0x2000ab94

0800d9c0 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800d9ca:	79fa      	ldrb	r2, [r7, #7]
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	011b      	lsls	r3, r3, #4
 800d9d0:	4413      	add	r3, r2
 800d9d2:	011b      	lsls	r3, r3, #4
 800d9d4:	4a48      	ldr	r2, [pc, #288]	; (800daf8 <dns_check_entry+0x138>)
 800d9d6:	4413      	add	r3, r2
 800d9d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800d9da:	79fb      	ldrb	r3, [r7, #7]
 800d9dc:	2b03      	cmp	r3, #3
 800d9de:	d906      	bls.n	800d9ee <dns_check_entry+0x2e>
 800d9e0:	4b46      	ldr	r3, [pc, #280]	; (800dafc <dns_check_entry+0x13c>)
 800d9e2:	f240 421c 	movw	r2, #1052	; 0x41c
 800d9e6:	4946      	ldr	r1, [pc, #280]	; (800db00 <dns_check_entry+0x140>)
 800d9e8:	4846      	ldr	r0, [pc, #280]	; (800db04 <dns_check_entry+0x144>)
 800d9ea:	f00d f895 	bl	801ab18 <iprintf>

  switch (entry->state) {
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	7a9b      	ldrb	r3, [r3, #10]
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	d86f      	bhi.n	800dad6 <dns_check_entry+0x116>
 800d9f6:	a201      	add	r2, pc, #4	; (adr r2, 800d9fc <dns_check_entry+0x3c>)
 800d9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9fc:	0800dae7 	.word	0x0800dae7
 800da00:	0800da0d 	.word	0x0800da0d
 800da04:	0800da3f 	.word	0x0800da3f
 800da08:	0800dab5 	.word	0x0800dab5
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800da0c:	f7ff ff88 	bl	800d920 <dns_create_txid>
 800da10:	4603      	mov	r3, r0
 800da12:	461a      	mov	r2, r3
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2202      	movs	r2, #2
 800da1c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2200      	movs	r2, #0
 800da22:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2201      	movs	r2, #1
 800da28:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800da30:	79fb      	ldrb	r3, [r7, #7]
 800da32:	4618      	mov	r0, r3
 800da34:	f7ff fdc4 	bl	800d5c0 <dns_send>
 800da38:	4603      	mov	r3, r0
 800da3a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800da3c:	e058      	b.n	800daf0 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	7b1b      	ldrb	r3, [r3, #12]
 800da42:	3b01      	subs	r3, #1
 800da44:	b2da      	uxtb	r2, r3
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	731a      	strb	r2, [r3, #12]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	7b1b      	ldrb	r3, [r3, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d14b      	bne.n	800daea <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	7b5b      	ldrb	r3, [r3, #13]
 800da56:	3301      	adds	r3, #1
 800da58:	b2da      	uxtb	r2, r3
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	735a      	strb	r2, [r3, #13]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	7b5b      	ldrb	r3, [r3, #13]
 800da62:	2b04      	cmp	r3, #4
 800da64:	d11b      	bne.n	800da9e <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7ff ff8a 	bl	800d980 <dns_backupserver_available>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00c      	beq.n	800da8c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	7adb      	ldrb	r3, [r3, #11]
 800da76:	3301      	adds	r3, #1
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2201      	movs	r2, #1
 800da82:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2200      	movs	r2, #0
 800da88:	735a      	strb	r2, [r3, #13]
 800da8a:	e00c      	b.n	800daa6 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800da8c:	79fb      	ldrb	r3, [r7, #7]
 800da8e:	2100      	movs	r1, #0
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff fe85 	bl	800d7a0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2200      	movs	r2, #0
 800da9a:	729a      	strb	r2, [r3, #10]
            break;
 800da9c:	e028      	b.n	800daf0 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	7b5a      	ldrb	r2, [r3, #13]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800daa6:	79fb      	ldrb	r3, [r7, #7]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7ff fd89 	bl	800d5c0 <dns_send>
 800daae:	4603      	mov	r3, r0
 800dab0:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800dab2:	e01a      	b.n	800daea <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d008      	beq.n	800dace <dns_check_entry+0x10e>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	1e5a      	subs	r2, r3, #1
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d10f      	bne.n	800daee <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2200      	movs	r2, #0
 800dad2:	729a      	strb	r2, [r3, #10]
      }
      break;
 800dad4:	e00b      	b.n	800daee <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800dad6:	4b09      	ldr	r3, [pc, #36]	; (800dafc <dns_check_entry+0x13c>)
 800dad8:	f240 425b 	movw	r2, #1115	; 0x45b
 800dadc:	490a      	ldr	r1, [pc, #40]	; (800db08 <dns_check_entry+0x148>)
 800dade:	4809      	ldr	r0, [pc, #36]	; (800db04 <dns_check_entry+0x144>)
 800dae0:	f00d f81a 	bl	801ab18 <iprintf>
      break;
 800dae4:	e004      	b.n	800daf0 <dns_check_entry+0x130>
      break;
 800dae6:	bf00      	nop
 800dae8:	e002      	b.n	800daf0 <dns_check_entry+0x130>
      break;
 800daea:	bf00      	nop
 800daec:	e000      	b.n	800daf0 <dns_check_entry+0x130>
      break;
 800daee:	bf00      	nop
  }
}
 800daf0:	bf00      	nop
 800daf2:	3710      	adds	r7, #16
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	2000a724 	.word	0x2000a724
 800dafc:	0801c49c 	.word	0x0801c49c
 800db00:	0801c50c 	.word	0x0801c50c
 800db04:	0801c4e4 	.word	0x0801c4e4
 800db08:	0801c528 	.word	0x0801c528

0800db0c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800db12:	2300      	movs	r3, #0
 800db14:	71fb      	strb	r3, [r7, #7]
 800db16:	e006      	b.n	800db26 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800db18:	79fb      	ldrb	r3, [r7, #7]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7ff ff50 	bl	800d9c0 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	3301      	adds	r3, #1
 800db24:	71fb      	strb	r3, [r7, #7]
 800db26:	79fb      	ldrb	r3, [r7, #7]
 800db28:	2b03      	cmp	r3, #3
 800db2a:	d9f5      	bls.n	800db18 <dns_check_entries+0xc>
  }
}
 800db2c:	bf00      	nop
 800db2e:	bf00      	nop
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b082      	sub	sp, #8
 800db3a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800db40:	f00c f958 	bl	8019df4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800db44:	f000 f8d6 	bl	800dcf4 <mem_init>
  memp_init();
 800db48:	f000 fc32 	bl	800e3b0 <memp_init>
  pbuf_init();
  netif_init();
 800db4c:	f000 fd3e 	bl	800e5cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800db50:	f007 fa34 	bl	8014fbc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800db54:	f001 ff5c 	bl	800fa10 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800db58:	f7ff fd00 	bl	800d55c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800db5c:	f007 f974 	bl	8014e48 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800db60:	bf00      	nop
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	4603      	mov	r3, r0
 800db70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800db72:	4b05      	ldr	r3, [pc, #20]	; (800db88 <ptr_to_mem+0x20>)
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	88fb      	ldrh	r3, [r7, #6]
 800db78:	4413      	add	r3, r2
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	370c      	adds	r7, #12
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	2000b208 	.word	0x2000b208

0800db8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800db94:	4b05      	ldr	r3, [pc, #20]	; (800dbac <mem_to_ptr+0x20>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	1ad3      	subs	r3, r2, r3
 800db9c:	b29b      	uxth	r3, r3
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	2000b208 	.word	0x2000b208

0800dbb0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dbb0:	b590      	push	{r4, r7, lr}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dbb8:	4b45      	ldr	r3, [pc, #276]	; (800dcd0 <plug_holes+0x120>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d206      	bcs.n	800dbd0 <plug_holes+0x20>
 800dbc2:	4b44      	ldr	r3, [pc, #272]	; (800dcd4 <plug_holes+0x124>)
 800dbc4:	f240 12df 	movw	r2, #479	; 0x1df
 800dbc8:	4943      	ldr	r1, [pc, #268]	; (800dcd8 <plug_holes+0x128>)
 800dbca:	4844      	ldr	r0, [pc, #272]	; (800dcdc <plug_holes+0x12c>)
 800dbcc:	f00c ffa4 	bl	801ab18 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800dbd0:	4b43      	ldr	r3, [pc, #268]	; (800dce0 <plug_holes+0x130>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d306      	bcc.n	800dbe8 <plug_holes+0x38>
 800dbda:	4b3e      	ldr	r3, [pc, #248]	; (800dcd4 <plug_holes+0x124>)
 800dbdc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dbe0:	4940      	ldr	r1, [pc, #256]	; (800dce4 <plug_holes+0x134>)
 800dbe2:	483e      	ldr	r0, [pc, #248]	; (800dcdc <plug_holes+0x12c>)
 800dbe4:	f00c ff98 	bl	801ab18 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	791b      	ldrb	r3, [r3, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d006      	beq.n	800dbfe <plug_holes+0x4e>
 800dbf0:	4b38      	ldr	r3, [pc, #224]	; (800dcd4 <plug_holes+0x124>)
 800dbf2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800dbf6:	493c      	ldr	r1, [pc, #240]	; (800dce8 <plug_holes+0x138>)
 800dbf8:	4838      	ldr	r0, [pc, #224]	; (800dcdc <plug_holes+0x12c>)
 800dbfa:	f00c ff8d 	bl	801ab18 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc06:	d906      	bls.n	800dc16 <plug_holes+0x66>
 800dc08:	4b32      	ldr	r3, [pc, #200]	; (800dcd4 <plug_holes+0x124>)
 800dc0a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800dc0e:	4937      	ldr	r1, [pc, #220]	; (800dcec <plug_holes+0x13c>)
 800dc10:	4832      	ldr	r0, [pc, #200]	; (800dcdc <plug_holes+0x12c>)
 800dc12:	f00c ff81 	bl	801ab18 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	881b      	ldrh	r3, [r3, #0]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7ff ffa4 	bl	800db68 <ptr_to_mem>
 800dc20:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d024      	beq.n	800dc74 <plug_holes+0xc4>
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	791b      	ldrb	r3, [r3, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d120      	bne.n	800dc74 <plug_holes+0xc4>
 800dc32:	4b2b      	ldr	r3, [pc, #172]	; (800dce0 <plug_holes+0x130>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d01b      	beq.n	800dc74 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800dc3c:	4b2c      	ldr	r3, [pc, #176]	; (800dcf0 <plug_holes+0x140>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d102      	bne.n	800dc4c <plug_holes+0x9c>
      lfree = mem;
 800dc46:	4a2a      	ldr	r2, [pc, #168]	; (800dcf0 <plug_holes+0x140>)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	881a      	ldrh	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc5c:	d00a      	beq.n	800dc74 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7ff ff80 	bl	800db68 <ptr_to_mem>
 800dc68:	4604      	mov	r4, r0
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7ff ff8e 	bl	800db8c <mem_to_ptr>
 800dc70:	4603      	mov	r3, r0
 800dc72:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	885b      	ldrh	r3, [r3, #2]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7ff ff75 	bl	800db68 <ptr_to_mem>
 800dc7e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d01f      	beq.n	800dcc8 <plug_holes+0x118>
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	791b      	ldrb	r3, [r3, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d11b      	bne.n	800dcc8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800dc90:	4b17      	ldr	r3, [pc, #92]	; (800dcf0 <plug_holes+0x140>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d102      	bne.n	800dca0 <plug_holes+0xf0>
      lfree = pmem;
 800dc9a:	4a15      	ldr	r2, [pc, #84]	; (800dcf0 <plug_holes+0x140>)
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	881a      	ldrh	r2, [r3, #0]
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	881b      	ldrh	r3, [r3, #0]
 800dcac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dcb0:	d00a      	beq.n	800dcc8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	881b      	ldrh	r3, [r3, #0]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7ff ff56 	bl	800db68 <ptr_to_mem>
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	68b8      	ldr	r0, [r7, #8]
 800dcc0:	f7ff ff64 	bl	800db8c <mem_to_ptr>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dcc8:	bf00      	nop
 800dcca:	3714      	adds	r7, #20
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd90      	pop	{r4, r7, pc}
 800dcd0:	2000b208 	.word	0x2000b208
 800dcd4:	0801c548 	.word	0x0801c548
 800dcd8:	0801c578 	.word	0x0801c578
 800dcdc:	0801c590 	.word	0x0801c590
 800dce0:	2000b20c 	.word	0x2000b20c
 800dce4:	0801c5b8 	.word	0x0801c5b8
 800dce8:	0801c5d4 	.word	0x0801c5d4
 800dcec:	0801c5f0 	.word	0x0801c5f0
 800dcf0:	2000b214 	.word	0x2000b214

0800dcf4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dcfa:	4b1f      	ldr	r3, [pc, #124]	; (800dd78 <mem_init+0x84>)
 800dcfc:	3303      	adds	r3, #3
 800dcfe:	f023 0303 	bic.w	r3, r3, #3
 800dd02:	461a      	mov	r2, r3
 800dd04:	4b1d      	ldr	r3, [pc, #116]	; (800dd7c <mem_init+0x88>)
 800dd06:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dd08:	4b1c      	ldr	r3, [pc, #112]	; (800dd7c <mem_init+0x88>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dd14:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dd22:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800dd26:	f7ff ff1f 	bl	800db68 <ptr_to_mem>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	4a14      	ldr	r2, [pc, #80]	; (800dd80 <mem_init+0x8c>)
 800dd2e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dd30:	4b13      	ldr	r3, [pc, #76]	; (800dd80 <mem_init+0x8c>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2201      	movs	r2, #1
 800dd36:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dd38:	4b11      	ldr	r3, [pc, #68]	; (800dd80 <mem_init+0x8c>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dd40:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dd42:	4b0f      	ldr	r3, [pc, #60]	; (800dd80 <mem_init+0x8c>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dd4a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dd4c:	4b0b      	ldr	r3, [pc, #44]	; (800dd7c <mem_init+0x88>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a0c      	ldr	r2, [pc, #48]	; (800dd84 <mem_init+0x90>)
 800dd52:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dd54:	480c      	ldr	r0, [pc, #48]	; (800dd88 <mem_init+0x94>)
 800dd56:	f00c f859 	bl	8019e0c <sys_mutex_new>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d006      	beq.n	800dd6e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dd60:	4b0a      	ldr	r3, [pc, #40]	; (800dd8c <mem_init+0x98>)
 800dd62:	f240 221f 	movw	r2, #543	; 0x21f
 800dd66:	490a      	ldr	r1, [pc, #40]	; (800dd90 <mem_init+0x9c>)
 800dd68:	480a      	ldr	r0, [pc, #40]	; (800dd94 <mem_init+0xa0>)
 800dd6a:	f00c fed5 	bl	801ab18 <iprintf>
  }
}
 800dd6e:	bf00      	nop
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	2000abb4 	.word	0x2000abb4
 800dd7c:	2000b208 	.word	0x2000b208
 800dd80:	2000b20c 	.word	0x2000b20c
 800dd84:	2000b214 	.word	0x2000b214
 800dd88:	2000b210 	.word	0x2000b210
 800dd8c:	0801c548 	.word	0x0801c548
 800dd90:	0801c61c 	.word	0x0801c61c
 800dd94:	0801c590 	.word	0x0801c590

0800dd98 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff fef3 	bl	800db8c <mem_to_ptr>
 800dda6:	4603      	mov	r3, r0
 800dda8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	881b      	ldrh	r3, [r3, #0]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff feda 	bl	800db68 <ptr_to_mem>
 800ddb4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	885b      	ldrh	r3, [r3, #2]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7ff fed4 	bl	800db68 <ptr_to_mem>
 800ddc0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ddca:	d818      	bhi.n	800ddfe <mem_link_valid+0x66>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	885b      	ldrh	r3, [r3, #2]
 800ddd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ddd4:	d813      	bhi.n	800ddfe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ddda:	8afa      	ldrh	r2, [r7, #22]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d004      	beq.n	800ddea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	8afa      	ldrh	r2, [r7, #22]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d109      	bne.n	800ddfe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ddea:	4b08      	ldr	r3, [pc, #32]	; (800de0c <mem_link_valid+0x74>)
 800ddec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ddee:	693a      	ldr	r2, [r7, #16]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d006      	beq.n	800de02 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	885b      	ldrh	r3, [r3, #2]
 800ddf8:	8afa      	ldrh	r2, [r7, #22]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d001      	beq.n	800de02 <mem_link_valid+0x6a>
    return 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	e000      	b.n	800de04 <mem_link_valid+0x6c>
  }
  return 1;
 800de02:	2301      	movs	r3, #1
}
 800de04:	4618      	mov	r0, r3
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	2000b20c 	.word	0x2000b20c

0800de10 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b088      	sub	sp, #32
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d070      	beq.n	800df00 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f003 0303 	and.w	r3, r3, #3
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00d      	beq.n	800de44 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800de28:	4b37      	ldr	r3, [pc, #220]	; (800df08 <mem_free+0xf8>)
 800de2a:	f240 2273 	movw	r2, #627	; 0x273
 800de2e:	4937      	ldr	r1, [pc, #220]	; (800df0c <mem_free+0xfc>)
 800de30:	4837      	ldr	r0, [pc, #220]	; (800df10 <mem_free+0x100>)
 800de32:	f00c fe71 	bl	801ab18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de36:	f00c f83b 	bl	8019eb0 <sys_arch_protect>
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f00c f845 	bl	8019ecc <sys_arch_unprotect>
    return;
 800de42:	e05e      	b.n	800df02 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	3b08      	subs	r3, #8
 800de48:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800de4a:	4b32      	ldr	r3, [pc, #200]	; (800df14 <mem_free+0x104>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69fa      	ldr	r2, [r7, #28]
 800de50:	429a      	cmp	r2, r3
 800de52:	d306      	bcc.n	800de62 <mem_free+0x52>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f103 020c 	add.w	r2, r3, #12
 800de5a:	4b2f      	ldr	r3, [pc, #188]	; (800df18 <mem_free+0x108>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d90d      	bls.n	800de7e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800de62:	4b29      	ldr	r3, [pc, #164]	; (800df08 <mem_free+0xf8>)
 800de64:	f240 227f 	movw	r2, #639	; 0x27f
 800de68:	492c      	ldr	r1, [pc, #176]	; (800df1c <mem_free+0x10c>)
 800de6a:	4829      	ldr	r0, [pc, #164]	; (800df10 <mem_free+0x100>)
 800de6c:	f00c fe54 	bl	801ab18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de70:	f00c f81e 	bl	8019eb0 <sys_arch_protect>
 800de74:	6138      	str	r0, [r7, #16]
 800de76:	6938      	ldr	r0, [r7, #16]
 800de78:	f00c f828 	bl	8019ecc <sys_arch_unprotect>
    return;
 800de7c:	e041      	b.n	800df02 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800de7e:	4828      	ldr	r0, [pc, #160]	; (800df20 <mem_free+0x110>)
 800de80:	f00b ffda 	bl	8019e38 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	791b      	ldrb	r3, [r3, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d110      	bne.n	800deae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800de8c:	4b1e      	ldr	r3, [pc, #120]	; (800df08 <mem_free+0xf8>)
 800de8e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800de92:	4924      	ldr	r1, [pc, #144]	; (800df24 <mem_free+0x114>)
 800de94:	481e      	ldr	r0, [pc, #120]	; (800df10 <mem_free+0x100>)
 800de96:	f00c fe3f 	bl	801ab18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800de9a:	4821      	ldr	r0, [pc, #132]	; (800df20 <mem_free+0x110>)
 800de9c:	f00b ffdb 	bl	8019e56 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dea0:	f00c f806 	bl	8019eb0 <sys_arch_protect>
 800dea4:	6178      	str	r0, [r7, #20]
 800dea6:	6978      	ldr	r0, [r7, #20]
 800dea8:	f00c f810 	bl	8019ecc <sys_arch_unprotect>
    return;
 800deac:	e029      	b.n	800df02 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800deae:	69f8      	ldr	r0, [r7, #28]
 800deb0:	f7ff ff72 	bl	800dd98 <mem_link_valid>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d110      	bne.n	800dedc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800deba:	4b13      	ldr	r3, [pc, #76]	; (800df08 <mem_free+0xf8>)
 800debc:	f240 2295 	movw	r2, #661	; 0x295
 800dec0:	4919      	ldr	r1, [pc, #100]	; (800df28 <mem_free+0x118>)
 800dec2:	4813      	ldr	r0, [pc, #76]	; (800df10 <mem_free+0x100>)
 800dec4:	f00c fe28 	bl	801ab18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dec8:	4815      	ldr	r0, [pc, #84]	; (800df20 <mem_free+0x110>)
 800deca:	f00b ffc4 	bl	8019e56 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dece:	f00b ffef 	bl	8019eb0 <sys_arch_protect>
 800ded2:	61b8      	str	r0, [r7, #24]
 800ded4:	69b8      	ldr	r0, [r7, #24]
 800ded6:	f00b fff9 	bl	8019ecc <sys_arch_unprotect>
    return;
 800deda:	e012      	b.n	800df02 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2200      	movs	r2, #0
 800dee0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800dee2:	4b12      	ldr	r3, [pc, #72]	; (800df2c <mem_free+0x11c>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	69fa      	ldr	r2, [r7, #28]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d202      	bcs.n	800def2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800deec:	4a0f      	ldr	r2, [pc, #60]	; (800df2c <mem_free+0x11c>)
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800def2:	69f8      	ldr	r0, [r7, #28]
 800def4:	f7ff fe5c 	bl	800dbb0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800def8:	4809      	ldr	r0, [pc, #36]	; (800df20 <mem_free+0x110>)
 800defa:	f00b ffac 	bl	8019e56 <sys_mutex_unlock>
 800defe:	e000      	b.n	800df02 <mem_free+0xf2>
    return;
 800df00:	bf00      	nop
}
 800df02:	3720      	adds	r7, #32
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	0801c548 	.word	0x0801c548
 800df0c:	0801c638 	.word	0x0801c638
 800df10:	0801c590 	.word	0x0801c590
 800df14:	2000b208 	.word	0x2000b208
 800df18:	2000b20c 	.word	0x2000b20c
 800df1c:	0801c65c 	.word	0x0801c65c
 800df20:	2000b210 	.word	0x2000b210
 800df24:	0801c678 	.word	0x0801c678
 800df28:	0801c6a0 	.word	0x0801c6a0
 800df2c:	2000b214 	.word	0x2000b214

0800df30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b088      	sub	sp, #32
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	460b      	mov	r3, r1
 800df3a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800df3c:	887b      	ldrh	r3, [r7, #2]
 800df3e:	3303      	adds	r3, #3
 800df40:	b29b      	uxth	r3, r3
 800df42:	f023 0303 	bic.w	r3, r3, #3
 800df46:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800df48:	8bfb      	ldrh	r3, [r7, #30]
 800df4a:	2b0b      	cmp	r3, #11
 800df4c:	d801      	bhi.n	800df52 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800df4e:	230c      	movs	r3, #12
 800df50:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800df52:	8bfb      	ldrh	r3, [r7, #30]
 800df54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800df58:	d803      	bhi.n	800df62 <mem_trim+0x32>
 800df5a:	8bfa      	ldrh	r2, [r7, #30]
 800df5c:	887b      	ldrh	r3, [r7, #2]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d201      	bcs.n	800df66 <mem_trim+0x36>
    return NULL;
 800df62:	2300      	movs	r3, #0
 800df64:	e0d8      	b.n	800e118 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800df66:	4b6e      	ldr	r3, [pc, #440]	; (800e120 <mem_trim+0x1f0>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d304      	bcc.n	800df7a <mem_trim+0x4a>
 800df70:	4b6c      	ldr	r3, [pc, #432]	; (800e124 <mem_trim+0x1f4>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	429a      	cmp	r2, r3
 800df78:	d306      	bcc.n	800df88 <mem_trim+0x58>
 800df7a:	4b6b      	ldr	r3, [pc, #428]	; (800e128 <mem_trim+0x1f8>)
 800df7c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800df80:	496a      	ldr	r1, [pc, #424]	; (800e12c <mem_trim+0x1fc>)
 800df82:	486b      	ldr	r0, [pc, #428]	; (800e130 <mem_trim+0x200>)
 800df84:	f00c fdc8 	bl	801ab18 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800df88:	4b65      	ldr	r3, [pc, #404]	; (800e120 <mem_trim+0x1f0>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d304      	bcc.n	800df9c <mem_trim+0x6c>
 800df92:	4b64      	ldr	r3, [pc, #400]	; (800e124 <mem_trim+0x1f4>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d307      	bcc.n	800dfac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800df9c:	f00b ff88 	bl	8019eb0 <sys_arch_protect>
 800dfa0:	60b8      	str	r0, [r7, #8]
 800dfa2:	68b8      	ldr	r0, [r7, #8]
 800dfa4:	f00b ff92 	bl	8019ecc <sys_arch_unprotect>
    return rmem;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	e0b5      	b.n	800e118 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	3b08      	subs	r3, #8
 800dfb0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dfb2:	69b8      	ldr	r0, [r7, #24]
 800dfb4:	f7ff fdea 	bl	800db8c <mem_to_ptr>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	881a      	ldrh	r2, [r3, #0]
 800dfc0:	8afb      	ldrh	r3, [r7, #22]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	3b08      	subs	r3, #8
 800dfc8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800dfca:	8bfa      	ldrh	r2, [r7, #30]
 800dfcc:	8abb      	ldrh	r3, [r7, #20]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d906      	bls.n	800dfe0 <mem_trim+0xb0>
 800dfd2:	4b55      	ldr	r3, [pc, #340]	; (800e128 <mem_trim+0x1f8>)
 800dfd4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800dfd8:	4956      	ldr	r1, [pc, #344]	; (800e134 <mem_trim+0x204>)
 800dfda:	4855      	ldr	r0, [pc, #340]	; (800e130 <mem_trim+0x200>)
 800dfdc:	f00c fd9c 	bl	801ab18 <iprintf>
  if (newsize > size) {
 800dfe0:	8bfa      	ldrh	r2, [r7, #30]
 800dfe2:	8abb      	ldrh	r3, [r7, #20]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d901      	bls.n	800dfec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	e095      	b.n	800e118 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800dfec:	8bfa      	ldrh	r2, [r7, #30]
 800dfee:	8abb      	ldrh	r3, [r7, #20]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d101      	bne.n	800dff8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	e08f      	b.n	800e118 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dff8:	484f      	ldr	r0, [pc, #316]	; (800e138 <mem_trim+0x208>)
 800dffa:	f00b ff1d 	bl	8019e38 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff fdb0 	bl	800db68 <ptr_to_mem>
 800e008:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	791b      	ldrb	r3, [r3, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d13f      	bne.n	800e092 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	881b      	ldrh	r3, [r3, #0]
 800e016:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e01a:	d106      	bne.n	800e02a <mem_trim+0xfa>
 800e01c:	4b42      	ldr	r3, [pc, #264]	; (800e128 <mem_trim+0x1f8>)
 800e01e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e022:	4946      	ldr	r1, [pc, #280]	; (800e13c <mem_trim+0x20c>)
 800e024:	4842      	ldr	r0, [pc, #264]	; (800e130 <mem_trim+0x200>)
 800e026:	f00c fd77 	bl	801ab18 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e030:	8afa      	ldrh	r2, [r7, #22]
 800e032:	8bfb      	ldrh	r3, [r7, #30]
 800e034:	4413      	add	r3, r2
 800e036:	b29b      	uxth	r3, r3
 800e038:	3308      	adds	r3, #8
 800e03a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e03c:	4b40      	ldr	r3, [pc, #256]	; (800e140 <mem_trim+0x210>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	693a      	ldr	r2, [r7, #16]
 800e042:	429a      	cmp	r2, r3
 800e044:	d106      	bne.n	800e054 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e046:	89fb      	ldrh	r3, [r7, #14]
 800e048:	4618      	mov	r0, r3
 800e04a:	f7ff fd8d 	bl	800db68 <ptr_to_mem>
 800e04e:	4603      	mov	r3, r0
 800e050:	4a3b      	ldr	r2, [pc, #236]	; (800e140 <mem_trim+0x210>)
 800e052:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e054:	89fb      	ldrh	r3, [r7, #14]
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff fd86 	bl	800db68 <ptr_to_mem>
 800e05c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	2200      	movs	r2, #0
 800e062:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	89ba      	ldrh	r2, [r7, #12]
 800e068:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	8afa      	ldrh	r2, [r7, #22]
 800e06e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	89fa      	ldrh	r2, [r7, #14]
 800e074:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	881b      	ldrh	r3, [r3, #0]
 800e07a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e07e:	d047      	beq.n	800e110 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	881b      	ldrh	r3, [r3, #0]
 800e084:	4618      	mov	r0, r3
 800e086:	f7ff fd6f 	bl	800db68 <ptr_to_mem>
 800e08a:	4602      	mov	r2, r0
 800e08c:	89fb      	ldrh	r3, [r7, #14]
 800e08e:	8053      	strh	r3, [r2, #2]
 800e090:	e03e      	b.n	800e110 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e092:	8bfb      	ldrh	r3, [r7, #30]
 800e094:	f103 0214 	add.w	r2, r3, #20
 800e098:	8abb      	ldrh	r3, [r7, #20]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d838      	bhi.n	800e110 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e09e:	8afa      	ldrh	r2, [r7, #22]
 800e0a0:	8bfb      	ldrh	r3, [r7, #30]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	3308      	adds	r3, #8
 800e0a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e0b2:	d106      	bne.n	800e0c2 <mem_trim+0x192>
 800e0b4:	4b1c      	ldr	r3, [pc, #112]	; (800e128 <mem_trim+0x1f8>)
 800e0b6:	f240 3216 	movw	r2, #790	; 0x316
 800e0ba:	4920      	ldr	r1, [pc, #128]	; (800e13c <mem_trim+0x20c>)
 800e0bc:	481c      	ldr	r0, [pc, #112]	; (800e130 <mem_trim+0x200>)
 800e0be:	f00c fd2b 	bl	801ab18 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e0c2:	89fb      	ldrh	r3, [r7, #14]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff fd4f 	bl	800db68 <ptr_to_mem>
 800e0ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e0cc:	4b1c      	ldr	r3, [pc, #112]	; (800e140 <mem_trim+0x210>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d202      	bcs.n	800e0dc <mem_trim+0x1ac>
      lfree = mem2;
 800e0d6:	4a1a      	ldr	r2, [pc, #104]	; (800e140 <mem_trim+0x210>)
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	881a      	ldrh	r2, [r3, #0]
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	8afa      	ldrh	r2, [r7, #22]
 800e0ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	89fa      	ldrh	r2, [r7, #14]
 800e0f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	881b      	ldrh	r3, [r3, #0]
 800e0fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e0fe:	d007      	beq.n	800e110 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	881b      	ldrh	r3, [r3, #0]
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff fd2f 	bl	800db68 <ptr_to_mem>
 800e10a:	4602      	mov	r2, r0
 800e10c:	89fb      	ldrh	r3, [r7, #14]
 800e10e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e110:	4809      	ldr	r0, [pc, #36]	; (800e138 <mem_trim+0x208>)
 800e112:	f00b fea0 	bl	8019e56 <sys_mutex_unlock>
  return rmem;
 800e116:	687b      	ldr	r3, [r7, #4]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	2000b208 	.word	0x2000b208
 800e124:	2000b20c 	.word	0x2000b20c
 800e128:	0801c548 	.word	0x0801c548
 800e12c:	0801c6d4 	.word	0x0801c6d4
 800e130:	0801c590 	.word	0x0801c590
 800e134:	0801c6ec 	.word	0x0801c6ec
 800e138:	2000b210 	.word	0x2000b210
 800e13c:	0801c70c 	.word	0x0801c70c
 800e140:	2000b214 	.word	0x2000b214

0800e144 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b088      	sub	sp, #32
 800e148:	af00      	add	r7, sp, #0
 800e14a:	4603      	mov	r3, r0
 800e14c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e14e:	88fb      	ldrh	r3, [r7, #6]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d101      	bne.n	800e158 <mem_malloc+0x14>
    return NULL;
 800e154:	2300      	movs	r3, #0
 800e156:	e0e2      	b.n	800e31e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e158:	88fb      	ldrh	r3, [r7, #6]
 800e15a:	3303      	adds	r3, #3
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	f023 0303 	bic.w	r3, r3, #3
 800e162:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e164:	8bbb      	ldrh	r3, [r7, #28]
 800e166:	2b0b      	cmp	r3, #11
 800e168:	d801      	bhi.n	800e16e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e16a:	230c      	movs	r3, #12
 800e16c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e16e:	8bbb      	ldrh	r3, [r7, #28]
 800e170:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e174:	d803      	bhi.n	800e17e <mem_malloc+0x3a>
 800e176:	8bba      	ldrh	r2, [r7, #28]
 800e178:	88fb      	ldrh	r3, [r7, #6]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d201      	bcs.n	800e182 <mem_malloc+0x3e>
    return NULL;
 800e17e:	2300      	movs	r3, #0
 800e180:	e0cd      	b.n	800e31e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e182:	4869      	ldr	r0, [pc, #420]	; (800e328 <mem_malloc+0x1e4>)
 800e184:	f00b fe58 	bl	8019e38 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e188:	4b68      	ldr	r3, [pc, #416]	; (800e32c <mem_malloc+0x1e8>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7ff fcfd 	bl	800db8c <mem_to_ptr>
 800e192:	4603      	mov	r3, r0
 800e194:	83fb      	strh	r3, [r7, #30]
 800e196:	e0b7      	b.n	800e308 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e198:	8bfb      	ldrh	r3, [r7, #30]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7ff fce4 	bl	800db68 <ptr_to_mem>
 800e1a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	791b      	ldrb	r3, [r3, #4]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f040 80a7 	bne.w	800e2fa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	881b      	ldrh	r3, [r3, #0]
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	8bfb      	ldrh	r3, [r7, #30]
 800e1b4:	1ad3      	subs	r3, r2, r3
 800e1b6:	f1a3 0208 	sub.w	r2, r3, #8
 800e1ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	f0c0 809c 	bcc.w	800e2fa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	881b      	ldrh	r3, [r3, #0]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	8bfb      	ldrh	r3, [r7, #30]
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	f1a3 0208 	sub.w	r2, r3, #8
 800e1d0:	8bbb      	ldrh	r3, [r7, #28]
 800e1d2:	3314      	adds	r3, #20
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d333      	bcc.n	800e240 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e1d8:	8bfa      	ldrh	r2, [r7, #30]
 800e1da:	8bbb      	ldrh	r3, [r7, #28]
 800e1dc:	4413      	add	r3, r2
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	3308      	adds	r3, #8
 800e1e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e1e4:	8a7b      	ldrh	r3, [r7, #18]
 800e1e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e1ea:	d106      	bne.n	800e1fa <mem_malloc+0xb6>
 800e1ec:	4b50      	ldr	r3, [pc, #320]	; (800e330 <mem_malloc+0x1ec>)
 800e1ee:	f240 3287 	movw	r2, #903	; 0x387
 800e1f2:	4950      	ldr	r1, [pc, #320]	; (800e334 <mem_malloc+0x1f0>)
 800e1f4:	4850      	ldr	r0, [pc, #320]	; (800e338 <mem_malloc+0x1f4>)
 800e1f6:	f00c fc8f 	bl	801ab18 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e1fa:	8a7b      	ldrh	r3, [r7, #18]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7ff fcb3 	bl	800db68 <ptr_to_mem>
 800e202:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	881a      	ldrh	r2, [r3, #0]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	8bfa      	ldrh	r2, [r7, #30]
 800e216:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	8a7a      	ldrh	r2, [r7, #18]
 800e21c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	2201      	movs	r2, #1
 800e222:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e22c:	d00b      	beq.n	800e246 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	881b      	ldrh	r3, [r3, #0]
 800e232:	4618      	mov	r0, r3
 800e234:	f7ff fc98 	bl	800db68 <ptr_to_mem>
 800e238:	4602      	mov	r2, r0
 800e23a:	8a7b      	ldrh	r3, [r7, #18]
 800e23c:	8053      	strh	r3, [r2, #2]
 800e23e:	e002      	b.n	800e246 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	2201      	movs	r2, #1
 800e244:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e246:	4b39      	ldr	r3, [pc, #228]	; (800e32c <mem_malloc+0x1e8>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d127      	bne.n	800e2a0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e250:	4b36      	ldr	r3, [pc, #216]	; (800e32c <mem_malloc+0x1e8>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e256:	e005      	b.n	800e264 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e258:	69bb      	ldr	r3, [r7, #24]
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7ff fc83 	bl	800db68 <ptr_to_mem>
 800e262:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e264:	69bb      	ldr	r3, [r7, #24]
 800e266:	791b      	ldrb	r3, [r3, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d004      	beq.n	800e276 <mem_malloc+0x132>
 800e26c:	4b33      	ldr	r3, [pc, #204]	; (800e33c <mem_malloc+0x1f8>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	69ba      	ldr	r2, [r7, #24]
 800e272:	429a      	cmp	r2, r3
 800e274:	d1f0      	bne.n	800e258 <mem_malloc+0x114>
          }
          lfree = cur;
 800e276:	4a2d      	ldr	r2, [pc, #180]	; (800e32c <mem_malloc+0x1e8>)
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e27c:	4b2b      	ldr	r3, [pc, #172]	; (800e32c <mem_malloc+0x1e8>)
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	4b2e      	ldr	r3, [pc, #184]	; (800e33c <mem_malloc+0x1f8>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	429a      	cmp	r2, r3
 800e286:	d00b      	beq.n	800e2a0 <mem_malloc+0x15c>
 800e288:	4b28      	ldr	r3, [pc, #160]	; (800e32c <mem_malloc+0x1e8>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	791b      	ldrb	r3, [r3, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d006      	beq.n	800e2a0 <mem_malloc+0x15c>
 800e292:	4b27      	ldr	r3, [pc, #156]	; (800e330 <mem_malloc+0x1ec>)
 800e294:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e298:	4929      	ldr	r1, [pc, #164]	; (800e340 <mem_malloc+0x1fc>)
 800e29a:	4827      	ldr	r0, [pc, #156]	; (800e338 <mem_malloc+0x1f4>)
 800e29c:	f00c fc3c 	bl	801ab18 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e2a0:	4821      	ldr	r0, [pc, #132]	; (800e328 <mem_malloc+0x1e4>)
 800e2a2:	f00b fdd8 	bl	8019e56 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e2a6:	8bba      	ldrh	r2, [r7, #28]
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	3308      	adds	r3, #8
 800e2ae:	4a23      	ldr	r2, [pc, #140]	; (800e33c <mem_malloc+0x1f8>)
 800e2b0:	6812      	ldr	r2, [r2, #0]
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d906      	bls.n	800e2c4 <mem_malloc+0x180>
 800e2b6:	4b1e      	ldr	r3, [pc, #120]	; (800e330 <mem_malloc+0x1ec>)
 800e2b8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e2bc:	4921      	ldr	r1, [pc, #132]	; (800e344 <mem_malloc+0x200>)
 800e2be:	481e      	ldr	r0, [pc, #120]	; (800e338 <mem_malloc+0x1f4>)
 800e2c0:	f00c fc2a 	bl	801ab18 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	f003 0303 	and.w	r3, r3, #3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d006      	beq.n	800e2dc <mem_malloc+0x198>
 800e2ce:	4b18      	ldr	r3, [pc, #96]	; (800e330 <mem_malloc+0x1ec>)
 800e2d0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e2d4:	491c      	ldr	r1, [pc, #112]	; (800e348 <mem_malloc+0x204>)
 800e2d6:	4818      	ldr	r0, [pc, #96]	; (800e338 <mem_malloc+0x1f4>)
 800e2d8:	f00c fc1e 	bl	801ab18 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	f003 0303 	and.w	r3, r3, #3
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d006      	beq.n	800e2f4 <mem_malloc+0x1b0>
 800e2e6:	4b12      	ldr	r3, [pc, #72]	; (800e330 <mem_malloc+0x1ec>)
 800e2e8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e2ec:	4917      	ldr	r1, [pc, #92]	; (800e34c <mem_malloc+0x208>)
 800e2ee:	4812      	ldr	r0, [pc, #72]	; (800e338 <mem_malloc+0x1f4>)
 800e2f0:	f00c fc12 	bl	801ab18 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	3308      	adds	r3, #8
 800e2f8:	e011      	b.n	800e31e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e2fa:	8bfb      	ldrh	r3, [r7, #30]
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7ff fc33 	bl	800db68 <ptr_to_mem>
 800e302:	4603      	mov	r3, r0
 800e304:	881b      	ldrh	r3, [r3, #0]
 800e306:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e308:	8bfa      	ldrh	r2, [r7, #30]
 800e30a:	8bbb      	ldrh	r3, [r7, #28]
 800e30c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e310:	429a      	cmp	r2, r3
 800e312:	f4ff af41 	bcc.w	800e198 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e316:	4804      	ldr	r0, [pc, #16]	; (800e328 <mem_malloc+0x1e4>)
 800e318:	f00b fd9d 	bl	8019e56 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3720      	adds	r7, #32
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	2000b210 	.word	0x2000b210
 800e32c:	2000b214 	.word	0x2000b214
 800e330:	0801c548 	.word	0x0801c548
 800e334:	0801c70c 	.word	0x0801c70c
 800e338:	0801c590 	.word	0x0801c590
 800e33c:	2000b20c 	.word	0x2000b20c
 800e340:	0801c720 	.word	0x0801c720
 800e344:	0801c73c 	.word	0x0801c73c
 800e348:	0801c76c 	.word	0x0801c76c
 800e34c:	0801c79c 	.word	0x0801c79c

0800e350 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	2200      	movs	r2, #0
 800e35e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	3303      	adds	r3, #3
 800e366:	f023 0303 	bic.w	r3, r3, #3
 800e36a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e36c:	2300      	movs	r3, #0
 800e36e:	60fb      	str	r3, [r7, #12]
 800e370:	e011      	b.n	800e396 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	461a      	mov	r2, r3
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	4413      	add	r3, r2
 800e38e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	3301      	adds	r3, #1
 800e394:	60fb      	str	r3, [r7, #12]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	885b      	ldrh	r3, [r3, #2]
 800e39a:	461a      	mov	r2, r3
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	dbe7      	blt.n	800e372 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e3a2:	bf00      	nop
 800e3a4:	bf00      	nop
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	80fb      	strh	r3, [r7, #6]
 800e3ba:	e009      	b.n	800e3d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e3bc:	88fb      	ldrh	r3, [r7, #6]
 800e3be:	4a08      	ldr	r2, [pc, #32]	; (800e3e0 <memp_init+0x30>)
 800e3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7ff ffc3 	bl	800e350 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e3ca:	88fb      	ldrh	r3, [r7, #6]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	80fb      	strh	r3, [r7, #6]
 800e3d0:	88fb      	ldrh	r3, [r7, #6]
 800e3d2:	2b0d      	cmp	r3, #13
 800e3d4:	d9f2      	bls.n	800e3bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e3d6:	bf00      	nop
 800e3d8:	bf00      	nop
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	0801f3c8 	.word	0x0801f3c8

0800e3e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e3ec:	f00b fd60 	bl	8019eb0 <sys_arch_protect>
 800e3f0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d015      	beq.n	800e42c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	6812      	ldr	r2, [r2, #0]
 800e408:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	f003 0303 	and.w	r3, r3, #3
 800e410:	2b00      	cmp	r3, #0
 800e412:	d006      	beq.n	800e422 <do_memp_malloc_pool+0x3e>
 800e414:	4b09      	ldr	r3, [pc, #36]	; (800e43c <do_memp_malloc_pool+0x58>)
 800e416:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e41a:	4909      	ldr	r1, [pc, #36]	; (800e440 <do_memp_malloc_pool+0x5c>)
 800e41c:	4809      	ldr	r0, [pc, #36]	; (800e444 <do_memp_malloc_pool+0x60>)
 800e41e:	f00c fb7b 	bl	801ab18 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f00b fd52 	bl	8019ecc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	e003      	b.n	800e434 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f00b fd4d 	bl	8019ecc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	0801c7c0 	.word	0x0801c7c0
 800e440:	0801c7f0 	.word	0x0801c7f0
 800e444:	0801c814 	.word	0x0801c814

0800e448 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d106      	bne.n	800e464 <memp_malloc_pool+0x1c>
 800e456:	4b0a      	ldr	r3, [pc, #40]	; (800e480 <memp_malloc_pool+0x38>)
 800e458:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800e45c:	4909      	ldr	r1, [pc, #36]	; (800e484 <memp_malloc_pool+0x3c>)
 800e45e:	480a      	ldr	r0, [pc, #40]	; (800e488 <memp_malloc_pool+0x40>)
 800e460:	f00c fb5a 	bl	801ab18 <iprintf>
  if (desc == NULL) {
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <memp_malloc_pool+0x26>
    return NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	e003      	b.n	800e476 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7ff ffb8 	bl	800e3e4 <do_memp_malloc_pool>
 800e474:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e476:	4618      	mov	r0, r3
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	0801c7c0 	.word	0x0801c7c0
 800e484:	0801c83c 	.word	0x0801c83c
 800e488:	0801c814 	.word	0x0801c814

0800e48c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	4603      	mov	r3, r0
 800e494:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e496:	79fb      	ldrb	r3, [r7, #7]
 800e498:	2b0d      	cmp	r3, #13
 800e49a:	d908      	bls.n	800e4ae <memp_malloc+0x22>
 800e49c:	4b0a      	ldr	r3, [pc, #40]	; (800e4c8 <memp_malloc+0x3c>)
 800e49e:	f240 1257 	movw	r2, #343	; 0x157
 800e4a2:	490a      	ldr	r1, [pc, #40]	; (800e4cc <memp_malloc+0x40>)
 800e4a4:	480a      	ldr	r0, [pc, #40]	; (800e4d0 <memp_malloc+0x44>)
 800e4a6:	f00c fb37 	bl	801ab18 <iprintf>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	e008      	b.n	800e4c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e4ae:	79fb      	ldrb	r3, [r7, #7]
 800e4b0:	4a08      	ldr	r2, [pc, #32]	; (800e4d4 <memp_malloc+0x48>)
 800e4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7ff ff94 	bl	800e3e4 <do_memp_malloc_pool>
 800e4bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e4be:	68fb      	ldr	r3, [r7, #12]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	0801c7c0 	.word	0x0801c7c0
 800e4cc:	0801c850 	.word	0x0801c850
 800e4d0:	0801c814 	.word	0x0801c814
 800e4d4:	0801f3c8 	.word	0x0801f3c8

0800e4d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	f003 0303 	and.w	r3, r3, #3
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d006      	beq.n	800e4fa <do_memp_free_pool+0x22>
 800e4ec:	4b0d      	ldr	r3, [pc, #52]	; (800e524 <do_memp_free_pool+0x4c>)
 800e4ee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e4f2:	490d      	ldr	r1, [pc, #52]	; (800e528 <do_memp_free_pool+0x50>)
 800e4f4:	480d      	ldr	r0, [pc, #52]	; (800e52c <do_memp_free_pool+0x54>)
 800e4f6:	f00c fb0f 	bl	801ab18 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e4fe:	f00b fcd7 	bl	8019eb0 <sys_arch_protect>
 800e502:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	689b      	ldr	r3, [r3, #8]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	68fa      	ldr	r2, [r7, #12]
 800e514:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e516:	68b8      	ldr	r0, [r7, #8]
 800e518:	f00b fcd8 	bl	8019ecc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e51c:	bf00      	nop
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	0801c7c0 	.word	0x0801c7c0
 800e528:	0801c870 	.word	0x0801c870
 800e52c:	0801c814 	.word	0x0801c814

0800e530 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d106      	bne.n	800e54e <memp_free_pool+0x1e>
 800e540:	4b0a      	ldr	r3, [pc, #40]	; (800e56c <memp_free_pool+0x3c>)
 800e542:	f240 1295 	movw	r2, #405	; 0x195
 800e546:	490a      	ldr	r1, [pc, #40]	; (800e570 <memp_free_pool+0x40>)
 800e548:	480a      	ldr	r0, [pc, #40]	; (800e574 <memp_free_pool+0x44>)
 800e54a:	f00c fae5 	bl	801ab18 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d007      	beq.n	800e564 <memp_free_pool+0x34>
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d004      	beq.n	800e564 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7ff ffbb 	bl	800e4d8 <do_memp_free_pool>
 800e562:	e000      	b.n	800e566 <memp_free_pool+0x36>
    return;
 800e564:	bf00      	nop
}
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	0801c7c0 	.word	0x0801c7c0
 800e570:	0801c83c 	.word	0x0801c83c
 800e574:	0801c814 	.word	0x0801c814

0800e578 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	4603      	mov	r3, r0
 800e580:	6039      	str	r1, [r7, #0]
 800e582:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e584:	79fb      	ldrb	r3, [r7, #7]
 800e586:	2b0d      	cmp	r3, #13
 800e588:	d907      	bls.n	800e59a <memp_free+0x22>
 800e58a:	4b0c      	ldr	r3, [pc, #48]	; (800e5bc <memp_free+0x44>)
 800e58c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e590:	490b      	ldr	r1, [pc, #44]	; (800e5c0 <memp_free+0x48>)
 800e592:	480c      	ldr	r0, [pc, #48]	; (800e5c4 <memp_free+0x4c>)
 800e594:	f00c fac0 	bl	801ab18 <iprintf>
 800e598:	e00c      	b.n	800e5b4 <memp_free+0x3c>

  if (mem == NULL) {
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d008      	beq.n	800e5b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	4a09      	ldr	r2, [pc, #36]	; (800e5c8 <memp_free+0x50>)
 800e5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5a8:	6839      	ldr	r1, [r7, #0]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7ff ff94 	bl	800e4d8 <do_memp_free_pool>
 800e5b0:	e000      	b.n	800e5b4 <memp_free+0x3c>
    return;
 800e5b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	0801c7c0 	.word	0x0801c7c0
 800e5c0:	0801c890 	.word	0x0801c890
 800e5c4:	0801c814 	.word	0x0801c814
 800e5c8:	0801f3c8 	.word	0x0801f3c8

0800e5cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e5d0:	bf00      	nop
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr
	...

0800e5dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
 800e5e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d108      	bne.n	800e602 <netif_add+0x26>
 800e5f0:	4b5b      	ldr	r3, [pc, #364]	; (800e760 <netif_add+0x184>)
 800e5f2:	f240 1227 	movw	r2, #295	; 0x127
 800e5f6:	495b      	ldr	r1, [pc, #364]	; (800e764 <netif_add+0x188>)
 800e5f8:	485b      	ldr	r0, [pc, #364]	; (800e768 <netif_add+0x18c>)
 800e5fa:	f00c fa8d 	bl	801ab18 <iprintf>
 800e5fe:	2300      	movs	r3, #0
 800e600:	e0a9      	b.n	800e756 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	2b00      	cmp	r3, #0
 800e606:	d108      	bne.n	800e61a <netif_add+0x3e>
 800e608:	4b55      	ldr	r3, [pc, #340]	; (800e760 <netif_add+0x184>)
 800e60a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e60e:	4957      	ldr	r1, [pc, #348]	; (800e76c <netif_add+0x190>)
 800e610:	4855      	ldr	r0, [pc, #340]	; (800e768 <netif_add+0x18c>)
 800e612:	f00c fa81 	bl	801ab18 <iprintf>
 800e616:	2300      	movs	r3, #0
 800e618:	e09d      	b.n	800e756 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d101      	bne.n	800e624 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e620:	4b53      	ldr	r3, [pc, #332]	; (800e770 <netif_add+0x194>)
 800e622:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d101      	bne.n	800e62e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e62a:	4b51      	ldr	r3, [pc, #324]	; (800e770 <netif_add+0x194>)
 800e62c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d101      	bne.n	800e638 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e634:	4b4e      	ldr	r3, [pc, #312]	; (800e770 <netif_add+0x194>)
 800e636:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2200      	movs	r2, #0
 800e642:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2200      	movs	r2, #0
 800e648:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	4a49      	ldr	r2, [pc, #292]	; (800e774 <netif_add+0x198>)
 800e64e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2200      	movs	r2, #0
 800e654:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2200      	movs	r2, #0
 800e65a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3324      	adds	r3, #36	; 0x24
 800e662:	2204      	movs	r2, #4
 800e664:	2100      	movs	r1, #0
 800e666:	4618      	mov	r0, r3
 800e668:	f00c fabb 	bl	801abe2 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2200      	movs	r2, #0
 800e670:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6a3a      	ldr	r2, [r7, #32]
 800e676:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e678:	4b3f      	ldr	r3, [pc, #252]	; (800e778 <netif_add+0x19c>)
 800e67a:	781a      	ldrb	r2, [r3, #0]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e686:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	68b9      	ldr	r1, [r7, #8]
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f000 f914 	bl	800e8bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	4798      	blx	r3
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d001      	beq.n	800e6a4 <netif_add+0xc8>
    return NULL;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	e058      	b.n	800e756 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6aa:	2bff      	cmp	r3, #255	; 0xff
 800e6ac:	d103      	bne.n	800e6b6 <netif_add+0xda>
        netif->num = 0;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e6ba:	4b30      	ldr	r3, [pc, #192]	; (800e77c <netif_add+0x1a0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	617b      	str	r3, [r7, #20]
 800e6c0:	e02b      	b.n	800e71a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e6c2:	697a      	ldr	r2, [r7, #20]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d106      	bne.n	800e6d8 <netif_add+0xfc>
 800e6ca:	4b25      	ldr	r3, [pc, #148]	; (800e760 <netif_add+0x184>)
 800e6cc:	f240 128b 	movw	r2, #395	; 0x18b
 800e6d0:	492b      	ldr	r1, [pc, #172]	; (800e780 <netif_add+0x1a4>)
 800e6d2:	4825      	ldr	r0, [pc, #148]	; (800e768 <netif_add+0x18c>)
 800e6d4:	f00c fa20 	bl	801ab18 <iprintf>
        num_netifs++;
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	2bff      	cmp	r3, #255	; 0xff
 800e6e2:	dd06      	ble.n	800e6f2 <netif_add+0x116>
 800e6e4:	4b1e      	ldr	r3, [pc, #120]	; (800e760 <netif_add+0x184>)
 800e6e6:	f240 128d 	movw	r2, #397	; 0x18d
 800e6ea:	4926      	ldr	r1, [pc, #152]	; (800e784 <netif_add+0x1a8>)
 800e6ec:	481e      	ldr	r0, [pc, #120]	; (800e768 <netif_add+0x18c>)
 800e6ee:	f00c fa13 	bl	801ab18 <iprintf>
        if (netif2->num == netif->num) {
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d108      	bne.n	800e714 <netif_add+0x138>
          netif->num++;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e708:	3301      	adds	r3, #1
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800e712:	e005      	b.n	800e720 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	617b      	str	r3, [r7, #20]
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1d0      	bne.n	800e6c2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d1be      	bne.n	800e6a4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e72c:	2bfe      	cmp	r3, #254	; 0xfe
 800e72e:	d103      	bne.n	800e738 <netif_add+0x15c>
    netif_num = 0;
 800e730:	4b11      	ldr	r3, [pc, #68]	; (800e778 <netif_add+0x19c>)
 800e732:	2200      	movs	r2, #0
 800e734:	701a      	strb	r2, [r3, #0]
 800e736:	e006      	b.n	800e746 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e73e:	3301      	adds	r3, #1
 800e740:	b2da      	uxtb	r2, r3
 800e742:	4b0d      	ldr	r3, [pc, #52]	; (800e778 <netif_add+0x19c>)
 800e744:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e746:	4b0d      	ldr	r3, [pc, #52]	; (800e77c <netif_add+0x1a0>)
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e74e:	4a0b      	ldr	r2, [pc, #44]	; (800e77c <netif_add+0x1a0>)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e754:	68fb      	ldr	r3, [r7, #12]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	0801c8ac 	.word	0x0801c8ac
 800e764:	0801c940 	.word	0x0801c940
 800e768:	0801c8fc 	.word	0x0801c8fc
 800e76c:	0801c95c 	.word	0x0801c95c
 800e770:	0801f458 	.word	0x0801f458
 800e774:	0800eacf 	.word	0x0800eacf
 800e778:	20012278 	.word	0x20012278
 800e77c:	20012270 	.word	0x20012270
 800e780:	0801c980 	.word	0x0801c980
 800e784:	0801c994 	.word	0x0801c994

0800e788 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e792:	6839      	ldr	r1, [r7, #0]
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f002 fc83 	bl	80110a0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f007 f8f5 	bl	801598c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e7a2:	bf00      	nop
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
	...

0800e7ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d106      	bne.n	800e7cc <netif_do_set_ipaddr+0x20>
 800e7be:	4b1d      	ldr	r3, [pc, #116]	; (800e834 <netif_do_set_ipaddr+0x88>)
 800e7c0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e7c4:	491c      	ldr	r1, [pc, #112]	; (800e838 <netif_do_set_ipaddr+0x8c>)
 800e7c6:	481d      	ldr	r0, [pc, #116]	; (800e83c <netif_do_set_ipaddr+0x90>)
 800e7c8:	f00c f9a6 	bl	801ab18 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d106      	bne.n	800e7e0 <netif_do_set_ipaddr+0x34>
 800e7d2:	4b18      	ldr	r3, [pc, #96]	; (800e834 <netif_do_set_ipaddr+0x88>)
 800e7d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e7d8:	4917      	ldr	r1, [pc, #92]	; (800e838 <netif_do_set_ipaddr+0x8c>)
 800e7da:	4818      	ldr	r0, [pc, #96]	; (800e83c <netif_do_set_ipaddr+0x90>)
 800e7dc:	f00c f99c 	bl	801ab18 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d01c      	beq.n	800e828 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e7fe:	f107 0314 	add.w	r3, r7, #20
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f7ff ffbf 	bl	800e788 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d002      	beq.n	800e816 <netif_do_set_ipaddr+0x6a>
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	e000      	b.n	800e818 <netif_do_set_ipaddr+0x6c>
 800e816:	2300      	movs	r3, #0
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e81c:	2101      	movs	r1, #1
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f000 f8d2 	bl	800e9c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e824:	2301      	movs	r3, #1
 800e826:	e000      	b.n	800e82a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3718      	adds	r7, #24
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	0801c8ac 	.word	0x0801c8ac
 800e838:	0801c9c4 	.word	0x0801c9c4
 800e83c:	0801c8fc 	.word	0x0801c8fc

0800e840 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e840:	b480      	push	{r7}
 800e842:	b085      	sub	sp, #20
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	3308      	adds	r3, #8
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	429a      	cmp	r2, r3
 800e858:	d00a      	beq.n	800e870 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <netif_do_set_netmask+0x26>
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	e000      	b.n	800e868 <netif_do_set_netmask+0x28>
 800e866:	2300      	movs	r3, #0
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e86c:	2301      	movs	r3, #1
 800e86e:	e000      	b.n	800e872 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3714      	adds	r7, #20
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e87e:	b480      	push	{r7}
 800e880:	b085      	sub	sp, #20
 800e882:	af00      	add	r7, sp, #0
 800e884:	60f8      	str	r0, [r7, #12]
 800e886:	60b9      	str	r1, [r7, #8]
 800e888:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	330c      	adds	r3, #12
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	429a      	cmp	r2, r3
 800e896:	d00a      	beq.n	800e8ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d002      	beq.n	800e8a4 <netif_do_set_gw+0x26>
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	e000      	b.n	800e8a6 <netif_do_set_gw+0x28>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e000      	b.n	800e8b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3714      	adds	r7, #20
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b088      	sub	sp, #32
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
 800e8c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d101      	bne.n	800e8dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e8d8:	4b1c      	ldr	r3, [pc, #112]	; (800e94c <netif_set_addr+0x90>)
 800e8da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d101      	bne.n	800e8e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e8e2:	4b1a      	ldr	r3, [pc, #104]	; (800e94c <netif_set_addr+0x90>)
 800e8e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d101      	bne.n	800e8f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e8ec:	4b17      	ldr	r3, [pc, #92]	; (800e94c <netif_set_addr+0x90>)
 800e8ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d003      	beq.n	800e8fe <netif_set_addr+0x42>
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d101      	bne.n	800e902 <netif_set_addr+0x46>
 800e8fe:	2301      	movs	r3, #1
 800e900:	e000      	b.n	800e904 <netif_set_addr+0x48>
 800e902:	2300      	movs	r3, #0
 800e904:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d006      	beq.n	800e91a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e90c:	f107 0310 	add.w	r3, r7, #16
 800e910:	461a      	mov	r2, r3
 800e912:	68b9      	ldr	r1, [r7, #8]
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f7ff ff49 	bl	800e7ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e91a:	69fa      	ldr	r2, [r7, #28]
 800e91c:	6879      	ldr	r1, [r7, #4]
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f7ff ff8e 	bl	800e840 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e924:	69ba      	ldr	r2, [r7, #24]
 800e926:	6839      	ldr	r1, [r7, #0]
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f7ff ffa8 	bl	800e87e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d106      	bne.n	800e942 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e934:	f107 0310 	add.w	r3, r7, #16
 800e938:	461a      	mov	r2, r3
 800e93a:	68b9      	ldr	r1, [r7, #8]
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f7ff ff35 	bl	800e7ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e942:	bf00      	nop
 800e944:	3720      	adds	r7, #32
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	0801f458 	.word	0x0801f458

0800e950 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e958:	4a04      	ldr	r2, [pc, #16]	; (800e96c <netif_set_default+0x1c>)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e95e:	bf00      	nop
 800e960:	370c      	adds	r7, #12
 800e962:	46bd      	mov	sp, r7
 800e964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e968:	4770      	bx	lr
 800e96a:	bf00      	nop
 800e96c:	20012274 	.word	0x20012274

0800e970 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d107      	bne.n	800e98e <netif_set_up+0x1e>
 800e97e:	4b0f      	ldr	r3, [pc, #60]	; (800e9bc <netif_set_up+0x4c>)
 800e980:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e984:	490e      	ldr	r1, [pc, #56]	; (800e9c0 <netif_set_up+0x50>)
 800e986:	480f      	ldr	r0, [pc, #60]	; (800e9c4 <netif_set_up+0x54>)
 800e988:	f00c f8c6 	bl	801ab18 <iprintf>
 800e98c:	e013      	b.n	800e9b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e994:	f003 0301 	and.w	r3, r3, #1
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d10c      	bne.n	800e9b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9a2:	f043 0301 	orr.w	r3, r3, #1
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e9ae:	2103      	movs	r1, #3
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f809 	bl	800e9c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	0801c8ac 	.word	0x0801c8ac
 800e9c0:	0801ca34 	.word	0x0801ca34
 800e9c4:	0801c8fc 	.word	0x0801c8fc

0800e9c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d106      	bne.n	800e9e8 <netif_issue_reports+0x20>
 800e9da:	4b18      	ldr	r3, [pc, #96]	; (800ea3c <netif_issue_reports+0x74>)
 800e9dc:	f240 326d 	movw	r2, #877	; 0x36d
 800e9e0:	4917      	ldr	r1, [pc, #92]	; (800ea40 <netif_issue_reports+0x78>)
 800e9e2:	4818      	ldr	r0, [pc, #96]	; (800ea44 <netif_issue_reports+0x7c>)
 800e9e4:	f00c f898 	bl	801ab18 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9ee:	f003 0304 	and.w	r3, r3, #4
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d01e      	beq.n	800ea34 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d017      	beq.n	800ea34 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ea04:	78fb      	ldrb	r3, [r7, #3]
 800ea06:	f003 0301 	and.w	r3, r3, #1
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d013      	beq.n	800ea36 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	3304      	adds	r3, #4
 800ea12:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d00e      	beq.n	800ea36 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea1e:	f003 0308 	and.w	r3, r3, #8
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d007      	beq.n	800ea36 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	3304      	adds	r3, #4
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f009 fdc1 	bl	80185b4 <etharp_request>
 800ea32:	e000      	b.n	800ea36 <netif_issue_reports+0x6e>
    return;
 800ea34:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	0801c8ac 	.word	0x0801c8ac
 800ea40:	0801ca50 	.word	0x0801ca50
 800ea44:	0801c8fc 	.word	0x0801c8fc

0800ea48 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d107      	bne.n	800ea66 <netif_set_down+0x1e>
 800ea56:	4b12      	ldr	r3, [pc, #72]	; (800eaa0 <netif_set_down+0x58>)
 800ea58:	f240 329b 	movw	r2, #923	; 0x39b
 800ea5c:	4911      	ldr	r1, [pc, #68]	; (800eaa4 <netif_set_down+0x5c>)
 800ea5e:	4812      	ldr	r0, [pc, #72]	; (800eaa8 <netif_set_down+0x60>)
 800ea60:	f00c f85a 	bl	801ab18 <iprintf>
 800ea64:	e019      	b.n	800ea9a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea6c:	f003 0301 	and.w	r3, r3, #1
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d012      	beq.n	800ea9a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea7a:	f023 0301 	bic.w	r3, r3, #1
 800ea7e:	b2da      	uxtb	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea8c:	f003 0308 	and.w	r3, r3, #8
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f009 f947 	bl	8017d28 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	0801c8ac 	.word	0x0801c8ac
 800eaa4:	0801ca74 	.word	0x0801ca74
 800eaa8:	0801c8fc 	.word	0x0801c8fc

0800eaac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	61da      	str	r2, [r3, #28]
  }
}
 800eac2:	bf00      	nop
 800eac4:	370c      	adds	r7, #12
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr

0800eace <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800eace:	b480      	push	{r7}
 800ead0:	b085      	sub	sp, #20
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	60f8      	str	r0, [r7, #12]
 800ead6:	60b9      	str	r1, [r7, #8]
 800ead8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800eada:	f06f 030b 	mvn.w	r3, #11
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3714      	adds	r7, #20
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
	...

0800eaec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b085      	sub	sp, #20
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800eaf6:	79fb      	ldrb	r3, [r7, #7]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d013      	beq.n	800eb24 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800eafc:	4b0d      	ldr	r3, [pc, #52]	; (800eb34 <netif_get_by_index+0x48>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	60fb      	str	r3, [r7, #12]
 800eb02:	e00c      	b.n	800eb1e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	79fa      	ldrb	r2, [r7, #7]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d101      	bne.n	800eb18 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	e006      	b.n	800eb26 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	60fb      	str	r3, [r7, #12]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1ef      	bne.n	800eb04 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800eb24:	2300      	movs	r3, #0
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	20012270 	.word	0x20012270

0800eb38 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800eb3e:	f00b f9b7 	bl	8019eb0 <sys_arch_protect>
 800eb42:	6038      	str	r0, [r7, #0]
 800eb44:	4b0d      	ldr	r3, [pc, #52]	; (800eb7c <pbuf_free_ooseq+0x44>)
 800eb46:	2200      	movs	r2, #0
 800eb48:	701a      	strb	r2, [r3, #0]
 800eb4a:	6838      	ldr	r0, [r7, #0]
 800eb4c:	f00b f9be 	bl	8019ecc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800eb50:	4b0b      	ldr	r3, [pc, #44]	; (800eb80 <pbuf_free_ooseq+0x48>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	607b      	str	r3, [r7, #4]
 800eb56:	e00a      	b.n	800eb6e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d003      	beq.n	800eb68 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f002 fadb 	bl	801111c <tcp_free_ooseq>
      return;
 800eb66:	e005      	b.n	800eb74 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	607b      	str	r3, [r7, #4]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d1f1      	bne.n	800eb58 <pbuf_free_ooseq+0x20>
    }
  }
}
 800eb74:	3708      	adds	r7, #8
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20012279 	.word	0x20012279
 800eb80:	20012288 	.word	0x20012288

0800eb84 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800eb8c:	f7ff ffd4 	bl	800eb38 <pbuf_free_ooseq>
}
 800eb90:	bf00      	nop
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800eb9e:	f00b f987 	bl	8019eb0 <sys_arch_protect>
 800eba2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800eba4:	4b0f      	ldr	r3, [pc, #60]	; (800ebe4 <pbuf_pool_is_empty+0x4c>)
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ebaa:	4b0e      	ldr	r3, [pc, #56]	; (800ebe4 <pbuf_pool_is_empty+0x4c>)
 800ebac:	2201      	movs	r2, #1
 800ebae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f00b f98b 	bl	8019ecc <sys_arch_unprotect>

  if (!queued) {
 800ebb6:	78fb      	ldrb	r3, [r7, #3]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10f      	bne.n	800ebdc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	480a      	ldr	r0, [pc, #40]	; (800ebe8 <pbuf_pool_is_empty+0x50>)
 800ebc0:	f7fe fc14 	bl	800d3ec <tcpip_try_callback>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d008      	beq.n	800ebdc <pbuf_pool_is_empty+0x44>
 800ebca:	f00b f971 	bl	8019eb0 <sys_arch_protect>
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	4b04      	ldr	r3, [pc, #16]	; (800ebe4 <pbuf_pool_is_empty+0x4c>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	701a      	strb	r2, [r3, #0]
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f00b f978 	bl	8019ecc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ebdc:	bf00      	nop
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	20012279 	.word	0x20012279
 800ebe8:	0800eb85 	.word	0x0800eb85

0800ebec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	80fb      	strh	r3, [r7, #6]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	88fa      	ldrh	r2, [r7, #6]
 800ec12:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	88ba      	ldrh	r2, [r7, #4]
 800ec18:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ec1a:	8b3b      	ldrh	r3, [r7, #24]
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	7f3a      	ldrb	r2, [r7, #28]
 800ec26:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	73da      	strb	r2, [r3, #15]
}
 800ec34:	bf00      	nop
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b08c      	sub	sp, #48	; 0x30
 800ec44:	af02      	add	r7, sp, #8
 800ec46:	4603      	mov	r3, r0
 800ec48:	71fb      	strb	r3, [r7, #7]
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	80bb      	strh	r3, [r7, #4]
 800ec4e:	4613      	mov	r3, r2
 800ec50:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ec56:	887b      	ldrh	r3, [r7, #2]
 800ec58:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ec5c:	d07f      	beq.n	800ed5e <pbuf_alloc+0x11e>
 800ec5e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ec62:	f300 80c8 	bgt.w	800edf6 <pbuf_alloc+0x1b6>
 800ec66:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ec6a:	d010      	beq.n	800ec8e <pbuf_alloc+0x4e>
 800ec6c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ec70:	f300 80c1 	bgt.w	800edf6 <pbuf_alloc+0x1b6>
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d002      	beq.n	800ec7e <pbuf_alloc+0x3e>
 800ec78:	2b41      	cmp	r3, #65	; 0x41
 800ec7a:	f040 80bc 	bne.w	800edf6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ec7e:	887a      	ldrh	r2, [r7, #2]
 800ec80:	88bb      	ldrh	r3, [r7, #4]
 800ec82:	4619      	mov	r1, r3
 800ec84:	2000      	movs	r0, #0
 800ec86:	f000 f8d1 	bl	800ee2c <pbuf_alloc_reference>
 800ec8a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ec8c:	e0bd      	b.n	800ee0a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ec96:	88bb      	ldrh	r3, [r7, #4]
 800ec98:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ec9a:	200d      	movs	r0, #13
 800ec9c:	f7ff fbf6 	bl	800e48c <memp_malloc>
 800eca0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d109      	bne.n	800ecbc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800eca8:	f7ff ff76 	bl	800eb98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d002      	beq.n	800ecb8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ecb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecb4:	f000 faa8 	bl	800f208 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e0a7      	b.n	800ee0c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ecbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecbe:	3303      	adds	r3, #3
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	f023 0303 	bic.w	r3, r3, #3
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	8b7a      	ldrh	r2, [r7, #26]
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	bf28      	it	cs
 800ecd4:	4613      	movcs	r3, r2
 800ecd6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ecd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecda:	3310      	adds	r3, #16
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	4413      	add	r3, r2
 800ece0:	3303      	adds	r3, #3
 800ece2:	f023 0303 	bic.w	r3, r3, #3
 800ece6:	4618      	mov	r0, r3
 800ece8:	89f9      	ldrh	r1, [r7, #14]
 800ecea:	8b7a      	ldrh	r2, [r7, #26]
 800ecec:	2300      	movs	r3, #0
 800ecee:	9301      	str	r3, [sp, #4]
 800ecf0:	887b      	ldrh	r3, [r7, #2]
 800ecf2:	9300      	str	r3, [sp, #0]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	6938      	ldr	r0, [r7, #16]
 800ecfa:	f7ff ff77 	bl	800ebec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	f003 0303 	and.w	r3, r3, #3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d006      	beq.n	800ed18 <pbuf_alloc+0xd8>
 800ed0a:	4b42      	ldr	r3, [pc, #264]	; (800ee14 <pbuf_alloc+0x1d4>)
 800ed0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed10:	4941      	ldr	r1, [pc, #260]	; (800ee18 <pbuf_alloc+0x1d8>)
 800ed12:	4842      	ldr	r0, [pc, #264]	; (800ee1c <pbuf_alloc+0x1dc>)
 800ed14:	f00b ff00 	bl	801ab18 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ed18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed1a:	3303      	adds	r3, #3
 800ed1c:	f023 0303 	bic.w	r3, r3, #3
 800ed20:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ed24:	d106      	bne.n	800ed34 <pbuf_alloc+0xf4>
 800ed26:	4b3b      	ldr	r3, [pc, #236]	; (800ee14 <pbuf_alloc+0x1d4>)
 800ed28:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ed2c:	493c      	ldr	r1, [pc, #240]	; (800ee20 <pbuf_alloc+0x1e0>)
 800ed2e:	483b      	ldr	r0, [pc, #236]	; (800ee1c <pbuf_alloc+0x1dc>)
 800ed30:	f00b fef2 	bl	801ab18 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d102      	bne.n	800ed40 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ed3e:	e002      	b.n	800ed46 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ed4a:	8b7a      	ldrh	r2, [r7, #26]
 800ed4c:	89fb      	ldrh	r3, [r7, #14]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ed52:	2300      	movs	r3, #0
 800ed54:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ed56:	8b7b      	ldrh	r3, [r7, #26]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d19e      	bne.n	800ec9a <pbuf_alloc+0x5a>
      break;
 800ed5c:	e055      	b.n	800ee0a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ed5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed60:	3303      	adds	r3, #3
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	f023 0303 	bic.w	r3, r3, #3
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	88bb      	ldrh	r3, [r7, #4]
 800ed6c:	3303      	adds	r3, #3
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	f023 0303 	bic.w	r3, r3, #3
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	4413      	add	r3, r2
 800ed78:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ed7a:	8b3b      	ldrh	r3, [r7, #24]
 800ed7c:	3310      	adds	r3, #16
 800ed7e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ed80:	8b3a      	ldrh	r2, [r7, #24]
 800ed82:	88bb      	ldrh	r3, [r7, #4]
 800ed84:	3303      	adds	r3, #3
 800ed86:	f023 0303 	bic.w	r3, r3, #3
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d306      	bcc.n	800ed9c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ed8e:	8afa      	ldrh	r2, [r7, #22]
 800ed90:	88bb      	ldrh	r3, [r7, #4]
 800ed92:	3303      	adds	r3, #3
 800ed94:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d201      	bcs.n	800eda0 <pbuf_alloc+0x160>
        return NULL;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	e035      	b.n	800ee0c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800eda0:	8afb      	ldrh	r3, [r7, #22]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7ff f9ce 	bl	800e144 <mem_malloc>
 800eda8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edac:	2b00      	cmp	r3, #0
 800edae:	d101      	bne.n	800edb4 <pbuf_alloc+0x174>
        return NULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	e02b      	b.n	800ee0c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800edb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edb6:	3310      	adds	r3, #16
 800edb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edba:	4413      	add	r3, r2
 800edbc:	3303      	adds	r3, #3
 800edbe:	f023 0303 	bic.w	r3, r3, #3
 800edc2:	4618      	mov	r0, r3
 800edc4:	88b9      	ldrh	r1, [r7, #4]
 800edc6:	88ba      	ldrh	r2, [r7, #4]
 800edc8:	2300      	movs	r3, #0
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	887b      	ldrh	r3, [r7, #2]
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	460b      	mov	r3, r1
 800edd2:	4601      	mov	r1, r0
 800edd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edd6:	f7ff ff09 	bl	800ebec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800edda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	f003 0303 	and.w	r3, r3, #3
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d010      	beq.n	800ee08 <pbuf_alloc+0x1c8>
 800ede6:	4b0b      	ldr	r3, [pc, #44]	; (800ee14 <pbuf_alloc+0x1d4>)
 800ede8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800edec:	490d      	ldr	r1, [pc, #52]	; (800ee24 <pbuf_alloc+0x1e4>)
 800edee:	480b      	ldr	r0, [pc, #44]	; (800ee1c <pbuf_alloc+0x1dc>)
 800edf0:	f00b fe92 	bl	801ab18 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800edf4:	e008      	b.n	800ee08 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800edf6:	4b07      	ldr	r3, [pc, #28]	; (800ee14 <pbuf_alloc+0x1d4>)
 800edf8:	f240 1227 	movw	r2, #295	; 0x127
 800edfc:	490a      	ldr	r1, [pc, #40]	; (800ee28 <pbuf_alloc+0x1e8>)
 800edfe:	4807      	ldr	r0, [pc, #28]	; (800ee1c <pbuf_alloc+0x1dc>)
 800ee00:	f00b fe8a 	bl	801ab18 <iprintf>
      return NULL;
 800ee04:	2300      	movs	r3, #0
 800ee06:	e001      	b.n	800ee0c <pbuf_alloc+0x1cc>
      break;
 800ee08:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3728      	adds	r7, #40	; 0x28
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	0801cadc 	.word	0x0801cadc
 800ee18:	0801cb0c 	.word	0x0801cb0c
 800ee1c:	0801cb3c 	.word	0x0801cb3c
 800ee20:	0801cb64 	.word	0x0801cb64
 800ee24:	0801cb98 	.word	0x0801cb98
 800ee28:	0801cbc4 	.word	0x0801cbc4

0800ee2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af02      	add	r7, sp, #8
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	460b      	mov	r3, r1
 800ee36:	807b      	strh	r3, [r7, #2]
 800ee38:	4613      	mov	r3, r2
 800ee3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ee3c:	883b      	ldrh	r3, [r7, #0]
 800ee3e:	2b41      	cmp	r3, #65	; 0x41
 800ee40:	d009      	beq.n	800ee56 <pbuf_alloc_reference+0x2a>
 800ee42:	883b      	ldrh	r3, [r7, #0]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d006      	beq.n	800ee56 <pbuf_alloc_reference+0x2a>
 800ee48:	4b0f      	ldr	r3, [pc, #60]	; (800ee88 <pbuf_alloc_reference+0x5c>)
 800ee4a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ee4e:	490f      	ldr	r1, [pc, #60]	; (800ee8c <pbuf_alloc_reference+0x60>)
 800ee50:	480f      	ldr	r0, [pc, #60]	; (800ee90 <pbuf_alloc_reference+0x64>)
 800ee52:	f00b fe61 	bl	801ab18 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ee56:	200c      	movs	r0, #12
 800ee58:	f7ff fb18 	bl	800e48c <memp_malloc>
 800ee5c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d101      	bne.n	800ee68 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ee64:	2300      	movs	r3, #0
 800ee66:	e00b      	b.n	800ee80 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ee68:	8879      	ldrh	r1, [r7, #2]
 800ee6a:	887a      	ldrh	r2, [r7, #2]
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9301      	str	r3, [sp, #4]
 800ee70:	883b      	ldrh	r3, [r7, #0]
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	460b      	mov	r3, r1
 800ee76:	6879      	ldr	r1, [r7, #4]
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f7ff feb7 	bl	800ebec <pbuf_init_alloced_pbuf>
  return p;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801cadc 	.word	0x0801cadc
 800ee8c:	0801cbe0 	.word	0x0801cbe0
 800ee90:	0801cb3c 	.word	0x0801cb3c

0800ee94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b088      	sub	sp, #32
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	607b      	str	r3, [r7, #4]
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	73fb      	strb	r3, [r7, #15]
 800eea0:	460b      	mov	r3, r1
 800eea2:	81bb      	strh	r3, [r7, #12]
 800eea4:	4613      	mov	r3, r2
 800eea6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800eeac:	8a7b      	ldrh	r3, [r7, #18]
 800eeae:	3303      	adds	r3, #3
 800eeb0:	f023 0203 	bic.w	r2, r3, #3
 800eeb4:	89bb      	ldrh	r3, [r7, #12]
 800eeb6:	441a      	add	r2, r3
 800eeb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d901      	bls.n	800eec2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800eebe:	2300      	movs	r3, #0
 800eec0:	e018      	b.n	800eef4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800eec2:	6a3b      	ldr	r3, [r7, #32]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d007      	beq.n	800eed8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800eec8:	8a7b      	ldrh	r3, [r7, #18]
 800eeca:	3303      	adds	r3, #3
 800eecc:	f023 0303 	bic.w	r3, r3, #3
 800eed0:	6a3a      	ldr	r2, [r7, #32]
 800eed2:	4413      	add	r3, r2
 800eed4:	617b      	str	r3, [r7, #20]
 800eed6:	e001      	b.n	800eedc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800eed8:	2300      	movs	r3, #0
 800eeda:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	89b9      	ldrh	r1, [r7, #12]
 800eee0:	89ba      	ldrh	r2, [r7, #12]
 800eee2:	2302      	movs	r3, #2
 800eee4:	9301      	str	r3, [sp, #4]
 800eee6:	897b      	ldrh	r3, [r7, #10]
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	460b      	mov	r3, r1
 800eeec:	6979      	ldr	r1, [r7, #20]
 800eeee:	f7ff fe7d 	bl	800ebec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800eef2:	687b      	ldr	r3, [r7, #4]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3718      	adds	r7, #24
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	460b      	mov	r3, r1
 800ef06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d106      	bne.n	800ef1c <pbuf_realloc+0x20>
 800ef0e:	4b3a      	ldr	r3, [pc, #232]	; (800eff8 <pbuf_realloc+0xfc>)
 800ef10:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ef14:	4939      	ldr	r1, [pc, #228]	; (800effc <pbuf_realloc+0x100>)
 800ef16:	483a      	ldr	r0, [pc, #232]	; (800f000 <pbuf_realloc+0x104>)
 800ef18:	f00b fdfe 	bl	801ab18 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	891b      	ldrh	r3, [r3, #8]
 800ef20:	887a      	ldrh	r2, [r7, #2]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d263      	bcs.n	800efee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	891a      	ldrh	r2, [r3, #8]
 800ef2a:	887b      	ldrh	r3, [r7, #2]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ef30:	887b      	ldrh	r3, [r7, #2]
 800ef32:	817b      	strh	r3, [r7, #10]
  q = p;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ef38:	e018      	b.n	800ef6c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	895b      	ldrh	r3, [r3, #10]
 800ef3e:	897a      	ldrh	r2, [r7, #10]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	891a      	ldrh	r2, [r3, #8]
 800ef48:	893b      	ldrh	r3, [r7, #8]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d106      	bne.n	800ef6c <pbuf_realloc+0x70>
 800ef5e:	4b26      	ldr	r3, [pc, #152]	; (800eff8 <pbuf_realloc+0xfc>)
 800ef60:	f240 12af 	movw	r2, #431	; 0x1af
 800ef64:	4927      	ldr	r1, [pc, #156]	; (800f004 <pbuf_realloc+0x108>)
 800ef66:	4826      	ldr	r0, [pc, #152]	; (800f000 <pbuf_realloc+0x104>)
 800ef68:	f00b fdd6 	bl	801ab18 <iprintf>
  while (rem_len > q->len) {
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	895b      	ldrh	r3, [r3, #10]
 800ef70:	897a      	ldrh	r2, [r7, #10]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d8e1      	bhi.n	800ef3a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	7b1b      	ldrb	r3, [r3, #12]
 800ef7a:	f003 030f 	and.w	r3, r3, #15
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d121      	bne.n	800efc6 <pbuf_realloc+0xca>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	895b      	ldrh	r3, [r3, #10]
 800ef86:	897a      	ldrh	r2, [r7, #10]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d01c      	beq.n	800efc6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	7b5b      	ldrb	r3, [r3, #13]
 800ef90:	f003 0302 	and.w	r3, r3, #2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d116      	bne.n	800efc6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	b29a      	uxth	r2, r3
 800efa2:	897b      	ldrh	r3, [r7, #10]
 800efa4:	4413      	add	r3, r2
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	4619      	mov	r1, r3
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f7fe ffc0 	bl	800df30 <mem_trim>
 800efb0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d106      	bne.n	800efc6 <pbuf_realloc+0xca>
 800efb8:	4b0f      	ldr	r3, [pc, #60]	; (800eff8 <pbuf_realloc+0xfc>)
 800efba:	f240 12bd 	movw	r2, #445	; 0x1bd
 800efbe:	4912      	ldr	r1, [pc, #72]	; (800f008 <pbuf_realloc+0x10c>)
 800efc0:	480f      	ldr	r0, [pc, #60]	; (800f000 <pbuf_realloc+0x104>)
 800efc2:	f00b fda9 	bl	801ab18 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	897a      	ldrh	r2, [r7, #10]
 800efca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	895a      	ldrh	r2, [r3, #10]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d004      	beq.n	800efe6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f000 f911 	bl	800f208 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	e000      	b.n	800eff0 <pbuf_realloc+0xf4>
    return;
 800efee:	bf00      	nop

}
 800eff0:	3710      	adds	r7, #16
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	0801cadc 	.word	0x0801cadc
 800effc:	0801cbf4 	.word	0x0801cbf4
 800f000:	0801cb3c 	.word	0x0801cb3c
 800f004:	0801cc0c 	.word	0x0801cc0c
 800f008:	0801cc24 	.word	0x0801cc24

0800f00c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	4613      	mov	r3, r2
 800f018:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d106      	bne.n	800f02e <pbuf_add_header_impl+0x22>
 800f020:	4b2b      	ldr	r3, [pc, #172]	; (800f0d0 <pbuf_add_header_impl+0xc4>)
 800f022:	f240 12df 	movw	r2, #479	; 0x1df
 800f026:	492b      	ldr	r1, [pc, #172]	; (800f0d4 <pbuf_add_header_impl+0xc8>)
 800f028:	482b      	ldr	r0, [pc, #172]	; (800f0d8 <pbuf_add_header_impl+0xcc>)
 800f02a:	f00b fd75 	bl	801ab18 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d003      	beq.n	800f03c <pbuf_add_header_impl+0x30>
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f03a:	d301      	bcc.n	800f040 <pbuf_add_header_impl+0x34>
    return 1;
 800f03c:	2301      	movs	r3, #1
 800f03e:	e043      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d101      	bne.n	800f04a <pbuf_add_header_impl+0x3e>
    return 0;
 800f046:	2300      	movs	r3, #0
 800f048:	e03e      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	891a      	ldrh	r2, [r3, #8]
 800f052:	8a7b      	ldrh	r3, [r7, #18]
 800f054:	4413      	add	r3, r2
 800f056:	b29b      	uxth	r3, r3
 800f058:	8a7a      	ldrh	r2, [r7, #18]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d901      	bls.n	800f062 <pbuf_add_header_impl+0x56>
    return 1;
 800f05e:	2301      	movs	r3, #1
 800f060:	e032      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	7b1b      	ldrb	r3, [r3, #12]
 800f066:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f068:	8a3b      	ldrh	r3, [r7, #16]
 800f06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00c      	beq.n	800f08c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	685a      	ldr	r2, [r3, #4]
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	425b      	negs	r3, r3
 800f07a:	4413      	add	r3, r2
 800f07c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	3310      	adds	r3, #16
 800f082:	697a      	ldr	r2, [r7, #20]
 800f084:	429a      	cmp	r2, r3
 800f086:	d20d      	bcs.n	800f0a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f088:	2301      	movs	r3, #1
 800f08a:	e01d      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f08c:	79fb      	ldrb	r3, [r7, #7]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d006      	beq.n	800f0a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	685a      	ldr	r2, [r3, #4]
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	425b      	negs	r3, r3
 800f09a:	4413      	add	r3, r2
 800f09c:	617b      	str	r3, [r7, #20]
 800f09e:	e001      	b.n	800f0a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e011      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	895a      	ldrh	r2, [r3, #10]
 800f0ae:	8a7b      	ldrh	r3, [r7, #18]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	891a      	ldrh	r2, [r3, #8]
 800f0bc:	8a7b      	ldrh	r3, [r7, #18]
 800f0be:	4413      	add	r3, r2
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	811a      	strh	r2, [r3, #8]


  return 0;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	0801cadc 	.word	0x0801cadc
 800f0d4:	0801cc40 	.word	0x0801cc40
 800f0d8:	0801cb3c 	.word	0x0801cb3c

0800f0dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	6839      	ldr	r1, [r7, #0]
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7ff ff8e 	bl	800f00c <pbuf_add_header_impl>
 800f0f0:	4603      	mov	r3, r0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d106      	bne.n	800f11a <pbuf_remove_header+0x1e>
 800f10c:	4b20      	ldr	r3, [pc, #128]	; (800f190 <pbuf_remove_header+0x94>)
 800f10e:	f240 224b 	movw	r2, #587	; 0x24b
 800f112:	4920      	ldr	r1, [pc, #128]	; (800f194 <pbuf_remove_header+0x98>)
 800f114:	4820      	ldr	r0, [pc, #128]	; (800f198 <pbuf_remove_header+0x9c>)
 800f116:	f00b fcff 	bl	801ab18 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <pbuf_remove_header+0x2c>
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f126:	d301      	bcc.n	800f12c <pbuf_remove_header+0x30>
    return 1;
 800f128:	2301      	movs	r3, #1
 800f12a:	e02c      	b.n	800f186 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d101      	bne.n	800f136 <pbuf_remove_header+0x3a>
    return 0;
 800f132:	2300      	movs	r3, #0
 800f134:	e027      	b.n	800f186 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	895b      	ldrh	r3, [r3, #10]
 800f13e:	89fa      	ldrh	r2, [r7, #14]
 800f140:	429a      	cmp	r2, r3
 800f142:	d908      	bls.n	800f156 <pbuf_remove_header+0x5a>
 800f144:	4b12      	ldr	r3, [pc, #72]	; (800f190 <pbuf_remove_header+0x94>)
 800f146:	f240 2255 	movw	r2, #597	; 0x255
 800f14a:	4914      	ldr	r1, [pc, #80]	; (800f19c <pbuf_remove_header+0xa0>)
 800f14c:	4812      	ldr	r0, [pc, #72]	; (800f198 <pbuf_remove_header+0x9c>)
 800f14e:	f00b fce3 	bl	801ab18 <iprintf>
 800f152:	2301      	movs	r3, #1
 800f154:	e017      	b.n	800f186 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	685a      	ldr	r2, [r3, #4]
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	441a      	add	r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	895a      	ldrh	r2, [r3, #10]
 800f16c:	89fb      	ldrh	r3, [r7, #14]
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	b29a      	uxth	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	891a      	ldrh	r2, [r3, #8]
 800f17a:	89fb      	ldrh	r3, [r7, #14]
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	b29a      	uxth	r2, r3
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f184:	2300      	movs	r3, #0
}
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	0801cadc 	.word	0x0801cadc
 800f194:	0801cc40 	.word	0x0801cc40
 800f198:	0801cb3c 	.word	0x0801cb3c
 800f19c:	0801cc4c 	.word	0x0801cc4c

0800f1a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	807b      	strh	r3, [r7, #2]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f1b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	da08      	bge.n	800f1ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f1b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f1bc:	425b      	negs	r3, r3
 800f1be:	4619      	mov	r1, r3
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f7ff ff9b 	bl	800f0fc <pbuf_remove_header>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	e007      	b.n	800f1da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f1ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f1ce:	787a      	ldrb	r2, [r7, #1]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7ff ff1a 	bl	800f00c <pbuf_add_header_impl>
 800f1d8:	4603      	mov	r3, r0
  }
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b082      	sub	sp, #8
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
 800f1ea:	460b      	mov	r3, r1
 800f1ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f1ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7ff ffd2 	bl	800f1a0 <pbuf_header_impl>
 800f1fc:	4603      	mov	r3, r0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
	...

0800f208 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b088      	sub	sp, #32
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10b      	bne.n	800f22e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d106      	bne.n	800f22a <pbuf_free+0x22>
 800f21c:	4b3b      	ldr	r3, [pc, #236]	; (800f30c <pbuf_free+0x104>)
 800f21e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f222:	493b      	ldr	r1, [pc, #236]	; (800f310 <pbuf_free+0x108>)
 800f224:	483b      	ldr	r0, [pc, #236]	; (800f314 <pbuf_free+0x10c>)
 800f226:	f00b fc77 	bl	801ab18 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f22a:	2300      	movs	r3, #0
 800f22c:	e069      	b.n	800f302 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f22e:	2300      	movs	r3, #0
 800f230:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f232:	e062      	b.n	800f2fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f234:	f00a fe3c 	bl	8019eb0 <sys_arch_protect>
 800f238:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	7b9b      	ldrb	r3, [r3, #14]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d106      	bne.n	800f250 <pbuf_free+0x48>
 800f242:	4b32      	ldr	r3, [pc, #200]	; (800f30c <pbuf_free+0x104>)
 800f244:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f248:	4933      	ldr	r1, [pc, #204]	; (800f318 <pbuf_free+0x110>)
 800f24a:	4832      	ldr	r0, [pc, #200]	; (800f314 <pbuf_free+0x10c>)
 800f24c:	f00b fc64 	bl	801ab18 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	7b9b      	ldrb	r3, [r3, #14]
 800f254:	3b01      	subs	r3, #1
 800f256:	b2da      	uxtb	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	739a      	strb	r2, [r3, #14]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	7b9b      	ldrb	r3, [r3, #14]
 800f260:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f262:	69b8      	ldr	r0, [r7, #24]
 800f264:	f00a fe32 	bl	8019ecc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f268:	7dfb      	ldrb	r3, [r7, #23]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d143      	bne.n	800f2f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	7b1b      	ldrb	r3, [r3, #12]
 800f278:	f003 030f 	and.w	r3, r3, #15
 800f27c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	7b5b      	ldrb	r3, [r3, #13]
 800f282:	f003 0302 	and.w	r3, r3, #2
 800f286:	2b00      	cmp	r3, #0
 800f288:	d011      	beq.n	800f2ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	691b      	ldr	r3, [r3, #16]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d106      	bne.n	800f2a4 <pbuf_free+0x9c>
 800f296:	4b1d      	ldr	r3, [pc, #116]	; (800f30c <pbuf_free+0x104>)
 800f298:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f29c:	491f      	ldr	r1, [pc, #124]	; (800f31c <pbuf_free+0x114>)
 800f29e:	481d      	ldr	r0, [pc, #116]	; (800f314 <pbuf_free+0x10c>)
 800f2a0:	f00b fc3a 	bl	801ab18 <iprintf>
        pc->custom_free_function(p);
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	4798      	blx	r3
 800f2ac:	e01d      	b.n	800f2ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f2ae:	7bfb      	ldrb	r3, [r7, #15]
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	d104      	bne.n	800f2be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f2b4:	6879      	ldr	r1, [r7, #4]
 800f2b6:	200d      	movs	r0, #13
 800f2b8:	f7ff f95e 	bl	800e578 <memp_free>
 800f2bc:	e015      	b.n	800f2ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f2be:	7bfb      	ldrb	r3, [r7, #15]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d104      	bne.n	800f2ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f2c4:	6879      	ldr	r1, [r7, #4]
 800f2c6:	200c      	movs	r0, #12
 800f2c8:	f7ff f956 	bl	800e578 <memp_free>
 800f2cc:	e00d      	b.n	800f2ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f2ce:	7bfb      	ldrb	r3, [r7, #15]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d103      	bne.n	800f2dc <pbuf_free+0xd4>
          mem_free(p);
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7fe fd9b 	bl	800de10 <mem_free>
 800f2da:	e006      	b.n	800f2ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f2dc:	4b0b      	ldr	r3, [pc, #44]	; (800f30c <pbuf_free+0x104>)
 800f2de:	f240 320f 	movw	r2, #783	; 0x30f
 800f2e2:	490f      	ldr	r1, [pc, #60]	; (800f320 <pbuf_free+0x118>)
 800f2e4:	480b      	ldr	r0, [pc, #44]	; (800f314 <pbuf_free+0x10c>)
 800f2e6:	f00b fc17 	bl	801ab18 <iprintf>
        }
      }
      count++;
 800f2ea:	7ffb      	ldrb	r3, [r7, #31]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	607b      	str	r3, [r7, #4]
 800f2f4:	e001      	b.n	800f2fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d199      	bne.n	800f234 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f300:	7ffb      	ldrb	r3, [r7, #31]
}
 800f302:	4618      	mov	r0, r3
 800f304:	3720      	adds	r7, #32
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	0801cadc 	.word	0x0801cadc
 800f310:	0801cc40 	.word	0x0801cc40
 800f314:	0801cb3c 	.word	0x0801cb3c
 800f318:	0801cc6c 	.word	0x0801cc6c
 800f31c:	0801cc84 	.word	0x0801cc84
 800f320:	0801cca8 	.word	0x0801cca8

0800f324 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f32c:	2300      	movs	r3, #0
 800f32e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f330:	e005      	b.n	800f33e <pbuf_clen+0x1a>
    ++len;
 800f332:	89fb      	ldrh	r3, [r7, #14]
 800f334:	3301      	adds	r3, #1
 800f336:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d1f6      	bne.n	800f332 <pbuf_clen+0xe>
  }
  return len;
 800f344:	89fb      	ldrh	r3, [r7, #14]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3714      	adds	r7, #20
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
	...

0800f354 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d016      	beq.n	800f390 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f362:	f00a fda5 	bl	8019eb0 <sys_arch_protect>
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	7b9b      	ldrb	r3, [r3, #14]
 800f36c:	3301      	adds	r3, #1
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	739a      	strb	r2, [r3, #14]
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f00a fda9 	bl	8019ecc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	7b9b      	ldrb	r3, [r3, #14]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d106      	bne.n	800f390 <pbuf_ref+0x3c>
 800f382:	4b05      	ldr	r3, [pc, #20]	; (800f398 <pbuf_ref+0x44>)
 800f384:	f240 3242 	movw	r2, #834	; 0x342
 800f388:	4904      	ldr	r1, [pc, #16]	; (800f39c <pbuf_ref+0x48>)
 800f38a:	4805      	ldr	r0, [pc, #20]	; (800f3a0 <pbuf_ref+0x4c>)
 800f38c:	f00b fbc4 	bl	801ab18 <iprintf>
  }
}
 800f390:	bf00      	nop
 800f392:	3710      	adds	r7, #16
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	0801cadc 	.word	0x0801cadc
 800f39c:	0801ccbc 	.word	0x0801ccbc
 800f3a0:	0801cb3c 	.word	0x0801cb3c

0800f3a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <pbuf_cat+0x16>
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d107      	bne.n	800f3ca <pbuf_cat+0x26>
 800f3ba:	4b20      	ldr	r3, [pc, #128]	; (800f43c <pbuf_cat+0x98>)
 800f3bc:	f240 3259 	movw	r2, #857	; 0x359
 800f3c0:	491f      	ldr	r1, [pc, #124]	; (800f440 <pbuf_cat+0x9c>)
 800f3c2:	4820      	ldr	r0, [pc, #128]	; (800f444 <pbuf_cat+0xa0>)
 800f3c4:	f00b fba8 	bl	801ab18 <iprintf>
 800f3c8:	e034      	b.n	800f434 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	60fb      	str	r3, [r7, #12]
 800f3ce:	e00a      	b.n	800f3e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	891a      	ldrh	r2, [r3, #8]
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	891b      	ldrh	r3, [r3, #8]
 800f3d8:	4413      	add	r3, r2
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	60fb      	str	r3, [r7, #12]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d1f0      	bne.n	800f3d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	891a      	ldrh	r2, [r3, #8]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	895b      	ldrh	r3, [r3, #10]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d006      	beq.n	800f408 <pbuf_cat+0x64>
 800f3fa:	4b10      	ldr	r3, [pc, #64]	; (800f43c <pbuf_cat+0x98>)
 800f3fc:	f240 3262 	movw	r2, #866	; 0x362
 800f400:	4911      	ldr	r1, [pc, #68]	; (800f448 <pbuf_cat+0xa4>)
 800f402:	4810      	ldr	r0, [pc, #64]	; (800f444 <pbuf_cat+0xa0>)
 800f404:	f00b fb88 	bl	801ab18 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d006      	beq.n	800f41e <pbuf_cat+0x7a>
 800f410:	4b0a      	ldr	r3, [pc, #40]	; (800f43c <pbuf_cat+0x98>)
 800f412:	f240 3263 	movw	r2, #867	; 0x363
 800f416:	490d      	ldr	r1, [pc, #52]	; (800f44c <pbuf_cat+0xa8>)
 800f418:	480a      	ldr	r0, [pc, #40]	; (800f444 <pbuf_cat+0xa0>)
 800f41a:	f00b fb7d 	bl	801ab18 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	891a      	ldrh	r2, [r3, #8]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	891b      	ldrh	r3, [r3, #8]
 800f426:	4413      	add	r3, r2
 800f428:	b29a      	uxth	r2, r3
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	683a      	ldr	r2, [r7, #0]
 800f432:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	0801cadc 	.word	0x0801cadc
 800f440:	0801ccd0 	.word	0x0801ccd0
 800f444:	0801cb3c 	.word	0x0801cb3c
 800f448:	0801cd08 	.word	0x0801cd08
 800f44c:	0801cd38 	.word	0x0801cd38

0800f450 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7ff ffa1 	bl	800f3a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f462:	6838      	ldr	r0, [r7, #0]
 800f464:	f7ff ff76 	bl	800f354 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f468:	bf00      	nop
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b086      	sub	sp, #24
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f47a:	2300      	movs	r3, #0
 800f47c:	617b      	str	r3, [r7, #20]
 800f47e:	2300      	movs	r3, #0
 800f480:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d008      	beq.n	800f49a <pbuf_copy+0x2a>
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d005      	beq.n	800f49a <pbuf_copy+0x2a>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	891a      	ldrh	r2, [r3, #8]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	891b      	ldrh	r3, [r3, #8]
 800f496:	429a      	cmp	r2, r3
 800f498:	d209      	bcs.n	800f4ae <pbuf_copy+0x3e>
 800f49a:	4b57      	ldr	r3, [pc, #348]	; (800f5f8 <pbuf_copy+0x188>)
 800f49c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f4a0:	4956      	ldr	r1, [pc, #344]	; (800f5fc <pbuf_copy+0x18c>)
 800f4a2:	4857      	ldr	r0, [pc, #348]	; (800f600 <pbuf_copy+0x190>)
 800f4a4:	f00b fb38 	bl	801ab18 <iprintf>
 800f4a8:	f06f 030f 	mvn.w	r3, #15
 800f4ac:	e09f      	b.n	800f5ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	895b      	ldrh	r3, [r3, #10]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	1ad2      	subs	r2, r2, r3
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	895b      	ldrh	r3, [r3, #10]
 800f4bc:	4619      	mov	r1, r3
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	1acb      	subs	r3, r1, r3
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d306      	bcc.n	800f4d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	895b      	ldrh	r3, [r3, #10]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	60fb      	str	r3, [r7, #12]
 800f4d2:	e005      	b.n	800f4e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	895b      	ldrh	r3, [r3, #10]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	685a      	ldr	r2, [r3, #4]
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	18d0      	adds	r0, r2, r3
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	68fa      	ldr	r2, [r7, #12]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	f00b fc47 	bl	801ad86 <memcpy>
    offset_to += len;
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f500:	693a      	ldr	r2, [r7, #16]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	4413      	add	r3, r2
 800f506:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	895b      	ldrh	r3, [r3, #10]
 800f50c:	461a      	mov	r2, r3
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	4293      	cmp	r3, r2
 800f512:	d906      	bls.n	800f522 <pbuf_copy+0xb2>
 800f514:	4b38      	ldr	r3, [pc, #224]	; (800f5f8 <pbuf_copy+0x188>)
 800f516:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f51a:	493a      	ldr	r1, [pc, #232]	; (800f604 <pbuf_copy+0x194>)
 800f51c:	4838      	ldr	r0, [pc, #224]	; (800f600 <pbuf_copy+0x190>)
 800f51e:	f00b fafb 	bl	801ab18 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	895b      	ldrh	r3, [r3, #10]
 800f526:	461a      	mov	r2, r3
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d906      	bls.n	800f53c <pbuf_copy+0xcc>
 800f52e:	4b32      	ldr	r3, [pc, #200]	; (800f5f8 <pbuf_copy+0x188>)
 800f530:	f240 32da 	movw	r2, #986	; 0x3da
 800f534:	4934      	ldr	r1, [pc, #208]	; (800f608 <pbuf_copy+0x198>)
 800f536:	4832      	ldr	r0, [pc, #200]	; (800f600 <pbuf_copy+0x190>)
 800f538:	f00b faee 	bl	801ab18 <iprintf>
    if (offset_from >= p_from->len) {
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	895b      	ldrh	r3, [r3, #10]
 800f540:	461a      	mov	r2, r3
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	4293      	cmp	r3, r2
 800f546:	d304      	bcc.n	800f552 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f548:	2300      	movs	r3, #0
 800f54a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	895b      	ldrh	r3, [r3, #10]
 800f556:	461a      	mov	r2, r3
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d114      	bne.n	800f588 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d10c      	bne.n	800f588 <pbuf_copy+0x118>
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d009      	beq.n	800f588 <pbuf_copy+0x118>
 800f574:	4b20      	ldr	r3, [pc, #128]	; (800f5f8 <pbuf_copy+0x188>)
 800f576:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f57a:	4924      	ldr	r1, [pc, #144]	; (800f60c <pbuf_copy+0x19c>)
 800f57c:	4820      	ldr	r0, [pc, #128]	; (800f600 <pbuf_copy+0x190>)
 800f57e:	f00b facb 	bl	801ab18 <iprintf>
 800f582:	f06f 030f 	mvn.w	r3, #15
 800f586:	e032      	b.n	800f5ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d013      	beq.n	800f5b6 <pbuf_copy+0x146>
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	895a      	ldrh	r2, [r3, #10]
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	891b      	ldrh	r3, [r3, #8]
 800f596:	429a      	cmp	r2, r3
 800f598:	d10d      	bne.n	800f5b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d009      	beq.n	800f5b6 <pbuf_copy+0x146>
 800f5a2:	4b15      	ldr	r3, [pc, #84]	; (800f5f8 <pbuf_copy+0x188>)
 800f5a4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f5a8:	4919      	ldr	r1, [pc, #100]	; (800f610 <pbuf_copy+0x1a0>)
 800f5aa:	4815      	ldr	r0, [pc, #84]	; (800f600 <pbuf_copy+0x190>)
 800f5ac:	f00b fab4 	bl	801ab18 <iprintf>
 800f5b0:	f06f 0305 	mvn.w	r3, #5
 800f5b4:	e01b      	b.n	800f5ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d013      	beq.n	800f5e4 <pbuf_copy+0x174>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	895a      	ldrh	r2, [r3, #10]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	891b      	ldrh	r3, [r3, #8]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d10d      	bne.n	800f5e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d009      	beq.n	800f5e4 <pbuf_copy+0x174>
 800f5d0:	4b09      	ldr	r3, [pc, #36]	; (800f5f8 <pbuf_copy+0x188>)
 800f5d2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f5d6:	490e      	ldr	r1, [pc, #56]	; (800f610 <pbuf_copy+0x1a0>)
 800f5d8:	4809      	ldr	r0, [pc, #36]	; (800f600 <pbuf_copy+0x190>)
 800f5da:	f00b fa9d 	bl	801ab18 <iprintf>
 800f5de:	f06f 0305 	mvn.w	r3, #5
 800f5e2:	e004      	b.n	800f5ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f47f af61 	bne.w	800f4ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3718      	adds	r7, #24
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	0801cadc 	.word	0x0801cadc
 800f5fc:	0801cd84 	.word	0x0801cd84
 800f600:	0801cb3c 	.word	0x0801cb3c
 800f604:	0801cdb4 	.word	0x0801cdb4
 800f608:	0801cdcc 	.word	0x0801cdcc
 800f60c:	0801cde8 	.word	0x0801cde8
 800f610:	0801cdf8 	.word	0x0801cdf8

0800f614 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b088      	sub	sp, #32
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	4611      	mov	r1, r2
 800f620:	461a      	mov	r2, r3
 800f622:	460b      	mov	r3, r1
 800f624:	80fb      	strh	r3, [r7, #6]
 800f626:	4613      	mov	r3, r2
 800f628:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f62a:	2300      	movs	r3, #0
 800f62c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f62e:	2300      	movs	r3, #0
 800f630:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d108      	bne.n	800f64a <pbuf_copy_partial+0x36>
 800f638:	4b2b      	ldr	r3, [pc, #172]	; (800f6e8 <pbuf_copy_partial+0xd4>)
 800f63a:	f240 420a 	movw	r2, #1034	; 0x40a
 800f63e:	492b      	ldr	r1, [pc, #172]	; (800f6ec <pbuf_copy_partial+0xd8>)
 800f640:	482b      	ldr	r0, [pc, #172]	; (800f6f0 <pbuf_copy_partial+0xdc>)
 800f642:	f00b fa69 	bl	801ab18 <iprintf>
 800f646:	2300      	movs	r3, #0
 800f648:	e04a      	b.n	800f6e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d108      	bne.n	800f662 <pbuf_copy_partial+0x4e>
 800f650:	4b25      	ldr	r3, [pc, #148]	; (800f6e8 <pbuf_copy_partial+0xd4>)
 800f652:	f240 420b 	movw	r2, #1035	; 0x40b
 800f656:	4927      	ldr	r1, [pc, #156]	; (800f6f4 <pbuf_copy_partial+0xe0>)
 800f658:	4825      	ldr	r0, [pc, #148]	; (800f6f0 <pbuf_copy_partial+0xdc>)
 800f65a:	f00b fa5d 	bl	801ab18 <iprintf>
 800f65e:	2300      	movs	r3, #0
 800f660:	e03e      	b.n	800f6e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	61fb      	str	r3, [r7, #28]
 800f666:	e034      	b.n	800f6d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f668:	88bb      	ldrh	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00a      	beq.n	800f684 <pbuf_copy_partial+0x70>
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	895b      	ldrh	r3, [r3, #10]
 800f672:	88ba      	ldrh	r2, [r7, #4]
 800f674:	429a      	cmp	r2, r3
 800f676:	d305      	bcc.n	800f684 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	895b      	ldrh	r3, [r3, #10]
 800f67c:	88ba      	ldrh	r2, [r7, #4]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	80bb      	strh	r3, [r7, #4]
 800f682:	e023      	b.n	800f6cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	895a      	ldrh	r2, [r3, #10]
 800f688:	88bb      	ldrh	r3, [r7, #4]
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f68e:	8b3a      	ldrh	r2, [r7, #24]
 800f690:	88fb      	ldrh	r3, [r7, #6]
 800f692:	429a      	cmp	r2, r3
 800f694:	d901      	bls.n	800f69a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f696:	88fb      	ldrh	r3, [r7, #6]
 800f698:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f69a:	8b7b      	ldrh	r3, [r7, #26]
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	18d0      	adds	r0, r2, r3
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	685a      	ldr	r2, [r3, #4]
 800f6a4:	88bb      	ldrh	r3, [r7, #4]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	8b3a      	ldrh	r2, [r7, #24]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	f00b fb6b 	bl	801ad86 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f6b0:	8afa      	ldrh	r2, [r7, #22]
 800f6b2:	8b3b      	ldrh	r3, [r7, #24]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f6b8:	8b7a      	ldrh	r2, [r7, #26]
 800f6ba:	8b3b      	ldrh	r3, [r7, #24]
 800f6bc:	4413      	add	r3, r2
 800f6be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f6c0:	88fa      	ldrh	r2, [r7, #6]
 800f6c2:	8b3b      	ldrh	r3, [r7, #24]
 800f6c4:	1ad3      	subs	r3, r2, r3
 800f6c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	61fb      	str	r3, [r7, #28]
 800f6d2:	88fb      	ldrh	r3, [r7, #6]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d002      	beq.n	800f6de <pbuf_copy_partial+0xca>
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1c4      	bne.n	800f668 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f6de:	8afb      	ldrh	r3, [r7, #22]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3720      	adds	r7, #32
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	0801cadc 	.word	0x0801cadc
 800f6ec:	0801ce24 	.word	0x0801ce24
 800f6f0:	0801cb3c 	.word	0x0801cb3c
 800f6f4:	0801ce44 	.word	0x0801ce44

0800f6f8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b087      	sub	sp, #28
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	460b      	mov	r3, r1
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800f706:	897b      	ldrh	r3, [r7, #10]
 800f708:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f70e:	e007      	b.n	800f720 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	895b      	ldrh	r3, [r3, #10]
 800f714:	8afa      	ldrh	r2, [r7, #22]
 800f716:	1ad3      	subs	r3, r2, r3
 800f718:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d004      	beq.n	800f730 <pbuf_skip_const+0x38>
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	895b      	ldrh	r3, [r3, #10]
 800f72a:	8afa      	ldrh	r2, [r7, #22]
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d2ef      	bcs.n	800f710 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d002      	beq.n	800f73c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	8afa      	ldrh	r2, [r7, #22]
 800f73a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800f73c:	693b      	ldr	r3, [r7, #16]
}
 800f73e:	4618      	mov	r0, r3
 800f740:	371c      	adds	r7, #28
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr

0800f74a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f74a:	b580      	push	{r7, lr}
 800f74c:	b086      	sub	sp, #24
 800f74e:	af00      	add	r7, sp, #0
 800f750:	60f8      	str	r0, [r7, #12]
 800f752:	460b      	mov	r3, r1
 800f754:	607a      	str	r2, [r7, #4]
 800f756:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800f758:	897b      	ldrh	r3, [r7, #10]
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	4619      	mov	r1, r3
 800f75e:	68f8      	ldr	r0, [r7, #12]
 800f760:	f7ff ffca 	bl	800f6f8 <pbuf_skip_const>
 800f764:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800f766:	697b      	ldr	r3, [r7, #20]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3718      	adds	r7, #24
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	4613      	mov	r3, r2
 800f77c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800f77e:	88fb      	ldrh	r3, [r7, #6]
 800f780:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800f782:	2300      	movs	r3, #0
 800f784:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d109      	bne.n	800f7a0 <pbuf_take+0x30>
 800f78c:	4b3a      	ldr	r3, [pc, #232]	; (800f878 <pbuf_take+0x108>)
 800f78e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800f792:	493a      	ldr	r1, [pc, #232]	; (800f87c <pbuf_take+0x10c>)
 800f794:	483a      	ldr	r0, [pc, #232]	; (800f880 <pbuf_take+0x110>)
 800f796:	f00b f9bf 	bl	801ab18 <iprintf>
 800f79a:	f06f 030f 	mvn.w	r3, #15
 800f79e:	e067      	b.n	800f870 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d109      	bne.n	800f7ba <pbuf_take+0x4a>
 800f7a6:	4b34      	ldr	r3, [pc, #208]	; (800f878 <pbuf_take+0x108>)
 800f7a8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800f7ac:	4935      	ldr	r1, [pc, #212]	; (800f884 <pbuf_take+0x114>)
 800f7ae:	4834      	ldr	r0, [pc, #208]	; (800f880 <pbuf_take+0x110>)
 800f7b0:	f00b f9b2 	bl	801ab18 <iprintf>
 800f7b4:	f06f 030f 	mvn.w	r3, #15
 800f7b8:	e05a      	b.n	800f870 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	891b      	ldrh	r3, [r3, #8]
 800f7be:	88fa      	ldrh	r2, [r7, #6]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d909      	bls.n	800f7d8 <pbuf_take+0x68>
 800f7c4:	4b2c      	ldr	r3, [pc, #176]	; (800f878 <pbuf_take+0x108>)
 800f7c6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800f7ca:	492f      	ldr	r1, [pc, #188]	; (800f888 <pbuf_take+0x118>)
 800f7cc:	482c      	ldr	r0, [pc, #176]	; (800f880 <pbuf_take+0x110>)
 800f7ce:	f00b f9a3 	bl	801ab18 <iprintf>
 800f7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7d6:	e04b      	b.n	800f870 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d007      	beq.n	800f7ee <pbuf_take+0x7e>
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d004      	beq.n	800f7ee <pbuf_take+0x7e>
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	891b      	ldrh	r3, [r3, #8]
 800f7e8:	88fa      	ldrh	r2, [r7, #6]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d902      	bls.n	800f7f4 <pbuf_take+0x84>
    return ERR_ARG;
 800f7ee:	f06f 030f 	mvn.w	r3, #15
 800f7f2:	e03d      	b.n	800f870 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	61fb      	str	r3, [r7, #28]
 800f7f8:	e028      	b.n	800f84c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d106      	bne.n	800f80e <pbuf_take+0x9e>
 800f800:	4b1d      	ldr	r3, [pc, #116]	; (800f878 <pbuf_take+0x108>)
 800f802:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800f806:	4921      	ldr	r1, [pc, #132]	; (800f88c <pbuf_take+0x11c>)
 800f808:	481d      	ldr	r0, [pc, #116]	; (800f880 <pbuf_take+0x110>)
 800f80a:	f00b f985 	bl	801ab18 <iprintf>
    buf_copy_len = total_copy_len;
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800f812:	69fb      	ldr	r3, [r7, #28]
 800f814:	895b      	ldrh	r3, [r3, #10]
 800f816:	461a      	mov	r2, r3
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d902      	bls.n	800f824 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	895b      	ldrh	r3, [r3, #10]
 800f822:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	6858      	ldr	r0, [r3, #4]
 800f828:	68ba      	ldr	r2, [r7, #8]
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	4413      	add	r3, r2
 800f82e:	69ba      	ldr	r2, [r7, #24]
 800f830:	4619      	mov	r1, r3
 800f832:	f00b faa8 	bl	801ad86 <memcpy>
    total_copy_len -= buf_copy_len;
 800f836:	697a      	ldr	r2, [r7, #20]
 800f838:	69bb      	ldr	r3, [r7, #24]
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800f83e:	693a      	ldr	r2, [r7, #16]
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	4413      	add	r3, r2
 800f844:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	61fb      	str	r3, [r7, #28]
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1d3      	bne.n	800f7fa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d103      	bne.n	800f860 <pbuf_take+0xf0>
 800f858:	88fb      	ldrh	r3, [r7, #6]
 800f85a:	693a      	ldr	r2, [r7, #16]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d006      	beq.n	800f86e <pbuf_take+0xfe>
 800f860:	4b05      	ldr	r3, [pc, #20]	; (800f878 <pbuf_take+0x108>)
 800f862:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800f866:	490a      	ldr	r1, [pc, #40]	; (800f890 <pbuf_take+0x120>)
 800f868:	4805      	ldr	r0, [pc, #20]	; (800f880 <pbuf_take+0x110>)
 800f86a:	f00b f955 	bl	801ab18 <iprintf>
  return ERR_OK;
 800f86e:	2300      	movs	r3, #0
}
 800f870:	4618      	mov	r0, r3
 800f872:	3720      	adds	r7, #32
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	0801cadc 	.word	0x0801cadc
 800f87c:	0801ceb4 	.word	0x0801ceb4
 800f880:	0801cb3c 	.word	0x0801cb3c
 800f884:	0801cecc 	.word	0x0801cecc
 800f888:	0801cee8 	.word	0x0801cee8
 800f88c:	0801cf08 	.word	0x0801cf08
 800f890:	0801cf20 	.word	0x0801cf20

0800f894 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b088      	sub	sp, #32
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	4611      	mov	r1, r2
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	80fb      	strh	r3, [r7, #6]
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800f8aa:	f107 0210 	add.w	r2, r7, #16
 800f8ae:	88bb      	ldrh	r3, [r7, #4]
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f7ff ff49 	bl	800f74a <pbuf_skip>
 800f8b8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d047      	beq.n	800f950 <pbuf_take_at+0xbc>
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	891b      	ldrh	r3, [r3, #8]
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	8a3b      	ldrh	r3, [r7, #16]
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	88fb      	ldrh	r3, [r7, #6]
 800f8cc:	440b      	add	r3, r1
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	db3e      	blt.n	800f950 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800f8d2:	88fb      	ldrh	r3, [r7, #6]
 800f8d4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	895a      	ldrh	r2, [r3, #10]
 800f8de:	8a3b      	ldrh	r3, [r7, #16]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d806      	bhi.n	800f8f2 <pbuf_take_at+0x5e>
 800f8e4:	4b1d      	ldr	r3, [pc, #116]	; (800f95c <pbuf_take_at+0xc8>)
 800f8e6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f8ea:	491d      	ldr	r1, [pc, #116]	; (800f960 <pbuf_take_at+0xcc>)
 800f8ec:	481d      	ldr	r0, [pc, #116]	; (800f964 <pbuf_take_at+0xd0>)
 800f8ee:	f00b f913 	bl	801ab18 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	895b      	ldrh	r3, [r3, #10]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	8a3b      	ldrh	r3, [r7, #16]
 800f8fa:	1ad2      	subs	r2, r2, r3
 800f8fc:	88fb      	ldrh	r3, [r7, #6]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	da05      	bge.n	800f90e <pbuf_take_at+0x7a>
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	895a      	ldrh	r2, [r3, #10]
 800f906:	8a3b      	ldrh	r3, [r7, #16]
 800f908:	1ad3      	subs	r3, r2, r3
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	e000      	b.n	800f910 <pbuf_take_at+0x7c>
 800f90e:	88fb      	ldrh	r3, [r7, #6]
 800f910:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	8a3a      	ldrh	r2, [r7, #16]
 800f918:	4413      	add	r3, r2
 800f91a:	8a7a      	ldrh	r2, [r7, #18]
 800f91c:	68b9      	ldr	r1, [r7, #8]
 800f91e:	4618      	mov	r0, r3
 800f920:	f00b fa31 	bl	801ad86 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800f924:	8b7a      	ldrh	r2, [r7, #26]
 800f926:	8a7b      	ldrh	r3, [r7, #18]
 800f928:	1ad3      	subs	r3, r2, r3
 800f92a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800f92c:	8a7b      	ldrh	r3, [r7, #18]
 800f92e:	697a      	ldr	r2, [r7, #20]
 800f930:	4413      	add	r3, r2
 800f932:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800f934:	8b7b      	ldrh	r3, [r7, #26]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d008      	beq.n	800f94c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	8b7a      	ldrh	r2, [r7, #26]
 800f940:	6979      	ldr	r1, [r7, #20]
 800f942:	4618      	mov	r0, r3
 800f944:	f7ff ff14 	bl	800f770 <pbuf_take>
 800f948:	4603      	mov	r3, r0
 800f94a:	e003      	b.n	800f954 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800f94c:	2300      	movs	r3, #0
 800f94e:	e001      	b.n	800f954 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800f950:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f954:	4618      	mov	r0, r3
 800f956:	3720      	adds	r7, #32
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	0801cadc 	.word	0x0801cadc
 800f960:	0801cf38 	.word	0x0801cf38
 800f964:	0801cb3c 	.word	0x0801cb3c

0800f968 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	4603      	mov	r3, r0
 800f970:	603a      	str	r2, [r7, #0]
 800f972:	71fb      	strb	r3, [r7, #7]
 800f974:	460b      	mov	r3, r1
 800f976:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	8919      	ldrh	r1, [r3, #8]
 800f97c:	88ba      	ldrh	r2, [r7, #4]
 800f97e:	79fb      	ldrb	r3, [r7, #7]
 800f980:	4618      	mov	r0, r3
 800f982:	f7ff f95d 	bl	800ec40 <pbuf_alloc>
 800f986:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d101      	bne.n	800f992 <pbuf_clone+0x2a>
    return NULL;
 800f98e:	2300      	movs	r3, #0
 800f990:	e011      	b.n	800f9b6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f992:	6839      	ldr	r1, [r7, #0]
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f7ff fd6b 	bl	800f470 <pbuf_copy>
 800f99a:	4603      	mov	r3, r0
 800f99c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f99e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d006      	beq.n	800f9b4 <pbuf_clone+0x4c>
 800f9a6:	4b06      	ldr	r3, [pc, #24]	; (800f9c0 <pbuf_clone+0x58>)
 800f9a8:	f240 5224 	movw	r2, #1316	; 0x524
 800f9ac:	4905      	ldr	r1, [pc, #20]	; (800f9c4 <pbuf_clone+0x5c>)
 800f9ae:	4806      	ldr	r0, [pc, #24]	; (800f9c8 <pbuf_clone+0x60>)
 800f9b0:	f00b f8b2 	bl	801ab18 <iprintf>
  return q;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	0801cadc 	.word	0x0801cadc
 800f9c4:	0801cf50 	.word	0x0801cf50
 800f9c8:	0801cb3c 	.word	0x0801cb3c

0800f9cc <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	807b      	strh	r3, [r7, #2]
 800f9d8:	4613      	mov	r3, r2
 800f9da:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800f9dc:	f107 020a 	add.w	r2, r7, #10
 800f9e0:	887b      	ldrh	r3, [r7, #2]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7ff feb0 	bl	800f74a <pbuf_skip>
 800f9ea:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00a      	beq.n	800fa08 <pbuf_put_at+0x3c>
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	895a      	ldrh	r2, [r3, #10]
 800f9f6:	897b      	ldrh	r3, [r7, #10]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d905      	bls.n	800fa08 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	897a      	ldrh	r2, [r7, #10]
 800fa02:	4413      	add	r3, r2
 800fa04:	787a      	ldrb	r2, [r7, #1]
 800fa06:	701a      	strb	r2, [r3, #0]
  }
}
 800fa08:	bf00      	nop
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fa14:	f00a ff80 	bl	801a918 <rand>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fa26:	b29a      	uxth	r2, r3
 800fa28:	4b01      	ldr	r3, [pc, #4]	; (800fa30 <tcp_init+0x20>)
 800fa2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fa2c:	bf00      	nop
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	2000003c 	.word	0x2000003c

0800fa34 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	7d1b      	ldrb	r3, [r3, #20]
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d105      	bne.n	800fa50 <tcp_free+0x1c>
 800fa44:	4b06      	ldr	r3, [pc, #24]	; (800fa60 <tcp_free+0x2c>)
 800fa46:	22d4      	movs	r2, #212	; 0xd4
 800fa48:	4906      	ldr	r1, [pc, #24]	; (800fa64 <tcp_free+0x30>)
 800fa4a:	4807      	ldr	r0, [pc, #28]	; (800fa68 <tcp_free+0x34>)
 800fa4c:	f00b f864 	bl	801ab18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fa50:	6879      	ldr	r1, [r7, #4]
 800fa52:	2001      	movs	r0, #1
 800fa54:	f7fe fd90 	bl	800e578 <memp_free>
}
 800fa58:	bf00      	nop
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	0801cfdc 	.word	0x0801cfdc
 800fa64:	0801d00c 	.word	0x0801d00c
 800fa68:	0801d020 	.word	0x0801d020

0800fa6c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	7d1b      	ldrb	r3, [r3, #20]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d105      	bne.n	800fa88 <tcp_free_listen+0x1c>
 800fa7c:	4b06      	ldr	r3, [pc, #24]	; (800fa98 <tcp_free_listen+0x2c>)
 800fa7e:	22df      	movs	r2, #223	; 0xdf
 800fa80:	4906      	ldr	r1, [pc, #24]	; (800fa9c <tcp_free_listen+0x30>)
 800fa82:	4807      	ldr	r0, [pc, #28]	; (800faa0 <tcp_free_listen+0x34>)
 800fa84:	f00b f848 	bl	801ab18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fa88:	6879      	ldr	r1, [r7, #4]
 800fa8a:	2002      	movs	r0, #2
 800fa8c:	f7fe fd74 	bl	800e578 <memp_free>
}
 800fa90:	bf00      	nop
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	0801cfdc 	.word	0x0801cfdc
 800fa9c:	0801d048 	.word	0x0801d048
 800faa0:	0801d020 	.word	0x0801d020

0800faa4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800faa8:	f000 fea2 	bl	80107f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800faac:	4b07      	ldr	r3, [pc, #28]	; (800facc <tcp_tmr+0x28>)
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	3301      	adds	r3, #1
 800fab2:	b2da      	uxtb	r2, r3
 800fab4:	4b05      	ldr	r3, [pc, #20]	; (800facc <tcp_tmr+0x28>)
 800fab6:	701a      	strb	r2, [r3, #0]
 800fab8:	4b04      	ldr	r3, [pc, #16]	; (800facc <tcp_tmr+0x28>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	f003 0301 	and.w	r3, r3, #1
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d001      	beq.n	800fac8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fac4:	f000 fb54 	bl	8010170 <tcp_slowtmr>
  }
}
 800fac8:	bf00      	nop
 800faca:	bd80      	pop	{r7, pc}
 800facc:	20012291 	.word	0x20012291

0800fad0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d105      	bne.n	800faec <tcp_remove_listener+0x1c>
 800fae0:	4b0d      	ldr	r3, [pc, #52]	; (800fb18 <tcp_remove_listener+0x48>)
 800fae2:	22ff      	movs	r2, #255	; 0xff
 800fae4:	490d      	ldr	r1, [pc, #52]	; (800fb1c <tcp_remove_listener+0x4c>)
 800fae6:	480e      	ldr	r0, [pc, #56]	; (800fb20 <tcp_remove_listener+0x50>)
 800fae8:	f00b f816 	bl	801ab18 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	60fb      	str	r3, [r7, #12]
 800faf0:	e00a      	b.n	800fb08 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faf6:	683a      	ldr	r2, [r7, #0]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d102      	bne.n	800fb02 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2200      	movs	r2, #0
 800fb00:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	60fb      	str	r3, [r7, #12]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1f1      	bne.n	800faf2 <tcp_remove_listener+0x22>
    }
  }
}
 800fb0e:	bf00      	nop
 800fb10:	bf00      	nop
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	0801cfdc 	.word	0x0801cfdc
 800fb1c:	0801d064 	.word	0x0801d064
 800fb20:	0801d020 	.word	0x0801d020

0800fb24 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d106      	bne.n	800fb40 <tcp_listen_closed+0x1c>
 800fb32:	4b14      	ldr	r3, [pc, #80]	; (800fb84 <tcp_listen_closed+0x60>)
 800fb34:	f240 1211 	movw	r2, #273	; 0x111
 800fb38:	4913      	ldr	r1, [pc, #76]	; (800fb88 <tcp_listen_closed+0x64>)
 800fb3a:	4814      	ldr	r0, [pc, #80]	; (800fb8c <tcp_listen_closed+0x68>)
 800fb3c:	f00a ffec 	bl	801ab18 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	7d1b      	ldrb	r3, [r3, #20]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d006      	beq.n	800fb56 <tcp_listen_closed+0x32>
 800fb48:	4b0e      	ldr	r3, [pc, #56]	; (800fb84 <tcp_listen_closed+0x60>)
 800fb4a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fb4e:	4910      	ldr	r1, [pc, #64]	; (800fb90 <tcp_listen_closed+0x6c>)
 800fb50:	480e      	ldr	r0, [pc, #56]	; (800fb8c <tcp_listen_closed+0x68>)
 800fb52:	f00a ffe1 	bl	801ab18 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fb56:	2301      	movs	r3, #1
 800fb58:	60fb      	str	r3, [r7, #12]
 800fb5a:	e00b      	b.n	800fb74 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fb5c:	4a0d      	ldr	r2, [pc, #52]	; (800fb94 <tcp_listen_closed+0x70>)
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	6879      	ldr	r1, [r7, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff ffb1 	bl	800fad0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3301      	adds	r3, #1
 800fb72:	60fb      	str	r3, [r7, #12]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2b03      	cmp	r3, #3
 800fb78:	d9f0      	bls.n	800fb5c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fb7a:	bf00      	nop
 800fb7c:	bf00      	nop
 800fb7e:	3710      	adds	r7, #16
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	0801cfdc 	.word	0x0801cfdc
 800fb88:	0801d08c 	.word	0x0801d08c
 800fb8c:	0801d020 	.word	0x0801d020
 800fb90:	0801d098 	.word	0x0801d098
 800fb94:	0801f418 	.word	0x0801f418

0800fb98 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fb98:	b5b0      	push	{r4, r5, r7, lr}
 800fb9a:	b088      	sub	sp, #32
 800fb9c:	af04      	add	r7, sp, #16
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	460b      	mov	r3, r1
 800fba2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d106      	bne.n	800fbb8 <tcp_close_shutdown+0x20>
 800fbaa:	4b63      	ldr	r3, [pc, #396]	; (800fd38 <tcp_close_shutdown+0x1a0>)
 800fbac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fbb0:	4962      	ldr	r1, [pc, #392]	; (800fd3c <tcp_close_shutdown+0x1a4>)
 800fbb2:	4863      	ldr	r0, [pc, #396]	; (800fd40 <tcp_close_shutdown+0x1a8>)
 800fbb4:	f00a ffb0 	bl	801ab18 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fbb8:	78fb      	ldrb	r3, [r7, #3]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d066      	beq.n	800fc8c <tcp_close_shutdown+0xf4>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	7d1b      	ldrb	r3, [r3, #20]
 800fbc2:	2b04      	cmp	r3, #4
 800fbc4:	d003      	beq.n	800fbce <tcp_close_shutdown+0x36>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	7d1b      	ldrb	r3, [r3, #20]
 800fbca:	2b07      	cmp	r3, #7
 800fbcc:	d15e      	bne.n	800fc8c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d104      	bne.n	800fbe0 <tcp_close_shutdown+0x48>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fbde:	d055      	beq.n	800fc8c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	8b5b      	ldrh	r3, [r3, #26]
 800fbe4:	f003 0310 	and.w	r3, r3, #16
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d106      	bne.n	800fbfa <tcp_close_shutdown+0x62>
 800fbec:	4b52      	ldr	r3, [pc, #328]	; (800fd38 <tcp_close_shutdown+0x1a0>)
 800fbee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800fbf2:	4954      	ldr	r1, [pc, #336]	; (800fd44 <tcp_close_shutdown+0x1ac>)
 800fbf4:	4852      	ldr	r0, [pc, #328]	; (800fd40 <tcp_close_shutdown+0x1a8>)
 800fbf6:	f00a ff8f 	bl	801ab18 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fc02:	687d      	ldr	r5, [r7, #4]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	3304      	adds	r3, #4
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	8ad2      	ldrh	r2, [r2, #22]
 800fc0c:	6879      	ldr	r1, [r7, #4]
 800fc0e:	8b09      	ldrh	r1, [r1, #24]
 800fc10:	9102      	str	r1, [sp, #8]
 800fc12:	9201      	str	r2, [sp, #4]
 800fc14:	9300      	str	r3, [sp, #0]
 800fc16:	462b      	mov	r3, r5
 800fc18:	4622      	mov	r2, r4
 800fc1a:	4601      	mov	r1, r0
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f004 fe91 	bl	8014944 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f001 f8c6 	bl	8010db4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fc28:	4b47      	ldr	r3, [pc, #284]	; (800fd48 <tcp_close_shutdown+0x1b0>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	687a      	ldr	r2, [r7, #4]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d105      	bne.n	800fc3e <tcp_close_shutdown+0xa6>
 800fc32:	4b45      	ldr	r3, [pc, #276]	; (800fd48 <tcp_close_shutdown+0x1b0>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	4a43      	ldr	r2, [pc, #268]	; (800fd48 <tcp_close_shutdown+0x1b0>)
 800fc3a:	6013      	str	r3, [r2, #0]
 800fc3c:	e013      	b.n	800fc66 <tcp_close_shutdown+0xce>
 800fc3e:	4b42      	ldr	r3, [pc, #264]	; (800fd48 <tcp_close_shutdown+0x1b0>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	60fb      	str	r3, [r7, #12]
 800fc44:	e00c      	b.n	800fc60 <tcp_close_shutdown+0xc8>
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d104      	bne.n	800fc5a <tcp_close_shutdown+0xc2>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	68da      	ldr	r2, [r3, #12]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	60da      	str	r2, [r3, #12]
 800fc58:	e005      	b.n	800fc66 <tcp_close_shutdown+0xce>
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	60fb      	str	r3, [r7, #12]
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d1ef      	bne.n	800fc46 <tcp_close_shutdown+0xae>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	60da      	str	r2, [r3, #12]
 800fc6c:	4b37      	ldr	r3, [pc, #220]	; (800fd4c <tcp_close_shutdown+0x1b4>)
 800fc6e:	2201      	movs	r2, #1
 800fc70:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fc72:	4b37      	ldr	r3, [pc, #220]	; (800fd50 <tcp_close_shutdown+0x1b8>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	687a      	ldr	r2, [r7, #4]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d102      	bne.n	800fc82 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fc7c:	f003 fd5e 	bl	801373c <tcp_trigger_input_pcb_close>
 800fc80:	e002      	b.n	800fc88 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f7ff fed6 	bl	800fa34 <tcp_free>
      }
      return ERR_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	e050      	b.n	800fd2e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	7d1b      	ldrb	r3, [r3, #20]
 800fc90:	2b02      	cmp	r3, #2
 800fc92:	d03b      	beq.n	800fd0c <tcp_close_shutdown+0x174>
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	dc44      	bgt.n	800fd22 <tcp_close_shutdown+0x18a>
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d002      	beq.n	800fca2 <tcp_close_shutdown+0x10a>
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d02a      	beq.n	800fcf6 <tcp_close_shutdown+0x15e>
 800fca0:	e03f      	b.n	800fd22 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	8adb      	ldrh	r3, [r3, #22]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d021      	beq.n	800fcee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fcaa:	4b2a      	ldr	r3, [pc, #168]	; (800fd54 <tcp_close_shutdown+0x1bc>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d105      	bne.n	800fcc0 <tcp_close_shutdown+0x128>
 800fcb4:	4b27      	ldr	r3, [pc, #156]	; (800fd54 <tcp_close_shutdown+0x1bc>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	4a26      	ldr	r2, [pc, #152]	; (800fd54 <tcp_close_shutdown+0x1bc>)
 800fcbc:	6013      	str	r3, [r2, #0]
 800fcbe:	e013      	b.n	800fce8 <tcp_close_shutdown+0x150>
 800fcc0:	4b24      	ldr	r3, [pc, #144]	; (800fd54 <tcp_close_shutdown+0x1bc>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60bb      	str	r3, [r7, #8]
 800fcc6:	e00c      	b.n	800fce2 <tcp_close_shutdown+0x14a>
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	68db      	ldr	r3, [r3, #12]
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d104      	bne.n	800fcdc <tcp_close_shutdown+0x144>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	68da      	ldr	r2, [r3, #12]
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	60da      	str	r2, [r3, #12]
 800fcda:	e005      	b.n	800fce8 <tcp_close_shutdown+0x150>
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	60bb      	str	r3, [r7, #8]
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d1ef      	bne.n	800fcc8 <tcp_close_shutdown+0x130>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2200      	movs	r2, #0
 800fcec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7ff fea0 	bl	800fa34 <tcp_free>
      break;
 800fcf4:	e01a      	b.n	800fd2c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f7ff ff14 	bl	800fb24 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fcfc:	6879      	ldr	r1, [r7, #4]
 800fcfe:	4816      	ldr	r0, [pc, #88]	; (800fd58 <tcp_close_shutdown+0x1c0>)
 800fd00:	f001 f8a8 	bl	8010e54 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f7ff feb1 	bl	800fa6c <tcp_free_listen>
      break;
 800fd0a:	e00f      	b.n	800fd2c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fd0c:	6879      	ldr	r1, [r7, #4]
 800fd0e:	480e      	ldr	r0, [pc, #56]	; (800fd48 <tcp_close_shutdown+0x1b0>)
 800fd10:	f001 f8a0 	bl	8010e54 <tcp_pcb_remove>
 800fd14:	4b0d      	ldr	r3, [pc, #52]	; (800fd4c <tcp_close_shutdown+0x1b4>)
 800fd16:	2201      	movs	r2, #1
 800fd18:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7ff fe8a 	bl	800fa34 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fd20:	e004      	b.n	800fd2c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f81a 	bl	800fd5c <tcp_close_shutdown_fin>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	e000      	b.n	800fd2e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fd2c:	2300      	movs	r3, #0
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3710      	adds	r7, #16
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bdb0      	pop	{r4, r5, r7, pc}
 800fd36:	bf00      	nop
 800fd38:	0801cfdc 	.word	0x0801cfdc
 800fd3c:	0801d0b0 	.word	0x0801d0b0
 800fd40:	0801d020 	.word	0x0801d020
 800fd44:	0801d0d0 	.word	0x0801d0d0
 800fd48:	20012288 	.word	0x20012288
 800fd4c:	20012290 	.word	0x20012290
 800fd50:	200122c8 	.word	0x200122c8
 800fd54:	20012280 	.word	0x20012280
 800fd58:	20012284 	.word	0x20012284

0800fd5c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d106      	bne.n	800fd78 <tcp_close_shutdown_fin+0x1c>
 800fd6a:	4b2e      	ldr	r3, [pc, #184]	; (800fe24 <tcp_close_shutdown_fin+0xc8>)
 800fd6c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fd70:	492d      	ldr	r1, [pc, #180]	; (800fe28 <tcp_close_shutdown_fin+0xcc>)
 800fd72:	482e      	ldr	r0, [pc, #184]	; (800fe2c <tcp_close_shutdown_fin+0xd0>)
 800fd74:	f00a fed0 	bl	801ab18 <iprintf>

  switch (pcb->state) {
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	7d1b      	ldrb	r3, [r3, #20]
 800fd7c:	2b07      	cmp	r3, #7
 800fd7e:	d020      	beq.n	800fdc2 <tcp_close_shutdown_fin+0x66>
 800fd80:	2b07      	cmp	r3, #7
 800fd82:	dc2b      	bgt.n	800fddc <tcp_close_shutdown_fin+0x80>
 800fd84:	2b03      	cmp	r3, #3
 800fd86:	d002      	beq.n	800fd8e <tcp_close_shutdown_fin+0x32>
 800fd88:	2b04      	cmp	r3, #4
 800fd8a:	d00d      	beq.n	800fda8 <tcp_close_shutdown_fin+0x4c>
 800fd8c:	e026      	b.n	800fddc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f003 fee6 	bl	8013b60 <tcp_send_fin>
 800fd94:	4603      	mov	r3, r0
 800fd96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fd98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d11f      	bne.n	800fde0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2205      	movs	r2, #5
 800fda4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fda6:	e01b      	b.n	800fde0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f003 fed9 	bl	8013b60 <tcp_send_fin>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fdb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d114      	bne.n	800fde4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2205      	movs	r2, #5
 800fdbe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fdc0:	e010      	b.n	800fde4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f003 fecc 	bl	8013b60 <tcp_send_fin>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fdcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d109      	bne.n	800fde8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2209      	movs	r2, #9
 800fdd8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fdda:	e005      	b.n	800fde8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fddc:	2300      	movs	r3, #0
 800fdde:	e01c      	b.n	800fe1a <tcp_close_shutdown_fin+0xbe>
      break;
 800fde0:	bf00      	nop
 800fde2:	e002      	b.n	800fdea <tcp_close_shutdown_fin+0x8e>
      break;
 800fde4:	bf00      	nop
 800fde6:	e000      	b.n	800fdea <tcp_close_shutdown_fin+0x8e>
      break;
 800fde8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fdea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d103      	bne.n	800fdfa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f003 fff2 	bl	8013ddc <tcp_output>
 800fdf8:	e00d      	b.n	800fe16 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fdfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe02:	d108      	bne.n	800fe16 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	8b5b      	ldrh	r3, [r3, #26]
 800fe08:	f043 0308 	orr.w	r3, r3, #8
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fe12:	2300      	movs	r3, #0
 800fe14:	e001      	b.n	800fe1a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fe16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	0801cfdc 	.word	0x0801cfdc
 800fe28:	0801d08c 	.word	0x0801d08c
 800fe2c:	0801d020 	.word	0x0801d020

0800fe30 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d109      	bne.n	800fe52 <tcp_close+0x22>
 800fe3e:	4b0f      	ldr	r3, [pc, #60]	; (800fe7c <tcp_close+0x4c>)
 800fe40:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800fe44:	490e      	ldr	r1, [pc, #56]	; (800fe80 <tcp_close+0x50>)
 800fe46:	480f      	ldr	r0, [pc, #60]	; (800fe84 <tcp_close+0x54>)
 800fe48:	f00a fe66 	bl	801ab18 <iprintf>
 800fe4c:	f06f 030f 	mvn.w	r3, #15
 800fe50:	e00f      	b.n	800fe72 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	7d1b      	ldrb	r3, [r3, #20]
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	d006      	beq.n	800fe68 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8b5b      	ldrh	r3, [r3, #26]
 800fe5e:	f043 0310 	orr.w	r3, r3, #16
 800fe62:	b29a      	uxth	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fe68:	2101      	movs	r1, #1
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7ff fe94 	bl	800fb98 <tcp_close_shutdown>
 800fe70:	4603      	mov	r3, r0
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	0801cfdc 	.word	0x0801cfdc
 800fe80:	0801d0ec 	.word	0x0801d0ec
 800fe84:	0801d020 	.word	0x0801d020

0800fe88 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b08e      	sub	sp, #56	; 0x38
 800fe8c:	af04      	add	r7, sp, #16
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d107      	bne.n	800fea8 <tcp_abandon+0x20>
 800fe98:	4b52      	ldr	r3, [pc, #328]	; (800ffe4 <tcp_abandon+0x15c>)
 800fe9a:	f240 223d 	movw	r2, #573	; 0x23d
 800fe9e:	4952      	ldr	r1, [pc, #328]	; (800ffe8 <tcp_abandon+0x160>)
 800fea0:	4852      	ldr	r0, [pc, #328]	; (800ffec <tcp_abandon+0x164>)
 800fea2:	f00a fe39 	bl	801ab18 <iprintf>
 800fea6:	e099      	b.n	800ffdc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	7d1b      	ldrb	r3, [r3, #20]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d106      	bne.n	800febe <tcp_abandon+0x36>
 800feb0:	4b4c      	ldr	r3, [pc, #304]	; (800ffe4 <tcp_abandon+0x15c>)
 800feb2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800feb6:	494e      	ldr	r1, [pc, #312]	; (800fff0 <tcp_abandon+0x168>)
 800feb8:	484c      	ldr	r0, [pc, #304]	; (800ffec <tcp_abandon+0x164>)
 800feba:	f00a fe2d 	bl	801ab18 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	7d1b      	ldrb	r3, [r3, #20]
 800fec2:	2b0a      	cmp	r3, #10
 800fec4:	d107      	bne.n	800fed6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fec6:	6879      	ldr	r1, [r7, #4]
 800fec8:	484a      	ldr	r0, [pc, #296]	; (800fff4 <tcp_abandon+0x16c>)
 800feca:	f000 ffc3 	bl	8010e54 <tcp_pcb_remove>
    tcp_free(pcb);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7ff fdb0 	bl	800fa34 <tcp_free>
 800fed4:	e082      	b.n	800ffdc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fed6:	2300      	movs	r3, #0
 800fed8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800feda:	2300      	movs	r3, #0
 800fedc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fee2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fef0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	691b      	ldr	r3, [r3, #16]
 800fef6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	7d1b      	ldrb	r3, [r3, #20]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d126      	bne.n	800ff4e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	8adb      	ldrh	r3, [r3, #22]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d02e      	beq.n	800ff66 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ff08:	4b3b      	ldr	r3, [pc, #236]	; (800fff8 <tcp_abandon+0x170>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d105      	bne.n	800ff1e <tcp_abandon+0x96>
 800ff12:	4b39      	ldr	r3, [pc, #228]	; (800fff8 <tcp_abandon+0x170>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	68db      	ldr	r3, [r3, #12]
 800ff18:	4a37      	ldr	r2, [pc, #220]	; (800fff8 <tcp_abandon+0x170>)
 800ff1a:	6013      	str	r3, [r2, #0]
 800ff1c:	e013      	b.n	800ff46 <tcp_abandon+0xbe>
 800ff1e:	4b36      	ldr	r3, [pc, #216]	; (800fff8 <tcp_abandon+0x170>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	61fb      	str	r3, [r7, #28]
 800ff24:	e00c      	b.n	800ff40 <tcp_abandon+0xb8>
 800ff26:	69fb      	ldr	r3, [r7, #28]
 800ff28:	68db      	ldr	r3, [r3, #12]
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d104      	bne.n	800ff3a <tcp_abandon+0xb2>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	68da      	ldr	r2, [r3, #12]
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	60da      	str	r2, [r3, #12]
 800ff38:	e005      	b.n	800ff46 <tcp_abandon+0xbe>
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	61fb      	str	r3, [r7, #28]
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1ef      	bne.n	800ff26 <tcp_abandon+0x9e>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	60da      	str	r2, [r3, #12]
 800ff4c:	e00b      	b.n	800ff66 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	8adb      	ldrh	r3, [r3, #22]
 800ff56:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ff58:	6879      	ldr	r1, [r7, #4]
 800ff5a:	4828      	ldr	r0, [pc, #160]	; (800fffc <tcp_abandon+0x174>)
 800ff5c:	f000 ff7a 	bl	8010e54 <tcp_pcb_remove>
 800ff60:	4b27      	ldr	r3, [pc, #156]	; (8010000 <tcp_abandon+0x178>)
 800ff62:	2201      	movs	r2, #1
 800ff64:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d004      	beq.n	800ff78 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 fd1c 	bl	80109b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d004      	beq.n	800ff8a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff84:	4618      	mov	r0, r3
 800ff86:	f000 fd13 	bl	80109b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d004      	beq.n	800ff9c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff96:	4618      	mov	r0, r3
 800ff98:	f000 fd0a 	bl	80109b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00e      	beq.n	800ffc0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ffa2:	6879      	ldr	r1, [r7, #4]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	3304      	adds	r3, #4
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	8b12      	ldrh	r2, [r2, #24]
 800ffac:	9202      	str	r2, [sp, #8]
 800ffae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ffb0:	9201      	str	r2, [sp, #4]
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	697a      	ldr	r2, [r7, #20]
 800ffb8:	69b9      	ldr	r1, [r7, #24]
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f004 fcc2 	bl	8014944 <tcp_rst>
    }
    last_state = pcb->state;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	7d1b      	ldrb	r3, [r3, #20]
 800ffc4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f7ff fd34 	bl	800fa34 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d004      	beq.n	800ffdc <tcp_abandon+0x154>
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	f06f 010c 	mvn.w	r1, #12
 800ffd8:	68f8      	ldr	r0, [r7, #12]
 800ffda:	4798      	blx	r3
  }
}
 800ffdc:	3728      	adds	r7, #40	; 0x28
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	0801cfdc 	.word	0x0801cfdc
 800ffe8:	0801d120 	.word	0x0801d120
 800ffec:	0801d020 	.word	0x0801d020
 800fff0:	0801d13c 	.word	0x0801d13c
 800fff4:	2001228c 	.word	0x2001228c
 800fff8:	20012280 	.word	0x20012280
 800fffc:	20012288 	.word	0x20012288
 8010000:	20012290 	.word	0x20012290

08010004 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801000c:	2101      	movs	r1, #1
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7ff ff3a 	bl	800fe88 <tcp_abandon>
}
 8010014:	bf00      	nop
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d106      	bne.n	8010038 <tcp_update_rcv_ann_wnd+0x1c>
 801002a:	4b25      	ldr	r3, [pc, #148]	; (80100c0 <tcp_update_rcv_ann_wnd+0xa4>)
 801002c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010030:	4924      	ldr	r1, [pc, #144]	; (80100c4 <tcp_update_rcv_ann_wnd+0xa8>)
 8010032:	4825      	ldr	r0, [pc, #148]	; (80100c8 <tcp_update_rcv_ann_wnd+0xac>)
 8010034:	f00a fd70 	bl	801ab18 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010040:	4413      	add	r3, r2
 8010042:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801004c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010050:	bf28      	it	cs
 8010052:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010056:	b292      	uxth	r2, r2
 8010058:	4413      	add	r3, r2
 801005a:	68fa      	ldr	r2, [r7, #12]
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	2b00      	cmp	r3, #0
 8010060:	db08      	blt.n	8010074 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801006e:	68fa      	ldr	r2, [r7, #12]
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	e020      	b.n	80100b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007c:	1ad3      	subs	r3, r2, r3
 801007e:	2b00      	cmp	r3, #0
 8010080:	dd03      	ble.n	801008a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2200      	movs	r2, #0
 8010086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010088:	e014      	b.n	80100b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010092:	1ad3      	subs	r3, r2, r3
 8010094:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801009c:	d306      	bcc.n	80100ac <tcp_update_rcv_ann_wnd+0x90>
 801009e:	4b08      	ldr	r3, [pc, #32]	; (80100c0 <tcp_update_rcv_ann_wnd+0xa4>)
 80100a0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80100a4:	4909      	ldr	r1, [pc, #36]	; (80100cc <tcp_update_rcv_ann_wnd+0xb0>)
 80100a6:	4808      	ldr	r0, [pc, #32]	; (80100c8 <tcp_update_rcv_ann_wnd+0xac>)
 80100a8:	f00a fd36 	bl	801ab18 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80100b4:	2300      	movs	r3, #0
  }
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3710      	adds	r7, #16
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	0801cfdc 	.word	0x0801cfdc
 80100c4:	0801d238 	.word	0x0801d238
 80100c8:	0801d020 	.word	0x0801d020
 80100cc:	0801d25c 	.word	0x0801d25c

080100d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	460b      	mov	r3, r1
 80100da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d107      	bne.n	80100f2 <tcp_recved+0x22>
 80100e2:	4b1f      	ldr	r3, [pc, #124]	; (8010160 <tcp_recved+0x90>)
 80100e4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80100e8:	491e      	ldr	r1, [pc, #120]	; (8010164 <tcp_recved+0x94>)
 80100ea:	481f      	ldr	r0, [pc, #124]	; (8010168 <tcp_recved+0x98>)
 80100ec:	f00a fd14 	bl	801ab18 <iprintf>
 80100f0:	e032      	b.n	8010158 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	7d1b      	ldrb	r3, [r3, #20]
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d106      	bne.n	8010108 <tcp_recved+0x38>
 80100fa:	4b19      	ldr	r3, [pc, #100]	; (8010160 <tcp_recved+0x90>)
 80100fc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010100:	491a      	ldr	r1, [pc, #104]	; (801016c <tcp_recved+0x9c>)
 8010102:	4819      	ldr	r0, [pc, #100]	; (8010168 <tcp_recved+0x98>)
 8010104:	f00a fd08 	bl	801ab18 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801010c:	887b      	ldrh	r3, [r7, #2]
 801010e:	4413      	add	r3, r2
 8010110:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010112:	89fb      	ldrh	r3, [r7, #14]
 8010114:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010118:	d804      	bhi.n	8010124 <tcp_recved+0x54>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801011e:	89fa      	ldrh	r2, [r7, #14]
 8010120:	429a      	cmp	r2, r3
 8010122:	d204      	bcs.n	801012e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801012a:	851a      	strh	r2, [r3, #40]	; 0x28
 801012c:	e002      	b.n	8010134 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	89fa      	ldrh	r2, [r7, #14]
 8010132:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7ff ff71 	bl	801001c <tcp_update_rcv_ann_wnd>
 801013a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010142:	d309      	bcc.n	8010158 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	8b5b      	ldrh	r3, [r3, #26]
 8010148:	f043 0302 	orr.w	r3, r3, #2
 801014c:	b29a      	uxth	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f003 fe42 	bl	8013ddc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010158:	3710      	adds	r7, #16
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	0801cfdc 	.word	0x0801cfdc
 8010164:	0801d278 	.word	0x0801d278
 8010168:	0801d020 	.word	0x0801d020
 801016c:	0801d290 	.word	0x0801d290

08010170 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010170:	b5b0      	push	{r4, r5, r7, lr}
 8010172:	b090      	sub	sp, #64	; 0x40
 8010174:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801017c:	4b94      	ldr	r3, [pc, #592]	; (80103d0 <tcp_slowtmr+0x260>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	3301      	adds	r3, #1
 8010182:	4a93      	ldr	r2, [pc, #588]	; (80103d0 <tcp_slowtmr+0x260>)
 8010184:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010186:	4b93      	ldr	r3, [pc, #588]	; (80103d4 <tcp_slowtmr+0x264>)
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	3301      	adds	r3, #1
 801018c:	b2da      	uxtb	r2, r3
 801018e:	4b91      	ldr	r3, [pc, #580]	; (80103d4 <tcp_slowtmr+0x264>)
 8010190:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010192:	2300      	movs	r3, #0
 8010194:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010196:	4b90      	ldr	r3, [pc, #576]	; (80103d8 <tcp_slowtmr+0x268>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801019c:	e29f      	b.n	80106de <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801019e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a0:	7d1b      	ldrb	r3, [r3, #20]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d106      	bne.n	80101b4 <tcp_slowtmr+0x44>
 80101a6:	4b8d      	ldr	r3, [pc, #564]	; (80103dc <tcp_slowtmr+0x26c>)
 80101a8:	f240 42be 	movw	r2, #1214	; 0x4be
 80101ac:	498c      	ldr	r1, [pc, #560]	; (80103e0 <tcp_slowtmr+0x270>)
 80101ae:	488d      	ldr	r0, [pc, #564]	; (80103e4 <tcp_slowtmr+0x274>)
 80101b0:	f00a fcb2 	bl	801ab18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80101b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b6:	7d1b      	ldrb	r3, [r3, #20]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d106      	bne.n	80101ca <tcp_slowtmr+0x5a>
 80101bc:	4b87      	ldr	r3, [pc, #540]	; (80103dc <tcp_slowtmr+0x26c>)
 80101be:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80101c2:	4989      	ldr	r1, [pc, #548]	; (80103e8 <tcp_slowtmr+0x278>)
 80101c4:	4887      	ldr	r0, [pc, #540]	; (80103e4 <tcp_slowtmr+0x274>)
 80101c6:	f00a fca7 	bl	801ab18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80101ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101cc:	7d1b      	ldrb	r3, [r3, #20]
 80101ce:	2b0a      	cmp	r3, #10
 80101d0:	d106      	bne.n	80101e0 <tcp_slowtmr+0x70>
 80101d2:	4b82      	ldr	r3, [pc, #520]	; (80103dc <tcp_slowtmr+0x26c>)
 80101d4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80101d8:	4984      	ldr	r1, [pc, #528]	; (80103ec <tcp_slowtmr+0x27c>)
 80101da:	4882      	ldr	r0, [pc, #520]	; (80103e4 <tcp_slowtmr+0x274>)
 80101dc:	f00a fc9c 	bl	801ab18 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80101e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e2:	7f9a      	ldrb	r2, [r3, #30]
 80101e4:	4b7b      	ldr	r3, [pc, #492]	; (80103d4 <tcp_slowtmr+0x264>)
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d105      	bne.n	80101f8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80101ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80101f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80101f6:	e272      	b.n	80106de <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80101f8:	4b76      	ldr	r3, [pc, #472]	; (80103d4 <tcp_slowtmr+0x264>)
 80101fa:	781a      	ldrb	r2, [r3, #0]
 80101fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010200:	2300      	movs	r3, #0
 8010202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801020c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020e:	7d1b      	ldrb	r3, [r3, #20]
 8010210:	2b02      	cmp	r3, #2
 8010212:	d10a      	bne.n	801022a <tcp_slowtmr+0xba>
 8010214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801021a:	2b05      	cmp	r3, #5
 801021c:	d905      	bls.n	801022a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801021e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010222:	3301      	adds	r3, #1
 8010224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010228:	e11e      	b.n	8010468 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801022a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010230:	2b0b      	cmp	r3, #11
 8010232:	d905      	bls.n	8010240 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010238:	3301      	adds	r3, #1
 801023a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801023e:	e113      	b.n	8010468 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010242:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010246:	2b00      	cmp	r3, #0
 8010248:	d075      	beq.n	8010336 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801024a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801024e:	2b00      	cmp	r3, #0
 8010250:	d006      	beq.n	8010260 <tcp_slowtmr+0xf0>
 8010252:	4b62      	ldr	r3, [pc, #392]	; (80103dc <tcp_slowtmr+0x26c>)
 8010254:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010258:	4965      	ldr	r1, [pc, #404]	; (80103f0 <tcp_slowtmr+0x280>)
 801025a:	4862      	ldr	r0, [pc, #392]	; (80103e4 <tcp_slowtmr+0x274>)
 801025c:	f00a fc5c 	bl	801ab18 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010264:	2b00      	cmp	r3, #0
 8010266:	d106      	bne.n	8010276 <tcp_slowtmr+0x106>
 8010268:	4b5c      	ldr	r3, [pc, #368]	; (80103dc <tcp_slowtmr+0x26c>)
 801026a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801026e:	4961      	ldr	r1, [pc, #388]	; (80103f4 <tcp_slowtmr+0x284>)
 8010270:	485c      	ldr	r0, [pc, #368]	; (80103e4 <tcp_slowtmr+0x274>)
 8010272:	f00a fc51 	bl	801ab18 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010278:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801027c:	2b0b      	cmp	r3, #11
 801027e:	d905      	bls.n	801028c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010284:	3301      	adds	r3, #1
 8010286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801028a:	e0ed      	b.n	8010468 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801028c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801028e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010292:	3b01      	subs	r3, #1
 8010294:	4a58      	ldr	r2, [pc, #352]	; (80103f8 <tcp_slowtmr+0x288>)
 8010296:	5cd3      	ldrb	r3, [r2, r3]
 8010298:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801029a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80102a0:	7c7a      	ldrb	r2, [r7, #17]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d907      	bls.n	80102b6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80102a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80102ac:	3301      	adds	r3, #1
 80102ae:	b2da      	uxtb	r2, r3
 80102b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80102b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80102bc:	7c7a      	ldrb	r2, [r7, #17]
 80102be:	429a      	cmp	r2, r3
 80102c0:	f200 80d2 	bhi.w	8010468 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80102c4:	2301      	movs	r3, #1
 80102c6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80102c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d108      	bne.n	80102e4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80102d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102d4:	f004 fc2a 	bl	8014b2c <tcp_zero_window_probe>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d014      	beq.n	8010308 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80102de:	2300      	movs	r3, #0
 80102e0:	623b      	str	r3, [r7, #32]
 80102e2:	e011      	b.n	8010308 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80102e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80102ea:	4619      	mov	r1, r3
 80102ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102ee:	f003 faef 	bl	80138d0 <tcp_split_unsent_seg>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d107      	bne.n	8010308 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80102f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102fa:	f003 fd6f 	bl	8013ddc <tcp_output>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d101      	bne.n	8010308 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010304:	2300      	movs	r3, #0
 8010306:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010308:	6a3b      	ldr	r3, [r7, #32]
 801030a:	2b00      	cmp	r3, #0
 801030c:	f000 80ac 	beq.w	8010468 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010312:	2200      	movs	r2, #0
 8010314:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801031e:	2b06      	cmp	r3, #6
 8010320:	f200 80a2 	bhi.w	8010468 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010326:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801032a:	3301      	adds	r3, #1
 801032c:	b2da      	uxtb	r2, r3
 801032e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010330:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010334:	e098      	b.n	8010468 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010338:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801033c:	2b00      	cmp	r3, #0
 801033e:	db0f      	blt.n	8010360 <tcp_slowtmr+0x1f0>
 8010340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010342:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010346:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801034a:	4293      	cmp	r3, r2
 801034c:	d008      	beq.n	8010360 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801034e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010350:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010354:	b29b      	uxth	r3, r3
 8010356:	3301      	adds	r3, #1
 8010358:	b29b      	uxth	r3, r3
 801035a:	b21a      	sxth	r2, r3
 801035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010362:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010368:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801036c:	429a      	cmp	r2, r3
 801036e:	db7b      	blt.n	8010468 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010372:	f004 f827 	bl	80143c4 <tcp_rexmit_rto_prepare>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d007      	beq.n	801038c <tcp_slowtmr+0x21c>
 801037c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801037e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010380:	2b00      	cmp	r3, #0
 8010382:	d171      	bne.n	8010468 <tcp_slowtmr+0x2f8>
 8010384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010388:	2b00      	cmp	r3, #0
 801038a:	d06d      	beq.n	8010468 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801038c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038e:	7d1b      	ldrb	r3, [r3, #20]
 8010390:	2b02      	cmp	r3, #2
 8010392:	d03a      	beq.n	801040a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801039a:	2b0c      	cmp	r3, #12
 801039c:	bf28      	it	cs
 801039e:	230c      	movcs	r3, #12
 80103a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80103a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80103a8:	10db      	asrs	r3, r3, #3
 80103aa:	b21b      	sxth	r3, r3
 80103ac:	461a      	mov	r2, r3
 80103ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80103b4:	4413      	add	r3, r2
 80103b6:	7efa      	ldrb	r2, [r7, #27]
 80103b8:	4910      	ldr	r1, [pc, #64]	; (80103fc <tcp_slowtmr+0x28c>)
 80103ba:	5c8a      	ldrb	r2, [r1, r2]
 80103bc:	4093      	lsls	r3, r2
 80103be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80103c6:	4293      	cmp	r3, r2
 80103c8:	dc1a      	bgt.n	8010400 <tcp_slowtmr+0x290>
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	b21a      	sxth	r2, r3
 80103ce:	e019      	b.n	8010404 <tcp_slowtmr+0x294>
 80103d0:	2001227c 	.word	0x2001227c
 80103d4:	20012292 	.word	0x20012292
 80103d8:	20012288 	.word	0x20012288
 80103dc:	0801cfdc 	.word	0x0801cfdc
 80103e0:	0801d320 	.word	0x0801d320
 80103e4:	0801d020 	.word	0x0801d020
 80103e8:	0801d34c 	.word	0x0801d34c
 80103ec:	0801d378 	.word	0x0801d378
 80103f0:	0801d3a8 	.word	0x0801d3a8
 80103f4:	0801d3dc 	.word	0x0801d3dc
 80103f8:	0801f410 	.word	0x0801f410
 80103fc:	0801f400 	.word	0x0801f400
 8010400:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040c:	2200      	movs	r2, #0
 801040e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010412:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010418:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801041c:	4293      	cmp	r3, r2
 801041e:	bf28      	it	cs
 8010420:	4613      	movcs	r3, r2
 8010422:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010424:	8a7b      	ldrh	r3, [r7, #18]
 8010426:	085b      	lsrs	r3, r3, #1
 8010428:	b29a      	uxth	r2, r3
 801042a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010432:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801043a:	005b      	lsls	r3, r3, #1
 801043c:	b29b      	uxth	r3, r3
 801043e:	429a      	cmp	r2, r3
 8010440:	d206      	bcs.n	8010450 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	b29a      	uxth	r2, r3
 801044a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010456:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045c:	2200      	movs	r2, #0
 801045e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010464:	f004 f81e 	bl	80144a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046a:	7d1b      	ldrb	r3, [r3, #20]
 801046c:	2b06      	cmp	r3, #6
 801046e:	d111      	bne.n	8010494 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	8b5b      	ldrh	r3, [r3, #26]
 8010474:	f003 0310 	and.w	r3, r3, #16
 8010478:	2b00      	cmp	r3, #0
 801047a:	d00b      	beq.n	8010494 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801047c:	4b9d      	ldr	r3, [pc, #628]	; (80106f4 <tcp_slowtmr+0x584>)
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010482:	6a1b      	ldr	r3, [r3, #32]
 8010484:	1ad3      	subs	r3, r2, r3
 8010486:	2b28      	cmp	r3, #40	; 0x28
 8010488:	d904      	bls.n	8010494 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801048a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801048e:	3301      	adds	r3, #1
 8010490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010496:	7a5b      	ldrb	r3, [r3, #9]
 8010498:	f003 0308 	and.w	r3, r3, #8
 801049c:	2b00      	cmp	r3, #0
 801049e:	d04c      	beq.n	801053a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80104a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80104a4:	2b04      	cmp	r3, #4
 80104a6:	d003      	beq.n	80104b0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80104ac:	2b07      	cmp	r3, #7
 80104ae:	d144      	bne.n	801053a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104b0:	4b90      	ldr	r3, [pc, #576]	; (80106f4 <tcp_slowtmr+0x584>)
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b6:	6a1b      	ldr	r3, [r3, #32]
 80104b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80104ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80104c0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80104c4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80104c8:	498b      	ldr	r1, [pc, #556]	; (80106f8 <tcp_slowtmr+0x588>)
 80104ca:	fba1 1303 	umull	r1, r3, r1, r3
 80104ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d90a      	bls.n	80104ea <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80104d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104d8:	3301      	adds	r3, #1
 80104da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80104de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80104e2:	3301      	adds	r3, #1
 80104e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80104e8:	e027      	b.n	801053a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104ea:	4b82      	ldr	r3, [pc, #520]	; (80106f4 <tcp_slowtmr+0x584>)
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f0:	6a1b      	ldr	r3, [r3, #32]
 80104f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80104fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010500:	4618      	mov	r0, r3
 8010502:	4b7e      	ldr	r3, [pc, #504]	; (80106fc <tcp_slowtmr+0x58c>)
 8010504:	fb00 f303 	mul.w	r3, r0, r3
 8010508:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801050a:	497b      	ldr	r1, [pc, #492]	; (80106f8 <tcp_slowtmr+0x588>)
 801050c:	fba1 1303 	umull	r1, r3, r1, r3
 8010510:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010512:	429a      	cmp	r2, r3
 8010514:	d911      	bls.n	801053a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010518:	f004 fac8 	bl	8014aac <tcp_keepalive>
 801051c:	4603      	mov	r3, r0
 801051e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8010522:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010526:	2b00      	cmp	r3, #0
 8010528:	d107      	bne.n	801053a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801052a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010530:	3301      	adds	r3, #1
 8010532:	b2da      	uxtb	r2, r3
 8010534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010536:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801053a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801053e:	2b00      	cmp	r3, #0
 8010540:	d011      	beq.n	8010566 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010542:	4b6c      	ldr	r3, [pc, #432]	; (80106f4 <tcp_slowtmr+0x584>)
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010548:	6a1b      	ldr	r3, [r3, #32]
 801054a:	1ad2      	subs	r2, r2, r3
 801054c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010552:	4619      	mov	r1, r3
 8010554:	460b      	mov	r3, r1
 8010556:	005b      	lsls	r3, r3, #1
 8010558:	440b      	add	r3, r1
 801055a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801055c:	429a      	cmp	r2, r3
 801055e:	d302      	bcc.n	8010566 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010562:	f000 fddb 	bl	801111c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010568:	7d1b      	ldrb	r3, [r3, #20]
 801056a:	2b03      	cmp	r3, #3
 801056c:	d10b      	bne.n	8010586 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801056e:	4b61      	ldr	r3, [pc, #388]	; (80106f4 <tcp_slowtmr+0x584>)
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010574:	6a1b      	ldr	r3, [r3, #32]
 8010576:	1ad3      	subs	r3, r2, r3
 8010578:	2b28      	cmp	r3, #40	; 0x28
 801057a:	d904      	bls.n	8010586 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801057c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010580:	3301      	adds	r3, #1
 8010582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010588:	7d1b      	ldrb	r3, [r3, #20]
 801058a:	2b09      	cmp	r3, #9
 801058c:	d10b      	bne.n	80105a6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801058e:	4b59      	ldr	r3, [pc, #356]	; (80106f4 <tcp_slowtmr+0x584>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010594:	6a1b      	ldr	r3, [r3, #32]
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	2bf0      	cmp	r3, #240	; 0xf0
 801059a:	d904      	bls.n	80105a6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801059c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105a0:	3301      	adds	r3, #1
 80105a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80105a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d060      	beq.n	8010670 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80105ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105b4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80105b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105b8:	f000 fbfc 	bl	8010db4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80105bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d010      	beq.n	80105e4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80105c2:	4b4f      	ldr	r3, [pc, #316]	; (8010700 <tcp_slowtmr+0x590>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d106      	bne.n	80105da <tcp_slowtmr+0x46a>
 80105cc:	4b4d      	ldr	r3, [pc, #308]	; (8010704 <tcp_slowtmr+0x594>)
 80105ce:	f240 526d 	movw	r2, #1389	; 0x56d
 80105d2:	494d      	ldr	r1, [pc, #308]	; (8010708 <tcp_slowtmr+0x598>)
 80105d4:	484d      	ldr	r0, [pc, #308]	; (801070c <tcp_slowtmr+0x59c>)
 80105d6:	f00a fa9f 	bl	801ab18 <iprintf>
        prev->next = pcb->next;
 80105da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105dc:	68da      	ldr	r2, [r3, #12]
 80105de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e0:	60da      	str	r2, [r3, #12]
 80105e2:	e00f      	b.n	8010604 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80105e4:	4b46      	ldr	r3, [pc, #280]	; (8010700 <tcp_slowtmr+0x590>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d006      	beq.n	80105fc <tcp_slowtmr+0x48c>
 80105ee:	4b45      	ldr	r3, [pc, #276]	; (8010704 <tcp_slowtmr+0x594>)
 80105f0:	f240 5271 	movw	r2, #1393	; 0x571
 80105f4:	4946      	ldr	r1, [pc, #280]	; (8010710 <tcp_slowtmr+0x5a0>)
 80105f6:	4845      	ldr	r0, [pc, #276]	; (801070c <tcp_slowtmr+0x59c>)
 80105f8:	f00a fa8e 	bl	801ab18 <iprintf>
        tcp_active_pcbs = pcb->next;
 80105fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	4a3f      	ldr	r2, [pc, #252]	; (8010700 <tcp_slowtmr+0x590>)
 8010602:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010608:	2b00      	cmp	r3, #0
 801060a:	d013      	beq.n	8010634 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010612:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010614:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010618:	3304      	adds	r3, #4
 801061a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801061c:	8ad2      	ldrh	r2, [r2, #22]
 801061e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010620:	8b09      	ldrh	r1, [r1, #24]
 8010622:	9102      	str	r1, [sp, #8]
 8010624:	9201      	str	r2, [sp, #4]
 8010626:	9300      	str	r3, [sp, #0]
 8010628:	462b      	mov	r3, r5
 801062a:	4622      	mov	r2, r4
 801062c:	4601      	mov	r1, r0
 801062e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010630:	f004 f988 	bl	8014944 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010636:	691b      	ldr	r3, [r3, #16]
 8010638:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801063a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063c:	7d1b      	ldrb	r3, [r3, #20]
 801063e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010642:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801064a:	6838      	ldr	r0, [r7, #0]
 801064c:	f7ff f9f2 	bl	800fa34 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010650:	4b30      	ldr	r3, [pc, #192]	; (8010714 <tcp_slowtmr+0x5a4>)
 8010652:	2200      	movs	r2, #0
 8010654:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d004      	beq.n	8010666 <tcp_slowtmr+0x4f6>
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f06f 010c 	mvn.w	r1, #12
 8010662:	68b8      	ldr	r0, [r7, #8]
 8010664:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010666:	4b2b      	ldr	r3, [pc, #172]	; (8010714 <tcp_slowtmr+0x5a4>)
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d037      	beq.n	80106de <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801066e:	e590      	b.n	8010192 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067c:	7f1b      	ldrb	r3, [r3, #28]
 801067e:	3301      	adds	r3, #1
 8010680:	b2da      	uxtb	r2, r3
 8010682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010684:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010688:	7f1a      	ldrb	r2, [r3, #28]
 801068a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068c:	7f5b      	ldrb	r3, [r3, #29]
 801068e:	429a      	cmp	r2, r3
 8010690:	d325      	bcc.n	80106de <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010694:	2200      	movs	r2, #0
 8010696:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010698:	4b1e      	ldr	r3, [pc, #120]	; (8010714 <tcp_slowtmr+0x5a4>)
 801069a:	2200      	movs	r2, #0
 801069c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d00b      	beq.n	80106c0 <tcp_slowtmr+0x550>
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106b0:	6912      	ldr	r2, [r2, #16]
 80106b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106b4:	4610      	mov	r0, r2
 80106b6:	4798      	blx	r3
 80106b8:	4603      	mov	r3, r0
 80106ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80106be:	e002      	b.n	80106c6 <tcp_slowtmr+0x556>
 80106c0:	2300      	movs	r3, #0
 80106c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80106c6:	4b13      	ldr	r3, [pc, #76]	; (8010714 <tcp_slowtmr+0x5a4>)
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d000      	beq.n	80106d0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80106ce:	e560      	b.n	8010192 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80106d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d102      	bne.n	80106de <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80106d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106da:	f003 fb7f 	bl	8013ddc <tcp_output>
  while (pcb != NULL) {
 80106de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f47f ad5c 	bne.w	801019e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80106e6:	2300      	movs	r3, #0
 80106e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80106ea:	4b0b      	ldr	r3, [pc, #44]	; (8010718 <tcp_slowtmr+0x5a8>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80106f0:	e067      	b.n	80107c2 <tcp_slowtmr+0x652>
 80106f2:	bf00      	nop
 80106f4:	2001227c 	.word	0x2001227c
 80106f8:	10624dd3 	.word	0x10624dd3
 80106fc:	000124f8 	.word	0x000124f8
 8010700:	20012288 	.word	0x20012288
 8010704:	0801cfdc 	.word	0x0801cfdc
 8010708:	0801d414 	.word	0x0801d414
 801070c:	0801d020 	.word	0x0801d020
 8010710:	0801d440 	.word	0x0801d440
 8010714:	20012290 	.word	0x20012290
 8010718:	2001228c 	.word	0x2001228c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071e:	7d1b      	ldrb	r3, [r3, #20]
 8010720:	2b0a      	cmp	r3, #10
 8010722:	d006      	beq.n	8010732 <tcp_slowtmr+0x5c2>
 8010724:	4b2b      	ldr	r3, [pc, #172]	; (80107d4 <tcp_slowtmr+0x664>)
 8010726:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801072a:	492b      	ldr	r1, [pc, #172]	; (80107d8 <tcp_slowtmr+0x668>)
 801072c:	482b      	ldr	r0, [pc, #172]	; (80107dc <tcp_slowtmr+0x66c>)
 801072e:	f00a f9f3 	bl	801ab18 <iprintf>
    pcb_remove = 0;
 8010732:	2300      	movs	r3, #0
 8010734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010738:	4b29      	ldr	r3, [pc, #164]	; (80107e0 <tcp_slowtmr+0x670>)
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073e:	6a1b      	ldr	r3, [r3, #32]
 8010740:	1ad3      	subs	r3, r2, r3
 8010742:	2bf0      	cmp	r3, #240	; 0xf0
 8010744:	d904      	bls.n	8010750 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801074a:	3301      	adds	r3, #1
 801074c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010754:	2b00      	cmp	r3, #0
 8010756:	d02f      	beq.n	80107b8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801075a:	f000 fb2b 	bl	8010db4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010760:	2b00      	cmp	r3, #0
 8010762:	d010      	beq.n	8010786 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010764:	4b1f      	ldr	r3, [pc, #124]	; (80107e4 <tcp_slowtmr+0x674>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801076a:	429a      	cmp	r2, r3
 801076c:	d106      	bne.n	801077c <tcp_slowtmr+0x60c>
 801076e:	4b19      	ldr	r3, [pc, #100]	; (80107d4 <tcp_slowtmr+0x664>)
 8010770:	f240 52af 	movw	r2, #1455	; 0x5af
 8010774:	491c      	ldr	r1, [pc, #112]	; (80107e8 <tcp_slowtmr+0x678>)
 8010776:	4819      	ldr	r0, [pc, #100]	; (80107dc <tcp_slowtmr+0x66c>)
 8010778:	f00a f9ce 	bl	801ab18 <iprintf>
        prev->next = pcb->next;
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077e:	68da      	ldr	r2, [r3, #12]
 8010780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010782:	60da      	str	r2, [r3, #12]
 8010784:	e00f      	b.n	80107a6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010786:	4b17      	ldr	r3, [pc, #92]	; (80107e4 <tcp_slowtmr+0x674>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801078c:	429a      	cmp	r2, r3
 801078e:	d006      	beq.n	801079e <tcp_slowtmr+0x62e>
 8010790:	4b10      	ldr	r3, [pc, #64]	; (80107d4 <tcp_slowtmr+0x664>)
 8010792:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010796:	4915      	ldr	r1, [pc, #84]	; (80107ec <tcp_slowtmr+0x67c>)
 8010798:	4810      	ldr	r0, [pc, #64]	; (80107dc <tcp_slowtmr+0x66c>)
 801079a:	f00a f9bd 	bl	801ab18 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801079e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	4a10      	ldr	r2, [pc, #64]	; (80107e4 <tcp_slowtmr+0x674>)
 80107a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80107a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80107aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ac:	68db      	ldr	r3, [r3, #12]
 80107ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80107b0:	69f8      	ldr	r0, [r7, #28]
 80107b2:	f7ff f93f 	bl	800fa34 <tcp_free>
 80107b6:	e004      	b.n	80107c2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80107b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80107bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80107c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1a9      	bne.n	801071c <tcp_slowtmr+0x5ac>
    }
  }
}
 80107c8:	bf00      	nop
 80107ca:	bf00      	nop
 80107cc:	3730      	adds	r7, #48	; 0x30
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bdb0      	pop	{r4, r5, r7, pc}
 80107d2:	bf00      	nop
 80107d4:	0801cfdc 	.word	0x0801cfdc
 80107d8:	0801d46c 	.word	0x0801d46c
 80107dc:	0801d020 	.word	0x0801d020
 80107e0:	2001227c 	.word	0x2001227c
 80107e4:	2001228c 	.word	0x2001228c
 80107e8:	0801d49c 	.word	0x0801d49c
 80107ec:	0801d4c4 	.word	0x0801d4c4

080107f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80107f6:	4b2d      	ldr	r3, [pc, #180]	; (80108ac <tcp_fasttmr+0xbc>)
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	3301      	adds	r3, #1
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	4b2b      	ldr	r3, [pc, #172]	; (80108ac <tcp_fasttmr+0xbc>)
 8010800:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010802:	4b2b      	ldr	r3, [pc, #172]	; (80108b0 <tcp_fasttmr+0xc0>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010808:	e048      	b.n	801089c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	7f9a      	ldrb	r2, [r3, #30]
 801080e:	4b27      	ldr	r3, [pc, #156]	; (80108ac <tcp_fasttmr+0xbc>)
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	429a      	cmp	r2, r3
 8010814:	d03f      	beq.n	8010896 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010816:	4b25      	ldr	r3, [pc, #148]	; (80108ac <tcp_fasttmr+0xbc>)
 8010818:	781a      	ldrb	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	8b5b      	ldrh	r3, [r3, #26]
 8010822:	f003 0301 	and.w	r3, r3, #1
 8010826:	2b00      	cmp	r3, #0
 8010828:	d010      	beq.n	801084c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	8b5b      	ldrh	r3, [r3, #26]
 801082e:	f043 0302 	orr.w	r3, r3, #2
 8010832:	b29a      	uxth	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f003 facf 	bl	8013ddc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	8b5b      	ldrh	r3, [r3, #26]
 8010842:	f023 0303 	bic.w	r3, r3, #3
 8010846:	b29a      	uxth	r2, r3
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	8b5b      	ldrh	r3, [r3, #26]
 8010850:	f003 0308 	and.w	r3, r3, #8
 8010854:	2b00      	cmp	r3, #0
 8010856:	d009      	beq.n	801086c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	8b5b      	ldrh	r3, [r3, #26]
 801085c:	f023 0308 	bic.w	r3, r3, #8
 8010860:	b29a      	uxth	r2, r3
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f7ff fa78 	bl	800fd5c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	68db      	ldr	r3, [r3, #12]
 8010870:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00a      	beq.n	8010890 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801087a:	4b0e      	ldr	r3, [pc, #56]	; (80108b4 <tcp_fasttmr+0xc4>)
 801087c:	2200      	movs	r2, #0
 801087e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 f819 	bl	80108b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010886:	4b0b      	ldr	r3, [pc, #44]	; (80108b4 <tcp_fasttmr+0xc4>)
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d000      	beq.n	8010890 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801088e:	e7b8      	b.n	8010802 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	607b      	str	r3, [r7, #4]
 8010894:	e002      	b.n	801089c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1b3      	bne.n	801080a <tcp_fasttmr+0x1a>
    }
  }
}
 80108a2:	bf00      	nop
 80108a4:	bf00      	nop
 80108a6:	3708      	adds	r7, #8
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	20012292 	.word	0x20012292
 80108b0:	20012288 	.word	0x20012288
 80108b4:	20012290 	.word	0x20012290

080108b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80108b8:	b590      	push	{r4, r7, lr}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d109      	bne.n	80108da <tcp_process_refused_data+0x22>
 80108c6:	4b37      	ldr	r3, [pc, #220]	; (80109a4 <tcp_process_refused_data+0xec>)
 80108c8:	f240 6209 	movw	r2, #1545	; 0x609
 80108cc:	4936      	ldr	r1, [pc, #216]	; (80109a8 <tcp_process_refused_data+0xf0>)
 80108ce:	4837      	ldr	r0, [pc, #220]	; (80109ac <tcp_process_refused_data+0xf4>)
 80108d0:	f00a f922 	bl	801ab18 <iprintf>
 80108d4:	f06f 030f 	mvn.w	r3, #15
 80108d8:	e060      	b.n	801099c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108de:	7b5b      	ldrb	r3, [r3, #13]
 80108e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2200      	movs	r2, #0
 80108ec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00b      	beq.n	8010910 <tcp_process_refused_data+0x58>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6918      	ldr	r0, [r3, #16]
 8010902:	2300      	movs	r3, #0
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	47a0      	blx	r4
 801090a:	4603      	mov	r3, r0
 801090c:	73fb      	strb	r3, [r7, #15]
 801090e:	e007      	b.n	8010920 <tcp_process_refused_data+0x68>
 8010910:	2300      	movs	r3, #0
 8010912:	68ba      	ldr	r2, [r7, #8]
 8010914:	6879      	ldr	r1, [r7, #4]
 8010916:	2000      	movs	r0, #0
 8010918:	f000 f8a4 	bl	8010a64 <tcp_recv_null>
 801091c:	4603      	mov	r3, r0
 801091e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d12a      	bne.n	801097e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010928:	7bbb      	ldrb	r3, [r7, #14]
 801092a:	f003 0320 	and.w	r3, r3, #32
 801092e:	2b00      	cmp	r3, #0
 8010930:	d033      	beq.n	801099a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010936:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801093a:	d005      	beq.n	8010948 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010940:	3301      	adds	r3, #1
 8010942:	b29a      	uxth	r2, r3
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00b      	beq.n	801096a <tcp_process_refused_data+0xb2>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6918      	ldr	r0, [r3, #16]
 801095c:	2300      	movs	r3, #0
 801095e:	2200      	movs	r2, #0
 8010960:	6879      	ldr	r1, [r7, #4]
 8010962:	47a0      	blx	r4
 8010964:	4603      	mov	r3, r0
 8010966:	73fb      	strb	r3, [r7, #15]
 8010968:	e001      	b.n	801096e <tcp_process_refused_data+0xb6>
 801096a:	2300      	movs	r3, #0
 801096c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010972:	f113 0f0d 	cmn.w	r3, #13
 8010976:	d110      	bne.n	801099a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010978:	f06f 030c 	mvn.w	r3, #12
 801097c:	e00e      	b.n	801099c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010982:	f113 0f0d 	cmn.w	r3, #13
 8010986:	d102      	bne.n	801098e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010988:	f06f 030c 	mvn.w	r3, #12
 801098c:	e006      	b.n	801099c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	68ba      	ldr	r2, [r7, #8]
 8010992:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010994:	f06f 0304 	mvn.w	r3, #4
 8010998:	e000      	b.n	801099c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801099a:	2300      	movs	r3, #0
}
 801099c:	4618      	mov	r0, r3
 801099e:	3714      	adds	r7, #20
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd90      	pop	{r4, r7, pc}
 80109a4:	0801cfdc 	.word	0x0801cfdc
 80109a8:	0801d4ec 	.word	0x0801d4ec
 80109ac:	0801d020 	.word	0x0801d020

080109b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80109b8:	e007      	b.n	80109ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f000 f80a 	bl	80109da <tcp_seg_free>
    seg = next;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d1f4      	bne.n	80109ba <tcp_segs_free+0xa>
  }
}
 80109d0:	bf00      	nop
 80109d2:	bf00      	nop
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}

080109da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80109da:	b580      	push	{r7, lr}
 80109dc:	b082      	sub	sp, #8
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d00c      	beq.n	8010a02 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d004      	beq.n	80109fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7fe fc07 	bl	800f208 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80109fa:	6879      	ldr	r1, [r7, #4]
 80109fc:	2003      	movs	r0, #3
 80109fe:	f7fd fdbb 	bl	800e578 <memp_free>
  }
}
 8010a02:	bf00      	nop
 8010a04:	3708      	adds	r7, #8
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
	...

08010a0c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d106      	bne.n	8010a28 <tcp_seg_copy+0x1c>
 8010a1a:	4b0f      	ldr	r3, [pc, #60]	; (8010a58 <tcp_seg_copy+0x4c>)
 8010a1c:	f240 6282 	movw	r2, #1666	; 0x682
 8010a20:	490e      	ldr	r1, [pc, #56]	; (8010a5c <tcp_seg_copy+0x50>)
 8010a22:	480f      	ldr	r0, [pc, #60]	; (8010a60 <tcp_seg_copy+0x54>)
 8010a24:	f00a f878 	bl	801ab18 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010a28:	2003      	movs	r0, #3
 8010a2a:	f7fd fd2f 	bl	800e48c <memp_malloc>
 8010a2e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d101      	bne.n	8010a3a <tcp_seg_copy+0x2e>
    return NULL;
 8010a36:	2300      	movs	r3, #0
 8010a38:	e00a      	b.n	8010a50 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010a3a:	2210      	movs	r2, #16
 8010a3c:	6879      	ldr	r1, [r7, #4]
 8010a3e:	68f8      	ldr	r0, [r7, #12]
 8010a40:	f00a f9a1 	bl	801ad86 <memcpy>
  pbuf_ref(cseg->p);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fe fc83 	bl	800f354 <pbuf_ref>
  return cseg;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3710      	adds	r7, #16
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	0801cfdc 	.word	0x0801cfdc
 8010a5c:	0801d530 	.word	0x0801d530
 8010a60:	0801d020 	.word	0x0801d020

08010a64 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
 8010a70:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d109      	bne.n	8010a8c <tcp_recv_null+0x28>
 8010a78:	4b12      	ldr	r3, [pc, #72]	; (8010ac4 <tcp_recv_null+0x60>)
 8010a7a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010a7e:	4912      	ldr	r1, [pc, #72]	; (8010ac8 <tcp_recv_null+0x64>)
 8010a80:	4812      	ldr	r0, [pc, #72]	; (8010acc <tcp_recv_null+0x68>)
 8010a82:	f00a f849 	bl	801ab18 <iprintf>
 8010a86:	f06f 030f 	mvn.w	r3, #15
 8010a8a:	e016      	b.n	8010aba <tcp_recv_null+0x56>

  if (p != NULL) {
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d009      	beq.n	8010aa6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	891b      	ldrh	r3, [r3, #8]
 8010a96:	4619      	mov	r1, r3
 8010a98:	68b8      	ldr	r0, [r7, #8]
 8010a9a:	f7ff fb19 	bl	80100d0 <tcp_recved>
    pbuf_free(p);
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f7fe fbb2 	bl	800f208 <pbuf_free>
 8010aa4:	e008      	b.n	8010ab8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d104      	bne.n	8010ab8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010aae:	68b8      	ldr	r0, [r7, #8]
 8010ab0:	f7ff f9be 	bl	800fe30 <tcp_close>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	e000      	b.n	8010aba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	0801cfdc 	.word	0x0801cfdc
 8010ac8:	0801d54c 	.word	0x0801d54c
 8010acc:	0801d020 	.word	0x0801d020

08010ad0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b086      	sub	sp, #24
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	db01      	blt.n	8010ae6 <tcp_kill_prio+0x16>
 8010ae2:	79fb      	ldrb	r3, [r7, #7]
 8010ae4:	e000      	b.n	8010ae8 <tcp_kill_prio+0x18>
 8010ae6:	237f      	movs	r3, #127	; 0x7f
 8010ae8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010aea:	7afb      	ldrb	r3, [r7, #11]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d034      	beq.n	8010b5a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010af0:	7afb      	ldrb	r3, [r7, #11]
 8010af2:	3b01      	subs	r3, #1
 8010af4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010af6:	2300      	movs	r3, #0
 8010af8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010afa:	2300      	movs	r3, #0
 8010afc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010afe:	4b19      	ldr	r3, [pc, #100]	; (8010b64 <tcp_kill_prio+0x94>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	617b      	str	r3, [r7, #20]
 8010b04:	e01f      	b.n	8010b46 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	7d5b      	ldrb	r3, [r3, #21]
 8010b0a:	7afa      	ldrb	r2, [r7, #11]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d80c      	bhi.n	8010b2a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010b14:	7afa      	ldrb	r2, [r7, #11]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d112      	bne.n	8010b40 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010b1a:	4b13      	ldr	r3, [pc, #76]	; (8010b68 <tcp_kill_prio+0x98>)
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	6a1b      	ldr	r3, [r3, #32]
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d80a      	bhi.n	8010b40 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010b2a:	4b0f      	ldr	r3, [pc, #60]	; (8010b68 <tcp_kill_prio+0x98>)
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	6a1b      	ldr	r3, [r3, #32]
 8010b32:	1ad3      	subs	r3, r2, r3
 8010b34:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	7d5b      	ldrb	r3, [r3, #21]
 8010b3e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	617b      	str	r3, [r7, #20]
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1dc      	bne.n	8010b06 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d004      	beq.n	8010b5c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010b52:	6938      	ldr	r0, [r7, #16]
 8010b54:	f7ff fa56 	bl	8010004 <tcp_abort>
 8010b58:	e000      	b.n	8010b5c <tcp_kill_prio+0x8c>
    return;
 8010b5a:	bf00      	nop
  }
}
 8010b5c:	3718      	adds	r7, #24
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	20012288 	.word	0x20012288
 8010b68:	2001227c 	.word	0x2001227c

08010b6c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b086      	sub	sp, #24
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	4603      	mov	r3, r0
 8010b74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010b76:	79fb      	ldrb	r3, [r7, #7]
 8010b78:	2b08      	cmp	r3, #8
 8010b7a:	d009      	beq.n	8010b90 <tcp_kill_state+0x24>
 8010b7c:	79fb      	ldrb	r3, [r7, #7]
 8010b7e:	2b09      	cmp	r3, #9
 8010b80:	d006      	beq.n	8010b90 <tcp_kill_state+0x24>
 8010b82:	4b1a      	ldr	r3, [pc, #104]	; (8010bec <tcp_kill_state+0x80>)
 8010b84:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010b88:	4919      	ldr	r1, [pc, #100]	; (8010bf0 <tcp_kill_state+0x84>)
 8010b8a:	481a      	ldr	r0, [pc, #104]	; (8010bf4 <tcp_kill_state+0x88>)
 8010b8c:	f009 ffc4 	bl	801ab18 <iprintf>

  inactivity = 0;
 8010b90:	2300      	movs	r3, #0
 8010b92:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010b94:	2300      	movs	r3, #0
 8010b96:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b98:	4b17      	ldr	r3, [pc, #92]	; (8010bf8 <tcp_kill_state+0x8c>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	617b      	str	r3, [r7, #20]
 8010b9e:	e017      	b.n	8010bd0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	7d1b      	ldrb	r3, [r3, #20]
 8010ba4:	79fa      	ldrb	r2, [r7, #7]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d10f      	bne.n	8010bca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010baa:	4b14      	ldr	r3, [pc, #80]	; (8010bfc <tcp_kill_state+0x90>)
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	6a1b      	ldr	r3, [r3, #32]
 8010bb2:	1ad3      	subs	r3, r2, r3
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d807      	bhi.n	8010bca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010bba:	4b10      	ldr	r3, [pc, #64]	; (8010bfc <tcp_kill_state+0x90>)
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	6a1b      	ldr	r3, [r3, #32]
 8010bc2:	1ad3      	subs	r3, r2, r3
 8010bc4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	617b      	str	r3, [r7, #20]
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1e4      	bne.n	8010ba0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d003      	beq.n	8010be4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010bdc:	2100      	movs	r1, #0
 8010bde:	6938      	ldr	r0, [r7, #16]
 8010be0:	f7ff f952 	bl	800fe88 <tcp_abandon>
  }
}
 8010be4:	bf00      	nop
 8010be6:	3718      	adds	r7, #24
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	0801cfdc 	.word	0x0801cfdc
 8010bf0:	0801d568 	.word	0x0801d568
 8010bf4:	0801d020 	.word	0x0801d020
 8010bf8:	20012288 	.word	0x20012288
 8010bfc:	2001227c 	.word	0x2001227c

08010c00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b084      	sub	sp, #16
 8010c04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c0e:	4b12      	ldr	r3, [pc, #72]	; (8010c58 <tcp_kill_timewait+0x58>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	60fb      	str	r3, [r7, #12]
 8010c14:	e012      	b.n	8010c3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010c16:	4b11      	ldr	r3, [pc, #68]	; (8010c5c <tcp_kill_timewait+0x5c>)
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	6a1b      	ldr	r3, [r3, #32]
 8010c1e:	1ad3      	subs	r3, r2, r3
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d807      	bhi.n	8010c36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010c26:	4b0d      	ldr	r3, [pc, #52]	; (8010c5c <tcp_kill_timewait+0x5c>)
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	6a1b      	ldr	r3, [r3, #32]
 8010c2e:	1ad3      	subs	r3, r2, r3
 8010c30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	60fb      	str	r3, [r7, #12]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d1e9      	bne.n	8010c16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010c48:	68b8      	ldr	r0, [r7, #8]
 8010c4a:	f7ff f9db 	bl	8010004 <tcp_abort>
  }
}
 8010c4e:	bf00      	nop
 8010c50:	3710      	adds	r7, #16
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	2001228c 	.word	0x2001228c
 8010c5c:	2001227c 	.word	0x2001227c

08010c60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010c66:	4b10      	ldr	r3, [pc, #64]	; (8010ca8 <tcp_handle_closepend+0x48>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010c6c:	e014      	b.n	8010c98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	8b5b      	ldrh	r3, [r3, #26]
 8010c78:	f003 0308 	and.w	r3, r3, #8
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d009      	beq.n	8010c94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	8b5b      	ldrh	r3, [r3, #26]
 8010c84:	f023 0308 	bic.w	r3, r3, #8
 8010c88:	b29a      	uxth	r2, r3
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f7ff f864 	bl	800fd5c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d1e7      	bne.n	8010c6e <tcp_handle_closepend+0xe>
  }
}
 8010c9e:	bf00      	nop
 8010ca0:	bf00      	nop
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	20012288 	.word	0x20012288

08010cac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010cb6:	2001      	movs	r0, #1
 8010cb8:	f7fd fbe8 	bl	800e48c <memp_malloc>
 8010cbc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d126      	bne.n	8010d12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010cc4:	f7ff ffcc 	bl	8010c60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010cc8:	f7ff ff9a 	bl	8010c00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ccc:	2001      	movs	r0, #1
 8010cce:	f7fd fbdd 	bl	800e48c <memp_malloc>
 8010cd2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d11b      	bne.n	8010d12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010cda:	2009      	movs	r0, #9
 8010cdc:	f7ff ff46 	bl	8010b6c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ce0:	2001      	movs	r0, #1
 8010ce2:	f7fd fbd3 	bl	800e48c <memp_malloc>
 8010ce6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d111      	bne.n	8010d12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010cee:	2008      	movs	r0, #8
 8010cf0:	f7ff ff3c 	bl	8010b6c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010cf4:	2001      	movs	r0, #1
 8010cf6:	f7fd fbc9 	bl	800e48c <memp_malloc>
 8010cfa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d107      	bne.n	8010d12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010d02:	79fb      	ldrb	r3, [r7, #7]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7ff fee3 	bl	8010ad0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d0a:	2001      	movs	r0, #1
 8010d0c:	f7fd fbbe 	bl	800e48c <memp_malloc>
 8010d10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d03f      	beq.n	8010d98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010d18:	229c      	movs	r2, #156	; 0x9c
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f009 ff60 	bl	801abe2 <memset>
    pcb->prio = prio;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	79fa      	ldrb	r2, [r7, #7]
 8010d26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010d2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010d38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	22ff      	movs	r2, #255	; 0xff
 8010d46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010d4e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	2206      	movs	r2, #6
 8010d54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	2206      	movs	r2, #6
 8010d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d64:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2201      	movs	r2, #1
 8010d6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010d6e:	4b0d      	ldr	r3, [pc, #52]	; (8010da4 <tcp_alloc+0xf8>)
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010d76:	4b0c      	ldr	r3, [pc, #48]	; (8010da8 <tcp_alloc+0xfc>)
 8010d78:	781a      	ldrb	r2, [r3, #0]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010d84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	4a08      	ldr	r2, [pc, #32]	; (8010dac <tcp_alloc+0x100>)
 8010d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	4a07      	ldr	r2, [pc, #28]	; (8010db0 <tcp_alloc+0x104>)
 8010d94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010d98:	68fb      	ldr	r3, [r7, #12]
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3710      	adds	r7, #16
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	2001227c 	.word	0x2001227c
 8010da8:	20012292 	.word	0x20012292
 8010dac:	08010a65 	.word	0x08010a65
 8010db0:	006ddd00 	.word	0x006ddd00

08010db4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d107      	bne.n	8010dd2 <tcp_pcb_purge+0x1e>
 8010dc2:	4b21      	ldr	r3, [pc, #132]	; (8010e48 <tcp_pcb_purge+0x94>)
 8010dc4:	f640 0251 	movw	r2, #2129	; 0x851
 8010dc8:	4920      	ldr	r1, [pc, #128]	; (8010e4c <tcp_pcb_purge+0x98>)
 8010dca:	4821      	ldr	r0, [pc, #132]	; (8010e50 <tcp_pcb_purge+0x9c>)
 8010dcc:	f009 fea4 	bl	801ab18 <iprintf>
 8010dd0:	e037      	b.n	8010e42 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	7d1b      	ldrb	r3, [r3, #20]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d033      	beq.n	8010e42 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010dde:	2b0a      	cmp	r3, #10
 8010de0:	d02f      	beq.n	8010e42 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010de6:	2b01      	cmp	r3, #1
 8010de8:	d02b      	beq.n	8010e42 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d007      	beq.n	8010e02 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7fe fa06 	bl	800f208 <pbuf_free>
      pcb->refused_data = NULL;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d002      	beq.n	8010e10 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f000 f986 	bl	801111c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e16:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7ff fdc7 	bl	80109b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7ff fdc2 	bl	80109b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	0801cfdc 	.word	0x0801cfdc
 8010e4c:	0801d628 	.word	0x0801d628
 8010e50:	0801d020 	.word	0x0801d020

08010e54 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d106      	bne.n	8010e72 <tcp_pcb_remove+0x1e>
 8010e64:	4b3e      	ldr	r3, [pc, #248]	; (8010f60 <tcp_pcb_remove+0x10c>)
 8010e66:	f640 0283 	movw	r2, #2179	; 0x883
 8010e6a:	493e      	ldr	r1, [pc, #248]	; (8010f64 <tcp_pcb_remove+0x110>)
 8010e6c:	483e      	ldr	r0, [pc, #248]	; (8010f68 <tcp_pcb_remove+0x114>)
 8010e6e:	f009 fe53 	bl	801ab18 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d106      	bne.n	8010e86 <tcp_pcb_remove+0x32>
 8010e78:	4b39      	ldr	r3, [pc, #228]	; (8010f60 <tcp_pcb_remove+0x10c>)
 8010e7a:	f640 0284 	movw	r2, #2180	; 0x884
 8010e7e:	493b      	ldr	r1, [pc, #236]	; (8010f6c <tcp_pcb_remove+0x118>)
 8010e80:	4839      	ldr	r0, [pc, #228]	; (8010f68 <tcp_pcb_remove+0x114>)
 8010e82:	f009 fe49 	bl	801ab18 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	683a      	ldr	r2, [r7, #0]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d105      	bne.n	8010e9c <tcp_pcb_remove+0x48>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	68da      	ldr	r2, [r3, #12]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	601a      	str	r2, [r3, #0]
 8010e9a:	e013      	b.n	8010ec4 <tcp_pcb_remove+0x70>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	60fb      	str	r3, [r7, #12]
 8010ea2:	e00c      	b.n	8010ebe <tcp_pcb_remove+0x6a>
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	683a      	ldr	r2, [r7, #0]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d104      	bne.n	8010eb8 <tcp_pcb_remove+0x64>
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	68da      	ldr	r2, [r3, #12]
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	60da      	str	r2, [r3, #12]
 8010eb6:	e005      	b.n	8010ec4 <tcp_pcb_remove+0x70>
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	60fb      	str	r3, [r7, #12]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d1ef      	bne.n	8010ea4 <tcp_pcb_remove+0x50>
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010eca:	6838      	ldr	r0, [r7, #0]
 8010ecc:	f7ff ff72 	bl	8010db4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	7d1b      	ldrb	r3, [r3, #20]
 8010ed4:	2b0a      	cmp	r3, #10
 8010ed6:	d013      	beq.n	8010f00 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d00f      	beq.n	8010f00 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	8b5b      	ldrh	r3, [r3, #26]
 8010ee4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d009      	beq.n	8010f00 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	8b5b      	ldrh	r3, [r3, #26]
 8010ef0:	f043 0302 	orr.w	r3, r3, #2
 8010ef4:	b29a      	uxth	r2, r3
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010efa:	6838      	ldr	r0, [r7, #0]
 8010efc:	f002 ff6e 	bl	8013ddc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	7d1b      	ldrb	r3, [r3, #20]
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d020      	beq.n	8010f4a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d006      	beq.n	8010f1e <tcp_pcb_remove+0xca>
 8010f10:	4b13      	ldr	r3, [pc, #76]	; (8010f60 <tcp_pcb_remove+0x10c>)
 8010f12:	f640 0293 	movw	r2, #2195	; 0x893
 8010f16:	4916      	ldr	r1, [pc, #88]	; (8010f70 <tcp_pcb_remove+0x11c>)
 8010f18:	4813      	ldr	r0, [pc, #76]	; (8010f68 <tcp_pcb_remove+0x114>)
 8010f1a:	f009 fdfd 	bl	801ab18 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d006      	beq.n	8010f34 <tcp_pcb_remove+0xe0>
 8010f26:	4b0e      	ldr	r3, [pc, #56]	; (8010f60 <tcp_pcb_remove+0x10c>)
 8010f28:	f640 0294 	movw	r2, #2196	; 0x894
 8010f2c:	4911      	ldr	r1, [pc, #68]	; (8010f74 <tcp_pcb_remove+0x120>)
 8010f2e:	480e      	ldr	r0, [pc, #56]	; (8010f68 <tcp_pcb_remove+0x114>)
 8010f30:	f009 fdf2 	bl	801ab18 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d006      	beq.n	8010f4a <tcp_pcb_remove+0xf6>
 8010f3c:	4b08      	ldr	r3, [pc, #32]	; (8010f60 <tcp_pcb_remove+0x10c>)
 8010f3e:	f640 0296 	movw	r2, #2198	; 0x896
 8010f42:	490d      	ldr	r1, [pc, #52]	; (8010f78 <tcp_pcb_remove+0x124>)
 8010f44:	4808      	ldr	r0, [pc, #32]	; (8010f68 <tcp_pcb_remove+0x114>)
 8010f46:	f009 fde7 	bl	801ab18 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	2200      	movs	r2, #0
 8010f54:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010f56:	bf00      	nop
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	0801cfdc 	.word	0x0801cfdc
 8010f64:	0801d644 	.word	0x0801d644
 8010f68:	0801d020 	.word	0x0801d020
 8010f6c:	0801d660 	.word	0x0801d660
 8010f70:	0801d680 	.word	0x0801d680
 8010f74:	0801d698 	.word	0x0801d698
 8010f78:	0801d6b4 	.word	0x0801d6b4

08010f7c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d106      	bne.n	8010f98 <tcp_next_iss+0x1c>
 8010f8a:	4b0a      	ldr	r3, [pc, #40]	; (8010fb4 <tcp_next_iss+0x38>)
 8010f8c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010f90:	4909      	ldr	r1, [pc, #36]	; (8010fb8 <tcp_next_iss+0x3c>)
 8010f92:	480a      	ldr	r0, [pc, #40]	; (8010fbc <tcp_next_iss+0x40>)
 8010f94:	f009 fdc0 	bl	801ab18 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010f98:	4b09      	ldr	r3, [pc, #36]	; (8010fc0 <tcp_next_iss+0x44>)
 8010f9a:	681a      	ldr	r2, [r3, #0]
 8010f9c:	4b09      	ldr	r3, [pc, #36]	; (8010fc4 <tcp_next_iss+0x48>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	4a07      	ldr	r2, [pc, #28]	; (8010fc0 <tcp_next_iss+0x44>)
 8010fa4:	6013      	str	r3, [r2, #0]
  return iss;
 8010fa6:	4b06      	ldr	r3, [pc, #24]	; (8010fc0 <tcp_next_iss+0x44>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3708      	adds	r7, #8
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	0801cfdc 	.word	0x0801cfdc
 8010fb8:	0801d6cc 	.word	0x0801d6cc
 8010fbc:	0801d020 	.word	0x0801d020
 8010fc0:	20000040 	.word	0x20000040
 8010fc4:	2001227c 	.word	0x2001227c

08010fc8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b086      	sub	sp, #24
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	4603      	mov	r3, r0
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	607a      	str	r2, [r7, #4]
 8010fd4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d106      	bne.n	8010fea <tcp_eff_send_mss_netif+0x22>
 8010fdc:	4b14      	ldr	r3, [pc, #80]	; (8011030 <tcp_eff_send_mss_netif+0x68>)
 8010fde:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010fe2:	4914      	ldr	r1, [pc, #80]	; (8011034 <tcp_eff_send_mss_netif+0x6c>)
 8010fe4:	4814      	ldr	r0, [pc, #80]	; (8011038 <tcp_eff_send_mss_netif+0x70>)
 8010fe6:	f009 fd97 	bl	801ab18 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d101      	bne.n	8010ff4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010ff0:	89fb      	ldrh	r3, [r7, #14]
 8010ff2:	e019      	b.n	8011028 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ff8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010ffa:	8afb      	ldrh	r3, [r7, #22]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d012      	beq.n	8011026 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011000:	2328      	movs	r3, #40	; 0x28
 8011002:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011004:	8afa      	ldrh	r2, [r7, #22]
 8011006:	8abb      	ldrh	r3, [r7, #20]
 8011008:	429a      	cmp	r2, r3
 801100a:	d904      	bls.n	8011016 <tcp_eff_send_mss_netif+0x4e>
 801100c:	8afa      	ldrh	r2, [r7, #22]
 801100e:	8abb      	ldrh	r3, [r7, #20]
 8011010:	1ad3      	subs	r3, r2, r3
 8011012:	b29b      	uxth	r3, r3
 8011014:	e000      	b.n	8011018 <tcp_eff_send_mss_netif+0x50>
 8011016:	2300      	movs	r3, #0
 8011018:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801101a:	8a7a      	ldrh	r2, [r7, #18]
 801101c:	89fb      	ldrh	r3, [r7, #14]
 801101e:	4293      	cmp	r3, r2
 8011020:	bf28      	it	cs
 8011022:	4613      	movcs	r3, r2
 8011024:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011026:	89fb      	ldrh	r3, [r7, #14]
}
 8011028:	4618      	mov	r0, r3
 801102a:	3718      	adds	r7, #24
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}
 8011030:	0801cfdc 	.word	0x0801cfdc
 8011034:	0801d6e8 	.word	0x0801d6e8
 8011038:	0801d020 	.word	0x0801d020

0801103c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b084      	sub	sp, #16
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d119      	bne.n	8011084 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011050:	4b10      	ldr	r3, [pc, #64]	; (8011094 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011052:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011056:	4910      	ldr	r1, [pc, #64]	; (8011098 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011058:	4810      	ldr	r0, [pc, #64]	; (801109c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801105a:	f009 fd5d 	bl	801ab18 <iprintf>

  while (pcb != NULL) {
 801105e:	e011      	b.n	8011084 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	429a      	cmp	r2, r3
 801106a:	d108      	bne.n	801107e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011072:	68f8      	ldr	r0, [r7, #12]
 8011074:	f7fe ffc6 	bl	8010004 <tcp_abort>
      pcb = next;
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	60fb      	str	r3, [r7, #12]
 801107c:	e002      	b.n	8011084 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1ea      	bne.n	8011060 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801108a:	bf00      	nop
 801108c:	bf00      	nop
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	0801cfdc 	.word	0x0801cfdc
 8011098:	0801d710 	.word	0x0801d710
 801109c:	0801d020 	.word	0x0801d020

080110a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d02a      	beq.n	8011106 <tcp_netif_ip_addr_changed+0x66>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d026      	beq.n	8011106 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80110b8:	4b15      	ldr	r3, [pc, #84]	; (8011110 <tcp_netif_ip_addr_changed+0x70>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4619      	mov	r1, r3
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f7ff ffbc 	bl	801103c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80110c4:	4b13      	ldr	r3, [pc, #76]	; (8011114 <tcp_netif_ip_addr_changed+0x74>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4619      	mov	r1, r3
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7ff ffb6 	bl	801103c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d017      	beq.n	8011106 <tcp_netif_ip_addr_changed+0x66>
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d013      	beq.n	8011106 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80110de:	4b0e      	ldr	r3, [pc, #56]	; (8011118 <tcp_netif_ip_addr_changed+0x78>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	60fb      	str	r3, [r7, #12]
 80110e4:	e00c      	b.n	8011100 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d103      	bne.n	80110fa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	681a      	ldr	r2, [r3, #0]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	60fb      	str	r3, [r7, #12]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1ef      	bne.n	80110e6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011106:	bf00      	nop
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20012288 	.word	0x20012288
 8011114:	20012280 	.word	0x20012280
 8011118:	20012284 	.word	0x20012284

0801111c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011128:	2b00      	cmp	r3, #0
 801112a:	d007      	beq.n	801113c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011130:	4618      	mov	r0, r3
 8011132:	f7ff fc3d 	bl	80109b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2200      	movs	r2, #0
 801113a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801113c:	bf00      	nop
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011144:	b590      	push	{r4, r7, lr}
 8011146:	b08d      	sub	sp, #52	; 0x34
 8011148:	af04      	add	r7, sp, #16
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d105      	bne.n	8011160 <tcp_input+0x1c>
 8011154:	4b9b      	ldr	r3, [pc, #620]	; (80113c4 <tcp_input+0x280>)
 8011156:	2283      	movs	r2, #131	; 0x83
 8011158:	499b      	ldr	r1, [pc, #620]	; (80113c8 <tcp_input+0x284>)
 801115a:	489c      	ldr	r0, [pc, #624]	; (80113cc <tcp_input+0x288>)
 801115c:	f009 fcdc 	bl	801ab18 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	4a9a      	ldr	r2, [pc, #616]	; (80113d0 <tcp_input+0x28c>)
 8011166:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	895b      	ldrh	r3, [r3, #10]
 801116c:	2b13      	cmp	r3, #19
 801116e:	f240 83d1 	bls.w	8011914 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011172:	4b98      	ldr	r3, [pc, #608]	; (80113d4 <tcp_input+0x290>)
 8011174:	695b      	ldr	r3, [r3, #20]
 8011176:	4a97      	ldr	r2, [pc, #604]	; (80113d4 <tcp_input+0x290>)
 8011178:	6812      	ldr	r2, [r2, #0]
 801117a:	4611      	mov	r1, r2
 801117c:	4618      	mov	r0, r3
 801117e:	f007 fe6d 	bl	8018e5c <ip4_addr_isbroadcast_u32>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	f040 83c7 	bne.w	8011918 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801118a:	4b92      	ldr	r3, [pc, #584]	; (80113d4 <tcp_input+0x290>)
 801118c:	695b      	ldr	r3, [r3, #20]
 801118e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011192:	2be0      	cmp	r3, #224	; 0xe0
 8011194:	f000 83c0 	beq.w	8011918 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011198:	4b8d      	ldr	r3, [pc, #564]	; (80113d0 <tcp_input+0x28c>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	899b      	ldrh	r3, [r3, #12]
 801119e:	b29b      	uxth	r3, r3
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7fc f9ad 	bl	800d500 <lwip_htons>
 80111a6:	4603      	mov	r3, r0
 80111a8:	0b1b      	lsrs	r3, r3, #12
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80111b2:	7cbb      	ldrb	r3, [r7, #18]
 80111b4:	2b13      	cmp	r3, #19
 80111b6:	f240 83b1 	bls.w	801191c <tcp_input+0x7d8>
 80111ba:	7cbb      	ldrb	r3, [r7, #18]
 80111bc:	b29a      	uxth	r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	891b      	ldrh	r3, [r3, #8]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	f200 83aa 	bhi.w	801191c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80111c8:	7cbb      	ldrb	r3, [r7, #18]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	3b14      	subs	r3, #20
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	4b81      	ldr	r3, [pc, #516]	; (80113d8 <tcp_input+0x294>)
 80111d2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80111d4:	4b81      	ldr	r3, [pc, #516]	; (80113dc <tcp_input+0x298>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	895a      	ldrh	r2, [r3, #10]
 80111de:	7cbb      	ldrb	r3, [r7, #18]
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d309      	bcc.n	80111fa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80111e6:	4b7c      	ldr	r3, [pc, #496]	; (80113d8 <tcp_input+0x294>)
 80111e8:	881a      	ldrh	r2, [r3, #0]
 80111ea:	4b7d      	ldr	r3, [pc, #500]	; (80113e0 <tcp_input+0x29c>)
 80111ec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80111ee:	7cbb      	ldrb	r3, [r7, #18]
 80111f0:	4619      	mov	r1, r3
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f7fd ff82 	bl	800f0fc <pbuf_remove_header>
 80111f8:	e04e      	b.n	8011298 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d105      	bne.n	801120e <tcp_input+0xca>
 8011202:	4b70      	ldr	r3, [pc, #448]	; (80113c4 <tcp_input+0x280>)
 8011204:	22c2      	movs	r2, #194	; 0xc2
 8011206:	4977      	ldr	r1, [pc, #476]	; (80113e4 <tcp_input+0x2a0>)
 8011208:	4870      	ldr	r0, [pc, #448]	; (80113cc <tcp_input+0x288>)
 801120a:	f009 fc85 	bl	801ab18 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801120e:	2114      	movs	r1, #20
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7fd ff73 	bl	800f0fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	895a      	ldrh	r2, [r3, #10]
 801121a:	4b71      	ldr	r3, [pc, #452]	; (80113e0 <tcp_input+0x29c>)
 801121c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801121e:	4b6e      	ldr	r3, [pc, #440]	; (80113d8 <tcp_input+0x294>)
 8011220:	881a      	ldrh	r2, [r3, #0]
 8011222:	4b6f      	ldr	r3, [pc, #444]	; (80113e0 <tcp_input+0x29c>)
 8011224:	881b      	ldrh	r3, [r3, #0]
 8011226:	1ad3      	subs	r3, r2, r3
 8011228:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801122a:	4b6d      	ldr	r3, [pc, #436]	; (80113e0 <tcp_input+0x29c>)
 801122c:	881b      	ldrh	r3, [r3, #0]
 801122e:	4619      	mov	r1, r3
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f7fd ff63 	bl	800f0fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	895b      	ldrh	r3, [r3, #10]
 801123c:	8a3a      	ldrh	r2, [r7, #16]
 801123e:	429a      	cmp	r2, r3
 8011240:	f200 836e 	bhi.w	8011920 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	4a64      	ldr	r2, [pc, #400]	; (80113dc <tcp_input+0x298>)
 801124c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	8a3a      	ldrh	r2, [r7, #16]
 8011254:	4611      	mov	r1, r2
 8011256:	4618      	mov	r0, r3
 8011258:	f7fd ff50 	bl	800f0fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	891a      	ldrh	r2, [r3, #8]
 8011260:	8a3b      	ldrh	r3, [r7, #16]
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	b29a      	uxth	r2, r3
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	895b      	ldrh	r3, [r3, #10]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d005      	beq.n	801127e <tcp_input+0x13a>
 8011272:	4b54      	ldr	r3, [pc, #336]	; (80113c4 <tcp_input+0x280>)
 8011274:	22df      	movs	r2, #223	; 0xdf
 8011276:	495c      	ldr	r1, [pc, #368]	; (80113e8 <tcp_input+0x2a4>)
 8011278:	4854      	ldr	r0, [pc, #336]	; (80113cc <tcp_input+0x288>)
 801127a:	f009 fc4d 	bl	801ab18 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	891a      	ldrh	r2, [r3, #8]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	891b      	ldrh	r3, [r3, #8]
 8011288:	429a      	cmp	r2, r3
 801128a:	d005      	beq.n	8011298 <tcp_input+0x154>
 801128c:	4b4d      	ldr	r3, [pc, #308]	; (80113c4 <tcp_input+0x280>)
 801128e:	22e0      	movs	r2, #224	; 0xe0
 8011290:	4956      	ldr	r1, [pc, #344]	; (80113ec <tcp_input+0x2a8>)
 8011292:	484e      	ldr	r0, [pc, #312]	; (80113cc <tcp_input+0x288>)
 8011294:	f009 fc40 	bl	801ab18 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011298:	4b4d      	ldr	r3, [pc, #308]	; (80113d0 <tcp_input+0x28c>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	881b      	ldrh	r3, [r3, #0]
 801129e:	b29b      	uxth	r3, r3
 80112a0:	4a4b      	ldr	r2, [pc, #300]	; (80113d0 <tcp_input+0x28c>)
 80112a2:	6814      	ldr	r4, [r2, #0]
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7fc f92b 	bl	800d500 <lwip_htons>
 80112aa:	4603      	mov	r3, r0
 80112ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80112ae:	4b48      	ldr	r3, [pc, #288]	; (80113d0 <tcp_input+0x28c>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	885b      	ldrh	r3, [r3, #2]
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	4a46      	ldr	r2, [pc, #280]	; (80113d0 <tcp_input+0x28c>)
 80112b8:	6814      	ldr	r4, [r2, #0]
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7fc f920 	bl	800d500 <lwip_htons>
 80112c0:	4603      	mov	r3, r0
 80112c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80112c4:	4b42      	ldr	r3, [pc, #264]	; (80113d0 <tcp_input+0x28c>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	4a41      	ldr	r2, [pc, #260]	; (80113d0 <tcp_input+0x28c>)
 80112cc:	6814      	ldr	r4, [r2, #0]
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fc f92b 	bl	800d52a <lwip_htonl>
 80112d4:	4603      	mov	r3, r0
 80112d6:	6063      	str	r3, [r4, #4]
 80112d8:	6863      	ldr	r3, [r4, #4]
 80112da:	4a45      	ldr	r2, [pc, #276]	; (80113f0 <tcp_input+0x2ac>)
 80112dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80112de:	4b3c      	ldr	r3, [pc, #240]	; (80113d0 <tcp_input+0x28c>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	689b      	ldr	r3, [r3, #8]
 80112e4:	4a3a      	ldr	r2, [pc, #232]	; (80113d0 <tcp_input+0x28c>)
 80112e6:	6814      	ldr	r4, [r2, #0]
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fc f91e 	bl	800d52a <lwip_htonl>
 80112ee:	4603      	mov	r3, r0
 80112f0:	60a3      	str	r3, [r4, #8]
 80112f2:	68a3      	ldr	r3, [r4, #8]
 80112f4:	4a3f      	ldr	r2, [pc, #252]	; (80113f4 <tcp_input+0x2b0>)
 80112f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80112f8:	4b35      	ldr	r3, [pc, #212]	; (80113d0 <tcp_input+0x28c>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	89db      	ldrh	r3, [r3, #14]
 80112fe:	b29b      	uxth	r3, r3
 8011300:	4a33      	ldr	r2, [pc, #204]	; (80113d0 <tcp_input+0x28c>)
 8011302:	6814      	ldr	r4, [r2, #0]
 8011304:	4618      	mov	r0, r3
 8011306:	f7fc f8fb 	bl	800d500 <lwip_htons>
 801130a:	4603      	mov	r3, r0
 801130c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801130e:	4b30      	ldr	r3, [pc, #192]	; (80113d0 <tcp_input+0x28c>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	899b      	ldrh	r3, [r3, #12]
 8011314:	b29b      	uxth	r3, r3
 8011316:	4618      	mov	r0, r3
 8011318:	f7fc f8f2 	bl	800d500 <lwip_htons>
 801131c:	4603      	mov	r3, r0
 801131e:	b2db      	uxtb	r3, r3
 8011320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011324:	b2da      	uxtb	r2, r3
 8011326:	4b34      	ldr	r3, [pc, #208]	; (80113f8 <tcp_input+0x2b4>)
 8011328:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	891a      	ldrh	r2, [r3, #8]
 801132e:	4b33      	ldr	r3, [pc, #204]	; (80113fc <tcp_input+0x2b8>)
 8011330:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011332:	4b31      	ldr	r3, [pc, #196]	; (80113f8 <tcp_input+0x2b4>)
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	f003 0303 	and.w	r3, r3, #3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d00c      	beq.n	8011358 <tcp_input+0x214>
    tcplen++;
 801133e:	4b2f      	ldr	r3, [pc, #188]	; (80113fc <tcp_input+0x2b8>)
 8011340:	881b      	ldrh	r3, [r3, #0]
 8011342:	3301      	adds	r3, #1
 8011344:	b29a      	uxth	r2, r3
 8011346:	4b2d      	ldr	r3, [pc, #180]	; (80113fc <tcp_input+0x2b8>)
 8011348:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	891a      	ldrh	r2, [r3, #8]
 801134e:	4b2b      	ldr	r3, [pc, #172]	; (80113fc <tcp_input+0x2b8>)
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	429a      	cmp	r2, r3
 8011354:	f200 82e6 	bhi.w	8011924 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011358:	2300      	movs	r3, #0
 801135a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801135c:	4b28      	ldr	r3, [pc, #160]	; (8011400 <tcp_input+0x2bc>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	61fb      	str	r3, [r7, #28]
 8011362:	e09d      	b.n	80114a0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011364:	69fb      	ldr	r3, [r7, #28]
 8011366:	7d1b      	ldrb	r3, [r3, #20]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d105      	bne.n	8011378 <tcp_input+0x234>
 801136c:	4b15      	ldr	r3, [pc, #84]	; (80113c4 <tcp_input+0x280>)
 801136e:	22fb      	movs	r2, #251	; 0xfb
 8011370:	4924      	ldr	r1, [pc, #144]	; (8011404 <tcp_input+0x2c0>)
 8011372:	4816      	ldr	r0, [pc, #88]	; (80113cc <tcp_input+0x288>)
 8011374:	f009 fbd0 	bl	801ab18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011378:	69fb      	ldr	r3, [r7, #28]
 801137a:	7d1b      	ldrb	r3, [r3, #20]
 801137c:	2b0a      	cmp	r3, #10
 801137e:	d105      	bne.n	801138c <tcp_input+0x248>
 8011380:	4b10      	ldr	r3, [pc, #64]	; (80113c4 <tcp_input+0x280>)
 8011382:	22fc      	movs	r2, #252	; 0xfc
 8011384:	4920      	ldr	r1, [pc, #128]	; (8011408 <tcp_input+0x2c4>)
 8011386:	4811      	ldr	r0, [pc, #68]	; (80113cc <tcp_input+0x288>)
 8011388:	f009 fbc6 	bl	801ab18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	7d1b      	ldrb	r3, [r3, #20]
 8011390:	2b01      	cmp	r3, #1
 8011392:	d105      	bne.n	80113a0 <tcp_input+0x25c>
 8011394:	4b0b      	ldr	r3, [pc, #44]	; (80113c4 <tcp_input+0x280>)
 8011396:	22fd      	movs	r2, #253	; 0xfd
 8011398:	491c      	ldr	r1, [pc, #112]	; (801140c <tcp_input+0x2c8>)
 801139a:	480c      	ldr	r0, [pc, #48]	; (80113cc <tcp_input+0x288>)
 801139c:	f009 fbbc 	bl	801ab18 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	7a1b      	ldrb	r3, [r3, #8]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d033      	beq.n	8011410 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	7a1a      	ldrb	r2, [r3, #8]
 80113ac:	4b09      	ldr	r3, [pc, #36]	; (80113d4 <tcp_input+0x290>)
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80113b4:	3301      	adds	r3, #1
 80113b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d029      	beq.n	8011410 <tcp_input+0x2cc>
      prev = pcb;
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	61bb      	str	r3, [r7, #24]
      continue;
 80113c0:	e06b      	b.n	801149a <tcp_input+0x356>
 80113c2:	bf00      	nop
 80113c4:	0801d744 	.word	0x0801d744
 80113c8:	0801d778 	.word	0x0801d778
 80113cc:	0801d790 	.word	0x0801d790
 80113d0:	200122a4 	.word	0x200122a4
 80113d4:	2000ab9c 	.word	0x2000ab9c
 80113d8:	200122a8 	.word	0x200122a8
 80113dc:	200122ac 	.word	0x200122ac
 80113e0:	200122aa 	.word	0x200122aa
 80113e4:	0801d7b8 	.word	0x0801d7b8
 80113e8:	0801d7c8 	.word	0x0801d7c8
 80113ec:	0801d7d4 	.word	0x0801d7d4
 80113f0:	200122b4 	.word	0x200122b4
 80113f4:	200122b8 	.word	0x200122b8
 80113f8:	200122c0 	.word	0x200122c0
 80113fc:	200122be 	.word	0x200122be
 8011400:	20012288 	.word	0x20012288
 8011404:	0801d7f4 	.word	0x0801d7f4
 8011408:	0801d81c 	.word	0x0801d81c
 801140c:	0801d848 	.word	0x0801d848
    }

    if (pcb->remote_port == tcphdr->src &&
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	8b1a      	ldrh	r2, [r3, #24]
 8011414:	4b72      	ldr	r3, [pc, #456]	; (80115e0 <tcp_input+0x49c>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	881b      	ldrh	r3, [r3, #0]
 801141a:	b29b      	uxth	r3, r3
 801141c:	429a      	cmp	r2, r3
 801141e:	d13a      	bne.n	8011496 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	8ada      	ldrh	r2, [r3, #22]
 8011424:	4b6e      	ldr	r3, [pc, #440]	; (80115e0 <tcp_input+0x49c>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	885b      	ldrh	r3, [r3, #2]
 801142a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801142c:	429a      	cmp	r2, r3
 801142e:	d132      	bne.n	8011496 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	685a      	ldr	r2, [r3, #4]
 8011434:	4b6b      	ldr	r3, [pc, #428]	; (80115e4 <tcp_input+0x4a0>)
 8011436:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011438:	429a      	cmp	r2, r3
 801143a:	d12c      	bne.n	8011496 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	4b68      	ldr	r3, [pc, #416]	; (80115e4 <tcp_input+0x4a0>)
 8011442:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011444:	429a      	cmp	r2, r3
 8011446:	d126      	bne.n	8011496 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011448:	69fb      	ldr	r3, [r7, #28]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	69fa      	ldr	r2, [r7, #28]
 801144e:	429a      	cmp	r2, r3
 8011450:	d106      	bne.n	8011460 <tcp_input+0x31c>
 8011452:	4b65      	ldr	r3, [pc, #404]	; (80115e8 <tcp_input+0x4a4>)
 8011454:	f240 120d 	movw	r2, #269	; 0x10d
 8011458:	4964      	ldr	r1, [pc, #400]	; (80115ec <tcp_input+0x4a8>)
 801145a:	4865      	ldr	r0, [pc, #404]	; (80115f0 <tcp_input+0x4ac>)
 801145c:	f009 fb5c 	bl	801ab18 <iprintf>
      if (prev != NULL) {
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d00a      	beq.n	801147c <tcp_input+0x338>
        prev->next = pcb->next;
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	68da      	ldr	r2, [r3, #12]
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801146e:	4b61      	ldr	r3, [pc, #388]	; (80115f4 <tcp_input+0x4b0>)
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011476:	4a5f      	ldr	r2, [pc, #380]	; (80115f4 <tcp_input+0x4b0>)
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	69fa      	ldr	r2, [r7, #28]
 8011482:	429a      	cmp	r2, r3
 8011484:	d111      	bne.n	80114aa <tcp_input+0x366>
 8011486:	4b58      	ldr	r3, [pc, #352]	; (80115e8 <tcp_input+0x4a4>)
 8011488:	f240 1215 	movw	r2, #277	; 0x115
 801148c:	495a      	ldr	r1, [pc, #360]	; (80115f8 <tcp_input+0x4b4>)
 801148e:	4858      	ldr	r0, [pc, #352]	; (80115f0 <tcp_input+0x4ac>)
 8011490:	f009 fb42 	bl	801ab18 <iprintf>
      break;
 8011494:	e009      	b.n	80114aa <tcp_input+0x366>
    }
    prev = pcb;
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	61fb      	str	r3, [r7, #28]
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	f47f af5e 	bne.w	8011364 <tcp_input+0x220>
 80114a8:	e000      	b.n	80114ac <tcp_input+0x368>
      break;
 80114aa:	bf00      	nop
  }

  if (pcb == NULL) {
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	f040 80aa 	bne.w	8011608 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80114b4:	4b51      	ldr	r3, [pc, #324]	; (80115fc <tcp_input+0x4b8>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	61fb      	str	r3, [r7, #28]
 80114ba:	e03f      	b.n	801153c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80114bc:	69fb      	ldr	r3, [r7, #28]
 80114be:	7d1b      	ldrb	r3, [r3, #20]
 80114c0:	2b0a      	cmp	r3, #10
 80114c2:	d006      	beq.n	80114d2 <tcp_input+0x38e>
 80114c4:	4b48      	ldr	r3, [pc, #288]	; (80115e8 <tcp_input+0x4a4>)
 80114c6:	f240 121f 	movw	r2, #287	; 0x11f
 80114ca:	494d      	ldr	r1, [pc, #308]	; (8011600 <tcp_input+0x4bc>)
 80114cc:	4848      	ldr	r0, [pc, #288]	; (80115f0 <tcp_input+0x4ac>)
 80114ce:	f009 fb23 	bl	801ab18 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	7a1b      	ldrb	r3, [r3, #8]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d009      	beq.n	80114ee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	7a1a      	ldrb	r2, [r3, #8]
 80114de:	4b41      	ldr	r3, [pc, #260]	; (80115e4 <tcp_input+0x4a0>)
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80114e6:	3301      	adds	r3, #1
 80114e8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d122      	bne.n	8011534 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	8b1a      	ldrh	r2, [r3, #24]
 80114f2:	4b3b      	ldr	r3, [pc, #236]	; (80115e0 <tcp_input+0x49c>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	881b      	ldrh	r3, [r3, #0]
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d11b      	bne.n	8011536 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80114fe:	69fb      	ldr	r3, [r7, #28]
 8011500:	8ada      	ldrh	r2, [r3, #22]
 8011502:	4b37      	ldr	r3, [pc, #220]	; (80115e0 <tcp_input+0x49c>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	885b      	ldrh	r3, [r3, #2]
 8011508:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801150a:	429a      	cmp	r2, r3
 801150c:	d113      	bne.n	8011536 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	685a      	ldr	r2, [r3, #4]
 8011512:	4b34      	ldr	r3, [pc, #208]	; (80115e4 <tcp_input+0x4a0>)
 8011514:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011516:	429a      	cmp	r2, r3
 8011518:	d10d      	bne.n	8011536 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801151a:	69fb      	ldr	r3, [r7, #28]
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	4b31      	ldr	r3, [pc, #196]	; (80115e4 <tcp_input+0x4a0>)
 8011520:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011522:	429a      	cmp	r2, r3
 8011524:	d107      	bne.n	8011536 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011526:	69f8      	ldr	r0, [r7, #28]
 8011528:	f000 fb56 	bl	8011bd8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7fd fe6b 	bl	800f208 <pbuf_free>
        return;
 8011532:	e1fd      	b.n	8011930 <tcp_input+0x7ec>
        continue;
 8011534:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	61fb      	str	r3, [r7, #28]
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1bc      	bne.n	80114bc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011542:	2300      	movs	r3, #0
 8011544:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011546:	4b2f      	ldr	r3, [pc, #188]	; (8011604 <tcp_input+0x4c0>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	617b      	str	r3, [r7, #20]
 801154c:	e02a      	b.n	80115a4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	7a1b      	ldrb	r3, [r3, #8]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00c      	beq.n	8011570 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	7a1a      	ldrb	r2, [r3, #8]
 801155a:	4b22      	ldr	r3, [pc, #136]	; (80115e4 <tcp_input+0x4a0>)
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011562:	3301      	adds	r3, #1
 8011564:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011566:	429a      	cmp	r2, r3
 8011568:	d002      	beq.n	8011570 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	61bb      	str	r3, [r7, #24]
        continue;
 801156e:	e016      	b.n	801159e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	8ada      	ldrh	r2, [r3, #22]
 8011574:	4b1a      	ldr	r3, [pc, #104]	; (80115e0 <tcp_input+0x49c>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	885b      	ldrh	r3, [r3, #2]
 801157a:	b29b      	uxth	r3, r3
 801157c:	429a      	cmp	r2, r3
 801157e:	d10c      	bne.n	801159a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	4b17      	ldr	r3, [pc, #92]	; (80115e4 <tcp_input+0x4a0>)
 8011586:	695b      	ldr	r3, [r3, #20]
 8011588:	429a      	cmp	r2, r3
 801158a:	d00f      	beq.n	80115ac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d00d      	beq.n	80115ae <tcp_input+0x46a>
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d009      	beq.n	80115ae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	617b      	str	r3, [r7, #20]
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d1d1      	bne.n	801154e <tcp_input+0x40a>
 80115aa:	e000      	b.n	80115ae <tcp_input+0x46a>
            break;
 80115ac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d029      	beq.n	8011608 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00a      	beq.n	80115d0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	68da      	ldr	r2, [r3, #12]
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80115c2:	4b10      	ldr	r3, [pc, #64]	; (8011604 <tcp_input+0x4c0>)
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80115ca:	4a0e      	ldr	r2, [pc, #56]	; (8011604 <tcp_input+0x4c0>)
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80115d0:	6978      	ldr	r0, [r7, #20]
 80115d2:	f000 fa03 	bl	80119dc <tcp_listen_input>
      }
      pbuf_free(p);
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7fd fe16 	bl	800f208 <pbuf_free>
      return;
 80115dc:	e1a8      	b.n	8011930 <tcp_input+0x7ec>
 80115de:	bf00      	nop
 80115e0:	200122a4 	.word	0x200122a4
 80115e4:	2000ab9c 	.word	0x2000ab9c
 80115e8:	0801d744 	.word	0x0801d744
 80115ec:	0801d870 	.word	0x0801d870
 80115f0:	0801d790 	.word	0x0801d790
 80115f4:	20012288 	.word	0x20012288
 80115f8:	0801d89c 	.word	0x0801d89c
 80115fc:	2001228c 	.word	0x2001228c
 8011600:	0801d8c8 	.word	0x0801d8c8
 8011604:	20012284 	.word	0x20012284
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011608:	69fb      	ldr	r3, [r7, #28]
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 8158 	beq.w	80118c0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011610:	4b95      	ldr	r3, [pc, #596]	; (8011868 <tcp_input+0x724>)
 8011612:	2200      	movs	r2, #0
 8011614:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	891a      	ldrh	r2, [r3, #8]
 801161a:	4b93      	ldr	r3, [pc, #588]	; (8011868 <tcp_input+0x724>)
 801161c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801161e:	4a92      	ldr	r2, [pc, #584]	; (8011868 <tcp_input+0x724>)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011624:	4b91      	ldr	r3, [pc, #580]	; (801186c <tcp_input+0x728>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4a8f      	ldr	r2, [pc, #572]	; (8011868 <tcp_input+0x724>)
 801162a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801162c:	4b90      	ldr	r3, [pc, #576]	; (8011870 <tcp_input+0x72c>)
 801162e:	2200      	movs	r2, #0
 8011630:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011632:	4b90      	ldr	r3, [pc, #576]	; (8011874 <tcp_input+0x730>)
 8011634:	2200      	movs	r2, #0
 8011636:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011638:	4b8f      	ldr	r3, [pc, #572]	; (8011878 <tcp_input+0x734>)
 801163a:	2200      	movs	r2, #0
 801163c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801163e:	4b8f      	ldr	r3, [pc, #572]	; (801187c <tcp_input+0x738>)
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	f003 0308 	and.w	r3, r3, #8
 8011646:	2b00      	cmp	r3, #0
 8011648:	d006      	beq.n	8011658 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	7b5b      	ldrb	r3, [r3, #13]
 801164e:	f043 0301 	orr.w	r3, r3, #1
 8011652:	b2da      	uxtb	r2, r3
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801165c:	2b00      	cmp	r3, #0
 801165e:	d017      	beq.n	8011690 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011660:	69f8      	ldr	r0, [r7, #28]
 8011662:	f7ff f929 	bl	80108b8 <tcp_process_refused_data>
 8011666:	4603      	mov	r3, r0
 8011668:	f113 0f0d 	cmn.w	r3, #13
 801166c:	d007      	beq.n	801167e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00c      	beq.n	8011690 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011676:	4b82      	ldr	r3, [pc, #520]	; (8011880 <tcp_input+0x73c>)
 8011678:	881b      	ldrh	r3, [r3, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d008      	beq.n	8011690 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011682:	2b00      	cmp	r3, #0
 8011684:	f040 80e3 	bne.w	801184e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011688:	69f8      	ldr	r0, [r7, #28]
 801168a:	f003 f9ad 	bl	80149e8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801168e:	e0de      	b.n	801184e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011690:	4a7c      	ldr	r2, [pc, #496]	; (8011884 <tcp_input+0x740>)
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011696:	69f8      	ldr	r0, [r7, #28]
 8011698:	f000 fb18 	bl	8011ccc <tcp_process>
 801169c:	4603      	mov	r3, r0
 801169e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80116a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80116a4:	f113 0f0d 	cmn.w	r3, #13
 80116a8:	f000 80d3 	beq.w	8011852 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80116ac:	4b71      	ldr	r3, [pc, #452]	; (8011874 <tcp_input+0x730>)
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	f003 0308 	and.w	r3, r3, #8
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d015      	beq.n	80116e4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d008      	beq.n	80116d4 <tcp_input+0x590>
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116c8:	69fa      	ldr	r2, [r7, #28]
 80116ca:	6912      	ldr	r2, [r2, #16]
 80116cc:	f06f 010d 	mvn.w	r1, #13
 80116d0:	4610      	mov	r0, r2
 80116d2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80116d4:	69f9      	ldr	r1, [r7, #28]
 80116d6:	486c      	ldr	r0, [pc, #432]	; (8011888 <tcp_input+0x744>)
 80116d8:	f7ff fbbc 	bl	8010e54 <tcp_pcb_remove>
        tcp_free(pcb);
 80116dc:	69f8      	ldr	r0, [r7, #28]
 80116de:	f7fe f9a9 	bl	800fa34 <tcp_free>
 80116e2:	e0da      	b.n	801189a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80116e4:	2300      	movs	r3, #0
 80116e6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80116e8:	4b63      	ldr	r3, [pc, #396]	; (8011878 <tcp_input+0x734>)
 80116ea:	881b      	ldrh	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d01d      	beq.n	801172c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80116f0:	4b61      	ldr	r3, [pc, #388]	; (8011878 <tcp_input+0x734>)
 80116f2:	881b      	ldrh	r3, [r3, #0]
 80116f4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80116f6:	69fb      	ldr	r3, [r7, #28]
 80116f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d00a      	beq.n	8011716 <tcp_input+0x5d2>
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011706:	69fa      	ldr	r2, [r7, #28]
 8011708:	6910      	ldr	r0, [r2, #16]
 801170a:	89fa      	ldrh	r2, [r7, #14]
 801170c:	69f9      	ldr	r1, [r7, #28]
 801170e:	4798      	blx	r3
 8011710:	4603      	mov	r3, r0
 8011712:	74fb      	strb	r3, [r7, #19]
 8011714:	e001      	b.n	801171a <tcp_input+0x5d6>
 8011716:	2300      	movs	r3, #0
 8011718:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801171a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801171e:	f113 0f0d 	cmn.w	r3, #13
 8011722:	f000 8098 	beq.w	8011856 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011726:	4b54      	ldr	r3, [pc, #336]	; (8011878 <tcp_input+0x734>)
 8011728:	2200      	movs	r2, #0
 801172a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801172c:	69f8      	ldr	r0, [r7, #28]
 801172e:	f000 f915 	bl	801195c <tcp_input_delayed_close>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	f040 8090 	bne.w	801185a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801173a:	4b4d      	ldr	r3, [pc, #308]	; (8011870 <tcp_input+0x72c>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d041      	beq.n	80117c6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011746:	2b00      	cmp	r3, #0
 8011748:	d006      	beq.n	8011758 <tcp_input+0x614>
 801174a:	4b50      	ldr	r3, [pc, #320]	; (801188c <tcp_input+0x748>)
 801174c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011750:	494f      	ldr	r1, [pc, #316]	; (8011890 <tcp_input+0x74c>)
 8011752:	4850      	ldr	r0, [pc, #320]	; (8011894 <tcp_input+0x750>)
 8011754:	f009 f9e0 	bl	801ab18 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	8b5b      	ldrh	r3, [r3, #26]
 801175c:	f003 0310 	and.w	r3, r3, #16
 8011760:	2b00      	cmp	r3, #0
 8011762:	d008      	beq.n	8011776 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011764:	4b42      	ldr	r3, [pc, #264]	; (8011870 <tcp_input+0x72c>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4618      	mov	r0, r3
 801176a:	f7fd fd4d 	bl	800f208 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801176e:	69f8      	ldr	r0, [r7, #28]
 8011770:	f7fe fc48 	bl	8010004 <tcp_abort>
            goto aborted;
 8011774:	e091      	b.n	801189a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801177c:	2b00      	cmp	r3, #0
 801177e:	d00c      	beq.n	801179a <tcp_input+0x656>
 8011780:	69fb      	ldr	r3, [r7, #28]
 8011782:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	6918      	ldr	r0, [r3, #16]
 801178a:	4b39      	ldr	r3, [pc, #228]	; (8011870 <tcp_input+0x72c>)
 801178c:	681a      	ldr	r2, [r3, #0]
 801178e:	2300      	movs	r3, #0
 8011790:	69f9      	ldr	r1, [r7, #28]
 8011792:	47a0      	blx	r4
 8011794:	4603      	mov	r3, r0
 8011796:	74fb      	strb	r3, [r7, #19]
 8011798:	e008      	b.n	80117ac <tcp_input+0x668>
 801179a:	4b35      	ldr	r3, [pc, #212]	; (8011870 <tcp_input+0x72c>)
 801179c:	681a      	ldr	r2, [r3, #0]
 801179e:	2300      	movs	r3, #0
 80117a0:	69f9      	ldr	r1, [r7, #28]
 80117a2:	2000      	movs	r0, #0
 80117a4:	f7ff f95e 	bl	8010a64 <tcp_recv_null>
 80117a8:	4603      	mov	r3, r0
 80117aa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80117ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117b0:	f113 0f0d 	cmn.w	r3, #13
 80117b4:	d053      	beq.n	801185e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80117b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d003      	beq.n	80117c6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80117be:	4b2c      	ldr	r3, [pc, #176]	; (8011870 <tcp_input+0x72c>)
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80117c6:	4b2b      	ldr	r3, [pc, #172]	; (8011874 <tcp_input+0x730>)
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	f003 0320 	and.w	r3, r3, #32
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d030      	beq.n	8011834 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d009      	beq.n	80117ee <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117de:	7b5a      	ldrb	r2, [r3, #13]
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117e4:	f042 0220 	orr.w	r2, r2, #32
 80117e8:	b2d2      	uxtb	r2, r2
 80117ea:	735a      	strb	r2, [r3, #13]
 80117ec:	e022      	b.n	8011834 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80117f6:	d005      	beq.n	8011804 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80117f8:	69fb      	ldr	r3, [r7, #28]
 80117fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117fc:	3301      	adds	r3, #1
 80117fe:	b29a      	uxth	r2, r3
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801180a:	2b00      	cmp	r3, #0
 801180c:	d00b      	beq.n	8011826 <tcp_input+0x6e2>
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011814:	69fb      	ldr	r3, [r7, #28]
 8011816:	6918      	ldr	r0, [r3, #16]
 8011818:	2300      	movs	r3, #0
 801181a:	2200      	movs	r2, #0
 801181c:	69f9      	ldr	r1, [r7, #28]
 801181e:	47a0      	blx	r4
 8011820:	4603      	mov	r3, r0
 8011822:	74fb      	strb	r3, [r7, #19]
 8011824:	e001      	b.n	801182a <tcp_input+0x6e6>
 8011826:	2300      	movs	r3, #0
 8011828:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801182a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801182e:	f113 0f0d 	cmn.w	r3, #13
 8011832:	d016      	beq.n	8011862 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011834:	4b13      	ldr	r3, [pc, #76]	; (8011884 <tcp_input+0x740>)
 8011836:	2200      	movs	r2, #0
 8011838:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801183a:	69f8      	ldr	r0, [r7, #28]
 801183c:	f000 f88e 	bl	801195c <tcp_input_delayed_close>
 8011840:	4603      	mov	r3, r0
 8011842:	2b00      	cmp	r3, #0
 8011844:	d128      	bne.n	8011898 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011846:	69f8      	ldr	r0, [r7, #28]
 8011848:	f002 fac8 	bl	8013ddc <tcp_output>
 801184c:	e025      	b.n	801189a <tcp_input+0x756>
        goto aborted;
 801184e:	bf00      	nop
 8011850:	e023      	b.n	801189a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011852:	bf00      	nop
 8011854:	e021      	b.n	801189a <tcp_input+0x756>
              goto aborted;
 8011856:	bf00      	nop
 8011858:	e01f      	b.n	801189a <tcp_input+0x756>
          goto aborted;
 801185a:	bf00      	nop
 801185c:	e01d      	b.n	801189a <tcp_input+0x756>
            goto aborted;
 801185e:	bf00      	nop
 8011860:	e01b      	b.n	801189a <tcp_input+0x756>
              goto aborted;
 8011862:	bf00      	nop
 8011864:	e019      	b.n	801189a <tcp_input+0x756>
 8011866:	bf00      	nop
 8011868:	20012294 	.word	0x20012294
 801186c:	200122a4 	.word	0x200122a4
 8011870:	200122c4 	.word	0x200122c4
 8011874:	200122c1 	.word	0x200122c1
 8011878:	200122bc 	.word	0x200122bc
 801187c:	200122c0 	.word	0x200122c0
 8011880:	200122be 	.word	0x200122be
 8011884:	200122c8 	.word	0x200122c8
 8011888:	20012288 	.word	0x20012288
 801188c:	0801d744 	.word	0x0801d744
 8011890:	0801d8f8 	.word	0x0801d8f8
 8011894:	0801d790 	.word	0x0801d790
          goto aborted;
 8011898:	bf00      	nop
    tcp_input_pcb = NULL;
 801189a:	4b27      	ldr	r3, [pc, #156]	; (8011938 <tcp_input+0x7f4>)
 801189c:	2200      	movs	r2, #0
 801189e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80118a0:	4b26      	ldr	r3, [pc, #152]	; (801193c <tcp_input+0x7f8>)
 80118a2:	2200      	movs	r2, #0
 80118a4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80118a6:	4b26      	ldr	r3, [pc, #152]	; (8011940 <tcp_input+0x7fc>)
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d03f      	beq.n	801192e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80118ae:	4b24      	ldr	r3, [pc, #144]	; (8011940 <tcp_input+0x7fc>)
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fd fca8 	bl	800f208 <pbuf_free>
      inseg.p = NULL;
 80118b8:	4b21      	ldr	r3, [pc, #132]	; (8011940 <tcp_input+0x7fc>)
 80118ba:	2200      	movs	r2, #0
 80118bc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80118be:	e036      	b.n	801192e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80118c0:	4b20      	ldr	r3, [pc, #128]	; (8011944 <tcp_input+0x800>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	899b      	ldrh	r3, [r3, #12]
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7fb fe19 	bl	800d500 <lwip_htons>
 80118ce:	4603      	mov	r3, r0
 80118d0:	b2db      	uxtb	r3, r3
 80118d2:	f003 0304 	and.w	r3, r3, #4
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d118      	bne.n	801190c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118da:	4b1b      	ldr	r3, [pc, #108]	; (8011948 <tcp_input+0x804>)
 80118dc:	6819      	ldr	r1, [r3, #0]
 80118de:	4b1b      	ldr	r3, [pc, #108]	; (801194c <tcp_input+0x808>)
 80118e0:	881b      	ldrh	r3, [r3, #0]
 80118e2:	461a      	mov	r2, r3
 80118e4:	4b1a      	ldr	r3, [pc, #104]	; (8011950 <tcp_input+0x80c>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118ea:	4b16      	ldr	r3, [pc, #88]	; (8011944 <tcp_input+0x800>)
 80118ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118ee:	885b      	ldrh	r3, [r3, #2]
 80118f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118f2:	4a14      	ldr	r2, [pc, #80]	; (8011944 <tcp_input+0x800>)
 80118f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118f6:	8812      	ldrh	r2, [r2, #0]
 80118f8:	b292      	uxth	r2, r2
 80118fa:	9202      	str	r2, [sp, #8]
 80118fc:	9301      	str	r3, [sp, #4]
 80118fe:	4b15      	ldr	r3, [pc, #84]	; (8011954 <tcp_input+0x810>)
 8011900:	9300      	str	r3, [sp, #0]
 8011902:	4b15      	ldr	r3, [pc, #84]	; (8011958 <tcp_input+0x814>)
 8011904:	4602      	mov	r2, r0
 8011906:	2000      	movs	r0, #0
 8011908:	f003 f81c 	bl	8014944 <tcp_rst>
    pbuf_free(p);
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f7fd fc7b 	bl	800f208 <pbuf_free>
  return;
 8011912:	e00c      	b.n	801192e <tcp_input+0x7ea>
    goto dropped;
 8011914:	bf00      	nop
 8011916:	e006      	b.n	8011926 <tcp_input+0x7e2>
    goto dropped;
 8011918:	bf00      	nop
 801191a:	e004      	b.n	8011926 <tcp_input+0x7e2>
    goto dropped;
 801191c:	bf00      	nop
 801191e:	e002      	b.n	8011926 <tcp_input+0x7e2>
      goto dropped;
 8011920:	bf00      	nop
 8011922:	e000      	b.n	8011926 <tcp_input+0x7e2>
      goto dropped;
 8011924:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7fd fc6e 	bl	800f208 <pbuf_free>
 801192c:	e000      	b.n	8011930 <tcp_input+0x7ec>
  return;
 801192e:	bf00      	nop
}
 8011930:	3724      	adds	r7, #36	; 0x24
 8011932:	46bd      	mov	sp, r7
 8011934:	bd90      	pop	{r4, r7, pc}
 8011936:	bf00      	nop
 8011938:	200122c8 	.word	0x200122c8
 801193c:	200122c4 	.word	0x200122c4
 8011940:	20012294 	.word	0x20012294
 8011944:	200122a4 	.word	0x200122a4
 8011948:	200122b8 	.word	0x200122b8
 801194c:	200122be 	.word	0x200122be
 8011950:	200122b4 	.word	0x200122b4
 8011954:	2000abac 	.word	0x2000abac
 8011958:	2000abb0 	.word	0x2000abb0

0801195c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d106      	bne.n	8011978 <tcp_input_delayed_close+0x1c>
 801196a:	4b17      	ldr	r3, [pc, #92]	; (80119c8 <tcp_input_delayed_close+0x6c>)
 801196c:	f240 225a 	movw	r2, #602	; 0x25a
 8011970:	4916      	ldr	r1, [pc, #88]	; (80119cc <tcp_input_delayed_close+0x70>)
 8011972:	4817      	ldr	r0, [pc, #92]	; (80119d0 <tcp_input_delayed_close+0x74>)
 8011974:	f009 f8d0 	bl	801ab18 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011978:	4b16      	ldr	r3, [pc, #88]	; (80119d4 <tcp_input_delayed_close+0x78>)
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	f003 0310 	and.w	r3, r3, #16
 8011980:	2b00      	cmp	r3, #0
 8011982:	d01c      	beq.n	80119be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	8b5b      	ldrh	r3, [r3, #26]
 8011988:	f003 0310 	and.w	r3, r3, #16
 801198c:	2b00      	cmp	r3, #0
 801198e:	d10d      	bne.n	80119ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011996:	2b00      	cmp	r3, #0
 8011998:	d008      	beq.n	80119ac <tcp_input_delayed_close+0x50>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119a0:	687a      	ldr	r2, [r7, #4]
 80119a2:	6912      	ldr	r2, [r2, #16]
 80119a4:	f06f 010e 	mvn.w	r1, #14
 80119a8:	4610      	mov	r0, r2
 80119aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80119ac:	6879      	ldr	r1, [r7, #4]
 80119ae:	480a      	ldr	r0, [pc, #40]	; (80119d8 <tcp_input_delayed_close+0x7c>)
 80119b0:	f7ff fa50 	bl	8010e54 <tcp_pcb_remove>
    tcp_free(pcb);
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f7fe f83d 	bl	800fa34 <tcp_free>
    return 1;
 80119ba:	2301      	movs	r3, #1
 80119bc:	e000      	b.n	80119c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80119be:	2300      	movs	r3, #0
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3708      	adds	r7, #8
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	0801d744 	.word	0x0801d744
 80119cc:	0801d914 	.word	0x0801d914
 80119d0:	0801d790 	.word	0x0801d790
 80119d4:	200122c1 	.word	0x200122c1
 80119d8:	20012288 	.word	0x20012288

080119dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80119dc:	b590      	push	{r4, r7, lr}
 80119de:	b08b      	sub	sp, #44	; 0x2c
 80119e0:	af04      	add	r7, sp, #16
 80119e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80119e4:	4b6f      	ldr	r3, [pc, #444]	; (8011ba4 <tcp_listen_input+0x1c8>)
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	f003 0304 	and.w	r3, r3, #4
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f040 80d2 	bne.w	8011b96 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d106      	bne.n	8011a06 <tcp_listen_input+0x2a>
 80119f8:	4b6b      	ldr	r3, [pc, #428]	; (8011ba8 <tcp_listen_input+0x1cc>)
 80119fa:	f240 2281 	movw	r2, #641	; 0x281
 80119fe:	496b      	ldr	r1, [pc, #428]	; (8011bac <tcp_listen_input+0x1d0>)
 8011a00:	486b      	ldr	r0, [pc, #428]	; (8011bb0 <tcp_listen_input+0x1d4>)
 8011a02:	f009 f889 	bl	801ab18 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011a06:	4b67      	ldr	r3, [pc, #412]	; (8011ba4 <tcp_listen_input+0x1c8>)
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	f003 0310 	and.w	r3, r3, #16
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d019      	beq.n	8011a46 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a12:	4b68      	ldr	r3, [pc, #416]	; (8011bb4 <tcp_listen_input+0x1d8>)
 8011a14:	6819      	ldr	r1, [r3, #0]
 8011a16:	4b68      	ldr	r3, [pc, #416]	; (8011bb8 <tcp_listen_input+0x1dc>)
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	4b67      	ldr	r3, [pc, #412]	; (8011bbc <tcp_listen_input+0x1e0>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a22:	4b67      	ldr	r3, [pc, #412]	; (8011bc0 <tcp_listen_input+0x1e4>)
 8011a24:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a26:	885b      	ldrh	r3, [r3, #2]
 8011a28:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a2a:	4a65      	ldr	r2, [pc, #404]	; (8011bc0 <tcp_listen_input+0x1e4>)
 8011a2c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a2e:	8812      	ldrh	r2, [r2, #0]
 8011a30:	b292      	uxth	r2, r2
 8011a32:	9202      	str	r2, [sp, #8]
 8011a34:	9301      	str	r3, [sp, #4]
 8011a36:	4b63      	ldr	r3, [pc, #396]	; (8011bc4 <tcp_listen_input+0x1e8>)
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	4b63      	ldr	r3, [pc, #396]	; (8011bc8 <tcp_listen_input+0x1ec>)
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f002 ff80 	bl	8014944 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011a44:	e0a9      	b.n	8011b9a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011a46:	4b57      	ldr	r3, [pc, #348]	; (8011ba4 <tcp_listen_input+0x1c8>)
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	f003 0302 	and.w	r3, r3, #2
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f000 80a3 	beq.w	8011b9a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	7d5b      	ldrb	r3, [r3, #21]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7ff f927 	bl	8010cac <tcp_alloc>
 8011a5e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d111      	bne.n	8011a8a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	699b      	ldr	r3, [r3, #24]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d00a      	beq.n	8011a84 <tcp_listen_input+0xa8>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	699b      	ldr	r3, [r3, #24]
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	6910      	ldr	r0, [r2, #16]
 8011a76:	f04f 32ff 	mov.w	r2, #4294967295
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	4798      	blx	r3
 8011a7e:	4603      	mov	r3, r0
 8011a80:	73bb      	strb	r3, [r7, #14]
      return;
 8011a82:	e08b      	b.n	8011b9c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011a84:	23f0      	movs	r3, #240	; 0xf0
 8011a86:	73bb      	strb	r3, [r7, #14]
      return;
 8011a88:	e088      	b.n	8011b9c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011a8a:	4b50      	ldr	r3, [pc, #320]	; (8011bcc <tcp_listen_input+0x1f0>)
 8011a8c:	695a      	ldr	r2, [r3, #20]
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011a92:	4b4e      	ldr	r3, [pc, #312]	; (8011bcc <tcp_listen_input+0x1f0>)
 8011a94:	691a      	ldr	r2, [r3, #16]
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	8ada      	ldrh	r2, [r3, #22]
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011aa2:	4b47      	ldr	r3, [pc, #284]	; (8011bc0 <tcp_listen_input+0x1e4>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	881b      	ldrh	r3, [r3, #0]
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	2203      	movs	r2, #3
 8011ab2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011ab4:	4b41      	ldr	r3, [pc, #260]	; (8011bbc <tcp_listen_input+0x1e0>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	1c5a      	adds	r2, r3, #1
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011ac6:	6978      	ldr	r0, [r7, #20]
 8011ac8:	f7ff fa58 	bl	8010f7c <tcp_next_iss>
 8011acc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	693a      	ldr	r2, [r7, #16]
 8011ad2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	693a      	ldr	r2, [r7, #16]
 8011ad8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	693a      	ldr	r2, [r7, #16]
 8011ade:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	693a      	ldr	r2, [r7, #16]
 8011ae4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011ae6:	4b35      	ldr	r3, [pc, #212]	; (8011bbc <tcp_listen_input+0x1e0>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	1e5a      	subs	r2, r3, #1
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	691a      	ldr	r2, [r3, #16]
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	7a5b      	ldrb	r3, [r3, #9]
 8011b02:	f003 030c 	and.w	r3, r3, #12
 8011b06:	b2da      	uxtb	r2, r3
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	7a1a      	ldrb	r2, [r3, #8]
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011b14:	4b2e      	ldr	r3, [pc, #184]	; (8011bd0 <tcp_listen_input+0x1f4>)
 8011b16:	681a      	ldr	r2, [r3, #0]
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	60da      	str	r2, [r3, #12]
 8011b1c:	4a2c      	ldr	r2, [pc, #176]	; (8011bd0 <tcp_listen_input+0x1f4>)
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	6013      	str	r3, [r2, #0]
 8011b22:	f003 f8d1 	bl	8014cc8 <tcp_timer_needed>
 8011b26:	4b2b      	ldr	r3, [pc, #172]	; (8011bd4 <tcp_listen_input+0x1f8>)
 8011b28:	2201      	movs	r2, #1
 8011b2a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011b2c:	6978      	ldr	r0, [r7, #20]
 8011b2e:	f001 fd8f 	bl	8013650 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011b32:	4b23      	ldr	r3, [pc, #140]	; (8011bc0 <tcp_listen_input+0x1e4>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	89db      	ldrh	r3, [r3, #14]
 8011b38:	b29a      	uxth	r2, r3
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	3304      	adds	r3, #4
 8011b54:	4618      	mov	r0, r3
 8011b56:	f006 fecd 	bl	80188f4 <ip4_route>
 8011b5a:	4601      	mov	r1, r0
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	3304      	adds	r3, #4
 8011b60:	461a      	mov	r2, r3
 8011b62:	4620      	mov	r0, r4
 8011b64:	f7ff fa30 	bl	8010fc8 <tcp_eff_send_mss_netif>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011b70:	2112      	movs	r1, #18
 8011b72:	6978      	ldr	r0, [r7, #20]
 8011b74:	f002 f844 	bl	8013c00 <tcp_enqueue_flags>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d004      	beq.n	8011b8e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011b84:	2100      	movs	r1, #0
 8011b86:	6978      	ldr	r0, [r7, #20]
 8011b88:	f7fe f97e 	bl	800fe88 <tcp_abandon>
      return;
 8011b8c:	e006      	b.n	8011b9c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011b8e:	6978      	ldr	r0, [r7, #20]
 8011b90:	f002 f924 	bl	8013ddc <tcp_output>
  return;
 8011b94:	e001      	b.n	8011b9a <tcp_listen_input+0x1be>
    return;
 8011b96:	bf00      	nop
 8011b98:	e000      	b.n	8011b9c <tcp_listen_input+0x1c0>
  return;
 8011b9a:	bf00      	nop
}
 8011b9c:	371c      	adds	r7, #28
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd90      	pop	{r4, r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	200122c0 	.word	0x200122c0
 8011ba8:	0801d744 	.word	0x0801d744
 8011bac:	0801d93c 	.word	0x0801d93c
 8011bb0:	0801d790 	.word	0x0801d790
 8011bb4:	200122b8 	.word	0x200122b8
 8011bb8:	200122be 	.word	0x200122be
 8011bbc:	200122b4 	.word	0x200122b4
 8011bc0:	200122a4 	.word	0x200122a4
 8011bc4:	2000abac 	.word	0x2000abac
 8011bc8:	2000abb0 	.word	0x2000abb0
 8011bcc:	2000ab9c 	.word	0x2000ab9c
 8011bd0:	20012288 	.word	0x20012288
 8011bd4:	20012290 	.word	0x20012290

08011bd8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b086      	sub	sp, #24
 8011bdc:	af04      	add	r7, sp, #16
 8011bde:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011be0:	4b2f      	ldr	r3, [pc, #188]	; (8011ca0 <tcp_timewait_input+0xc8>)
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	f003 0304 	and.w	r3, r3, #4
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d153      	bne.n	8011c94 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d106      	bne.n	8011c00 <tcp_timewait_input+0x28>
 8011bf2:	4b2c      	ldr	r3, [pc, #176]	; (8011ca4 <tcp_timewait_input+0xcc>)
 8011bf4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011bf8:	492b      	ldr	r1, [pc, #172]	; (8011ca8 <tcp_timewait_input+0xd0>)
 8011bfa:	482c      	ldr	r0, [pc, #176]	; (8011cac <tcp_timewait_input+0xd4>)
 8011bfc:	f008 ff8c 	bl	801ab18 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011c00:	4b27      	ldr	r3, [pc, #156]	; (8011ca0 <tcp_timewait_input+0xc8>)
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	f003 0302 	and.w	r3, r3, #2
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d02a      	beq.n	8011c62 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011c0c:	4b28      	ldr	r3, [pc, #160]	; (8011cb0 <tcp_timewait_input+0xd8>)
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	db2d      	blt.n	8011c76 <tcp_timewait_input+0x9e>
 8011c1a:	4b25      	ldr	r3, [pc, #148]	; (8011cb0 <tcp_timewait_input+0xd8>)
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c22:	6879      	ldr	r1, [r7, #4]
 8011c24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c26:	440b      	add	r3, r1
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	dc23      	bgt.n	8011c76 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c2e:	4b21      	ldr	r3, [pc, #132]	; (8011cb4 <tcp_timewait_input+0xdc>)
 8011c30:	6819      	ldr	r1, [r3, #0]
 8011c32:	4b21      	ldr	r3, [pc, #132]	; (8011cb8 <tcp_timewait_input+0xe0>)
 8011c34:	881b      	ldrh	r3, [r3, #0]
 8011c36:	461a      	mov	r2, r3
 8011c38:	4b1d      	ldr	r3, [pc, #116]	; (8011cb0 <tcp_timewait_input+0xd8>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c3e:	4b1f      	ldr	r3, [pc, #124]	; (8011cbc <tcp_timewait_input+0xe4>)
 8011c40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c42:	885b      	ldrh	r3, [r3, #2]
 8011c44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c46:	4a1d      	ldr	r2, [pc, #116]	; (8011cbc <tcp_timewait_input+0xe4>)
 8011c48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c4a:	8812      	ldrh	r2, [r2, #0]
 8011c4c:	b292      	uxth	r2, r2
 8011c4e:	9202      	str	r2, [sp, #8]
 8011c50:	9301      	str	r3, [sp, #4]
 8011c52:	4b1b      	ldr	r3, [pc, #108]	; (8011cc0 <tcp_timewait_input+0xe8>)
 8011c54:	9300      	str	r3, [sp, #0]
 8011c56:	4b1b      	ldr	r3, [pc, #108]	; (8011cc4 <tcp_timewait_input+0xec>)
 8011c58:	4602      	mov	r2, r0
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f002 fe72 	bl	8014944 <tcp_rst>
      return;
 8011c60:	e01b      	b.n	8011c9a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011c62:	4b0f      	ldr	r3, [pc, #60]	; (8011ca0 <tcp_timewait_input+0xc8>)
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	f003 0301 	and.w	r3, r3, #1
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d003      	beq.n	8011c76 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011c6e:	4b16      	ldr	r3, [pc, #88]	; (8011cc8 <tcp_timewait_input+0xf0>)
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011c76:	4b10      	ldr	r3, [pc, #64]	; (8011cb8 <tcp_timewait_input+0xe0>)
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00c      	beq.n	8011c98 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8b5b      	ldrh	r3, [r3, #26]
 8011c82:	f043 0302 	orr.w	r3, r3, #2
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f002 f8a5 	bl	8013ddc <tcp_output>
  }
  return;
 8011c92:	e001      	b.n	8011c98 <tcp_timewait_input+0xc0>
    return;
 8011c94:	bf00      	nop
 8011c96:	e000      	b.n	8011c9a <tcp_timewait_input+0xc2>
  return;
 8011c98:	bf00      	nop
}
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}
 8011ca0:	200122c0 	.word	0x200122c0
 8011ca4:	0801d744 	.word	0x0801d744
 8011ca8:	0801d95c 	.word	0x0801d95c
 8011cac:	0801d790 	.word	0x0801d790
 8011cb0:	200122b4 	.word	0x200122b4
 8011cb4:	200122b8 	.word	0x200122b8
 8011cb8:	200122be 	.word	0x200122be
 8011cbc:	200122a4 	.word	0x200122a4
 8011cc0:	2000abac 	.word	0x2000abac
 8011cc4:	2000abb0 	.word	0x2000abb0
 8011cc8:	2001227c 	.word	0x2001227c

08011ccc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011ccc:	b590      	push	{r4, r7, lr}
 8011cce:	b08d      	sub	sp, #52	; 0x34
 8011cd0:	af04      	add	r7, sp, #16
 8011cd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d106      	bne.n	8011cf0 <tcp_process+0x24>
 8011ce2:	4b9d      	ldr	r3, [pc, #628]	; (8011f58 <tcp_process+0x28c>)
 8011ce4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011ce8:	499c      	ldr	r1, [pc, #624]	; (8011f5c <tcp_process+0x290>)
 8011cea:	489d      	ldr	r0, [pc, #628]	; (8011f60 <tcp_process+0x294>)
 8011cec:	f008 ff14 	bl	801ab18 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011cf0:	4b9c      	ldr	r3, [pc, #624]	; (8011f64 <tcp_process+0x298>)
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	f003 0304 	and.w	r3, r3, #4
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d04e      	beq.n	8011d9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	7d1b      	ldrb	r3, [r3, #20]
 8011d00:	2b02      	cmp	r3, #2
 8011d02:	d108      	bne.n	8011d16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d08:	4b97      	ldr	r3, [pc, #604]	; (8011f68 <tcp_process+0x29c>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d123      	bne.n	8011d58 <tcp_process+0x8c>
        acceptable = 1;
 8011d10:	2301      	movs	r3, #1
 8011d12:	76fb      	strb	r3, [r7, #27]
 8011d14:	e020      	b.n	8011d58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d1a:	4b94      	ldr	r3, [pc, #592]	; (8011f6c <tcp_process+0x2a0>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d102      	bne.n	8011d28 <tcp_process+0x5c>
        acceptable = 1;
 8011d22:	2301      	movs	r3, #1
 8011d24:	76fb      	strb	r3, [r7, #27]
 8011d26:	e017      	b.n	8011d58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011d28:	4b90      	ldr	r3, [pc, #576]	; (8011f6c <tcp_process+0x2a0>)
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	db10      	blt.n	8011d58 <tcp_process+0x8c>
 8011d36:	4b8d      	ldr	r3, [pc, #564]	; (8011f6c <tcp_process+0x2a0>)
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d3e:	6879      	ldr	r1, [r7, #4]
 8011d40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d42:	440b      	add	r3, r1
 8011d44:	1ad3      	subs	r3, r2, r3
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	dc06      	bgt.n	8011d58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	8b5b      	ldrh	r3, [r3, #26]
 8011d4e:	f043 0302 	orr.w	r3, r3, #2
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011d58:	7efb      	ldrb	r3, [r7, #27]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d01b      	beq.n	8011d96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	7d1b      	ldrb	r3, [r3, #20]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d106      	bne.n	8011d74 <tcp_process+0xa8>
 8011d66:	4b7c      	ldr	r3, [pc, #496]	; (8011f58 <tcp_process+0x28c>)
 8011d68:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011d6c:	4980      	ldr	r1, [pc, #512]	; (8011f70 <tcp_process+0x2a4>)
 8011d6e:	487c      	ldr	r0, [pc, #496]	; (8011f60 <tcp_process+0x294>)
 8011d70:	f008 fed2 	bl	801ab18 <iprintf>
      recv_flags |= TF_RESET;
 8011d74:	4b7f      	ldr	r3, [pc, #508]	; (8011f74 <tcp_process+0x2a8>)
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	f043 0308 	orr.w	r3, r3, #8
 8011d7c:	b2da      	uxtb	r2, r3
 8011d7e:	4b7d      	ldr	r3, [pc, #500]	; (8011f74 <tcp_process+0x2a8>)
 8011d80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	8b5b      	ldrh	r3, [r3, #26]
 8011d86:	f023 0301 	bic.w	r3, r3, #1
 8011d8a:	b29a      	uxth	r2, r3
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011d90:	f06f 030d 	mvn.w	r3, #13
 8011d94:	e37a      	b.n	801248c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011d96:	2300      	movs	r3, #0
 8011d98:	e378      	b.n	801248c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011d9a:	4b72      	ldr	r3, [pc, #456]	; (8011f64 <tcp_process+0x298>)
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	f003 0302 	and.w	r3, r3, #2
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d010      	beq.n	8011dc8 <tcp_process+0xfc>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	7d1b      	ldrb	r3, [r3, #20]
 8011daa:	2b02      	cmp	r3, #2
 8011dac:	d00c      	beq.n	8011dc8 <tcp_process+0xfc>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	7d1b      	ldrb	r3, [r3, #20]
 8011db2:	2b03      	cmp	r3, #3
 8011db4:	d008      	beq.n	8011dc8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	8b5b      	ldrh	r3, [r3, #26]
 8011dba:	f043 0302 	orr.w	r3, r3, #2
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	e361      	b.n	801248c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	8b5b      	ldrh	r3, [r3, #26]
 8011dcc:	f003 0310 	and.w	r3, r3, #16
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d103      	bne.n	8011ddc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011dd4:	4b68      	ldr	r3, [pc, #416]	; (8011f78 <tcp_process+0x2ac>)
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2200      	movs	r2, #0
 8011de0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2200      	movs	r2, #0
 8011de8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f001 fc2f 	bl	8013650 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	7d1b      	ldrb	r3, [r3, #20]
 8011df6:	3b02      	subs	r3, #2
 8011df8:	2b07      	cmp	r3, #7
 8011dfa:	f200 8337 	bhi.w	801246c <tcp_process+0x7a0>
 8011dfe:	a201      	add	r2, pc, #4	; (adr r2, 8011e04 <tcp_process+0x138>)
 8011e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e04:	08011e25 	.word	0x08011e25
 8011e08:	08012055 	.word	0x08012055
 8011e0c:	080121cd 	.word	0x080121cd
 8011e10:	080121f7 	.word	0x080121f7
 8011e14:	0801231b 	.word	0x0801231b
 8011e18:	080121cd 	.word	0x080121cd
 8011e1c:	080123a7 	.word	0x080123a7
 8011e20:	08012437 	.word	0x08012437
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011e24:	4b4f      	ldr	r3, [pc, #316]	; (8011f64 <tcp_process+0x298>)
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	f003 0310 	and.w	r3, r3, #16
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f000 80e4 	beq.w	8011ffa <tcp_process+0x32e>
 8011e32:	4b4c      	ldr	r3, [pc, #304]	; (8011f64 <tcp_process+0x298>)
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	f003 0302 	and.w	r3, r3, #2
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	f000 80dd 	beq.w	8011ffa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e44:	1c5a      	adds	r2, r3, #1
 8011e46:	4b48      	ldr	r3, [pc, #288]	; (8011f68 <tcp_process+0x29c>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	f040 80d5 	bne.w	8011ffa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011e50:	4b46      	ldr	r3, [pc, #280]	; (8011f6c <tcp_process+0x2a0>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	1c5a      	adds	r2, r3, #1
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011e62:	4b41      	ldr	r3, [pc, #260]	; (8011f68 <tcp_process+0x29c>)
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011e6a:	4b44      	ldr	r3, [pc, #272]	; (8011f7c <tcp_process+0x2b0>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	89db      	ldrh	r3, [r3, #14]
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011e84:	4b39      	ldr	r3, [pc, #228]	; (8011f6c <tcp_process+0x2a0>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	1e5a      	subs	r2, r3, #1
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2204      	movs	r2, #4
 8011e92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	3304      	adds	r3, #4
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f006 fd29 	bl	80188f4 <ip4_route>
 8011ea2:	4601      	mov	r1, r0
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	3304      	adds	r3, #4
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f7ff f88c 	bl	8010fc8 <tcp_eff_send_mss_netif>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ebc:	009a      	lsls	r2, r3, #2
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ec2:	005b      	lsls	r3, r3, #1
 8011ec4:	f241 111c 	movw	r1, #4380	; 0x111c
 8011ec8:	428b      	cmp	r3, r1
 8011eca:	bf38      	it	cc
 8011ecc:	460b      	movcc	r3, r1
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d204      	bcs.n	8011edc <tcp_process+0x210>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ed6:	009b      	lsls	r3, r3, #2
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	e00d      	b.n	8011ef8 <tcp_process+0x22c>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ee0:	005b      	lsls	r3, r3, #1
 8011ee2:	f241 121c 	movw	r2, #4380	; 0x111c
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d904      	bls.n	8011ef4 <tcp_process+0x228>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eee:	005b      	lsls	r3, r3, #1
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	e001      	b.n	8011ef8 <tcp_process+0x22c>
 8011ef4:	f241 131c 	movw	r3, #4380	; 0x111c
 8011ef8:	687a      	ldr	r2, [r7, #4]
 8011efa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d106      	bne.n	8011f16 <tcp_process+0x24a>
 8011f08:	4b13      	ldr	r3, [pc, #76]	; (8011f58 <tcp_process+0x28c>)
 8011f0a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011f0e:	491c      	ldr	r1, [pc, #112]	; (8011f80 <tcp_process+0x2b4>)
 8011f10:	4813      	ldr	r0, [pc, #76]	; (8011f60 <tcp_process+0x294>)
 8011f12:	f008 fe01 	bl	801ab18 <iprintf>
        --pcb->snd_queuelen;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f1c:	3b01      	subs	r3, #1
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d12a      	bne.n	8011f88 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d106      	bne.n	8011f4c <tcp_process+0x280>
 8011f3e:	4b06      	ldr	r3, [pc, #24]	; (8011f58 <tcp_process+0x28c>)
 8011f40:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011f44:	490f      	ldr	r1, [pc, #60]	; (8011f84 <tcp_process+0x2b8>)
 8011f46:	4806      	ldr	r0, [pc, #24]	; (8011f60 <tcp_process+0x294>)
 8011f48:	f008 fde6 	bl	801ab18 <iprintf>
          pcb->unsent = rseg->next;
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f54:	e01c      	b.n	8011f90 <tcp_process+0x2c4>
 8011f56:	bf00      	nop
 8011f58:	0801d744 	.word	0x0801d744
 8011f5c:	0801d97c 	.word	0x0801d97c
 8011f60:	0801d790 	.word	0x0801d790
 8011f64:	200122c0 	.word	0x200122c0
 8011f68:	200122b8 	.word	0x200122b8
 8011f6c:	200122b4 	.word	0x200122b4
 8011f70:	0801d998 	.word	0x0801d998
 8011f74:	200122c1 	.word	0x200122c1
 8011f78:	2001227c 	.word	0x2001227c
 8011f7c:	200122a4 	.word	0x200122a4
 8011f80:	0801d9b8 	.word	0x0801d9b8
 8011f84:	0801d9d0 	.word	0x0801d9d0
        } else {
          pcb->unacked = rseg->next;
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	681a      	ldr	r2, [r3, #0]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011f90:	69f8      	ldr	r0, [r7, #28]
 8011f92:	f7fe fd22 	bl	80109da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d104      	bne.n	8011fa8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fa4:	861a      	strh	r2, [r3, #48]	; 0x30
 8011fa6:	e006      	b.n	8011fb6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d00a      	beq.n	8011fd6 <tcp_process+0x30a>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	6910      	ldr	r0, [r2, #16]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	6879      	ldr	r1, [r7, #4]
 8011fce:	4798      	blx	r3
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	76bb      	strb	r3, [r7, #26]
 8011fd4:	e001      	b.n	8011fda <tcp_process+0x30e>
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011fda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011fde:	f113 0f0d 	cmn.w	r3, #13
 8011fe2:	d102      	bne.n	8011fea <tcp_process+0x31e>
          return ERR_ABRT;
 8011fe4:	f06f 030c 	mvn.w	r3, #12
 8011fe8:	e250      	b.n	801248c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	8b5b      	ldrh	r3, [r3, #26]
 8011fee:	f043 0302 	orr.w	r3, r3, #2
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011ff8:	e23a      	b.n	8012470 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011ffa:	4b98      	ldr	r3, [pc, #608]	; (801225c <tcp_process+0x590>)
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	f003 0310 	and.w	r3, r3, #16
 8012002:	2b00      	cmp	r3, #0
 8012004:	f000 8234 	beq.w	8012470 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012008:	4b95      	ldr	r3, [pc, #596]	; (8012260 <tcp_process+0x594>)
 801200a:	6819      	ldr	r1, [r3, #0]
 801200c:	4b95      	ldr	r3, [pc, #596]	; (8012264 <tcp_process+0x598>)
 801200e:	881b      	ldrh	r3, [r3, #0]
 8012010:	461a      	mov	r2, r3
 8012012:	4b95      	ldr	r3, [pc, #596]	; (8012268 <tcp_process+0x59c>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012018:	4b94      	ldr	r3, [pc, #592]	; (801226c <tcp_process+0x5a0>)
 801201a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801201c:	885b      	ldrh	r3, [r3, #2]
 801201e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012020:	4a92      	ldr	r2, [pc, #584]	; (801226c <tcp_process+0x5a0>)
 8012022:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012024:	8812      	ldrh	r2, [r2, #0]
 8012026:	b292      	uxth	r2, r2
 8012028:	9202      	str	r2, [sp, #8]
 801202a:	9301      	str	r3, [sp, #4]
 801202c:	4b90      	ldr	r3, [pc, #576]	; (8012270 <tcp_process+0x5a4>)
 801202e:	9300      	str	r3, [sp, #0]
 8012030:	4b90      	ldr	r3, [pc, #576]	; (8012274 <tcp_process+0x5a8>)
 8012032:	4602      	mov	r2, r0
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f002 fc85 	bl	8014944 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012040:	2b05      	cmp	r3, #5
 8012042:	f200 8215 	bhi.w	8012470 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2200      	movs	r2, #0
 801204a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f002 fa51 	bl	80144f4 <tcp_rexmit_rto>
      break;
 8012052:	e20d      	b.n	8012470 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012054:	4b81      	ldr	r3, [pc, #516]	; (801225c <tcp_process+0x590>)
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	f003 0310 	and.w	r3, r3, #16
 801205c:	2b00      	cmp	r3, #0
 801205e:	f000 80a1 	beq.w	80121a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012062:	4b7f      	ldr	r3, [pc, #508]	; (8012260 <tcp_process+0x594>)
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801206a:	1ad3      	subs	r3, r2, r3
 801206c:	3b01      	subs	r3, #1
 801206e:	2b00      	cmp	r3, #0
 8012070:	db7e      	blt.n	8012170 <tcp_process+0x4a4>
 8012072:	4b7b      	ldr	r3, [pc, #492]	; (8012260 <tcp_process+0x594>)
 8012074:	681a      	ldr	r2, [r3, #0]
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801207a:	1ad3      	subs	r3, r2, r3
 801207c:	2b00      	cmp	r3, #0
 801207e:	dc77      	bgt.n	8012170 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2204      	movs	r2, #4
 8012084:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801208a:	2b00      	cmp	r3, #0
 801208c:	d102      	bne.n	8012094 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801208e:	23fa      	movs	r3, #250	; 0xfa
 8012090:	76bb      	strb	r3, [r7, #26]
 8012092:	e01d      	b.n	80120d0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012098:	699b      	ldr	r3, [r3, #24]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d106      	bne.n	80120ac <tcp_process+0x3e0>
 801209e:	4b76      	ldr	r3, [pc, #472]	; (8012278 <tcp_process+0x5ac>)
 80120a0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80120a4:	4975      	ldr	r1, [pc, #468]	; (801227c <tcp_process+0x5b0>)
 80120a6:	4876      	ldr	r0, [pc, #472]	; (8012280 <tcp_process+0x5b4>)
 80120a8:	f008 fd36 	bl	801ab18 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120b0:	699b      	ldr	r3, [r3, #24]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d00a      	beq.n	80120cc <tcp_process+0x400>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120ba:	699b      	ldr	r3, [r3, #24]
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	6910      	ldr	r0, [r2, #16]
 80120c0:	2200      	movs	r2, #0
 80120c2:	6879      	ldr	r1, [r7, #4]
 80120c4:	4798      	blx	r3
 80120c6:	4603      	mov	r3, r0
 80120c8:	76bb      	strb	r3, [r7, #26]
 80120ca:	e001      	b.n	80120d0 <tcp_process+0x404>
 80120cc:	23f0      	movs	r3, #240	; 0xf0
 80120ce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80120d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d00a      	beq.n	80120ee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80120d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80120dc:	f113 0f0d 	cmn.w	r3, #13
 80120e0:	d002      	beq.n	80120e8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f7fd ff8e 	bl	8010004 <tcp_abort>
            }
            return ERR_ABRT;
 80120e8:	f06f 030c 	mvn.w	r3, #12
 80120ec:	e1ce      	b.n	801248c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f000 fae0 	bl	80126b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80120f4:	4b63      	ldr	r3, [pc, #396]	; (8012284 <tcp_process+0x5b8>)
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d005      	beq.n	8012108 <tcp_process+0x43c>
            recv_acked--;
 80120fc:	4b61      	ldr	r3, [pc, #388]	; (8012284 <tcp_process+0x5b8>)
 80120fe:	881b      	ldrh	r3, [r3, #0]
 8012100:	3b01      	subs	r3, #1
 8012102:	b29a      	uxth	r2, r3
 8012104:	4b5f      	ldr	r3, [pc, #380]	; (8012284 <tcp_process+0x5b8>)
 8012106:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801210c:	009a      	lsls	r2, r3, #2
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012112:	005b      	lsls	r3, r3, #1
 8012114:	f241 111c 	movw	r1, #4380	; 0x111c
 8012118:	428b      	cmp	r3, r1
 801211a:	bf38      	it	cc
 801211c:	460b      	movcc	r3, r1
 801211e:	429a      	cmp	r2, r3
 8012120:	d204      	bcs.n	801212c <tcp_process+0x460>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	b29b      	uxth	r3, r3
 801212a:	e00d      	b.n	8012148 <tcp_process+0x47c>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012130:	005b      	lsls	r3, r3, #1
 8012132:	f241 121c 	movw	r2, #4380	; 0x111c
 8012136:	4293      	cmp	r3, r2
 8012138:	d904      	bls.n	8012144 <tcp_process+0x478>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	b29b      	uxth	r3, r3
 8012142:	e001      	b.n	8012148 <tcp_process+0x47c>
 8012144:	f241 131c 	movw	r3, #4380	; 0x111c
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801214e:	4b4e      	ldr	r3, [pc, #312]	; (8012288 <tcp_process+0x5bc>)
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	f003 0320 	and.w	r3, r3, #32
 8012156:	2b00      	cmp	r3, #0
 8012158:	d037      	beq.n	80121ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	8b5b      	ldrh	r3, [r3, #26]
 801215e:	f043 0302 	orr.w	r3, r3, #2
 8012162:	b29a      	uxth	r2, r3
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2207      	movs	r2, #7
 801216c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801216e:	e02c      	b.n	80121ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012170:	4b3b      	ldr	r3, [pc, #236]	; (8012260 <tcp_process+0x594>)
 8012172:	6819      	ldr	r1, [r3, #0]
 8012174:	4b3b      	ldr	r3, [pc, #236]	; (8012264 <tcp_process+0x598>)
 8012176:	881b      	ldrh	r3, [r3, #0]
 8012178:	461a      	mov	r2, r3
 801217a:	4b3b      	ldr	r3, [pc, #236]	; (8012268 <tcp_process+0x59c>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012180:	4b3a      	ldr	r3, [pc, #232]	; (801226c <tcp_process+0x5a0>)
 8012182:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012184:	885b      	ldrh	r3, [r3, #2]
 8012186:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012188:	4a38      	ldr	r2, [pc, #224]	; (801226c <tcp_process+0x5a0>)
 801218a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801218c:	8812      	ldrh	r2, [r2, #0]
 801218e:	b292      	uxth	r2, r2
 8012190:	9202      	str	r2, [sp, #8]
 8012192:	9301      	str	r3, [sp, #4]
 8012194:	4b36      	ldr	r3, [pc, #216]	; (8012270 <tcp_process+0x5a4>)
 8012196:	9300      	str	r3, [sp, #0]
 8012198:	4b36      	ldr	r3, [pc, #216]	; (8012274 <tcp_process+0x5a8>)
 801219a:	4602      	mov	r2, r0
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f002 fbd1 	bl	8014944 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80121a2:	e167      	b.n	8012474 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80121a4:	4b2d      	ldr	r3, [pc, #180]	; (801225c <tcp_process+0x590>)
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	f003 0302 	and.w	r3, r3, #2
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	f000 8161 	beq.w	8012474 <tcp_process+0x7a8>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b6:	1e5a      	subs	r2, r3, #1
 80121b8:	4b2b      	ldr	r3, [pc, #172]	; (8012268 <tcp_process+0x59c>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	429a      	cmp	r2, r3
 80121be:	f040 8159 	bne.w	8012474 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f002 f9b8 	bl	8014538 <tcp_rexmit>
      break;
 80121c8:	e154      	b.n	8012474 <tcp_process+0x7a8>
 80121ca:	e153      	b.n	8012474 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 fa71 	bl	80126b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80121d2:	4b2d      	ldr	r3, [pc, #180]	; (8012288 <tcp_process+0x5bc>)
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	f003 0320 	and.w	r3, r3, #32
 80121da:	2b00      	cmp	r3, #0
 80121dc:	f000 814c 	beq.w	8012478 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	8b5b      	ldrh	r3, [r3, #26]
 80121e4:	f043 0302 	orr.w	r3, r3, #2
 80121e8:	b29a      	uxth	r2, r3
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2207      	movs	r2, #7
 80121f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80121f4:	e140      	b.n	8012478 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f000 fa5c 	bl	80126b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80121fc:	4b22      	ldr	r3, [pc, #136]	; (8012288 <tcp_process+0x5bc>)
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	f003 0320 	and.w	r3, r3, #32
 8012204:	2b00      	cmp	r3, #0
 8012206:	d071      	beq.n	80122ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012208:	4b14      	ldr	r3, [pc, #80]	; (801225c <tcp_process+0x590>)
 801220a:	781b      	ldrb	r3, [r3, #0]
 801220c:	f003 0310 	and.w	r3, r3, #16
 8012210:	2b00      	cmp	r3, #0
 8012212:	d060      	beq.n	80122d6 <tcp_process+0x60a>
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012218:	4b11      	ldr	r3, [pc, #68]	; (8012260 <tcp_process+0x594>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	429a      	cmp	r2, r3
 801221e:	d15a      	bne.n	80122d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012224:	2b00      	cmp	r3, #0
 8012226:	d156      	bne.n	80122d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	8b5b      	ldrh	r3, [r3, #26]
 801222c:	f043 0302 	orr.w	r3, r3, #2
 8012230:	b29a      	uxth	r2, r3
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f7fe fdbc 	bl	8010db4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801223c:	4b13      	ldr	r3, [pc, #76]	; (801228c <tcp_process+0x5c0>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	429a      	cmp	r2, r3
 8012244:	d105      	bne.n	8012252 <tcp_process+0x586>
 8012246:	4b11      	ldr	r3, [pc, #68]	; (801228c <tcp_process+0x5c0>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	4a0f      	ldr	r2, [pc, #60]	; (801228c <tcp_process+0x5c0>)
 801224e:	6013      	str	r3, [r2, #0]
 8012250:	e02e      	b.n	80122b0 <tcp_process+0x5e4>
 8012252:	4b0e      	ldr	r3, [pc, #56]	; (801228c <tcp_process+0x5c0>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	617b      	str	r3, [r7, #20]
 8012258:	e027      	b.n	80122aa <tcp_process+0x5de>
 801225a:	bf00      	nop
 801225c:	200122c0 	.word	0x200122c0
 8012260:	200122b8 	.word	0x200122b8
 8012264:	200122be 	.word	0x200122be
 8012268:	200122b4 	.word	0x200122b4
 801226c:	200122a4 	.word	0x200122a4
 8012270:	2000abac 	.word	0x2000abac
 8012274:	2000abb0 	.word	0x2000abb0
 8012278:	0801d744 	.word	0x0801d744
 801227c:	0801d9e4 	.word	0x0801d9e4
 8012280:	0801d790 	.word	0x0801d790
 8012284:	200122bc 	.word	0x200122bc
 8012288:	200122c1 	.word	0x200122c1
 801228c:	20012288 	.word	0x20012288
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	68db      	ldr	r3, [r3, #12]
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	429a      	cmp	r2, r3
 8012298:	d104      	bne.n	80122a4 <tcp_process+0x5d8>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	68da      	ldr	r2, [r3, #12]
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	60da      	str	r2, [r3, #12]
 80122a2:	e005      	b.n	80122b0 <tcp_process+0x5e4>
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	68db      	ldr	r3, [r3, #12]
 80122a8:	617b      	str	r3, [r7, #20]
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d1ef      	bne.n	8012290 <tcp_process+0x5c4>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2200      	movs	r2, #0
 80122b4:	60da      	str	r2, [r3, #12]
 80122b6:	4b77      	ldr	r3, [pc, #476]	; (8012494 <tcp_process+0x7c8>)
 80122b8:	2201      	movs	r2, #1
 80122ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	220a      	movs	r2, #10
 80122c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80122c2:	4b75      	ldr	r3, [pc, #468]	; (8012498 <tcp_process+0x7cc>)
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	60da      	str	r2, [r3, #12]
 80122ca:	4a73      	ldr	r2, [pc, #460]	; (8012498 <tcp_process+0x7cc>)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6013      	str	r3, [r2, #0]
 80122d0:	f002 fcfa 	bl	8014cc8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80122d4:	e0d2      	b.n	801247c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	8b5b      	ldrh	r3, [r3, #26]
 80122da:	f043 0302 	orr.w	r3, r3, #2
 80122de:	b29a      	uxth	r2, r3
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2208      	movs	r2, #8
 80122e8:	751a      	strb	r2, [r3, #20]
      break;
 80122ea:	e0c7      	b.n	801247c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80122ec:	4b6b      	ldr	r3, [pc, #428]	; (801249c <tcp_process+0x7d0>)
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	f003 0310 	and.w	r3, r3, #16
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	f000 80c1 	beq.w	801247c <tcp_process+0x7b0>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80122fe:	4b68      	ldr	r3, [pc, #416]	; (80124a0 <tcp_process+0x7d4>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	429a      	cmp	r2, r3
 8012304:	f040 80ba 	bne.w	801247c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801230c:	2b00      	cmp	r3, #0
 801230e:	f040 80b5 	bne.w	801247c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2206      	movs	r2, #6
 8012316:	751a      	strb	r2, [r3, #20]
      break;
 8012318:	e0b0      	b.n	801247c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 f9ca 	bl	80126b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012320:	4b60      	ldr	r3, [pc, #384]	; (80124a4 <tcp_process+0x7d8>)
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	f003 0320 	and.w	r3, r3, #32
 8012328:	2b00      	cmp	r3, #0
 801232a:	f000 80a9 	beq.w	8012480 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	8b5b      	ldrh	r3, [r3, #26]
 8012332:	f043 0302 	orr.w	r3, r3, #2
 8012336:	b29a      	uxth	r2, r3
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f7fe fd39 	bl	8010db4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012342:	4b59      	ldr	r3, [pc, #356]	; (80124a8 <tcp_process+0x7dc>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	429a      	cmp	r2, r3
 801234a:	d105      	bne.n	8012358 <tcp_process+0x68c>
 801234c:	4b56      	ldr	r3, [pc, #344]	; (80124a8 <tcp_process+0x7dc>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	68db      	ldr	r3, [r3, #12]
 8012352:	4a55      	ldr	r2, [pc, #340]	; (80124a8 <tcp_process+0x7dc>)
 8012354:	6013      	str	r3, [r2, #0]
 8012356:	e013      	b.n	8012380 <tcp_process+0x6b4>
 8012358:	4b53      	ldr	r3, [pc, #332]	; (80124a8 <tcp_process+0x7dc>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	613b      	str	r3, [r7, #16]
 801235e:	e00c      	b.n	801237a <tcp_process+0x6ae>
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	68db      	ldr	r3, [r3, #12]
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	429a      	cmp	r2, r3
 8012368:	d104      	bne.n	8012374 <tcp_process+0x6a8>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	68da      	ldr	r2, [r3, #12]
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	60da      	str	r2, [r3, #12]
 8012372:	e005      	b.n	8012380 <tcp_process+0x6b4>
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	613b      	str	r3, [r7, #16]
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1ef      	bne.n	8012360 <tcp_process+0x694>
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	60da      	str	r2, [r3, #12]
 8012386:	4b43      	ldr	r3, [pc, #268]	; (8012494 <tcp_process+0x7c8>)
 8012388:	2201      	movs	r2, #1
 801238a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	220a      	movs	r2, #10
 8012390:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012392:	4b41      	ldr	r3, [pc, #260]	; (8012498 <tcp_process+0x7cc>)
 8012394:	681a      	ldr	r2, [r3, #0]
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	60da      	str	r2, [r3, #12]
 801239a:	4a3f      	ldr	r2, [pc, #252]	; (8012498 <tcp_process+0x7cc>)
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6013      	str	r3, [r2, #0]
 80123a0:	f002 fc92 	bl	8014cc8 <tcp_timer_needed>
      }
      break;
 80123a4:	e06c      	b.n	8012480 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 f984 	bl	80126b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80123ac:	4b3b      	ldr	r3, [pc, #236]	; (801249c <tcp_process+0x7d0>)
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	f003 0310 	and.w	r3, r3, #16
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d065      	beq.n	8012484 <tcp_process+0x7b8>
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80123bc:	4b38      	ldr	r3, [pc, #224]	; (80124a0 <tcp_process+0x7d4>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d15f      	bne.n	8012484 <tcp_process+0x7b8>
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d15b      	bne.n	8012484 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7fe fcf1 	bl	8010db4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80123d2:	4b35      	ldr	r3, [pc, #212]	; (80124a8 <tcp_process+0x7dc>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	687a      	ldr	r2, [r7, #4]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d105      	bne.n	80123e8 <tcp_process+0x71c>
 80123dc:	4b32      	ldr	r3, [pc, #200]	; (80124a8 <tcp_process+0x7dc>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	68db      	ldr	r3, [r3, #12]
 80123e2:	4a31      	ldr	r2, [pc, #196]	; (80124a8 <tcp_process+0x7dc>)
 80123e4:	6013      	str	r3, [r2, #0]
 80123e6:	e013      	b.n	8012410 <tcp_process+0x744>
 80123e8:	4b2f      	ldr	r3, [pc, #188]	; (80124a8 <tcp_process+0x7dc>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	60fb      	str	r3, [r7, #12]
 80123ee:	e00c      	b.n	801240a <tcp_process+0x73e>
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d104      	bne.n	8012404 <tcp_process+0x738>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	68da      	ldr	r2, [r3, #12]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	60da      	str	r2, [r3, #12]
 8012402:	e005      	b.n	8012410 <tcp_process+0x744>
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	60fb      	str	r3, [r7, #12]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1ef      	bne.n	80123f0 <tcp_process+0x724>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2200      	movs	r2, #0
 8012414:	60da      	str	r2, [r3, #12]
 8012416:	4b1f      	ldr	r3, [pc, #124]	; (8012494 <tcp_process+0x7c8>)
 8012418:	2201      	movs	r2, #1
 801241a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	220a      	movs	r2, #10
 8012420:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012422:	4b1d      	ldr	r3, [pc, #116]	; (8012498 <tcp_process+0x7cc>)
 8012424:	681a      	ldr	r2, [r3, #0]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	60da      	str	r2, [r3, #12]
 801242a:	4a1b      	ldr	r2, [pc, #108]	; (8012498 <tcp_process+0x7cc>)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6013      	str	r3, [r2, #0]
 8012430:	f002 fc4a 	bl	8014cc8 <tcp_timer_needed>
      }
      break;
 8012434:	e026      	b.n	8012484 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 f93c 	bl	80126b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801243c:	4b17      	ldr	r3, [pc, #92]	; (801249c <tcp_process+0x7d0>)
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	f003 0310 	and.w	r3, r3, #16
 8012444:	2b00      	cmp	r3, #0
 8012446:	d01f      	beq.n	8012488 <tcp_process+0x7bc>
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801244c:	4b14      	ldr	r3, [pc, #80]	; (80124a0 <tcp_process+0x7d4>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	429a      	cmp	r2, r3
 8012452:	d119      	bne.n	8012488 <tcp_process+0x7bc>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012458:	2b00      	cmp	r3, #0
 801245a:	d115      	bne.n	8012488 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801245c:	4b11      	ldr	r3, [pc, #68]	; (80124a4 <tcp_process+0x7d8>)
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	f043 0310 	orr.w	r3, r3, #16
 8012464:	b2da      	uxtb	r2, r3
 8012466:	4b0f      	ldr	r3, [pc, #60]	; (80124a4 <tcp_process+0x7d8>)
 8012468:	701a      	strb	r2, [r3, #0]
      }
      break;
 801246a:	e00d      	b.n	8012488 <tcp_process+0x7bc>
    default:
      break;
 801246c:	bf00      	nop
 801246e:	e00c      	b.n	801248a <tcp_process+0x7be>
      break;
 8012470:	bf00      	nop
 8012472:	e00a      	b.n	801248a <tcp_process+0x7be>
      break;
 8012474:	bf00      	nop
 8012476:	e008      	b.n	801248a <tcp_process+0x7be>
      break;
 8012478:	bf00      	nop
 801247a:	e006      	b.n	801248a <tcp_process+0x7be>
      break;
 801247c:	bf00      	nop
 801247e:	e004      	b.n	801248a <tcp_process+0x7be>
      break;
 8012480:	bf00      	nop
 8012482:	e002      	b.n	801248a <tcp_process+0x7be>
      break;
 8012484:	bf00      	nop
 8012486:	e000      	b.n	801248a <tcp_process+0x7be>
      break;
 8012488:	bf00      	nop
  }
  return ERR_OK;
 801248a:	2300      	movs	r3, #0
}
 801248c:	4618      	mov	r0, r3
 801248e:	3724      	adds	r7, #36	; 0x24
 8012490:	46bd      	mov	sp, r7
 8012492:	bd90      	pop	{r4, r7, pc}
 8012494:	20012290 	.word	0x20012290
 8012498:	2001228c 	.word	0x2001228c
 801249c:	200122c0 	.word	0x200122c0
 80124a0:	200122b8 	.word	0x200122b8
 80124a4:	200122c1 	.word	0x200122c1
 80124a8:	20012288 	.word	0x20012288

080124ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80124ac:	b590      	push	{r4, r7, lr}
 80124ae:	b085      	sub	sp, #20
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d106      	bne.n	80124ca <tcp_oos_insert_segment+0x1e>
 80124bc:	4b3b      	ldr	r3, [pc, #236]	; (80125ac <tcp_oos_insert_segment+0x100>)
 80124be:	f240 421f 	movw	r2, #1055	; 0x41f
 80124c2:	493b      	ldr	r1, [pc, #236]	; (80125b0 <tcp_oos_insert_segment+0x104>)
 80124c4:	483b      	ldr	r0, [pc, #236]	; (80125b4 <tcp_oos_insert_segment+0x108>)
 80124c6:	f008 fb27 	bl	801ab18 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	68db      	ldr	r3, [r3, #12]
 80124ce:	899b      	ldrh	r3, [r3, #12]
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7fb f814 	bl	800d500 <lwip_htons>
 80124d8:	4603      	mov	r3, r0
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	f003 0301 	and.w	r3, r3, #1
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d028      	beq.n	8012536 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80124e4:	6838      	ldr	r0, [r7, #0]
 80124e6:	f7fe fa63 	bl	80109b0 <tcp_segs_free>
    next = NULL;
 80124ea:	2300      	movs	r3, #0
 80124ec:	603b      	str	r3, [r7, #0]
 80124ee:	e056      	b.n	801259e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	68db      	ldr	r3, [r3, #12]
 80124f4:	899b      	ldrh	r3, [r3, #12]
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fb f801 	bl	800d500 <lwip_htons>
 80124fe:	4603      	mov	r3, r0
 8012500:	b2db      	uxtb	r3, r3
 8012502:	f003 0301 	and.w	r3, r3, #1
 8012506:	2b00      	cmp	r3, #0
 8012508:	d00d      	beq.n	8012526 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	899b      	ldrh	r3, [r3, #12]
 8012510:	b29c      	uxth	r4, r3
 8012512:	2001      	movs	r0, #1
 8012514:	f7fa fff4 	bl	800d500 <lwip_htons>
 8012518:	4603      	mov	r3, r0
 801251a:	461a      	mov	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	68db      	ldr	r3, [r3, #12]
 8012520:	4322      	orrs	r2, r4
 8012522:	b292      	uxth	r2, r2
 8012524:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f7fe fa52 	bl	80109da <tcp_seg_free>
    while (next &&
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00e      	beq.n	801255a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	891b      	ldrh	r3, [r3, #8]
 8012540:	461a      	mov	r2, r3
 8012542:	4b1d      	ldr	r3, [pc, #116]	; (80125b8 <tcp_oos_insert_segment+0x10c>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	441a      	add	r2, r3
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	6839      	ldr	r1, [r7, #0]
 8012550:	8909      	ldrh	r1, [r1, #8]
 8012552:	440b      	add	r3, r1
 8012554:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012556:	2b00      	cmp	r3, #0
 8012558:	daca      	bge.n	80124f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d01e      	beq.n	801259e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	891b      	ldrh	r3, [r3, #8]
 8012564:	461a      	mov	r2, r3
 8012566:	4b14      	ldr	r3, [pc, #80]	; (80125b8 <tcp_oos_insert_segment+0x10c>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	441a      	add	r2, r3
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012574:	2b00      	cmp	r3, #0
 8012576:	dd12      	ble.n	801259e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	b29a      	uxth	r2, r3
 8012580:	4b0d      	ldr	r3, [pc, #52]	; (80125b8 <tcp_oos_insert_segment+0x10c>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	b29b      	uxth	r3, r3
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	b29a      	uxth	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	685a      	ldr	r2, [r3, #4]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	891b      	ldrh	r3, [r3, #8]
 8012596:	4619      	mov	r1, r3
 8012598:	4610      	mov	r0, r2
 801259a:	f7fc fcaf 	bl	800eefc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	683a      	ldr	r2, [r7, #0]
 80125a2:	601a      	str	r2, [r3, #0]
}
 80125a4:	bf00      	nop
 80125a6:	3714      	adds	r7, #20
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd90      	pop	{r4, r7, pc}
 80125ac:	0801d744 	.word	0x0801d744
 80125b0:	0801da04 	.word	0x0801da04
 80125b4:	0801d790 	.word	0x0801d790
 80125b8:	200122b4 	.word	0x200122b4

080125bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80125bc:	b5b0      	push	{r4, r5, r7, lr}
 80125be:	b086      	sub	sp, #24
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	60f8      	str	r0, [r7, #12]
 80125c4:	60b9      	str	r1, [r7, #8]
 80125c6:	607a      	str	r2, [r7, #4]
 80125c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80125ca:	e03e      	b.n	801264a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	4618      	mov	r0, r3
 80125dc:	f7fc fea2 	bl	800f324 <pbuf_clen>
 80125e0:	4603      	mov	r3, r0
 80125e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125ea:	8a7a      	ldrh	r2, [r7, #18]
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d906      	bls.n	80125fe <tcp_free_acked_segments+0x42>
 80125f0:	4b2a      	ldr	r3, [pc, #168]	; (801269c <tcp_free_acked_segments+0xe0>)
 80125f2:	f240 4257 	movw	r2, #1111	; 0x457
 80125f6:	492a      	ldr	r1, [pc, #168]	; (80126a0 <tcp_free_acked_segments+0xe4>)
 80125f8:	482a      	ldr	r0, [pc, #168]	; (80126a4 <tcp_free_acked_segments+0xe8>)
 80125fa:	f008 fa8d 	bl	801ab18 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012604:	8a7b      	ldrh	r3, [r7, #18]
 8012606:	1ad3      	subs	r3, r2, r3
 8012608:	b29a      	uxth	r2, r3
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	891a      	ldrh	r2, [r3, #8]
 8012614:	4b24      	ldr	r3, [pc, #144]	; (80126a8 <tcp_free_acked_segments+0xec>)
 8012616:	881b      	ldrh	r3, [r3, #0]
 8012618:	4413      	add	r3, r2
 801261a:	b29a      	uxth	r2, r3
 801261c:	4b22      	ldr	r3, [pc, #136]	; (80126a8 <tcp_free_acked_segments+0xec>)
 801261e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012620:	6978      	ldr	r0, [r7, #20]
 8012622:	f7fe f9da 	bl	80109da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801262c:	2b00      	cmp	r3, #0
 801262e:	d00c      	beq.n	801264a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d109      	bne.n	801264a <tcp_free_acked_segments+0x8e>
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d106      	bne.n	801264a <tcp_free_acked_segments+0x8e>
 801263c:	4b17      	ldr	r3, [pc, #92]	; (801269c <tcp_free_acked_segments+0xe0>)
 801263e:	f240 4261 	movw	r2, #1121	; 0x461
 8012642:	491a      	ldr	r1, [pc, #104]	; (80126ac <tcp_free_acked_segments+0xf0>)
 8012644:	4817      	ldr	r0, [pc, #92]	; (80126a4 <tcp_free_acked_segments+0xe8>)
 8012646:	f008 fa67 	bl	801ab18 <iprintf>
  while (seg_list != NULL &&
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d020      	beq.n	8012692 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	68db      	ldr	r3, [r3, #12]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	4618      	mov	r0, r3
 8012658:	f7fa ff67 	bl	800d52a <lwip_htonl>
 801265c:	4604      	mov	r4, r0
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	891b      	ldrh	r3, [r3, #8]
 8012662:	461d      	mov	r5, r3
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	899b      	ldrh	r3, [r3, #12]
 801266a:	b29b      	uxth	r3, r3
 801266c:	4618      	mov	r0, r3
 801266e:	f7fa ff47 	bl	800d500 <lwip_htons>
 8012672:	4603      	mov	r3, r0
 8012674:	b2db      	uxtb	r3, r3
 8012676:	f003 0303 	and.w	r3, r3, #3
 801267a:	2b00      	cmp	r3, #0
 801267c:	d001      	beq.n	8012682 <tcp_free_acked_segments+0xc6>
 801267e:	2301      	movs	r3, #1
 8012680:	e000      	b.n	8012684 <tcp_free_acked_segments+0xc8>
 8012682:	2300      	movs	r3, #0
 8012684:	442b      	add	r3, r5
 8012686:	18e2      	adds	r2, r4, r3
 8012688:	4b09      	ldr	r3, [pc, #36]	; (80126b0 <tcp_free_acked_segments+0xf4>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801268e:	2b00      	cmp	r3, #0
 8012690:	dd9c      	ble.n	80125cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012692:	68bb      	ldr	r3, [r7, #8]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3718      	adds	r7, #24
 8012698:	46bd      	mov	sp, r7
 801269a:	bdb0      	pop	{r4, r5, r7, pc}
 801269c:	0801d744 	.word	0x0801d744
 80126a0:	0801da2c 	.word	0x0801da2c
 80126a4:	0801d790 	.word	0x0801d790
 80126a8:	200122bc 	.word	0x200122bc
 80126ac:	0801da54 	.word	0x0801da54
 80126b0:	200122b8 	.word	0x200122b8

080126b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80126b4:	b5b0      	push	{r4, r5, r7, lr}
 80126b6:	b094      	sub	sp, #80	; 0x50
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d106      	bne.n	80126d4 <tcp_receive+0x20>
 80126c6:	4b91      	ldr	r3, [pc, #580]	; (801290c <tcp_receive+0x258>)
 80126c8:	f240 427b 	movw	r2, #1147	; 0x47b
 80126cc:	4990      	ldr	r1, [pc, #576]	; (8012910 <tcp_receive+0x25c>)
 80126ce:	4891      	ldr	r0, [pc, #580]	; (8012914 <tcp_receive+0x260>)
 80126d0:	f008 fa22 	bl	801ab18 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	7d1b      	ldrb	r3, [r3, #20]
 80126d8:	2b03      	cmp	r3, #3
 80126da:	d806      	bhi.n	80126ea <tcp_receive+0x36>
 80126dc:	4b8b      	ldr	r3, [pc, #556]	; (801290c <tcp_receive+0x258>)
 80126de:	f240 427c 	movw	r2, #1148	; 0x47c
 80126e2:	498d      	ldr	r1, [pc, #564]	; (8012918 <tcp_receive+0x264>)
 80126e4:	488b      	ldr	r0, [pc, #556]	; (8012914 <tcp_receive+0x260>)
 80126e6:	f008 fa17 	bl	801ab18 <iprintf>

  if (flags & TCP_ACK) {
 80126ea:	4b8c      	ldr	r3, [pc, #560]	; (801291c <tcp_receive+0x268>)
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	f003 0310 	and.w	r3, r3, #16
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	f000 8264 	beq.w	8012bc0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126fe:	461a      	mov	r2, r3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012704:	4413      	add	r3, r2
 8012706:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801270c:	4b84      	ldr	r3, [pc, #528]	; (8012920 <tcp_receive+0x26c>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	2b00      	cmp	r3, #0
 8012714:	db1b      	blt.n	801274e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801271a:	4b81      	ldr	r3, [pc, #516]	; (8012920 <tcp_receive+0x26c>)
 801271c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801271e:	429a      	cmp	r2, r3
 8012720:	d106      	bne.n	8012730 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012726:	4b7f      	ldr	r3, [pc, #508]	; (8012924 <tcp_receive+0x270>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	1ad3      	subs	r3, r2, r3
 801272c:	2b00      	cmp	r3, #0
 801272e:	db0e      	blt.n	801274e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012734:	4b7b      	ldr	r3, [pc, #492]	; (8012924 <tcp_receive+0x270>)
 8012736:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012738:	429a      	cmp	r2, r3
 801273a:	d125      	bne.n	8012788 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801273c:	4b7a      	ldr	r3, [pc, #488]	; (8012928 <tcp_receive+0x274>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	89db      	ldrh	r3, [r3, #14]
 8012742:	b29a      	uxth	r2, r3
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801274a:	429a      	cmp	r2, r3
 801274c:	d91c      	bls.n	8012788 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801274e:	4b76      	ldr	r3, [pc, #472]	; (8012928 <tcp_receive+0x274>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	89db      	ldrh	r3, [r3, #14]
 8012754:	b29a      	uxth	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012768:	429a      	cmp	r2, r3
 801276a:	d205      	bcs.n	8012778 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012778:	4b69      	ldr	r3, [pc, #420]	; (8012920 <tcp_receive+0x26c>)
 801277a:	681a      	ldr	r2, [r3, #0]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012780:	4b68      	ldr	r3, [pc, #416]	; (8012924 <tcp_receive+0x270>)
 8012782:	681a      	ldr	r2, [r3, #0]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012788:	4b66      	ldr	r3, [pc, #408]	; (8012924 <tcp_receive+0x270>)
 801278a:	681a      	ldr	r2, [r3, #0]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012790:	1ad3      	subs	r3, r2, r3
 8012792:	2b00      	cmp	r3, #0
 8012794:	dc58      	bgt.n	8012848 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012796:	4b65      	ldr	r3, [pc, #404]	; (801292c <tcp_receive+0x278>)
 8012798:	881b      	ldrh	r3, [r3, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d14b      	bne.n	8012836 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80127a8:	4413      	add	r3, r2
 80127aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d142      	bne.n	8012836 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	db3d      	blt.n	8012836 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80127be:	4b59      	ldr	r3, [pc, #356]	; (8012924 <tcp_receive+0x270>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d137      	bne.n	8012836 <tcp_receive+0x182>
              found_dupack = 1;
 80127c6:	2301      	movs	r3, #1
 80127c8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80127d0:	2bff      	cmp	r3, #255	; 0xff
 80127d2:	d007      	beq.n	80127e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80127da:	3301      	adds	r3, #1
 80127dc:	b2da      	uxtb	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80127ea:	2b03      	cmp	r3, #3
 80127ec:	d91b      	bls.n	8012826 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80127f8:	4413      	add	r3, r2
 80127fa:	b29a      	uxth	r2, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012802:	429a      	cmp	r2, r3
 8012804:	d30a      	bcc.n	801281c <tcp_receive+0x168>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012810:	4413      	add	r3, r2
 8012812:	b29a      	uxth	r2, r3
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801281a:	e004      	b.n	8012826 <tcp_receive+0x172>
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012822:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801282c:	2b02      	cmp	r3, #2
 801282e:	d902      	bls.n	8012836 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f001 feed 	bl	8014610 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012838:	2b00      	cmp	r3, #0
 801283a:	f040 8161 	bne.w	8012b00 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2200      	movs	r2, #0
 8012842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012846:	e15b      	b.n	8012b00 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012848:	4b36      	ldr	r3, [pc, #216]	; (8012924 <tcp_receive+0x270>)
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012850:	1ad3      	subs	r3, r2, r3
 8012852:	3b01      	subs	r3, #1
 8012854:	2b00      	cmp	r3, #0
 8012856:	f2c0 814e 	blt.w	8012af6 <tcp_receive+0x442>
 801285a:	4b32      	ldr	r3, [pc, #200]	; (8012924 <tcp_receive+0x270>)
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012862:	1ad3      	subs	r3, r2, r3
 8012864:	2b00      	cmp	r3, #0
 8012866:	f300 8146 	bgt.w	8012af6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	8b5b      	ldrh	r3, [r3, #26]
 801286e:	f003 0304 	and.w	r3, r3, #4
 8012872:	2b00      	cmp	r3, #0
 8012874:	d010      	beq.n	8012898 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	8b5b      	ldrh	r3, [r3, #26]
 801287a:	f023 0304 	bic.w	r3, r3, #4
 801287e:	b29a      	uxth	r2, r3
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2200      	movs	r2, #0
 8012894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2200      	movs	r2, #0
 801289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80128a6:	10db      	asrs	r3, r3, #3
 80128a8:	b21b      	sxth	r3, r3
 80128aa:	b29a      	uxth	r2, r3
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	4413      	add	r3, r2
 80128b6:	b29b      	uxth	r3, r3
 80128b8:	b21a      	sxth	r2, r3
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80128c0:	4b18      	ldr	r3, [pc, #96]	; (8012924 <tcp_receive+0x270>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	b29a      	uxth	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	1ad3      	subs	r3, r2, r3
 80128ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80128d8:	4b12      	ldr	r3, [pc, #72]	; (8012924 <tcp_receive+0x270>)
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	7d1b      	ldrb	r3, [r3, #20]
 80128e4:	2b03      	cmp	r3, #3
 80128e6:	f240 8097 	bls.w	8012a18 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d245      	bcs.n	8012986 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	8b5b      	ldrh	r3, [r3, #26]
 80128fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012902:	2b00      	cmp	r3, #0
 8012904:	d014      	beq.n	8012930 <tcp_receive+0x27c>
 8012906:	2301      	movs	r3, #1
 8012908:	e013      	b.n	8012932 <tcp_receive+0x27e>
 801290a:	bf00      	nop
 801290c:	0801d744 	.word	0x0801d744
 8012910:	0801da74 	.word	0x0801da74
 8012914:	0801d790 	.word	0x0801d790
 8012918:	0801da90 	.word	0x0801da90
 801291c:	200122c0 	.word	0x200122c0
 8012920:	200122b4 	.word	0x200122b4
 8012924:	200122b8 	.word	0x200122b8
 8012928:	200122a4 	.word	0x200122a4
 801292c:	200122be 	.word	0x200122be
 8012930:	2302      	movs	r3, #2
 8012932:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012936:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801293a:	b29a      	uxth	r2, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012940:	fb12 f303 	smulbb	r3, r2, r3
 8012944:	b29b      	uxth	r3, r3
 8012946:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012948:	4293      	cmp	r3, r2
 801294a:	bf28      	it	cs
 801294c:	4613      	movcs	r3, r2
 801294e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012956:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012958:	4413      	add	r3, r2
 801295a:	b29a      	uxth	r2, r3
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012962:	429a      	cmp	r2, r3
 8012964:	d309      	bcc.n	801297a <tcp_receive+0x2c6>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801296c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801296e:	4413      	add	r3, r2
 8012970:	b29a      	uxth	r2, r3
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012978:	e04e      	b.n	8012a18 <tcp_receive+0x364>
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012980:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012984:	e048      	b.n	8012a18 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801298c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801298e:	4413      	add	r3, r2
 8012990:	b29a      	uxth	r2, r3
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012998:	429a      	cmp	r2, r3
 801299a:	d309      	bcc.n	80129b0 <tcp_receive+0x2fc>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80129a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80129a4:	4413      	add	r3, r2
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80129ae:	e004      	b.n	80129ba <tcp_receive+0x306>
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d326      	bcc.n	8012a18 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80129d6:	1ad3      	subs	r3, r2, r3
 80129d8:	b29a      	uxth	r2, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129ea:	4413      	add	r3, r2
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d30a      	bcc.n	8012a0e <tcp_receive+0x35a>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a02:	4413      	add	r3, r2
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a0c:	e004      	b.n	8012a18 <tcp_receive+0x364>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a20:	4a98      	ldr	r2, [pc, #608]	; (8012c84 <tcp_receive+0x5d0>)
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f7ff fdca 	bl	80125bc <tcp_free_acked_segments>
 8012a28:	4602      	mov	r2, r0
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a36:	4a94      	ldr	r2, [pc, #592]	; (8012c88 <tcp_receive+0x5d4>)
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f7ff fdbf 	bl	80125bc <tcp_free_acked_segments>
 8012a3e:	4602      	mov	r2, r0
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d104      	bne.n	8012a56 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a52:	861a      	strh	r2, [r3, #48]	; 0x30
 8012a54:	e002      	b.n	8012a5c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d103      	bne.n	8012a72 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012a78:	4b84      	ldr	r3, [pc, #528]	; (8012c8c <tcp_receive+0x5d8>)
 8012a7a:	881b      	ldrh	r3, [r3, #0]
 8012a7c:	4413      	add	r3, r2
 8012a7e:	b29a      	uxth	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	8b5b      	ldrh	r3, [r3, #26]
 8012a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d035      	beq.n	8012afe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d118      	bne.n	8012acc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d00c      	beq.n	8012abc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7fa fd3b 	bl	800d52a <lwip_htonl>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	dc20      	bgt.n	8012afe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	8b5b      	ldrh	r3, [r3, #26]
 8012ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012aca:	e018      	b.n	8012afe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ad4:	68db      	ldr	r3, [r3, #12]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7fa fd26 	bl	800d52a <lwip_htonl>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	1ae3      	subs	r3, r4, r3
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	dc0b      	bgt.n	8012afe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	8b5b      	ldrh	r3, [r3, #26]
 8012aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012aee:	b29a      	uxth	r2, r3
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012af4:	e003      	b.n	8012afe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f001 ff76 	bl	80149e8 <tcp_send_empty_ack>
 8012afc:	e000      	b.n	8012b00 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012afe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d05b      	beq.n	8012bc0 <tcp_receive+0x50c>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b0c:	4b60      	ldr	r3, [pc, #384]	; (8012c90 <tcp_receive+0x5dc>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	1ad3      	subs	r3, r2, r3
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	da54      	bge.n	8012bc0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012b16:	4b5f      	ldr	r3, [pc, #380]	; (8012c94 <tcp_receive+0x5e0>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	1ad3      	subs	r3, r2, r3
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012b2a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012b34:	10db      	asrs	r3, r3, #3
 8012b36:	b21b      	sxth	r3, r3
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	1ad3      	subs	r3, r2, r3
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012b48:	b29a      	uxth	r2, r3
 8012b4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012b4e:	4413      	add	r3, r2
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	b21a      	sxth	r2, r3
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012b58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	da05      	bge.n	8012b6c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012b60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012b64:	425b      	negs	r3, r3
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012b6c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012b76:	109b      	asrs	r3, r3, #2
 8012b78:	b21b      	sxth	r3, r3
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	1ad3      	subs	r3, r2, r3
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012b8a:	b29a      	uxth	r2, r3
 8012b8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012b90:	4413      	add	r3, r2
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	b21a      	sxth	r2, r3
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012ba0:	10db      	asrs	r3, r3, #3
 8012ba2:	b21b      	sxth	r3, r3
 8012ba4:	b29a      	uxth	r2, r3
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	4413      	add	r3, r2
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	b21a      	sxth	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012bc0:	4b35      	ldr	r3, [pc, #212]	; (8012c98 <tcp_receive+0x5e4>)
 8012bc2:	881b      	ldrh	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f000 84e2 	beq.w	801358e <tcp_receive+0xeda>
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	7d1b      	ldrb	r3, [r3, #20]
 8012bce:	2b06      	cmp	r3, #6
 8012bd0:	f200 84dd 	bhi.w	801358e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bd8:	4b30      	ldr	r3, [pc, #192]	; (8012c9c <tcp_receive+0x5e8>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	3b01      	subs	r3, #1
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	f2c0 808f 	blt.w	8012d04 <tcp_receive+0x650>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bea:	4b2b      	ldr	r3, [pc, #172]	; (8012c98 <tcp_receive+0x5e4>)
 8012bec:	881b      	ldrh	r3, [r3, #0]
 8012bee:	4619      	mov	r1, r3
 8012bf0:	4b2a      	ldr	r3, [pc, #168]	; (8012c9c <tcp_receive+0x5e8>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	440b      	add	r3, r1
 8012bf6:	1ad3      	subs	r3, r2, r3
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f300 8082 	bgt.w	8012d04 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012c00:	4b27      	ldr	r3, [pc, #156]	; (8012ca0 <tcp_receive+0x5ec>)
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c0a:	4b24      	ldr	r3, [pc, #144]	; (8012c9c <tcp_receive+0x5e8>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	1ad3      	subs	r3, r2, r3
 8012c10:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012c12:	4b23      	ldr	r3, [pc, #140]	; (8012ca0 <tcp_receive+0x5ec>)
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d106      	bne.n	8012c28 <tcp_receive+0x574>
 8012c1a:	4b22      	ldr	r3, [pc, #136]	; (8012ca4 <tcp_receive+0x5f0>)
 8012c1c:	f240 5294 	movw	r2, #1428	; 0x594
 8012c20:	4921      	ldr	r1, [pc, #132]	; (8012ca8 <tcp_receive+0x5f4>)
 8012c22:	4822      	ldr	r0, [pc, #136]	; (8012cac <tcp_receive+0x5f8>)
 8012c24:	f007 ff78 	bl	801ab18 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012c2e:	4293      	cmp	r3, r2
 8012c30:	d906      	bls.n	8012c40 <tcp_receive+0x58c>
 8012c32:	4b1c      	ldr	r3, [pc, #112]	; (8012ca4 <tcp_receive+0x5f0>)
 8012c34:	f240 5295 	movw	r2, #1429	; 0x595
 8012c38:	491d      	ldr	r1, [pc, #116]	; (8012cb0 <tcp_receive+0x5fc>)
 8012c3a:	481c      	ldr	r0, [pc, #112]	; (8012cac <tcp_receive+0x5f8>)
 8012c3c:	f007 ff6c 	bl	801ab18 <iprintf>
      off = (u16_t)off32;
 8012c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012c46:	4b16      	ldr	r3, [pc, #88]	; (8012ca0 <tcp_receive+0x5ec>)
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	891b      	ldrh	r3, [r3, #8]
 8012c4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d906      	bls.n	8012c62 <tcp_receive+0x5ae>
 8012c54:	4b13      	ldr	r3, [pc, #76]	; (8012ca4 <tcp_receive+0x5f0>)
 8012c56:	f240 5297 	movw	r2, #1431	; 0x597
 8012c5a:	4916      	ldr	r1, [pc, #88]	; (8012cb4 <tcp_receive+0x600>)
 8012c5c:	4813      	ldr	r0, [pc, #76]	; (8012cac <tcp_receive+0x5f8>)
 8012c5e:	f007 ff5b 	bl	801ab18 <iprintf>
      inseg.len -= off;
 8012c62:	4b0f      	ldr	r3, [pc, #60]	; (8012ca0 <tcp_receive+0x5ec>)
 8012c64:	891a      	ldrh	r2, [r3, #8]
 8012c66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c6a:	1ad3      	subs	r3, r2, r3
 8012c6c:	b29a      	uxth	r2, r3
 8012c6e:	4b0c      	ldr	r3, [pc, #48]	; (8012ca0 <tcp_receive+0x5ec>)
 8012c70:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012c72:	4b0b      	ldr	r3, [pc, #44]	; (8012ca0 <tcp_receive+0x5ec>)
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	891a      	ldrh	r2, [r3, #8]
 8012c78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c7c:	1ad3      	subs	r3, r2, r3
 8012c7e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012c80:	e02a      	b.n	8012cd8 <tcp_receive+0x624>
 8012c82:	bf00      	nop
 8012c84:	0801daac 	.word	0x0801daac
 8012c88:	0801dab4 	.word	0x0801dab4
 8012c8c:	200122bc 	.word	0x200122bc
 8012c90:	200122b8 	.word	0x200122b8
 8012c94:	2001227c 	.word	0x2001227c
 8012c98:	200122be 	.word	0x200122be
 8012c9c:	200122b4 	.word	0x200122b4
 8012ca0:	20012294 	.word	0x20012294
 8012ca4:	0801d744 	.word	0x0801d744
 8012ca8:	0801dabc 	.word	0x0801dabc
 8012cac:	0801d790 	.word	0x0801d790
 8012cb0:	0801dacc 	.word	0x0801dacc
 8012cb4:	0801dadc 	.word	0x0801dadc
        off -= p->len;
 8012cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cba:	895b      	ldrh	r3, [r3, #10]
 8012cbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012cc0:	1ad3      	subs	r3, r2, r3
 8012cc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012cca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cce:	2200      	movs	r2, #0
 8012cd0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cda:	895b      	ldrh	r3, [r3, #10]
 8012cdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d8e9      	bhi.n	8012cb8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012ce4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ce8:	4619      	mov	r1, r3
 8012cea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012cec:	f7fc fa06 	bl	800f0fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cf4:	4a91      	ldr	r2, [pc, #580]	; (8012f3c <tcp_receive+0x888>)
 8012cf6:	6013      	str	r3, [r2, #0]
 8012cf8:	4b91      	ldr	r3, [pc, #580]	; (8012f40 <tcp_receive+0x88c>)
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	4a8f      	ldr	r2, [pc, #572]	; (8012f3c <tcp_receive+0x888>)
 8012cfe:	6812      	ldr	r2, [r2, #0]
 8012d00:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012d02:	e00d      	b.n	8012d20 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012d04:	4b8d      	ldr	r3, [pc, #564]	; (8012f3c <tcp_receive+0x888>)
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d0c:	1ad3      	subs	r3, r2, r3
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	da06      	bge.n	8012d20 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	8b5b      	ldrh	r3, [r3, #26]
 8012d16:	f043 0302 	orr.w	r3, r3, #2
 8012d1a:	b29a      	uxth	r2, r3
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012d20:	4b86      	ldr	r3, [pc, #536]	; (8012f3c <tcp_receive+0x888>)
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f2c0 842a 	blt.w	8013584 <tcp_receive+0xed0>
 8012d30:	4b82      	ldr	r3, [pc, #520]	; (8012f3c <tcp_receive+0x888>)
 8012d32:	681a      	ldr	r2, [r3, #0]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d38:	6879      	ldr	r1, [r7, #4]
 8012d3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d3c:	440b      	add	r3, r1
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	3301      	adds	r3, #1
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	f300 841e 	bgt.w	8013584 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d4c:	4b7b      	ldr	r3, [pc, #492]	; (8012f3c <tcp_receive+0x888>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	f040 829a 	bne.w	801328a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012d56:	4b7a      	ldr	r3, [pc, #488]	; (8012f40 <tcp_receive+0x88c>)
 8012d58:	891c      	ldrh	r4, [r3, #8]
 8012d5a:	4b79      	ldr	r3, [pc, #484]	; (8012f40 <tcp_receive+0x88c>)
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	899b      	ldrh	r3, [r3, #12]
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fa fbcc 	bl	800d500 <lwip_htons>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	f003 0303 	and.w	r3, r3, #3
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d001      	beq.n	8012d78 <tcp_receive+0x6c4>
 8012d74:	2301      	movs	r3, #1
 8012d76:	e000      	b.n	8012d7a <tcp_receive+0x6c6>
 8012d78:	2300      	movs	r3, #0
 8012d7a:	4423      	add	r3, r4
 8012d7c:	b29a      	uxth	r2, r3
 8012d7e:	4b71      	ldr	r3, [pc, #452]	; (8012f44 <tcp_receive+0x890>)
 8012d80:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d86:	4b6f      	ldr	r3, [pc, #444]	; (8012f44 <tcp_receive+0x890>)
 8012d88:	881b      	ldrh	r3, [r3, #0]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d275      	bcs.n	8012e7a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012d8e:	4b6c      	ldr	r3, [pc, #432]	; (8012f40 <tcp_receive+0x88c>)
 8012d90:	68db      	ldr	r3, [r3, #12]
 8012d92:	899b      	ldrh	r3, [r3, #12]
 8012d94:	b29b      	uxth	r3, r3
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fa fbb2 	bl	800d500 <lwip_htons>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	b2db      	uxtb	r3, r3
 8012da0:	f003 0301 	and.w	r3, r3, #1
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d01f      	beq.n	8012de8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012da8:	4b65      	ldr	r3, [pc, #404]	; (8012f40 <tcp_receive+0x88c>)
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	899b      	ldrh	r3, [r3, #12]
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	b21b      	sxth	r3, r3
 8012db2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012db6:	b21c      	sxth	r4, r3
 8012db8:	4b61      	ldr	r3, [pc, #388]	; (8012f40 <tcp_receive+0x88c>)
 8012dba:	68db      	ldr	r3, [r3, #12]
 8012dbc:	899b      	ldrh	r3, [r3, #12]
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fa fb9d 	bl	800d500 <lwip_htons>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fa fb94 	bl	800d500 <lwip_htons>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	b21b      	sxth	r3, r3
 8012ddc:	4323      	orrs	r3, r4
 8012dde:	b21a      	sxth	r2, r3
 8012de0:	4b57      	ldr	r3, [pc, #348]	; (8012f40 <tcp_receive+0x88c>)
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	b292      	uxth	r2, r2
 8012de6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012dec:	4b54      	ldr	r3, [pc, #336]	; (8012f40 <tcp_receive+0x88c>)
 8012dee:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012df0:	4b53      	ldr	r3, [pc, #332]	; (8012f40 <tcp_receive+0x88c>)
 8012df2:	68db      	ldr	r3, [r3, #12]
 8012df4:	899b      	ldrh	r3, [r3, #12]
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7fa fb81 	bl	800d500 <lwip_htons>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	f003 0302 	and.w	r3, r3, #2
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d005      	beq.n	8012e16 <tcp_receive+0x762>
            inseg.len -= 1;
 8012e0a:	4b4d      	ldr	r3, [pc, #308]	; (8012f40 <tcp_receive+0x88c>)
 8012e0c:	891b      	ldrh	r3, [r3, #8]
 8012e0e:	3b01      	subs	r3, #1
 8012e10:	b29a      	uxth	r2, r3
 8012e12:	4b4b      	ldr	r3, [pc, #300]	; (8012f40 <tcp_receive+0x88c>)
 8012e14:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012e16:	4b4a      	ldr	r3, [pc, #296]	; (8012f40 <tcp_receive+0x88c>)
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	4a49      	ldr	r2, [pc, #292]	; (8012f40 <tcp_receive+0x88c>)
 8012e1c:	8912      	ldrh	r2, [r2, #8]
 8012e1e:	4611      	mov	r1, r2
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7fc f86b 	bl	800eefc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012e26:	4b46      	ldr	r3, [pc, #280]	; (8012f40 <tcp_receive+0x88c>)
 8012e28:	891c      	ldrh	r4, [r3, #8]
 8012e2a:	4b45      	ldr	r3, [pc, #276]	; (8012f40 <tcp_receive+0x88c>)
 8012e2c:	68db      	ldr	r3, [r3, #12]
 8012e2e:	899b      	ldrh	r3, [r3, #12]
 8012e30:	b29b      	uxth	r3, r3
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7fa fb64 	bl	800d500 <lwip_htons>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	f003 0303 	and.w	r3, r3, #3
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d001      	beq.n	8012e48 <tcp_receive+0x794>
 8012e44:	2301      	movs	r3, #1
 8012e46:	e000      	b.n	8012e4a <tcp_receive+0x796>
 8012e48:	2300      	movs	r3, #0
 8012e4a:	4423      	add	r3, r4
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	4b3d      	ldr	r3, [pc, #244]	; (8012f44 <tcp_receive+0x890>)
 8012e50:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012e52:	4b3c      	ldr	r3, [pc, #240]	; (8012f44 <tcp_receive+0x890>)
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	461a      	mov	r2, r3
 8012e58:	4b38      	ldr	r3, [pc, #224]	; (8012f3c <tcp_receive+0x888>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	441a      	add	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e62:	6879      	ldr	r1, [r7, #4]
 8012e64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e66:	440b      	add	r3, r1
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d006      	beq.n	8012e7a <tcp_receive+0x7c6>
 8012e6c:	4b36      	ldr	r3, [pc, #216]	; (8012f48 <tcp_receive+0x894>)
 8012e6e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012e72:	4936      	ldr	r1, [pc, #216]	; (8012f4c <tcp_receive+0x898>)
 8012e74:	4836      	ldr	r0, [pc, #216]	; (8012f50 <tcp_receive+0x89c>)
 8012e76:	f007 fe4f 	bl	801ab18 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	f000 80e7 	beq.w	8013052 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012e84:	4b2e      	ldr	r3, [pc, #184]	; (8012f40 <tcp_receive+0x88c>)
 8012e86:	68db      	ldr	r3, [r3, #12]
 8012e88:	899b      	ldrh	r3, [r3, #12]
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7fa fb37 	bl	800d500 <lwip_htons>
 8012e92:	4603      	mov	r3, r0
 8012e94:	b2db      	uxtb	r3, r3
 8012e96:	f003 0301 	and.w	r3, r3, #1
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d010      	beq.n	8012ec0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012e9e:	e00a      	b.n	8012eb6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ea4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012eaa:	681a      	ldr	r2, [r3, #0]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f7fd fd92 	bl	80109da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d1f0      	bne.n	8012ea0 <tcp_receive+0x7ec>
 8012ebe:	e0c8      	b.n	8013052 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012ec6:	e052      	b.n	8012f6e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eca:	68db      	ldr	r3, [r3, #12]
 8012ecc:	899b      	ldrh	r3, [r3, #12]
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7fa fb15 	bl	800d500 <lwip_htons>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	f003 0301 	and.w	r3, r3, #1
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d03d      	beq.n	8012f5e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012ee2:	4b17      	ldr	r3, [pc, #92]	; (8012f40 <tcp_receive+0x88c>)
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	899b      	ldrh	r3, [r3, #12]
 8012ee8:	b29b      	uxth	r3, r3
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7fa fb08 	bl	800d500 <lwip_htons>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	b2db      	uxtb	r3, r3
 8012ef4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d130      	bne.n	8012f5e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012efc:	4b10      	ldr	r3, [pc, #64]	; (8012f40 <tcp_receive+0x88c>)
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	899b      	ldrh	r3, [r3, #12]
 8012f02:	b29c      	uxth	r4, r3
 8012f04:	2001      	movs	r0, #1
 8012f06:	f7fa fafb 	bl	800d500 <lwip_htons>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	461a      	mov	r2, r3
 8012f0e:	4b0c      	ldr	r3, [pc, #48]	; (8012f40 <tcp_receive+0x88c>)
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	4322      	orrs	r2, r4
 8012f14:	b292      	uxth	r2, r2
 8012f16:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012f18:	4b09      	ldr	r3, [pc, #36]	; (8012f40 <tcp_receive+0x88c>)
 8012f1a:	891c      	ldrh	r4, [r3, #8]
 8012f1c:	4b08      	ldr	r3, [pc, #32]	; (8012f40 <tcp_receive+0x88c>)
 8012f1e:	68db      	ldr	r3, [r3, #12]
 8012f20:	899b      	ldrh	r3, [r3, #12]
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7fa faeb 	bl	800d500 <lwip_htons>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	f003 0303 	and.w	r3, r3, #3
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d00e      	beq.n	8012f54 <tcp_receive+0x8a0>
 8012f36:	2301      	movs	r3, #1
 8012f38:	e00d      	b.n	8012f56 <tcp_receive+0x8a2>
 8012f3a:	bf00      	nop
 8012f3c:	200122b4 	.word	0x200122b4
 8012f40:	20012294 	.word	0x20012294
 8012f44:	200122be 	.word	0x200122be
 8012f48:	0801d744 	.word	0x0801d744
 8012f4c:	0801daec 	.word	0x0801daec
 8012f50:	0801d790 	.word	0x0801d790
 8012f54:	2300      	movs	r3, #0
 8012f56:	4423      	add	r3, r4
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	4b98      	ldr	r3, [pc, #608]	; (80131bc <tcp_receive+0xb08>)
 8012f5c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f60:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012f68:	6938      	ldr	r0, [r7, #16]
 8012f6a:	f7fd fd36 	bl	80109da <tcp_seg_free>
            while (next &&
 8012f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d00e      	beq.n	8012f92 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012f74:	4b91      	ldr	r3, [pc, #580]	; (80131bc <tcp_receive+0xb08>)
 8012f76:	881b      	ldrh	r3, [r3, #0]
 8012f78:	461a      	mov	r2, r3
 8012f7a:	4b91      	ldr	r3, [pc, #580]	; (80131c0 <tcp_receive+0xb0c>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	441a      	add	r2, r3
 8012f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f82:	68db      	ldr	r3, [r3, #12]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012f88:	8909      	ldrh	r1, [r1, #8]
 8012f8a:	440b      	add	r3, r1
 8012f8c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	da9a      	bge.n	8012ec8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d059      	beq.n	801304c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012f98:	4b88      	ldr	r3, [pc, #544]	; (80131bc <tcp_receive+0xb08>)
 8012f9a:	881b      	ldrh	r3, [r3, #0]
 8012f9c:	461a      	mov	r2, r3
 8012f9e:	4b88      	ldr	r3, [pc, #544]	; (80131c0 <tcp_receive+0xb0c>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	441a      	add	r2, r3
 8012fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	dd4d      	ble.n	801304c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	b29a      	uxth	r2, r3
 8012fb8:	4b81      	ldr	r3, [pc, #516]	; (80131c0 <tcp_receive+0xb0c>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	b29b      	uxth	r3, r3
 8012fbe:	1ad3      	subs	r3, r2, r3
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	4b80      	ldr	r3, [pc, #512]	; (80131c4 <tcp_receive+0xb10>)
 8012fc4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012fc6:	4b7f      	ldr	r3, [pc, #508]	; (80131c4 <tcp_receive+0xb10>)
 8012fc8:	68db      	ldr	r3, [r3, #12]
 8012fca:	899b      	ldrh	r3, [r3, #12]
 8012fcc:	b29b      	uxth	r3, r3
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7fa fa96 	bl	800d500 <lwip_htons>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	b2db      	uxtb	r3, r3
 8012fd8:	f003 0302 	and.w	r3, r3, #2
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d005      	beq.n	8012fec <tcp_receive+0x938>
                inseg.len -= 1;
 8012fe0:	4b78      	ldr	r3, [pc, #480]	; (80131c4 <tcp_receive+0xb10>)
 8012fe2:	891b      	ldrh	r3, [r3, #8]
 8012fe4:	3b01      	subs	r3, #1
 8012fe6:	b29a      	uxth	r2, r3
 8012fe8:	4b76      	ldr	r3, [pc, #472]	; (80131c4 <tcp_receive+0xb10>)
 8012fea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012fec:	4b75      	ldr	r3, [pc, #468]	; (80131c4 <tcp_receive+0xb10>)
 8012fee:	685b      	ldr	r3, [r3, #4]
 8012ff0:	4a74      	ldr	r2, [pc, #464]	; (80131c4 <tcp_receive+0xb10>)
 8012ff2:	8912      	ldrh	r2, [r2, #8]
 8012ff4:	4611      	mov	r1, r2
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7fb ff80 	bl	800eefc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012ffc:	4b71      	ldr	r3, [pc, #452]	; (80131c4 <tcp_receive+0xb10>)
 8012ffe:	891c      	ldrh	r4, [r3, #8]
 8013000:	4b70      	ldr	r3, [pc, #448]	; (80131c4 <tcp_receive+0xb10>)
 8013002:	68db      	ldr	r3, [r3, #12]
 8013004:	899b      	ldrh	r3, [r3, #12]
 8013006:	b29b      	uxth	r3, r3
 8013008:	4618      	mov	r0, r3
 801300a:	f7fa fa79 	bl	800d500 <lwip_htons>
 801300e:	4603      	mov	r3, r0
 8013010:	b2db      	uxtb	r3, r3
 8013012:	f003 0303 	and.w	r3, r3, #3
 8013016:	2b00      	cmp	r3, #0
 8013018:	d001      	beq.n	801301e <tcp_receive+0x96a>
 801301a:	2301      	movs	r3, #1
 801301c:	e000      	b.n	8013020 <tcp_receive+0x96c>
 801301e:	2300      	movs	r3, #0
 8013020:	4423      	add	r3, r4
 8013022:	b29a      	uxth	r2, r3
 8013024:	4b65      	ldr	r3, [pc, #404]	; (80131bc <tcp_receive+0xb08>)
 8013026:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013028:	4b64      	ldr	r3, [pc, #400]	; (80131bc <tcp_receive+0xb08>)
 801302a:	881b      	ldrh	r3, [r3, #0]
 801302c:	461a      	mov	r2, r3
 801302e:	4b64      	ldr	r3, [pc, #400]	; (80131c0 <tcp_receive+0xb0c>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	441a      	add	r2, r3
 8013034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013036:	68db      	ldr	r3, [r3, #12]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	429a      	cmp	r2, r3
 801303c:	d006      	beq.n	801304c <tcp_receive+0x998>
 801303e:	4b62      	ldr	r3, [pc, #392]	; (80131c8 <tcp_receive+0xb14>)
 8013040:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013044:	4961      	ldr	r1, [pc, #388]	; (80131cc <tcp_receive+0xb18>)
 8013046:	4862      	ldr	r0, [pc, #392]	; (80131d0 <tcp_receive+0xb1c>)
 8013048:	f007 fd66 	bl	801ab18 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013050:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013052:	4b5a      	ldr	r3, [pc, #360]	; (80131bc <tcp_receive+0xb08>)
 8013054:	881b      	ldrh	r3, [r3, #0]
 8013056:	461a      	mov	r2, r3
 8013058:	4b59      	ldr	r3, [pc, #356]	; (80131c0 <tcp_receive+0xb0c>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	441a      	add	r2, r3
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013066:	4b55      	ldr	r3, [pc, #340]	; (80131bc <tcp_receive+0xb08>)
 8013068:	881b      	ldrh	r3, [r3, #0]
 801306a:	429a      	cmp	r2, r3
 801306c:	d206      	bcs.n	801307c <tcp_receive+0x9c8>
 801306e:	4b56      	ldr	r3, [pc, #344]	; (80131c8 <tcp_receive+0xb14>)
 8013070:	f240 6207 	movw	r2, #1543	; 0x607
 8013074:	4957      	ldr	r1, [pc, #348]	; (80131d4 <tcp_receive+0xb20>)
 8013076:	4856      	ldr	r0, [pc, #344]	; (80131d0 <tcp_receive+0xb1c>)
 8013078:	f007 fd4e 	bl	801ab18 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013080:	4b4e      	ldr	r3, [pc, #312]	; (80131bc <tcp_receive+0xb08>)
 8013082:	881b      	ldrh	r3, [r3, #0]
 8013084:	1ad3      	subs	r3, r2, r3
 8013086:	b29a      	uxth	r2, r3
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f7fc ffc5 	bl	801001c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013092:	4b4c      	ldr	r3, [pc, #304]	; (80131c4 <tcp_receive+0xb10>)
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	891b      	ldrh	r3, [r3, #8]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d006      	beq.n	80130aa <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801309c:	4b49      	ldr	r3, [pc, #292]	; (80131c4 <tcp_receive+0xb10>)
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	4a4d      	ldr	r2, [pc, #308]	; (80131d8 <tcp_receive+0xb24>)
 80130a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80130a4:	4b47      	ldr	r3, [pc, #284]	; (80131c4 <tcp_receive+0xb10>)
 80130a6:	2200      	movs	r2, #0
 80130a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80130aa:	4b46      	ldr	r3, [pc, #280]	; (80131c4 <tcp_receive+0xb10>)
 80130ac:	68db      	ldr	r3, [r3, #12]
 80130ae:	899b      	ldrh	r3, [r3, #12]
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7fa fa24 	bl	800d500 <lwip_htons>
 80130b8:	4603      	mov	r3, r0
 80130ba:	b2db      	uxtb	r3, r3
 80130bc:	f003 0301 	and.w	r3, r3, #1
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	f000 80b8 	beq.w	8013236 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80130c6:	4b45      	ldr	r3, [pc, #276]	; (80131dc <tcp_receive+0xb28>)
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	f043 0320 	orr.w	r3, r3, #32
 80130ce:	b2da      	uxtb	r2, r3
 80130d0:	4b42      	ldr	r3, [pc, #264]	; (80131dc <tcp_receive+0xb28>)
 80130d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80130d4:	e0af      	b.n	8013236 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	4a36      	ldr	r2, [pc, #216]	; (80131c0 <tcp_receive+0xb0c>)
 80130e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	891b      	ldrh	r3, [r3, #8]
 80130ec:	461c      	mov	r4, r3
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	68db      	ldr	r3, [r3, #12]
 80130f2:	899b      	ldrh	r3, [r3, #12]
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7fa fa02 	bl	800d500 <lwip_htons>
 80130fc:	4603      	mov	r3, r0
 80130fe:	b2db      	uxtb	r3, r3
 8013100:	f003 0303 	and.w	r3, r3, #3
 8013104:	2b00      	cmp	r3, #0
 8013106:	d001      	beq.n	801310c <tcp_receive+0xa58>
 8013108:	2301      	movs	r3, #1
 801310a:	e000      	b.n	801310e <tcp_receive+0xa5a>
 801310c:	2300      	movs	r3, #0
 801310e:	191a      	adds	r2, r3, r4
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013114:	441a      	add	r2, r3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801311e:	461c      	mov	r4, r3
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	891b      	ldrh	r3, [r3, #8]
 8013124:	461d      	mov	r5, r3
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	899b      	ldrh	r3, [r3, #12]
 801312c:	b29b      	uxth	r3, r3
 801312e:	4618      	mov	r0, r3
 8013130:	f7fa f9e6 	bl	800d500 <lwip_htons>
 8013134:	4603      	mov	r3, r0
 8013136:	b2db      	uxtb	r3, r3
 8013138:	f003 0303 	and.w	r3, r3, #3
 801313c:	2b00      	cmp	r3, #0
 801313e:	d001      	beq.n	8013144 <tcp_receive+0xa90>
 8013140:	2301      	movs	r3, #1
 8013142:	e000      	b.n	8013146 <tcp_receive+0xa92>
 8013144:	2300      	movs	r3, #0
 8013146:	442b      	add	r3, r5
 8013148:	429c      	cmp	r4, r3
 801314a:	d206      	bcs.n	801315a <tcp_receive+0xaa6>
 801314c:	4b1e      	ldr	r3, [pc, #120]	; (80131c8 <tcp_receive+0xb14>)
 801314e:	f240 622b 	movw	r2, #1579	; 0x62b
 8013152:	4923      	ldr	r1, [pc, #140]	; (80131e0 <tcp_receive+0xb2c>)
 8013154:	481e      	ldr	r0, [pc, #120]	; (80131d0 <tcp_receive+0xb1c>)
 8013156:	f007 fcdf 	bl	801ab18 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	891b      	ldrh	r3, [r3, #8]
 801315e:	461c      	mov	r4, r3
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	68db      	ldr	r3, [r3, #12]
 8013164:	899b      	ldrh	r3, [r3, #12]
 8013166:	b29b      	uxth	r3, r3
 8013168:	4618      	mov	r0, r3
 801316a:	f7fa f9c9 	bl	800d500 <lwip_htons>
 801316e:	4603      	mov	r3, r0
 8013170:	b2db      	uxtb	r3, r3
 8013172:	f003 0303 	and.w	r3, r3, #3
 8013176:	2b00      	cmp	r3, #0
 8013178:	d001      	beq.n	801317e <tcp_receive+0xaca>
 801317a:	2301      	movs	r3, #1
 801317c:	e000      	b.n	8013180 <tcp_receive+0xacc>
 801317e:	2300      	movs	r3, #0
 8013180:	1919      	adds	r1, r3, r4
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013186:	b28b      	uxth	r3, r1
 8013188:	1ad3      	subs	r3, r2, r3
 801318a:	b29a      	uxth	r2, r3
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f7fc ff43 	bl	801001c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	891b      	ldrh	r3, [r3, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d028      	beq.n	80131f2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80131a0:	4b0d      	ldr	r3, [pc, #52]	; (80131d8 <tcp_receive+0xb24>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d01d      	beq.n	80131e4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80131a8:	4b0b      	ldr	r3, [pc, #44]	; (80131d8 <tcp_receive+0xb24>)
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	4619      	mov	r1, r3
 80131b2:	4610      	mov	r0, r2
 80131b4:	f7fc f8f6 	bl	800f3a4 <pbuf_cat>
 80131b8:	e018      	b.n	80131ec <tcp_receive+0xb38>
 80131ba:	bf00      	nop
 80131bc:	200122be 	.word	0x200122be
 80131c0:	200122b4 	.word	0x200122b4
 80131c4:	20012294 	.word	0x20012294
 80131c8:	0801d744 	.word	0x0801d744
 80131cc:	0801db24 	.word	0x0801db24
 80131d0:	0801d790 	.word	0x0801d790
 80131d4:	0801db60 	.word	0x0801db60
 80131d8:	200122c4 	.word	0x200122c4
 80131dc:	200122c1 	.word	0x200122c1
 80131e0:	0801db80 	.word	0x0801db80
            } else {
              recv_data = cseg->p;
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	4a70      	ldr	r2, [pc, #448]	; (80133ac <tcp_receive+0xcf8>)
 80131ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	2200      	movs	r2, #0
 80131f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	68db      	ldr	r3, [r3, #12]
 80131f6:	899b      	ldrh	r3, [r3, #12]
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fa f980 	bl	800d500 <lwip_htons>
 8013200:	4603      	mov	r3, r0
 8013202:	b2db      	uxtb	r3, r3
 8013204:	f003 0301 	and.w	r3, r3, #1
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00d      	beq.n	8013228 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801320c:	4b68      	ldr	r3, [pc, #416]	; (80133b0 <tcp_receive+0xcfc>)
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	f043 0320 	orr.w	r3, r3, #32
 8013214:	b2da      	uxtb	r2, r3
 8013216:	4b66      	ldr	r3, [pc, #408]	; (80133b0 <tcp_receive+0xcfc>)
 8013218:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	7d1b      	ldrb	r3, [r3, #20]
 801321e:	2b04      	cmp	r3, #4
 8013220:	d102      	bne.n	8013228 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2207      	movs	r2, #7
 8013226:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013230:	68b8      	ldr	r0, [r7, #8]
 8013232:	f7fd fbd2 	bl	80109da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801323a:	2b00      	cmp	r3, #0
 801323c:	d008      	beq.n	8013250 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013242:	68db      	ldr	r3, [r3, #12]
 8013244:	685a      	ldr	r2, [r3, #4]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801324a:	429a      	cmp	r2, r3
 801324c:	f43f af43 	beq.w	80130d6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	8b5b      	ldrh	r3, [r3, #26]
 8013254:	f003 0301 	and.w	r3, r3, #1
 8013258:	2b00      	cmp	r3, #0
 801325a:	d00e      	beq.n	801327a <tcp_receive+0xbc6>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	8b5b      	ldrh	r3, [r3, #26]
 8013260:	f023 0301 	bic.w	r3, r3, #1
 8013264:	b29a      	uxth	r2, r3
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	835a      	strh	r2, [r3, #26]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	8b5b      	ldrh	r3, [r3, #26]
 801326e:	f043 0302 	orr.w	r3, r3, #2
 8013272:	b29a      	uxth	r2, r3
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013278:	e188      	b.n	801358c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	8b5b      	ldrh	r3, [r3, #26]
 801327e:	f043 0301 	orr.w	r3, r3, #1
 8013282:	b29a      	uxth	r2, r3
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013288:	e180      	b.n	801358c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801328e:	2b00      	cmp	r3, #0
 8013290:	d106      	bne.n	80132a0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013292:	4848      	ldr	r0, [pc, #288]	; (80133b4 <tcp_receive+0xd00>)
 8013294:	f7fd fbba 	bl	8010a0c <tcp_seg_copy>
 8013298:	4602      	mov	r2, r0
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	675a      	str	r2, [r3, #116]	; 0x74
 801329e:	e16d      	b.n	801357c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80132a0:	2300      	movs	r3, #0
 80132a2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80132aa:	e157      	b.n	801355c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80132ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ae:	68db      	ldr	r3, [r3, #12]
 80132b0:	685a      	ldr	r2, [r3, #4]
 80132b2:	4b41      	ldr	r3, [pc, #260]	; (80133b8 <tcp_receive+0xd04>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d11d      	bne.n	80132f6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80132ba:	4b3e      	ldr	r3, [pc, #248]	; (80133b4 <tcp_receive+0xd00>)
 80132bc:	891a      	ldrh	r2, [r3, #8]
 80132be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c0:	891b      	ldrh	r3, [r3, #8]
 80132c2:	429a      	cmp	r2, r3
 80132c4:	f240 814f 	bls.w	8013566 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80132c8:	483a      	ldr	r0, [pc, #232]	; (80133b4 <tcp_receive+0xd00>)
 80132ca:	f7fd fb9f 	bl	8010a0c <tcp_seg_copy>
 80132ce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	f000 8149 	beq.w	801356a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80132d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d003      	beq.n	80132e6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80132de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132e0:	697a      	ldr	r2, [r7, #20]
 80132e2:	601a      	str	r2, [r3, #0]
 80132e4:	e002      	b.n	80132ec <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	697a      	ldr	r2, [r7, #20]
 80132ea:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80132ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80132ee:	6978      	ldr	r0, [r7, #20]
 80132f0:	f7ff f8dc 	bl	80124ac <tcp_oos_insert_segment>
                }
                break;
 80132f4:	e139      	b.n	801356a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80132f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d117      	bne.n	801332c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80132fc:	4b2e      	ldr	r3, [pc, #184]	; (80133b8 <tcp_receive+0xd04>)
 80132fe:	681a      	ldr	r2, [r3, #0]
 8013300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013302:	68db      	ldr	r3, [r3, #12]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	1ad3      	subs	r3, r2, r3
 8013308:	2b00      	cmp	r3, #0
 801330a:	da57      	bge.n	80133bc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801330c:	4829      	ldr	r0, [pc, #164]	; (80133b4 <tcp_receive+0xd00>)
 801330e:	f7fd fb7d 	bl	8010a0c <tcp_seg_copy>
 8013312:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	2b00      	cmp	r3, #0
 8013318:	f000 8129 	beq.w	801356e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	69ba      	ldr	r2, [r7, #24]
 8013320:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013324:	69b8      	ldr	r0, [r7, #24]
 8013326:	f7ff f8c1 	bl	80124ac <tcp_oos_insert_segment>
                  }
                  break;
 801332a:	e120      	b.n	801356e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801332c:	4b22      	ldr	r3, [pc, #136]	; (80133b8 <tcp_receive+0xd04>)
 801332e:	681a      	ldr	r2, [r3, #0]
 8013330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	685b      	ldr	r3, [r3, #4]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	3b01      	subs	r3, #1
 801333a:	2b00      	cmp	r3, #0
 801333c:	db3e      	blt.n	80133bc <tcp_receive+0xd08>
 801333e:	4b1e      	ldr	r3, [pc, #120]	; (80133b8 <tcp_receive+0xd04>)
 8013340:	681a      	ldr	r2, [r3, #0]
 8013342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013344:	68db      	ldr	r3, [r3, #12]
 8013346:	685b      	ldr	r3, [r3, #4]
 8013348:	1ad3      	subs	r3, r2, r3
 801334a:	3301      	adds	r3, #1
 801334c:	2b00      	cmp	r3, #0
 801334e:	dc35      	bgt.n	80133bc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013350:	4818      	ldr	r0, [pc, #96]	; (80133b4 <tcp_receive+0xd00>)
 8013352:	f7fd fb5b 	bl	8010a0c <tcp_seg_copy>
 8013356:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013358:	69fb      	ldr	r3, [r7, #28]
 801335a:	2b00      	cmp	r3, #0
 801335c:	f000 8109 	beq.w	8013572 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013362:	68db      	ldr	r3, [r3, #12]
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013368:	8912      	ldrh	r2, [r2, #8]
 801336a:	441a      	add	r2, r3
 801336c:	4b12      	ldr	r3, [pc, #72]	; (80133b8 <tcp_receive+0xd04>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	1ad3      	subs	r3, r2, r3
 8013372:	2b00      	cmp	r3, #0
 8013374:	dd12      	ble.n	801339c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013376:	4b10      	ldr	r3, [pc, #64]	; (80133b8 <tcp_receive+0xd04>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	b29a      	uxth	r2, r3
 801337c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	685b      	ldr	r3, [r3, #4]
 8013382:	b29b      	uxth	r3, r3
 8013384:	1ad3      	subs	r3, r2, r3
 8013386:	b29a      	uxth	r2, r3
 8013388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801338a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801338e:	685a      	ldr	r2, [r3, #4]
 8013390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013392:	891b      	ldrh	r3, [r3, #8]
 8013394:	4619      	mov	r1, r3
 8013396:	4610      	mov	r0, r2
 8013398:	f7fb fdb0 	bl	800eefc <pbuf_realloc>
                    }
                    prev->next = cseg;
 801339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801339e:	69fa      	ldr	r2, [r7, #28]
 80133a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80133a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80133a4:	69f8      	ldr	r0, [r7, #28]
 80133a6:	f7ff f881 	bl	80124ac <tcp_oos_insert_segment>
                  }
                  break;
 80133aa:	e0e2      	b.n	8013572 <tcp_receive+0xebe>
 80133ac:	200122c4 	.word	0x200122c4
 80133b0:	200122c1 	.word	0x200122c1
 80133b4:	20012294 	.word	0x20012294
 80133b8:	200122b4 	.word	0x200122b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80133bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133be:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80133c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	f040 80c6 	bne.w	8013556 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80133ca:	4b80      	ldr	r3, [pc, #512]	; (80135cc <tcp_receive+0xf18>)
 80133cc:	681a      	ldr	r2, [r3, #0]
 80133ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d0:	68db      	ldr	r3, [r3, #12]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	f340 80bd 	ble.w	8013556 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80133dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	899b      	ldrh	r3, [r3, #12]
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7fa f88b 	bl	800d500 <lwip_htons>
 80133ea:	4603      	mov	r3, r0
 80133ec:	b2db      	uxtb	r3, r3
 80133ee:	f003 0301 	and.w	r3, r3, #1
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f040 80bf 	bne.w	8013576 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80133f8:	4875      	ldr	r0, [pc, #468]	; (80135d0 <tcp_receive+0xf1c>)
 80133fa:	f7fd fb07 	bl	8010a0c <tcp_seg_copy>
 80133fe:	4602      	mov	r2, r0
 8013400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013402:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	f000 80b6 	beq.w	801357a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013416:	8912      	ldrh	r2, [r2, #8]
 8013418:	441a      	add	r2, r3
 801341a:	4b6c      	ldr	r3, [pc, #432]	; (80135cc <tcp_receive+0xf18>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	2b00      	cmp	r3, #0
 8013422:	dd12      	ble.n	801344a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013424:	4b69      	ldr	r3, [pc, #420]	; (80135cc <tcp_receive+0xf18>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	b29a      	uxth	r2, r3
 801342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	b29b      	uxth	r3, r3
 8013432:	1ad3      	subs	r3, r2, r3
 8013434:	b29a      	uxth	r2, r3
 8013436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013438:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801343c:	685a      	ldr	r2, [r3, #4]
 801343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013440:	891b      	ldrh	r3, [r3, #8]
 8013442:	4619      	mov	r1, r3
 8013444:	4610      	mov	r0, r2
 8013446:	f7fb fd59 	bl	800eefc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801344a:	4b62      	ldr	r3, [pc, #392]	; (80135d4 <tcp_receive+0xf20>)
 801344c:	881b      	ldrh	r3, [r3, #0]
 801344e:	461a      	mov	r2, r3
 8013450:	4b5e      	ldr	r3, [pc, #376]	; (80135cc <tcp_receive+0xf18>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	441a      	add	r2, r3
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801345a:	6879      	ldr	r1, [r7, #4]
 801345c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801345e:	440b      	add	r3, r1
 8013460:	1ad3      	subs	r3, r2, r3
 8013462:	2b00      	cmp	r3, #0
 8013464:	f340 8089 	ble.w	801357a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	68db      	ldr	r3, [r3, #12]
 801346e:	899b      	ldrh	r3, [r3, #12]
 8013470:	b29b      	uxth	r3, r3
 8013472:	4618      	mov	r0, r3
 8013474:	f7fa f844 	bl	800d500 <lwip_htons>
 8013478:	4603      	mov	r3, r0
 801347a:	b2db      	uxtb	r3, r3
 801347c:	f003 0301 	and.w	r3, r3, #1
 8013480:	2b00      	cmp	r3, #0
 8013482:	d022      	beq.n	80134ca <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	68db      	ldr	r3, [r3, #12]
 801348a:	899b      	ldrh	r3, [r3, #12]
 801348c:	b29b      	uxth	r3, r3
 801348e:	b21b      	sxth	r3, r3
 8013490:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013494:	b21c      	sxth	r4, r3
 8013496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	68db      	ldr	r3, [r3, #12]
 801349c:	899b      	ldrh	r3, [r3, #12]
 801349e:	b29b      	uxth	r3, r3
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7fa f82d 	bl	800d500 <lwip_htons>
 80134a6:	4603      	mov	r3, r0
 80134a8:	b2db      	uxtb	r3, r3
 80134aa:	b29b      	uxth	r3, r3
 80134ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80134b0:	b29b      	uxth	r3, r3
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fa f824 	bl	800d500 <lwip_htons>
 80134b8:	4603      	mov	r3, r0
 80134ba:	b21b      	sxth	r3, r3
 80134bc:	4323      	orrs	r3, r4
 80134be:	b21a      	sxth	r2, r3
 80134c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	68db      	ldr	r3, [r3, #12]
 80134c6:	b292      	uxth	r2, r2
 80134c8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ce:	b29a      	uxth	r2, r3
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134d4:	4413      	add	r3, r2
 80134d6:	b299      	uxth	r1, r3
 80134d8:	4b3c      	ldr	r3, [pc, #240]	; (80135cc <tcp_receive+0xf18>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	b29a      	uxth	r2, r3
 80134de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	1a8a      	subs	r2, r1, r2
 80134e4:	b292      	uxth	r2, r2
 80134e6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80134e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	685a      	ldr	r2, [r3, #4]
 80134ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	891b      	ldrh	r3, [r3, #8]
 80134f4:	4619      	mov	r1, r3
 80134f6:	4610      	mov	r0, r2
 80134f8:	f7fb fd00 	bl	800eefc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80134fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	891c      	ldrh	r4, [r3, #8]
 8013502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	899b      	ldrh	r3, [r3, #12]
 801350a:	b29b      	uxth	r3, r3
 801350c:	4618      	mov	r0, r3
 801350e:	f7f9 fff7 	bl	800d500 <lwip_htons>
 8013512:	4603      	mov	r3, r0
 8013514:	b2db      	uxtb	r3, r3
 8013516:	f003 0303 	and.w	r3, r3, #3
 801351a:	2b00      	cmp	r3, #0
 801351c:	d001      	beq.n	8013522 <tcp_receive+0xe6e>
 801351e:	2301      	movs	r3, #1
 8013520:	e000      	b.n	8013524 <tcp_receive+0xe70>
 8013522:	2300      	movs	r3, #0
 8013524:	4423      	add	r3, r4
 8013526:	b29a      	uxth	r2, r3
 8013528:	4b2a      	ldr	r3, [pc, #168]	; (80135d4 <tcp_receive+0xf20>)
 801352a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801352c:	4b29      	ldr	r3, [pc, #164]	; (80135d4 <tcp_receive+0xf20>)
 801352e:	881b      	ldrh	r3, [r3, #0]
 8013530:	461a      	mov	r2, r3
 8013532:	4b26      	ldr	r3, [pc, #152]	; (80135cc <tcp_receive+0xf18>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	441a      	add	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801353c:	6879      	ldr	r1, [r7, #4]
 801353e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013540:	440b      	add	r3, r1
 8013542:	429a      	cmp	r2, r3
 8013544:	d019      	beq.n	801357a <tcp_receive+0xec6>
 8013546:	4b24      	ldr	r3, [pc, #144]	; (80135d8 <tcp_receive+0xf24>)
 8013548:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801354c:	4923      	ldr	r1, [pc, #140]	; (80135dc <tcp_receive+0xf28>)
 801354e:	4824      	ldr	r0, [pc, #144]	; (80135e0 <tcp_receive+0xf2c>)
 8013550:	f007 fae2 	bl	801ab18 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013554:	e011      	b.n	801357a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	63bb      	str	r3, [r7, #56]	; 0x38
 801355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801355e:	2b00      	cmp	r3, #0
 8013560:	f47f aea4 	bne.w	80132ac <tcp_receive+0xbf8>
 8013564:	e00a      	b.n	801357c <tcp_receive+0xec8>
                break;
 8013566:	bf00      	nop
 8013568:	e008      	b.n	801357c <tcp_receive+0xec8>
                break;
 801356a:	bf00      	nop
 801356c:	e006      	b.n	801357c <tcp_receive+0xec8>
                  break;
 801356e:	bf00      	nop
 8013570:	e004      	b.n	801357c <tcp_receive+0xec8>
                  break;
 8013572:	bf00      	nop
 8013574:	e002      	b.n	801357c <tcp_receive+0xec8>
                  break;
 8013576:	bf00      	nop
 8013578:	e000      	b.n	801357c <tcp_receive+0xec8>
                break;
 801357a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f001 fa33 	bl	80149e8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013582:	e003      	b.n	801358c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f001 fa2f 	bl	80149e8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801358a:	e01a      	b.n	80135c2 <tcp_receive+0xf0e>
 801358c:	e019      	b.n	80135c2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801358e:	4b0f      	ldr	r3, [pc, #60]	; (80135cc <tcp_receive+0xf18>)
 8013590:	681a      	ldr	r2, [r3, #0]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013596:	1ad3      	subs	r3, r2, r3
 8013598:	2b00      	cmp	r3, #0
 801359a:	db0a      	blt.n	80135b2 <tcp_receive+0xefe>
 801359c:	4b0b      	ldr	r3, [pc, #44]	; (80135cc <tcp_receive+0xf18>)
 801359e:	681a      	ldr	r2, [r3, #0]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a4:	6879      	ldr	r1, [r7, #4]
 80135a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80135a8:	440b      	add	r3, r1
 80135aa:	1ad3      	subs	r3, r2, r3
 80135ac:	3301      	adds	r3, #1
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	dd07      	ble.n	80135c2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	8b5b      	ldrh	r3, [r3, #26]
 80135b6:	f043 0302 	orr.w	r3, r3, #2
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80135c0:	e7ff      	b.n	80135c2 <tcp_receive+0xf0e>
 80135c2:	bf00      	nop
 80135c4:	3750      	adds	r7, #80	; 0x50
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bdb0      	pop	{r4, r5, r7, pc}
 80135ca:	bf00      	nop
 80135cc:	200122b4 	.word	0x200122b4
 80135d0:	20012294 	.word	0x20012294
 80135d4:	200122be 	.word	0x200122be
 80135d8:	0801d744 	.word	0x0801d744
 80135dc:	0801daec 	.word	0x0801daec
 80135e0:	0801d790 	.word	0x0801d790

080135e4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b083      	sub	sp, #12
 80135e8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80135ea:	4b15      	ldr	r3, [pc, #84]	; (8013640 <tcp_get_next_optbyte+0x5c>)
 80135ec:	881b      	ldrh	r3, [r3, #0]
 80135ee:	1c5a      	adds	r2, r3, #1
 80135f0:	b291      	uxth	r1, r2
 80135f2:	4a13      	ldr	r2, [pc, #76]	; (8013640 <tcp_get_next_optbyte+0x5c>)
 80135f4:	8011      	strh	r1, [r2, #0]
 80135f6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80135f8:	4b12      	ldr	r3, [pc, #72]	; (8013644 <tcp_get_next_optbyte+0x60>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d004      	beq.n	801360a <tcp_get_next_optbyte+0x26>
 8013600:	4b11      	ldr	r3, [pc, #68]	; (8013648 <tcp_get_next_optbyte+0x64>)
 8013602:	881b      	ldrh	r3, [r3, #0]
 8013604:	88fa      	ldrh	r2, [r7, #6]
 8013606:	429a      	cmp	r2, r3
 8013608:	d208      	bcs.n	801361c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801360a:	4b10      	ldr	r3, [pc, #64]	; (801364c <tcp_get_next_optbyte+0x68>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	3314      	adds	r3, #20
 8013610:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013612:	88fb      	ldrh	r3, [r7, #6]
 8013614:	683a      	ldr	r2, [r7, #0]
 8013616:	4413      	add	r3, r2
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	e00b      	b.n	8013634 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801361c:	88fb      	ldrh	r3, [r7, #6]
 801361e:	b2da      	uxtb	r2, r3
 8013620:	4b09      	ldr	r3, [pc, #36]	; (8013648 <tcp_get_next_optbyte+0x64>)
 8013622:	881b      	ldrh	r3, [r3, #0]
 8013624:	b2db      	uxtb	r3, r3
 8013626:	1ad3      	subs	r3, r2, r3
 8013628:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801362a:	4b06      	ldr	r3, [pc, #24]	; (8013644 <tcp_get_next_optbyte+0x60>)
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	797b      	ldrb	r3, [r7, #5]
 8013630:	4413      	add	r3, r2
 8013632:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013634:	4618      	mov	r0, r3
 8013636:	370c      	adds	r7, #12
 8013638:	46bd      	mov	sp, r7
 801363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363e:	4770      	bx	lr
 8013640:	200122b0 	.word	0x200122b0
 8013644:	200122ac 	.word	0x200122ac
 8013648:	200122aa 	.word	0x200122aa
 801364c:	200122a4 	.word	0x200122a4

08013650 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b084      	sub	sp, #16
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d106      	bne.n	801366c <tcp_parseopt+0x1c>
 801365e:	4b32      	ldr	r3, [pc, #200]	; (8013728 <tcp_parseopt+0xd8>)
 8013660:	f240 727d 	movw	r2, #1917	; 0x77d
 8013664:	4931      	ldr	r1, [pc, #196]	; (801372c <tcp_parseopt+0xdc>)
 8013666:	4832      	ldr	r0, [pc, #200]	; (8013730 <tcp_parseopt+0xe0>)
 8013668:	f007 fa56 	bl	801ab18 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801366c:	4b31      	ldr	r3, [pc, #196]	; (8013734 <tcp_parseopt+0xe4>)
 801366e:	881b      	ldrh	r3, [r3, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d055      	beq.n	8013720 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013674:	4b30      	ldr	r3, [pc, #192]	; (8013738 <tcp_parseopt+0xe8>)
 8013676:	2200      	movs	r2, #0
 8013678:	801a      	strh	r2, [r3, #0]
 801367a:	e045      	b.n	8013708 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801367c:	f7ff ffb2 	bl	80135e4 <tcp_get_next_optbyte>
 8013680:	4603      	mov	r3, r0
 8013682:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013684:	7bfb      	ldrb	r3, [r7, #15]
 8013686:	2b02      	cmp	r3, #2
 8013688:	d006      	beq.n	8013698 <tcp_parseopt+0x48>
 801368a:	2b02      	cmp	r3, #2
 801368c:	dc2b      	bgt.n	80136e6 <tcp_parseopt+0x96>
 801368e:	2b00      	cmp	r3, #0
 8013690:	d041      	beq.n	8013716 <tcp_parseopt+0xc6>
 8013692:	2b01      	cmp	r3, #1
 8013694:	d127      	bne.n	80136e6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013696:	e037      	b.n	8013708 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013698:	f7ff ffa4 	bl	80135e4 <tcp_get_next_optbyte>
 801369c:	4603      	mov	r3, r0
 801369e:	2b04      	cmp	r3, #4
 80136a0:	d13b      	bne.n	801371a <tcp_parseopt+0xca>
 80136a2:	4b25      	ldr	r3, [pc, #148]	; (8013738 <tcp_parseopt+0xe8>)
 80136a4:	881b      	ldrh	r3, [r3, #0]
 80136a6:	3301      	adds	r3, #1
 80136a8:	4a22      	ldr	r2, [pc, #136]	; (8013734 <tcp_parseopt+0xe4>)
 80136aa:	8812      	ldrh	r2, [r2, #0]
 80136ac:	4293      	cmp	r3, r2
 80136ae:	da34      	bge.n	801371a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80136b0:	f7ff ff98 	bl	80135e4 <tcp_get_next_optbyte>
 80136b4:	4603      	mov	r3, r0
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	021b      	lsls	r3, r3, #8
 80136ba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80136bc:	f7ff ff92 	bl	80135e4 <tcp_get_next_optbyte>
 80136c0:	4603      	mov	r3, r0
 80136c2:	b29a      	uxth	r2, r3
 80136c4:	89bb      	ldrh	r3, [r7, #12]
 80136c6:	4313      	orrs	r3, r2
 80136c8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80136ca:	89bb      	ldrh	r3, [r7, #12]
 80136cc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80136d0:	d804      	bhi.n	80136dc <tcp_parseopt+0x8c>
 80136d2:	89bb      	ldrh	r3, [r7, #12]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d001      	beq.n	80136dc <tcp_parseopt+0x8c>
 80136d8:	89ba      	ldrh	r2, [r7, #12]
 80136da:	e001      	b.n	80136e0 <tcp_parseopt+0x90>
 80136dc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80136e4:	e010      	b.n	8013708 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80136e6:	f7ff ff7d 	bl	80135e4 <tcp_get_next_optbyte>
 80136ea:	4603      	mov	r3, r0
 80136ec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80136ee:	7afb      	ldrb	r3, [r7, #11]
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d914      	bls.n	801371e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80136f4:	7afb      	ldrb	r3, [r7, #11]
 80136f6:	b29a      	uxth	r2, r3
 80136f8:	4b0f      	ldr	r3, [pc, #60]	; (8013738 <tcp_parseopt+0xe8>)
 80136fa:	881b      	ldrh	r3, [r3, #0]
 80136fc:	4413      	add	r3, r2
 80136fe:	b29b      	uxth	r3, r3
 8013700:	3b02      	subs	r3, #2
 8013702:	b29a      	uxth	r2, r3
 8013704:	4b0c      	ldr	r3, [pc, #48]	; (8013738 <tcp_parseopt+0xe8>)
 8013706:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013708:	4b0b      	ldr	r3, [pc, #44]	; (8013738 <tcp_parseopt+0xe8>)
 801370a:	881a      	ldrh	r2, [r3, #0]
 801370c:	4b09      	ldr	r3, [pc, #36]	; (8013734 <tcp_parseopt+0xe4>)
 801370e:	881b      	ldrh	r3, [r3, #0]
 8013710:	429a      	cmp	r2, r3
 8013712:	d3b3      	bcc.n	801367c <tcp_parseopt+0x2c>
 8013714:	e004      	b.n	8013720 <tcp_parseopt+0xd0>
          return;
 8013716:	bf00      	nop
 8013718:	e002      	b.n	8013720 <tcp_parseopt+0xd0>
            return;
 801371a:	bf00      	nop
 801371c:	e000      	b.n	8013720 <tcp_parseopt+0xd0>
            return;
 801371e:	bf00      	nop
      }
    }
  }
}
 8013720:	3710      	adds	r7, #16
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	0801d744 	.word	0x0801d744
 801372c:	0801dba8 	.word	0x0801dba8
 8013730:	0801d790 	.word	0x0801d790
 8013734:	200122a8 	.word	0x200122a8
 8013738:	200122b0 	.word	0x200122b0

0801373c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801373c:	b480      	push	{r7}
 801373e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013740:	4b05      	ldr	r3, [pc, #20]	; (8013758 <tcp_trigger_input_pcb_close+0x1c>)
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	f043 0310 	orr.w	r3, r3, #16
 8013748:	b2da      	uxtb	r2, r3
 801374a:	4b03      	ldr	r3, [pc, #12]	; (8013758 <tcp_trigger_input_pcb_close+0x1c>)
 801374c:	701a      	strb	r2, [r3, #0]
}
 801374e:	bf00      	nop
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr
 8013758:	200122c1 	.word	0x200122c1

0801375c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b084      	sub	sp, #16
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d00a      	beq.n	8013784 <tcp_route+0x28>
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	7a1b      	ldrb	r3, [r3, #8]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d006      	beq.n	8013784 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	7a1b      	ldrb	r3, [r3, #8]
 801377a:	4618      	mov	r0, r3
 801377c:	f7fb f9b6 	bl	800eaec <netif_get_by_index>
 8013780:	4603      	mov	r3, r0
 8013782:	e003      	b.n	801378c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f005 f8b5 	bl	80188f4 <ip4_route>
 801378a:	4603      	mov	r3, r0
  }
}
 801378c:	4618      	mov	r0, r3
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013794:	b590      	push	{r4, r7, lr}
 8013796:	b087      	sub	sp, #28
 8013798:	af00      	add	r7, sp, #0
 801379a:	60f8      	str	r0, [r7, #12]
 801379c:	60b9      	str	r1, [r7, #8]
 801379e:	603b      	str	r3, [r7, #0]
 80137a0:	4613      	mov	r3, r2
 80137a2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d105      	bne.n	80137b6 <tcp_create_segment+0x22>
 80137aa:	4b44      	ldr	r3, [pc, #272]	; (80138bc <tcp_create_segment+0x128>)
 80137ac:	22a3      	movs	r2, #163	; 0xa3
 80137ae:	4944      	ldr	r1, [pc, #272]	; (80138c0 <tcp_create_segment+0x12c>)
 80137b0:	4844      	ldr	r0, [pc, #272]	; (80138c4 <tcp_create_segment+0x130>)
 80137b2:	f007 f9b1 	bl	801ab18 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d105      	bne.n	80137c8 <tcp_create_segment+0x34>
 80137bc:	4b3f      	ldr	r3, [pc, #252]	; (80138bc <tcp_create_segment+0x128>)
 80137be:	22a4      	movs	r2, #164	; 0xa4
 80137c0:	4941      	ldr	r1, [pc, #260]	; (80138c8 <tcp_create_segment+0x134>)
 80137c2:	4840      	ldr	r0, [pc, #256]	; (80138c4 <tcp_create_segment+0x130>)
 80137c4:	f007 f9a8 	bl	801ab18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80137c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80137cc:	009b      	lsls	r3, r3, #2
 80137ce:	b2db      	uxtb	r3, r3
 80137d0:	f003 0304 	and.w	r3, r3, #4
 80137d4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80137d6:	2003      	movs	r0, #3
 80137d8:	f7fa fe58 	bl	800e48c <memp_malloc>
 80137dc:	6138      	str	r0, [r7, #16]
 80137de:	693b      	ldr	r3, [r7, #16]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d104      	bne.n	80137ee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80137e4:	68b8      	ldr	r0, [r7, #8]
 80137e6:	f7fb fd0f 	bl	800f208 <pbuf_free>
    return NULL;
 80137ea:	2300      	movs	r3, #0
 80137ec:	e061      	b.n	80138b2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80137ee:	693b      	ldr	r3, [r7, #16]
 80137f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80137f4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	2200      	movs	r2, #0
 80137fa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	68ba      	ldr	r2, [r7, #8]
 8013800:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	891a      	ldrh	r2, [r3, #8]
 8013806:	7dfb      	ldrb	r3, [r7, #23]
 8013808:	b29b      	uxth	r3, r3
 801380a:	429a      	cmp	r2, r3
 801380c:	d205      	bcs.n	801381a <tcp_create_segment+0x86>
 801380e:	4b2b      	ldr	r3, [pc, #172]	; (80138bc <tcp_create_segment+0x128>)
 8013810:	22b0      	movs	r2, #176	; 0xb0
 8013812:	492e      	ldr	r1, [pc, #184]	; (80138cc <tcp_create_segment+0x138>)
 8013814:	482b      	ldr	r0, [pc, #172]	; (80138c4 <tcp_create_segment+0x130>)
 8013816:	f007 f97f 	bl	801ab18 <iprintf>
  seg->len = p->tot_len - optlen;
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	891a      	ldrh	r2, [r3, #8]
 801381e:	7dfb      	ldrb	r3, [r7, #23]
 8013820:	b29b      	uxth	r3, r3
 8013822:	1ad3      	subs	r3, r2, r3
 8013824:	b29a      	uxth	r2, r3
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801382a:	2114      	movs	r1, #20
 801382c:	68b8      	ldr	r0, [r7, #8]
 801382e:	f7fb fc55 	bl	800f0dc <pbuf_add_header>
 8013832:	4603      	mov	r3, r0
 8013834:	2b00      	cmp	r3, #0
 8013836:	d004      	beq.n	8013842 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013838:	6938      	ldr	r0, [r7, #16]
 801383a:	f7fd f8ce 	bl	80109da <tcp_seg_free>
    return NULL;
 801383e:	2300      	movs	r3, #0
 8013840:	e037      	b.n	80138b2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	685a      	ldr	r2, [r3, #4]
 8013848:	693b      	ldr	r3, [r7, #16]
 801384a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	8ada      	ldrh	r2, [r3, #22]
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	68dc      	ldr	r4, [r3, #12]
 8013854:	4610      	mov	r0, r2
 8013856:	f7f9 fe53 	bl	800d500 <lwip_htons>
 801385a:	4603      	mov	r3, r0
 801385c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	8b1a      	ldrh	r2, [r3, #24]
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	68dc      	ldr	r4, [r3, #12]
 8013866:	4610      	mov	r0, r2
 8013868:	f7f9 fe4a 	bl	800d500 <lwip_htons>
 801386c:	4603      	mov	r3, r0
 801386e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	68dc      	ldr	r4, [r3, #12]
 8013874:	6838      	ldr	r0, [r7, #0]
 8013876:	f7f9 fe58 	bl	800d52a <lwip_htonl>
 801387a:	4603      	mov	r3, r0
 801387c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801387e:	7dfb      	ldrb	r3, [r7, #23]
 8013880:	089b      	lsrs	r3, r3, #2
 8013882:	b2db      	uxtb	r3, r3
 8013884:	b29b      	uxth	r3, r3
 8013886:	3305      	adds	r3, #5
 8013888:	b29b      	uxth	r3, r3
 801388a:	031b      	lsls	r3, r3, #12
 801388c:	b29a      	uxth	r2, r3
 801388e:	79fb      	ldrb	r3, [r7, #7]
 8013890:	b29b      	uxth	r3, r3
 8013892:	4313      	orrs	r3, r2
 8013894:	b29a      	uxth	r2, r3
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	68dc      	ldr	r4, [r3, #12]
 801389a:	4610      	mov	r0, r2
 801389c:	f7f9 fe30 	bl	800d500 <lwip_htons>
 80138a0:	4603      	mov	r3, r0
 80138a2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	68db      	ldr	r3, [r3, #12]
 80138a8:	2200      	movs	r2, #0
 80138aa:	749a      	strb	r2, [r3, #18]
 80138ac:	2200      	movs	r2, #0
 80138ae:	74da      	strb	r2, [r3, #19]
  return seg;
 80138b0:	693b      	ldr	r3, [r7, #16]
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	371c      	adds	r7, #28
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd90      	pop	{r4, r7, pc}
 80138ba:	bf00      	nop
 80138bc:	0801dbc4 	.word	0x0801dbc4
 80138c0:	0801dbf8 	.word	0x0801dbf8
 80138c4:	0801dc18 	.word	0x0801dc18
 80138c8:	0801dc40 	.word	0x0801dc40
 80138cc:	0801dc64 	.word	0x0801dc64

080138d0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80138d0:	b590      	push	{r4, r7, lr}
 80138d2:	b08b      	sub	sp, #44	; 0x2c
 80138d4:	af02      	add	r7, sp, #8
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	460b      	mov	r3, r1
 80138da:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80138dc:	2300      	movs	r3, #0
 80138de:	61fb      	str	r3, [r7, #28]
 80138e0:	2300      	movs	r3, #0
 80138e2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80138e4:	2300      	movs	r3, #0
 80138e6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d106      	bne.n	80138fc <tcp_split_unsent_seg+0x2c>
 80138ee:	4b95      	ldr	r3, [pc, #596]	; (8013b44 <tcp_split_unsent_seg+0x274>)
 80138f0:	f240 324b 	movw	r2, #843	; 0x34b
 80138f4:	4994      	ldr	r1, [pc, #592]	; (8013b48 <tcp_split_unsent_seg+0x278>)
 80138f6:	4895      	ldr	r0, [pc, #596]	; (8013b4c <tcp_split_unsent_seg+0x27c>)
 80138f8:	f007 f90e 	bl	801ab18 <iprintf>

  useg = pcb->unsent;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013900:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d102      	bne.n	801390e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013908:	f04f 33ff 	mov.w	r3, #4294967295
 801390c:	e116      	b.n	8013b3c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801390e:	887b      	ldrh	r3, [r7, #2]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d109      	bne.n	8013928 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013914:	4b8b      	ldr	r3, [pc, #556]	; (8013b44 <tcp_split_unsent_seg+0x274>)
 8013916:	f240 3253 	movw	r2, #851	; 0x353
 801391a:	498d      	ldr	r1, [pc, #564]	; (8013b50 <tcp_split_unsent_seg+0x280>)
 801391c:	488b      	ldr	r0, [pc, #556]	; (8013b4c <tcp_split_unsent_seg+0x27c>)
 801391e:	f007 f8fb 	bl	801ab18 <iprintf>
    return ERR_VAL;
 8013922:	f06f 0305 	mvn.w	r3, #5
 8013926:	e109      	b.n	8013b3c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	891b      	ldrh	r3, [r3, #8]
 801392c:	887a      	ldrh	r2, [r7, #2]
 801392e:	429a      	cmp	r2, r3
 8013930:	d301      	bcc.n	8013936 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013932:	2300      	movs	r3, #0
 8013934:	e102      	b.n	8013b3c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801393a:	887a      	ldrh	r2, [r7, #2]
 801393c:	429a      	cmp	r2, r3
 801393e:	d906      	bls.n	801394e <tcp_split_unsent_seg+0x7e>
 8013940:	4b80      	ldr	r3, [pc, #512]	; (8013b44 <tcp_split_unsent_seg+0x274>)
 8013942:	f240 325b 	movw	r2, #859	; 0x35b
 8013946:	4983      	ldr	r1, [pc, #524]	; (8013b54 <tcp_split_unsent_seg+0x284>)
 8013948:	4880      	ldr	r0, [pc, #512]	; (8013b4c <tcp_split_unsent_seg+0x27c>)
 801394a:	f007 f8e5 	bl	801ab18 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	891b      	ldrh	r3, [r3, #8]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d106      	bne.n	8013964 <tcp_split_unsent_seg+0x94>
 8013956:	4b7b      	ldr	r3, [pc, #492]	; (8013b44 <tcp_split_unsent_seg+0x274>)
 8013958:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801395c:	497e      	ldr	r1, [pc, #504]	; (8013b58 <tcp_split_unsent_seg+0x288>)
 801395e:	487b      	ldr	r0, [pc, #492]	; (8013b4c <tcp_split_unsent_seg+0x27c>)
 8013960:	f007 f8da 	bl	801ab18 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	7a9b      	ldrb	r3, [r3, #10]
 8013968:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801396a:	7bfb      	ldrb	r3, [r7, #15]
 801396c:	009b      	lsls	r3, r3, #2
 801396e:	b2db      	uxtb	r3, r3
 8013970:	f003 0304 	and.w	r3, r3, #4
 8013974:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	891a      	ldrh	r2, [r3, #8]
 801397a:	887b      	ldrh	r3, [r7, #2]
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013980:	7bbb      	ldrb	r3, [r7, #14]
 8013982:	b29a      	uxth	r2, r3
 8013984:	89bb      	ldrh	r3, [r7, #12]
 8013986:	4413      	add	r3, r2
 8013988:	b29b      	uxth	r3, r3
 801398a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801398e:	4619      	mov	r1, r3
 8013990:	2036      	movs	r0, #54	; 0x36
 8013992:	f7fb f955 	bl	800ec40 <pbuf_alloc>
 8013996:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	2b00      	cmp	r3, #0
 801399c:	f000 80b7 	beq.w	8013b0e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	891a      	ldrh	r2, [r3, #8]
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	891b      	ldrh	r3, [r3, #8]
 80139aa:	1ad3      	subs	r3, r2, r3
 80139ac:	b29a      	uxth	r2, r3
 80139ae:	887b      	ldrh	r3, [r7, #2]
 80139b0:	4413      	add	r3, r2
 80139b2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	6858      	ldr	r0, [r3, #4]
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	685a      	ldr	r2, [r3, #4]
 80139bc:	7bbb      	ldrb	r3, [r7, #14]
 80139be:	18d1      	adds	r1, r2, r3
 80139c0:	897b      	ldrh	r3, [r7, #10]
 80139c2:	89ba      	ldrh	r2, [r7, #12]
 80139c4:	f7fb fe26 	bl	800f614 <pbuf_copy_partial>
 80139c8:	4603      	mov	r3, r0
 80139ca:	461a      	mov	r2, r3
 80139cc:	89bb      	ldrh	r3, [r7, #12]
 80139ce:	4293      	cmp	r3, r2
 80139d0:	f040 809f 	bne.w	8013b12 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	68db      	ldr	r3, [r3, #12]
 80139d8:	899b      	ldrh	r3, [r3, #12]
 80139da:	b29b      	uxth	r3, r3
 80139dc:	4618      	mov	r0, r3
 80139de:	f7f9 fd8f 	bl	800d500 <lwip_htons>
 80139e2:	4603      	mov	r3, r0
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80139ea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80139ec:	2300      	movs	r3, #0
 80139ee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80139f0:	7efb      	ldrb	r3, [r7, #27]
 80139f2:	f003 0308 	and.w	r3, r3, #8
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d007      	beq.n	8013a0a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80139fa:	7efb      	ldrb	r3, [r7, #27]
 80139fc:	f023 0308 	bic.w	r3, r3, #8
 8013a00:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013a02:	7ebb      	ldrb	r3, [r7, #26]
 8013a04:	f043 0308 	orr.w	r3, r3, #8
 8013a08:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013a0a:	7efb      	ldrb	r3, [r7, #27]
 8013a0c:	f003 0301 	and.w	r3, r3, #1
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d007      	beq.n	8013a24 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013a14:	7efb      	ldrb	r3, [r7, #27]
 8013a16:	f023 0301 	bic.w	r3, r3, #1
 8013a1a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013a1c:	7ebb      	ldrb	r3, [r7, #26]
 8013a1e:	f043 0301 	orr.w	r3, r3, #1
 8013a22:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	685b      	ldr	r3, [r3, #4]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7f9 fd7d 	bl	800d52a <lwip_htonl>
 8013a30:	4602      	mov	r2, r0
 8013a32:	887b      	ldrh	r3, [r7, #2]
 8013a34:	18d1      	adds	r1, r2, r3
 8013a36:	7eba      	ldrb	r2, [r7, #26]
 8013a38:	7bfb      	ldrb	r3, [r7, #15]
 8013a3a:	9300      	str	r3, [sp, #0]
 8013a3c:	460b      	mov	r3, r1
 8013a3e:	6939      	ldr	r1, [r7, #16]
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f7ff fea7 	bl	8013794 <tcp_create_segment>
 8013a46:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d063      	beq.n	8013b16 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fb fc66 	bl	800f324 <pbuf_clen>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a62:	1a9b      	subs	r3, r3, r2
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	6858      	ldr	r0, [r3, #4]
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	891a      	ldrh	r2, [r3, #8]
 8013a76:	89bb      	ldrh	r3, [r7, #12]
 8013a78:	1ad3      	subs	r3, r2, r3
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	f7fb fa3d 	bl	800eefc <pbuf_realloc>
  useg->len -= remainder;
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	891a      	ldrh	r2, [r3, #8]
 8013a86:	89bb      	ldrh	r3, [r7, #12]
 8013a88:	1ad3      	subs	r3, r2, r3
 8013a8a:	b29a      	uxth	r2, r3
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	899b      	ldrh	r3, [r3, #12]
 8013a96:	b29c      	uxth	r4, r3
 8013a98:	7efb      	ldrb	r3, [r7, #27]
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7f9 fd2f 	bl	800d500 <lwip_htons>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	4322      	orrs	r2, r4
 8013aac:	b292      	uxth	r2, r2
 8013aae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7fb fc35 	bl	800f324 <pbuf_clen>
 8013aba:	4603      	mov	r3, r0
 8013abc:	461a      	mov	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ac4:	4413      	add	r3, r2
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7fb fc26 	bl	800f324 <pbuf_clen>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	461a      	mov	r2, r3
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ae2:	4413      	add	r3, r2
 8013ae4:	b29a      	uxth	r2, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013aec:	697b      	ldr	r3, [r7, #20]
 8013aee:	681a      	ldr	r2, [r3, #0]
 8013af0:	69fb      	ldr	r3, [r7, #28]
 8013af2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	69fa      	ldr	r2, [r7, #28]
 8013af8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d103      	bne.n	8013b0a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2200      	movs	r2, #0
 8013b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	e016      	b.n	8013b3c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013b0e:	bf00      	nop
 8013b10:	e002      	b.n	8013b18 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013b12:	bf00      	nop
 8013b14:	e000      	b.n	8013b18 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013b16:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d006      	beq.n	8013b2c <tcp_split_unsent_seg+0x25c>
 8013b1e:	4b09      	ldr	r3, [pc, #36]	; (8013b44 <tcp_split_unsent_seg+0x274>)
 8013b20:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013b24:	490d      	ldr	r1, [pc, #52]	; (8013b5c <tcp_split_unsent_seg+0x28c>)
 8013b26:	4809      	ldr	r0, [pc, #36]	; (8013b4c <tcp_split_unsent_seg+0x27c>)
 8013b28:	f006 fff6 	bl	801ab18 <iprintf>
  if (p != NULL) {
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d002      	beq.n	8013b38 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013b32:	6938      	ldr	r0, [r7, #16]
 8013b34:	f7fb fb68 	bl	800f208 <pbuf_free>
  }

  return ERR_MEM;
 8013b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3724      	adds	r7, #36	; 0x24
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd90      	pop	{r4, r7, pc}
 8013b44:	0801dbc4 	.word	0x0801dbc4
 8013b48:	0801df58 	.word	0x0801df58
 8013b4c:	0801dc18 	.word	0x0801dc18
 8013b50:	0801df7c 	.word	0x0801df7c
 8013b54:	0801dfa0 	.word	0x0801dfa0
 8013b58:	0801dfb0 	.word	0x0801dfb0
 8013b5c:	0801dfc0 	.word	0x0801dfc0

08013b60 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013b60:	b590      	push	{r4, r7, lr}
 8013b62:	b085      	sub	sp, #20
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d106      	bne.n	8013b7c <tcp_send_fin+0x1c>
 8013b6e:	4b21      	ldr	r3, [pc, #132]	; (8013bf4 <tcp_send_fin+0x94>)
 8013b70:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013b74:	4920      	ldr	r1, [pc, #128]	; (8013bf8 <tcp_send_fin+0x98>)
 8013b76:	4821      	ldr	r0, [pc, #132]	; (8013bfc <tcp_send_fin+0x9c>)
 8013b78:	f006 ffce 	bl	801ab18 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d02e      	beq.n	8013be2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b88:	60fb      	str	r3, [r7, #12]
 8013b8a:	e002      	b.n	8013b92 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d1f8      	bne.n	8013b8c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	68db      	ldr	r3, [r3, #12]
 8013b9e:	899b      	ldrh	r3, [r3, #12]
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7f9 fcac 	bl	800d500 <lwip_htons>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	b2db      	uxtb	r3, r3
 8013bac:	f003 0307 	and.w	r3, r3, #7
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d116      	bne.n	8013be2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	899b      	ldrh	r3, [r3, #12]
 8013bba:	b29c      	uxth	r4, r3
 8013bbc:	2001      	movs	r0, #1
 8013bbe:	f7f9 fc9f 	bl	800d500 <lwip_htons>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	4322      	orrs	r2, r4
 8013bcc:	b292      	uxth	r2, r2
 8013bce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	8b5b      	ldrh	r3, [r3, #26]
 8013bd4:	f043 0320 	orr.w	r3, r3, #32
 8013bd8:	b29a      	uxth	r2, r3
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013bde:	2300      	movs	r3, #0
 8013be0:	e004      	b.n	8013bec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013be2:	2101      	movs	r1, #1
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f000 f80b 	bl	8013c00 <tcp_enqueue_flags>
 8013bea:	4603      	mov	r3, r0
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3714      	adds	r7, #20
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd90      	pop	{r4, r7, pc}
 8013bf4:	0801dbc4 	.word	0x0801dbc4
 8013bf8:	0801dfcc 	.word	0x0801dfcc
 8013bfc:	0801dc18 	.word	0x0801dc18

08013c00 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b08a      	sub	sp, #40	; 0x28
 8013c04:	af02      	add	r7, sp, #8
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	460b      	mov	r3, r1
 8013c0a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013c10:	2300      	movs	r3, #0
 8013c12:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013c14:	78fb      	ldrb	r3, [r7, #3]
 8013c16:	f003 0303 	and.w	r3, r3, #3
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d106      	bne.n	8013c2c <tcp_enqueue_flags+0x2c>
 8013c1e:	4b67      	ldr	r3, [pc, #412]	; (8013dbc <tcp_enqueue_flags+0x1bc>)
 8013c20:	f240 4211 	movw	r2, #1041	; 0x411
 8013c24:	4966      	ldr	r1, [pc, #408]	; (8013dc0 <tcp_enqueue_flags+0x1c0>)
 8013c26:	4867      	ldr	r0, [pc, #412]	; (8013dc4 <tcp_enqueue_flags+0x1c4>)
 8013c28:	f006 ff76 	bl	801ab18 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d106      	bne.n	8013c40 <tcp_enqueue_flags+0x40>
 8013c32:	4b62      	ldr	r3, [pc, #392]	; (8013dbc <tcp_enqueue_flags+0x1bc>)
 8013c34:	f240 4213 	movw	r2, #1043	; 0x413
 8013c38:	4963      	ldr	r1, [pc, #396]	; (8013dc8 <tcp_enqueue_flags+0x1c8>)
 8013c3a:	4862      	ldr	r0, [pc, #392]	; (8013dc4 <tcp_enqueue_flags+0x1c4>)
 8013c3c:	f006 ff6c 	bl	801ab18 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013c40:	78fb      	ldrb	r3, [r7, #3]
 8013c42:	f003 0302 	and.w	r3, r3, #2
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d001      	beq.n	8013c4e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013c4e:	7ffb      	ldrb	r3, [r7, #31]
 8013c50:	009b      	lsls	r3, r3, #2
 8013c52:	b2db      	uxtb	r3, r3
 8013c54:	f003 0304 	and.w	r3, r3, #4
 8013c58:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013c5a:	7dfb      	ldrb	r3, [r7, #23]
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c62:	4619      	mov	r1, r3
 8013c64:	2036      	movs	r0, #54	; 0x36
 8013c66:	f7fa ffeb 	bl	800ec40 <pbuf_alloc>
 8013c6a:	6138      	str	r0, [r7, #16]
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d109      	bne.n	8013c86 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	8b5b      	ldrh	r3, [r3, #26]
 8013c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013c80:	f04f 33ff 	mov.w	r3, #4294967295
 8013c84:	e095      	b.n	8013db2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	895a      	ldrh	r2, [r3, #10]
 8013c8a:	7dfb      	ldrb	r3, [r7, #23]
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d206      	bcs.n	8013ca0 <tcp_enqueue_flags+0xa0>
 8013c92:	4b4a      	ldr	r3, [pc, #296]	; (8013dbc <tcp_enqueue_flags+0x1bc>)
 8013c94:	f240 4239 	movw	r2, #1081	; 0x439
 8013c98:	494c      	ldr	r1, [pc, #304]	; (8013dcc <tcp_enqueue_flags+0x1cc>)
 8013c9a:	484a      	ldr	r0, [pc, #296]	; (8013dc4 <tcp_enqueue_flags+0x1c4>)
 8013c9c:	f006 ff3c 	bl	801ab18 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013ca4:	78fa      	ldrb	r2, [r7, #3]
 8013ca6:	7ffb      	ldrb	r3, [r7, #31]
 8013ca8:	9300      	str	r3, [sp, #0]
 8013caa:	460b      	mov	r3, r1
 8013cac:	6939      	ldr	r1, [r7, #16]
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f7ff fd70 	bl	8013794 <tcp_create_segment>
 8013cb4:	60f8      	str	r0, [r7, #12]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d109      	bne.n	8013cd0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	8b5b      	ldrh	r3, [r3, #26]
 8013cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013cca:	f04f 33ff 	mov.w	r3, #4294967295
 8013cce:	e070      	b.n	8013db2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	f003 0303 	and.w	r3, r3, #3
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d006      	beq.n	8013cea <tcp_enqueue_flags+0xea>
 8013cdc:	4b37      	ldr	r3, [pc, #220]	; (8013dbc <tcp_enqueue_flags+0x1bc>)
 8013cde:	f240 4242 	movw	r2, #1090	; 0x442
 8013ce2:	493b      	ldr	r1, [pc, #236]	; (8013dd0 <tcp_enqueue_flags+0x1d0>)
 8013ce4:	4837      	ldr	r0, [pc, #220]	; (8013dc4 <tcp_enqueue_flags+0x1c4>)
 8013ce6:	f006 ff17 	bl	801ab18 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	891b      	ldrh	r3, [r3, #8]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d006      	beq.n	8013d00 <tcp_enqueue_flags+0x100>
 8013cf2:	4b32      	ldr	r3, [pc, #200]	; (8013dbc <tcp_enqueue_flags+0x1bc>)
 8013cf4:	f240 4243 	movw	r2, #1091	; 0x443
 8013cf8:	4936      	ldr	r1, [pc, #216]	; (8013dd4 <tcp_enqueue_flags+0x1d4>)
 8013cfa:	4832      	ldr	r0, [pc, #200]	; (8013dc4 <tcp_enqueue_flags+0x1c4>)
 8013cfc:	f006 ff0c 	bl	801ab18 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d103      	bne.n	8013d10 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	68fa      	ldr	r2, [r7, #12]
 8013d0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013d0e:	e00d      	b.n	8013d2c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d14:	61bb      	str	r3, [r7, #24]
 8013d16:	e002      	b.n	8013d1e <tcp_enqueue_flags+0x11e>
 8013d18:	69bb      	ldr	r3, [r7, #24]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	61bb      	str	r3, [r7, #24]
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d1f8      	bne.n	8013d18 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013d26:	69bb      	ldr	r3, [r7, #24]
 8013d28:	68fa      	ldr	r2, [r7, #12]
 8013d2a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013d34:	78fb      	ldrb	r3, [r7, #3]
 8013d36:	f003 0302 	and.w	r3, r3, #2
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d104      	bne.n	8013d48 <tcp_enqueue_flags+0x148>
 8013d3e:	78fb      	ldrb	r3, [r7, #3]
 8013d40:	f003 0301 	and.w	r3, r3, #1
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d004      	beq.n	8013d52 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013d4c:	1c5a      	adds	r2, r3, #1
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013d52:	78fb      	ldrb	r3, [r7, #3]
 8013d54:	f003 0301 	and.w	r3, r3, #1
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d006      	beq.n	8013d6a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	8b5b      	ldrh	r3, [r3, #26]
 8013d60:	f043 0320 	orr.w	r3, r3, #32
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7fb fad8 	bl	800f324 <pbuf_clen>
 8013d74:	4603      	mov	r3, r0
 8013d76:	461a      	mov	r2, r3
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d7e:	4413      	add	r3, r2
 8013d80:	b29a      	uxth	r2, r3
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d00e      	beq.n	8013db0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d10a      	bne.n	8013db0 <tcp_enqueue_flags+0x1b0>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d106      	bne.n	8013db0 <tcp_enqueue_flags+0x1b0>
 8013da2:	4b06      	ldr	r3, [pc, #24]	; (8013dbc <tcp_enqueue_flags+0x1bc>)
 8013da4:	f240 4265 	movw	r2, #1125	; 0x465
 8013da8:	490b      	ldr	r1, [pc, #44]	; (8013dd8 <tcp_enqueue_flags+0x1d8>)
 8013daa:	4806      	ldr	r0, [pc, #24]	; (8013dc4 <tcp_enqueue_flags+0x1c4>)
 8013dac:	f006 feb4 	bl	801ab18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013db0:	2300      	movs	r3, #0
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3720      	adds	r7, #32
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	0801dbc4 	.word	0x0801dbc4
 8013dc0:	0801dfe8 	.word	0x0801dfe8
 8013dc4:	0801dc18 	.word	0x0801dc18
 8013dc8:	0801e040 	.word	0x0801e040
 8013dcc:	0801e060 	.word	0x0801e060
 8013dd0:	0801e09c 	.word	0x0801e09c
 8013dd4:	0801e0b4 	.word	0x0801e0b4
 8013dd8:	0801e0e0 	.word	0x0801e0e0

08013ddc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013ddc:	b5b0      	push	{r4, r5, r7, lr}
 8013dde:	b08a      	sub	sp, #40	; 0x28
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d106      	bne.n	8013df8 <tcp_output+0x1c>
 8013dea:	4b8a      	ldr	r3, [pc, #552]	; (8014014 <tcp_output+0x238>)
 8013dec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013df0:	4989      	ldr	r1, [pc, #548]	; (8014018 <tcp_output+0x23c>)
 8013df2:	488a      	ldr	r0, [pc, #552]	; (801401c <tcp_output+0x240>)
 8013df4:	f006 fe90 	bl	801ab18 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	7d1b      	ldrb	r3, [r3, #20]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d106      	bne.n	8013e0e <tcp_output+0x32>
 8013e00:	4b84      	ldr	r3, [pc, #528]	; (8014014 <tcp_output+0x238>)
 8013e02:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013e06:	4986      	ldr	r1, [pc, #536]	; (8014020 <tcp_output+0x244>)
 8013e08:	4884      	ldr	r0, [pc, #528]	; (801401c <tcp_output+0x240>)
 8013e0a:	f006 fe85 	bl	801ab18 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013e0e:	4b85      	ldr	r3, [pc, #532]	; (8014024 <tcp_output+0x248>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d101      	bne.n	8013e1c <tcp_output+0x40>
    return ERR_OK;
 8013e18:	2300      	movs	r3, #0
 8013e1a:	e1ce      	b.n	80141ba <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e28:	4293      	cmp	r3, r2
 8013e2a:	bf28      	it	cs
 8013e2c:	4613      	movcs	r3, r2
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e36:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d10b      	bne.n	8013e56 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8b5b      	ldrh	r3, [r3, #26]
 8013e42:	f003 0302 	and.w	r3, r3, #2
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	f000 81aa 	beq.w	80141a0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f000 fdcb 	bl	80149e8 <tcp_send_empty_ack>
 8013e52:	4603      	mov	r3, r0
 8013e54:	e1b1      	b.n	80141ba <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013e56:	6879      	ldr	r1, [r7, #4]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	3304      	adds	r3, #4
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f7ff fc7c 	bl	801375c <tcp_route>
 8013e64:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d102      	bne.n	8013e72 <tcp_output+0x96>
    return ERR_RTE;
 8013e6c:	f06f 0303 	mvn.w	r3, #3
 8013e70:	e1a3      	b.n	80141ba <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d003      	beq.n	8013e80 <tcp_output+0xa4>
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d111      	bne.n	8013ea4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d002      	beq.n	8013e8c <tcp_output+0xb0>
 8013e86:	697b      	ldr	r3, [r7, #20]
 8013e88:	3304      	adds	r3, #4
 8013e8a:	e000      	b.n	8013e8e <tcp_output+0xb2>
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d102      	bne.n	8013e9c <tcp_output+0xc0>
      return ERR_RTE;
 8013e96:	f06f 0303 	mvn.w	r3, #3
 8013e9a:	e18e      	b.n	80141ba <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea6:	68db      	ldr	r3, [r3, #12]
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7f9 fb3d 	bl	800d52a <lwip_htonl>
 8013eb0:	4602      	mov	r2, r0
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013eb6:	1ad3      	subs	r3, r2, r3
 8013eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013eba:	8912      	ldrh	r2, [r2, #8]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	69ba      	ldr	r2, [r7, #24]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d227      	bcs.n	8013f14 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013eca:	461a      	mov	r2, r3
 8013ecc:	69bb      	ldr	r3, [r7, #24]
 8013ece:	4293      	cmp	r3, r2
 8013ed0:	d114      	bne.n	8013efc <tcp_output+0x120>
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d110      	bne.n	8013efc <tcp_output+0x120>
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d10b      	bne.n	8013efc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2201      	movs	r2, #1
 8013ef0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	8b5b      	ldrh	r3, [r3, #26]
 8013f00:	f003 0302 	and.w	r3, r3, #2
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f000 814d 	beq.w	80141a4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f000 fd6c 	bl	80149e8 <tcp_send_empty_ack>
 8013f10:	4603      	mov	r3, r0
 8013f12:	e152      	b.n	80141ba <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2200      	movs	r2, #0
 8013f18:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f20:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013f22:	6a3b      	ldr	r3, [r7, #32]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	f000 811c 	beq.w	8014162 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013f2a:	e002      	b.n	8013f32 <tcp_output+0x156>
 8013f2c:	6a3b      	ldr	r3, [r7, #32]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	623b      	str	r3, [r7, #32]
 8013f32:	6a3b      	ldr	r3, [r7, #32]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d1f8      	bne.n	8013f2c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013f3a:	e112      	b.n	8014162 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3e:	68db      	ldr	r3, [r3, #12]
 8013f40:	899b      	ldrh	r3, [r3, #12]
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7f9 fadb 	bl	800d500 <lwip_htons>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	b2db      	uxtb	r3, r3
 8013f4e:	f003 0304 	and.w	r3, r3, #4
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d006      	beq.n	8013f64 <tcp_output+0x188>
 8013f56:	4b2f      	ldr	r3, [pc, #188]	; (8014014 <tcp_output+0x238>)
 8013f58:	f240 5236 	movw	r2, #1334	; 0x536
 8013f5c:	4932      	ldr	r1, [pc, #200]	; (8014028 <tcp_output+0x24c>)
 8013f5e:	482f      	ldr	r0, [pc, #188]	; (801401c <tcp_output+0x240>)
 8013f60:	f006 fdda 	bl	801ab18 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d01f      	beq.n	8013fac <tcp_output+0x1d0>
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	8b5b      	ldrh	r3, [r3, #26]
 8013f70:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d119      	bne.n	8013fac <tcp_output+0x1d0>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d00b      	beq.n	8013f98 <tcp_output+0x1bc>
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d110      	bne.n	8013fac <tcp_output+0x1d0>
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f8e:	891a      	ldrh	r2, [r3, #8]
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d209      	bcs.n	8013fac <tcp_output+0x1d0>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d004      	beq.n	8013fac <tcp_output+0x1d0>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fa8:	2b08      	cmp	r3, #8
 8013faa:	d901      	bls.n	8013fb0 <tcp_output+0x1d4>
 8013fac:	2301      	movs	r3, #1
 8013fae:	e000      	b.n	8013fb2 <tcp_output+0x1d6>
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d106      	bne.n	8013fc4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	8b5b      	ldrh	r3, [r3, #26]
 8013fba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	f000 80e4 	beq.w	801418c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	7d1b      	ldrb	r3, [r3, #20]
 8013fc8:	2b02      	cmp	r3, #2
 8013fca:	d00d      	beq.n	8013fe8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	899b      	ldrh	r3, [r3, #12]
 8013fd2:	b29c      	uxth	r4, r3
 8013fd4:	2010      	movs	r0, #16
 8013fd6:	f7f9 fa93 	bl	800d500 <lwip_htons>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	461a      	mov	r2, r3
 8013fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe0:	68db      	ldr	r3, [r3, #12]
 8013fe2:	4322      	orrs	r2, r4
 8013fe4:	b292      	uxth	r2, r2
 8013fe6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013fe8:	697a      	ldr	r2, [r7, #20]
 8013fea:	6879      	ldr	r1, [r7, #4]
 8013fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fee:	f000 f909 	bl	8014204 <tcp_output_segment>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d016      	beq.n	801402c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	8b5b      	ldrh	r3, [r3, #26]
 8014002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014006:	b29a      	uxth	r2, r3
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	835a      	strh	r2, [r3, #26]
      return err;
 801400c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014010:	e0d3      	b.n	80141ba <tcp_output+0x3de>
 8014012:	bf00      	nop
 8014014:	0801dbc4 	.word	0x0801dbc4
 8014018:	0801e108 	.word	0x0801e108
 801401c:	0801dc18 	.word	0x0801dc18
 8014020:	0801e120 	.word	0x0801e120
 8014024:	200122c8 	.word	0x200122c8
 8014028:	0801e148 	.word	0x0801e148
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	7d1b      	ldrb	r3, [r3, #20]
 8014038:	2b02      	cmp	r3, #2
 801403a:	d006      	beq.n	801404a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	8b5b      	ldrh	r3, [r3, #26]
 8014040:	f023 0303 	bic.w	r3, r3, #3
 8014044:	b29a      	uxth	r2, r3
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404c:	68db      	ldr	r3, [r3, #12]
 801404e:	685b      	ldr	r3, [r3, #4]
 8014050:	4618      	mov	r0, r3
 8014052:	f7f9 fa6a 	bl	800d52a <lwip_htonl>
 8014056:	4604      	mov	r4, r0
 8014058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405a:	891b      	ldrh	r3, [r3, #8]
 801405c:	461d      	mov	r5, r3
 801405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	899b      	ldrh	r3, [r3, #12]
 8014064:	b29b      	uxth	r3, r3
 8014066:	4618      	mov	r0, r3
 8014068:	f7f9 fa4a 	bl	800d500 <lwip_htons>
 801406c:	4603      	mov	r3, r0
 801406e:	b2db      	uxtb	r3, r3
 8014070:	f003 0303 	and.w	r3, r3, #3
 8014074:	2b00      	cmp	r3, #0
 8014076:	d001      	beq.n	801407c <tcp_output+0x2a0>
 8014078:	2301      	movs	r3, #1
 801407a:	e000      	b.n	801407e <tcp_output+0x2a2>
 801407c:	2300      	movs	r3, #0
 801407e:	442b      	add	r3, r5
 8014080:	4423      	add	r3, r4
 8014082:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	1ad3      	subs	r3, r2, r3
 801408c:	2b00      	cmp	r3, #0
 801408e:	da02      	bge.n	8014096 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	68ba      	ldr	r2, [r7, #8]
 8014094:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014098:	891b      	ldrh	r3, [r3, #8]
 801409a:	461c      	mov	r4, r3
 801409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	899b      	ldrh	r3, [r3, #12]
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7f9 fa2b 	bl	800d500 <lwip_htons>
 80140aa:	4603      	mov	r3, r0
 80140ac:	b2db      	uxtb	r3, r3
 80140ae:	f003 0303 	and.w	r3, r3, #3
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d001      	beq.n	80140ba <tcp_output+0x2de>
 80140b6:	2301      	movs	r3, #1
 80140b8:	e000      	b.n	80140bc <tcp_output+0x2e0>
 80140ba:	2300      	movs	r3, #0
 80140bc:	4423      	add	r3, r4
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d049      	beq.n	8014156 <tcp_output+0x37a>
      seg->next = NULL;
 80140c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c4:	2200      	movs	r2, #0
 80140c6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d105      	bne.n	80140dc <tcp_output+0x300>
        pcb->unacked = seg;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140d4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80140d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d8:	623b      	str	r3, [r7, #32]
 80140da:	e03f      	b.n	801415c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80140dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7f9 fa21 	bl	800d52a <lwip_htonl>
 80140e8:	4604      	mov	r4, r0
 80140ea:	6a3b      	ldr	r3, [r7, #32]
 80140ec:	68db      	ldr	r3, [r3, #12]
 80140ee:	685b      	ldr	r3, [r3, #4]
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7f9 fa1a 	bl	800d52a <lwip_htonl>
 80140f6:	4603      	mov	r3, r0
 80140f8:	1ae3      	subs	r3, r4, r3
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	da24      	bge.n	8014148 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	3370      	adds	r3, #112	; 0x70
 8014102:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014104:	e002      	b.n	801410c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014106:	69fb      	ldr	r3, [r7, #28]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d011      	beq.n	8014138 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014114:	69fb      	ldr	r3, [r7, #28]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	68db      	ldr	r3, [r3, #12]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	4618      	mov	r0, r3
 801411e:	f7f9 fa04 	bl	800d52a <lwip_htonl>
 8014122:	4604      	mov	r4, r0
 8014124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014126:	68db      	ldr	r3, [r3, #12]
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	4618      	mov	r0, r3
 801412c:	f7f9 f9fd 	bl	800d52a <lwip_htonl>
 8014130:	4603      	mov	r3, r0
 8014132:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014134:	2b00      	cmp	r3, #0
 8014136:	dbe6      	blt.n	8014106 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014138:	69fb      	ldr	r3, [r7, #28]
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014140:	69fb      	ldr	r3, [r7, #28]
 8014142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014144:	601a      	str	r2, [r3, #0]
 8014146:	e009      	b.n	801415c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014148:	6a3b      	ldr	r3, [r7, #32]
 801414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801414c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801414e:	6a3b      	ldr	r3, [r7, #32]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	623b      	str	r3, [r7, #32]
 8014154:	e002      	b.n	801415c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014156:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014158:	f7fc fc3f 	bl	80109da <tcp_seg_free>
    }
    seg = pcb->unsent;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014160:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014164:	2b00      	cmp	r3, #0
 8014166:	d012      	beq.n	801418e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416a:	68db      	ldr	r3, [r3, #12]
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	4618      	mov	r0, r3
 8014170:	f7f9 f9db 	bl	800d52a <lwip_htonl>
 8014174:	4602      	mov	r2, r0
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801417a:	1ad3      	subs	r3, r2, r3
 801417c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801417e:	8912      	ldrh	r2, [r2, #8]
 8014180:	4413      	add	r3, r2
  while (seg != NULL &&
 8014182:	69ba      	ldr	r2, [r7, #24]
 8014184:	429a      	cmp	r2, r3
 8014186:	f4bf aed9 	bcs.w	8013f3c <tcp_output+0x160>
 801418a:	e000      	b.n	801418e <tcp_output+0x3b2>
      break;
 801418c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014192:	2b00      	cmp	r3, #0
 8014194:	d108      	bne.n	80141a8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2200      	movs	r2, #0
 801419a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801419e:	e004      	b.n	80141aa <tcp_output+0x3ce>
    goto output_done;
 80141a0:	bf00      	nop
 80141a2:	e002      	b.n	80141aa <tcp_output+0x3ce>
    goto output_done;
 80141a4:	bf00      	nop
 80141a6:	e000      	b.n	80141aa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80141a8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	8b5b      	ldrh	r3, [r3, #26]
 80141ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80141b2:	b29a      	uxth	r2, r3
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80141b8:	2300      	movs	r3, #0
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	3728      	adds	r7, #40	; 0x28
 80141be:	46bd      	mov	sp, r7
 80141c0:	bdb0      	pop	{r4, r5, r7, pc}
 80141c2:	bf00      	nop

080141c4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d106      	bne.n	80141e0 <tcp_output_segment_busy+0x1c>
 80141d2:	4b09      	ldr	r3, [pc, #36]	; (80141f8 <tcp_output_segment_busy+0x34>)
 80141d4:	f240 529a 	movw	r2, #1434	; 0x59a
 80141d8:	4908      	ldr	r1, [pc, #32]	; (80141fc <tcp_output_segment_busy+0x38>)
 80141da:	4809      	ldr	r0, [pc, #36]	; (8014200 <tcp_output_segment_busy+0x3c>)
 80141dc:	f006 fc9c 	bl	801ab18 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	7b9b      	ldrb	r3, [r3, #14]
 80141e6:	2b01      	cmp	r3, #1
 80141e8:	d001      	beq.n	80141ee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80141ea:	2301      	movs	r3, #1
 80141ec:	e000      	b.n	80141f0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80141ee:	2300      	movs	r3, #0
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	0801dbc4 	.word	0x0801dbc4
 80141fc:	0801e160 	.word	0x0801e160
 8014200:	0801dc18 	.word	0x0801dc18

08014204 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014204:	b5b0      	push	{r4, r5, r7, lr}
 8014206:	b08c      	sub	sp, #48	; 0x30
 8014208:	af04      	add	r7, sp, #16
 801420a:	60f8      	str	r0, [r7, #12]
 801420c:	60b9      	str	r1, [r7, #8]
 801420e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d106      	bne.n	8014224 <tcp_output_segment+0x20>
 8014216:	4b64      	ldr	r3, [pc, #400]	; (80143a8 <tcp_output_segment+0x1a4>)
 8014218:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801421c:	4963      	ldr	r1, [pc, #396]	; (80143ac <tcp_output_segment+0x1a8>)
 801421e:	4864      	ldr	r0, [pc, #400]	; (80143b0 <tcp_output_segment+0x1ac>)
 8014220:	f006 fc7a 	bl	801ab18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d106      	bne.n	8014238 <tcp_output_segment+0x34>
 801422a:	4b5f      	ldr	r3, [pc, #380]	; (80143a8 <tcp_output_segment+0x1a4>)
 801422c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014230:	4960      	ldr	r1, [pc, #384]	; (80143b4 <tcp_output_segment+0x1b0>)
 8014232:	485f      	ldr	r0, [pc, #380]	; (80143b0 <tcp_output_segment+0x1ac>)
 8014234:	f006 fc70 	bl	801ab18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d106      	bne.n	801424c <tcp_output_segment+0x48>
 801423e:	4b5a      	ldr	r3, [pc, #360]	; (80143a8 <tcp_output_segment+0x1a4>)
 8014240:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014244:	495c      	ldr	r1, [pc, #368]	; (80143b8 <tcp_output_segment+0x1b4>)
 8014246:	485a      	ldr	r0, [pc, #360]	; (80143b0 <tcp_output_segment+0x1ac>)
 8014248:	f006 fc66 	bl	801ab18 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801424c:	68f8      	ldr	r0, [r7, #12]
 801424e:	f7ff ffb9 	bl	80141c4 <tcp_output_segment_busy>
 8014252:	4603      	mov	r3, r0
 8014254:	2b00      	cmp	r3, #0
 8014256:	d001      	beq.n	801425c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014258:	2300      	movs	r3, #0
 801425a:	e0a1      	b.n	80143a0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	68dc      	ldr	r4, [r3, #12]
 8014264:	4610      	mov	r0, r2
 8014266:	f7f9 f960 	bl	800d52a <lwip_htonl>
 801426a:	4603      	mov	r3, r0
 801426c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	68dc      	ldr	r4, [r3, #12]
 8014276:	4610      	mov	r0, r2
 8014278:	f7f9 f942 	bl	800d500 <lwip_htons>
 801427c:	4603      	mov	r3, r0
 801427e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014284:	68ba      	ldr	r2, [r7, #8]
 8014286:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014288:	441a      	add	r2, r3
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	68db      	ldr	r3, [r3, #12]
 8014292:	3314      	adds	r3, #20
 8014294:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	7a9b      	ldrb	r3, [r3, #10]
 801429a:	f003 0301 	and.w	r3, r3, #1
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d015      	beq.n	80142ce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	3304      	adds	r3, #4
 80142a6:	461a      	mov	r2, r3
 80142a8:	6879      	ldr	r1, [r7, #4]
 80142aa:	f44f 7006 	mov.w	r0, #536	; 0x218
 80142ae:	f7fc fe8b 	bl	8010fc8 <tcp_eff_send_mss_netif>
 80142b2:	4603      	mov	r3, r0
 80142b4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80142b6:	8b7b      	ldrh	r3, [r7, #26]
 80142b8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80142bc:	4618      	mov	r0, r3
 80142be:	f7f9 f934 	bl	800d52a <lwip_htonl>
 80142c2:	4602      	mov	r2, r0
 80142c4:	69fb      	ldr	r3, [r7, #28]
 80142c6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80142c8:	69fb      	ldr	r3, [r7, #28]
 80142ca:	3304      	adds	r3, #4
 80142cc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	da02      	bge.n	80142de <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	2200      	movs	r2, #0
 80142dc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d10c      	bne.n	8014300 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80142e6:	4b35      	ldr	r3, [pc, #212]	; (80143bc <tcp_output_segment+0x1b8>)
 80142e8:	681a      	ldr	r2, [r3, #0]
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	68db      	ldr	r3, [r3, #12]
 80142f2:	685b      	ldr	r3, [r3, #4]
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7f9 f918 	bl	800d52a <lwip_htonl>
 80142fa:	4602      	mov	r2, r0
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	68da      	ldr	r2, [r3, #12]
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	685b      	ldr	r3, [r3, #4]
 8014308:	685b      	ldr	r3, [r3, #4]
 801430a:	1ad3      	subs	r3, r2, r3
 801430c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	685b      	ldr	r3, [r3, #4]
 8014312:	8959      	ldrh	r1, [r3, #10]
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	8b3a      	ldrh	r2, [r7, #24]
 801431a:	1a8a      	subs	r2, r1, r2
 801431c:	b292      	uxth	r2, r2
 801431e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	8919      	ldrh	r1, [r3, #8]
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	685b      	ldr	r3, [r3, #4]
 801432a:	8b3a      	ldrh	r2, [r7, #24]
 801432c:	1a8a      	subs	r2, r1, r2
 801432e:	b292      	uxth	r2, r2
 8014330:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	68fa      	ldr	r2, [r7, #12]
 8014338:	68d2      	ldr	r2, [r2, #12]
 801433a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	68db      	ldr	r3, [r3, #12]
 8014340:	2200      	movs	r2, #0
 8014342:	741a      	strb	r2, [r3, #16]
 8014344:	2200      	movs	r2, #0
 8014346:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	68da      	ldr	r2, [r3, #12]
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	7a9b      	ldrb	r3, [r3, #10]
 8014350:	f003 0301 	and.w	r3, r3, #1
 8014354:	2b00      	cmp	r3, #0
 8014356:	d001      	beq.n	801435c <tcp_output_segment+0x158>
 8014358:	2318      	movs	r3, #24
 801435a:	e000      	b.n	801435e <tcp_output_segment+0x15a>
 801435c:	2314      	movs	r3, #20
 801435e:	4413      	add	r3, r2
 8014360:	69fa      	ldr	r2, [r7, #28]
 8014362:	429a      	cmp	r2, r3
 8014364:	d006      	beq.n	8014374 <tcp_output_segment+0x170>
 8014366:	4b10      	ldr	r3, [pc, #64]	; (80143a8 <tcp_output_segment+0x1a4>)
 8014368:	f240 621c 	movw	r2, #1564	; 0x61c
 801436c:	4914      	ldr	r1, [pc, #80]	; (80143c0 <tcp_output_segment+0x1bc>)
 801436e:	4810      	ldr	r0, [pc, #64]	; (80143b0 <tcp_output_segment+0x1ac>)
 8014370:	f006 fbd2 	bl	801ab18 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	6858      	ldr	r0, [r3, #4]
 8014378:	68b9      	ldr	r1, [r7, #8]
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	1d1c      	adds	r4, r3, #4
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	7add      	ldrb	r5, [r3, #11]
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	7a9b      	ldrb	r3, [r3, #10]
 8014386:	687a      	ldr	r2, [r7, #4]
 8014388:	9202      	str	r2, [sp, #8]
 801438a:	2206      	movs	r2, #6
 801438c:	9201      	str	r2, [sp, #4]
 801438e:	9300      	str	r3, [sp, #0]
 8014390:	462b      	mov	r3, r5
 8014392:	4622      	mov	r2, r4
 8014394:	f004 fc8a 	bl	8018cac <ip4_output_if>
 8014398:	4603      	mov	r3, r0
 801439a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801439c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3720      	adds	r7, #32
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bdb0      	pop	{r4, r5, r7, pc}
 80143a8:	0801dbc4 	.word	0x0801dbc4
 80143ac:	0801e188 	.word	0x0801e188
 80143b0:	0801dc18 	.word	0x0801dc18
 80143b4:	0801e1a8 	.word	0x0801e1a8
 80143b8:	0801e1c8 	.word	0x0801e1c8
 80143bc:	2001227c 	.word	0x2001227c
 80143c0:	0801e1ec 	.word	0x0801e1ec

080143c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80143c4:	b5b0      	push	{r4, r5, r7, lr}
 80143c6:	b084      	sub	sp, #16
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d106      	bne.n	80143e0 <tcp_rexmit_rto_prepare+0x1c>
 80143d2:	4b31      	ldr	r3, [pc, #196]	; (8014498 <tcp_rexmit_rto_prepare+0xd4>)
 80143d4:	f240 6263 	movw	r2, #1635	; 0x663
 80143d8:	4930      	ldr	r1, [pc, #192]	; (801449c <tcp_rexmit_rto_prepare+0xd8>)
 80143da:	4831      	ldr	r0, [pc, #196]	; (80144a0 <tcp_rexmit_rto_prepare+0xdc>)
 80143dc:	f006 fb9c 	bl	801ab18 <iprintf>

  if (pcb->unacked == NULL) {
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d102      	bne.n	80143ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80143e8:	f06f 0305 	mvn.w	r3, #5
 80143ec:	e050      	b.n	8014490 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143f2:	60fb      	str	r3, [r7, #12]
 80143f4:	e00b      	b.n	801440e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80143f6:	68f8      	ldr	r0, [r7, #12]
 80143f8:	f7ff fee4 	bl	80141c4 <tcp_output_segment_busy>
 80143fc:	4603      	mov	r3, r0
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d002      	beq.n	8014408 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014402:	f06f 0305 	mvn.w	r3, #5
 8014406:	e043      	b.n	8014490 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	60fb      	str	r3, [r7, #12]
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d1ef      	bne.n	80143f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	f7ff fed4 	bl	80141c4 <tcp_output_segment_busy>
 801441c:	4603      	mov	r3, r0
 801441e:	2b00      	cmp	r3, #0
 8014420:	d002      	beq.n	8014428 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014422:	f06f 0305 	mvn.w	r3, #5
 8014426:	e033      	b.n	8014490 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2200      	movs	r2, #0
 801443c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	8b5b      	ldrh	r3, [r3, #26]
 8014442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014446:	b29a      	uxth	r2, r3
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	68db      	ldr	r3, [r3, #12]
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	4618      	mov	r0, r3
 8014454:	f7f9 f869 	bl	800d52a <lwip_htonl>
 8014458:	4604      	mov	r4, r0
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	891b      	ldrh	r3, [r3, #8]
 801445e:	461d      	mov	r5, r3
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	68db      	ldr	r3, [r3, #12]
 8014464:	899b      	ldrh	r3, [r3, #12]
 8014466:	b29b      	uxth	r3, r3
 8014468:	4618      	mov	r0, r3
 801446a:	f7f9 f849 	bl	800d500 <lwip_htons>
 801446e:	4603      	mov	r3, r0
 8014470:	b2db      	uxtb	r3, r3
 8014472:	f003 0303 	and.w	r3, r3, #3
 8014476:	2b00      	cmp	r3, #0
 8014478:	d001      	beq.n	801447e <tcp_rexmit_rto_prepare+0xba>
 801447a:	2301      	movs	r3, #1
 801447c:	e000      	b.n	8014480 <tcp_rexmit_rto_prepare+0xbc>
 801447e:	2300      	movs	r3, #0
 8014480:	442b      	add	r3, r5
 8014482:	18e2      	adds	r2, r4, r3
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2200      	movs	r2, #0
 801448c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801448e:	2300      	movs	r3, #0
}
 8014490:	4618      	mov	r0, r3
 8014492:	3710      	adds	r7, #16
 8014494:	46bd      	mov	sp, r7
 8014496:	bdb0      	pop	{r4, r5, r7, pc}
 8014498:	0801dbc4 	.word	0x0801dbc4
 801449c:	0801e200 	.word	0x0801e200
 80144a0:	0801dc18 	.word	0x0801dc18

080144a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d106      	bne.n	80144c0 <tcp_rexmit_rto_commit+0x1c>
 80144b2:	4b0d      	ldr	r3, [pc, #52]	; (80144e8 <tcp_rexmit_rto_commit+0x44>)
 80144b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80144b8:	490c      	ldr	r1, [pc, #48]	; (80144ec <tcp_rexmit_rto_commit+0x48>)
 80144ba:	480d      	ldr	r0, [pc, #52]	; (80144f0 <tcp_rexmit_rto_commit+0x4c>)
 80144bc:	f006 fb2c 	bl	801ab18 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144c6:	2bff      	cmp	r3, #255	; 0xff
 80144c8:	d007      	beq.n	80144da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144d0:	3301      	adds	r3, #1
 80144d2:	b2da      	uxtb	r2, r3
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f7ff fc7e 	bl	8013ddc <tcp_output>
}
 80144e0:	bf00      	nop
 80144e2:	3708      	adds	r7, #8
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	0801dbc4 	.word	0x0801dbc4
 80144ec:	0801e224 	.word	0x0801e224
 80144f0:	0801dc18 	.word	0x0801dc18

080144f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b082      	sub	sp, #8
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d106      	bne.n	8014510 <tcp_rexmit_rto+0x1c>
 8014502:	4b0a      	ldr	r3, [pc, #40]	; (801452c <tcp_rexmit_rto+0x38>)
 8014504:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014508:	4909      	ldr	r1, [pc, #36]	; (8014530 <tcp_rexmit_rto+0x3c>)
 801450a:	480a      	ldr	r0, [pc, #40]	; (8014534 <tcp_rexmit_rto+0x40>)
 801450c:	f006 fb04 	bl	801ab18 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f7ff ff57 	bl	80143c4 <tcp_rexmit_rto_prepare>
 8014516:	4603      	mov	r3, r0
 8014518:	2b00      	cmp	r3, #0
 801451a:	d102      	bne.n	8014522 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f7ff ffc1 	bl	80144a4 <tcp_rexmit_rto_commit>
  }
}
 8014522:	bf00      	nop
 8014524:	3708      	adds	r7, #8
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	0801dbc4 	.word	0x0801dbc4
 8014530:	0801e248 	.word	0x0801e248
 8014534:	0801dc18 	.word	0x0801dc18

08014538 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014538:	b590      	push	{r4, r7, lr}
 801453a:	b085      	sub	sp, #20
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d106      	bne.n	8014554 <tcp_rexmit+0x1c>
 8014546:	4b2f      	ldr	r3, [pc, #188]	; (8014604 <tcp_rexmit+0xcc>)
 8014548:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801454c:	492e      	ldr	r1, [pc, #184]	; (8014608 <tcp_rexmit+0xd0>)
 801454e:	482f      	ldr	r0, [pc, #188]	; (801460c <tcp_rexmit+0xd4>)
 8014550:	f006 fae2 	bl	801ab18 <iprintf>

  if (pcb->unacked == NULL) {
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014558:	2b00      	cmp	r3, #0
 801455a:	d102      	bne.n	8014562 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801455c:	f06f 0305 	mvn.w	r3, #5
 8014560:	e04c      	b.n	80145fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014566:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014568:	68b8      	ldr	r0, [r7, #8]
 801456a:	f7ff fe2b 	bl	80141c4 <tcp_output_segment_busy>
 801456e:	4603      	mov	r3, r0
 8014570:	2b00      	cmp	r3, #0
 8014572:	d002      	beq.n	801457a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014574:	f06f 0305 	mvn.w	r3, #5
 8014578:	e040      	b.n	80145fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801457a:	68bb      	ldr	r3, [r7, #8]
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	336c      	adds	r3, #108	; 0x6c
 8014586:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014588:	e002      	b.n	8014590 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d011      	beq.n	80145bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7f8 ffc2 	bl	800d52a <lwip_htonl>
 80145a6:	4604      	mov	r4, r0
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	68db      	ldr	r3, [r3, #12]
 80145ac:	685b      	ldr	r3, [r3, #4]
 80145ae:	4618      	mov	r0, r3
 80145b0:	f7f8 ffbb 	bl	800d52a <lwip_htonl>
 80145b4:	4603      	mov	r3, r0
 80145b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	dbe6      	blt.n	801458a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	681a      	ldr	r2, [r3, #0]
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	68ba      	ldr	r2, [r7, #8]
 80145c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d103      	bne.n	80145da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2200      	movs	r2, #0
 80145d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80145e0:	2bff      	cmp	r3, #255	; 0xff
 80145e2:	d007      	beq.n	80145f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80145ea:	3301      	adds	r3, #1
 80145ec:	b2da      	uxtb	r2, r3
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2200      	movs	r2, #0
 80145f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80145fa:	2300      	movs	r3, #0
}
 80145fc:	4618      	mov	r0, r3
 80145fe:	3714      	adds	r7, #20
 8014600:	46bd      	mov	sp, r7
 8014602:	bd90      	pop	{r4, r7, pc}
 8014604:	0801dbc4 	.word	0x0801dbc4
 8014608:	0801e264 	.word	0x0801e264
 801460c:	0801dc18 	.word	0x0801dc18

08014610 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d106      	bne.n	801462c <tcp_rexmit_fast+0x1c>
 801461e:	4b2a      	ldr	r3, [pc, #168]	; (80146c8 <tcp_rexmit_fast+0xb8>)
 8014620:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014624:	4929      	ldr	r1, [pc, #164]	; (80146cc <tcp_rexmit_fast+0xbc>)
 8014626:	482a      	ldr	r0, [pc, #168]	; (80146d0 <tcp_rexmit_fast+0xc0>)
 8014628:	f006 fa76 	bl	801ab18 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014630:	2b00      	cmp	r3, #0
 8014632:	d044      	beq.n	80146be <tcp_rexmit_fast+0xae>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	8b5b      	ldrh	r3, [r3, #26]
 8014638:	f003 0304 	and.w	r3, r3, #4
 801463c:	2b00      	cmp	r3, #0
 801463e:	d13e      	bne.n	80146be <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f7ff ff79 	bl	8014538 <tcp_rexmit>
 8014646:	4603      	mov	r3, r0
 8014648:	2b00      	cmp	r3, #0
 801464a:	d138      	bne.n	80146be <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014658:	4293      	cmp	r3, r2
 801465a:	bf28      	it	cs
 801465c:	4613      	movcs	r3, r2
 801465e:	b29b      	uxth	r3, r3
 8014660:	0fda      	lsrs	r2, r3, #31
 8014662:	4413      	add	r3, r2
 8014664:	105b      	asrs	r3, r3, #1
 8014666:	b29a      	uxth	r2, r3
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014674:	461a      	mov	r2, r3
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801467a:	005b      	lsls	r3, r3, #1
 801467c:	429a      	cmp	r2, r3
 801467e:	d206      	bcs.n	801468e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014684:	005b      	lsls	r3, r3, #1
 8014686:	b29a      	uxth	r2, r3
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014698:	4619      	mov	r1, r3
 801469a:	0049      	lsls	r1, r1, #1
 801469c:	440b      	add	r3, r1
 801469e:	b29b      	uxth	r3, r3
 80146a0:	4413      	add	r3, r2
 80146a2:	b29a      	uxth	r2, r3
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	8b5b      	ldrh	r3, [r3, #26]
 80146ae:	f043 0304 	orr.w	r3, r3, #4
 80146b2:	b29a      	uxth	r2, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2200      	movs	r2, #0
 80146bc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80146be:	bf00      	nop
 80146c0:	3708      	adds	r7, #8
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	0801dbc4 	.word	0x0801dbc4
 80146cc:	0801e27c 	.word	0x0801e27c
 80146d0:	0801dc18 	.word	0x0801dc18

080146d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b086      	sub	sp, #24
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	607b      	str	r3, [r7, #4]
 80146de:	460b      	mov	r3, r1
 80146e0:	817b      	strh	r3, [r7, #10]
 80146e2:	4613      	mov	r3, r2
 80146e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80146e6:	897a      	ldrh	r2, [r7, #10]
 80146e8:	893b      	ldrh	r3, [r7, #8]
 80146ea:	4413      	add	r3, r2
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	3314      	adds	r3, #20
 80146f0:	b29b      	uxth	r3, r3
 80146f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80146f6:	4619      	mov	r1, r3
 80146f8:	2022      	movs	r0, #34	; 0x22
 80146fa:	f7fa faa1 	bl	800ec40 <pbuf_alloc>
 80146fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d04d      	beq.n	80147a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014706:	897b      	ldrh	r3, [r7, #10]
 8014708:	3313      	adds	r3, #19
 801470a:	697a      	ldr	r2, [r7, #20]
 801470c:	8952      	ldrh	r2, [r2, #10]
 801470e:	4293      	cmp	r3, r2
 8014710:	db06      	blt.n	8014720 <tcp_output_alloc_header_common+0x4c>
 8014712:	4b26      	ldr	r3, [pc, #152]	; (80147ac <tcp_output_alloc_header_common+0xd8>)
 8014714:	f240 7223 	movw	r2, #1827	; 0x723
 8014718:	4925      	ldr	r1, [pc, #148]	; (80147b0 <tcp_output_alloc_header_common+0xdc>)
 801471a:	4826      	ldr	r0, [pc, #152]	; (80147b4 <tcp_output_alloc_header_common+0xe0>)
 801471c:	f006 f9fc 	bl	801ab18 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014720:	697b      	ldr	r3, [r7, #20]
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014726:	8c3b      	ldrh	r3, [r7, #32]
 8014728:	4618      	mov	r0, r3
 801472a:	f7f8 fee9 	bl	800d500 <lwip_htons>
 801472e:	4603      	mov	r3, r0
 8014730:	461a      	mov	r2, r3
 8014732:	693b      	ldr	r3, [r7, #16]
 8014734:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014738:	4618      	mov	r0, r3
 801473a:	f7f8 fee1 	bl	800d500 <lwip_htons>
 801473e:	4603      	mov	r3, r0
 8014740:	461a      	mov	r2, r3
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	687a      	ldr	r2, [r7, #4]
 801474a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801474c:	68f8      	ldr	r0, [r7, #12]
 801474e:	f7f8 feec 	bl	800d52a <lwip_htonl>
 8014752:	4602      	mov	r2, r0
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014758:	897b      	ldrh	r3, [r7, #10]
 801475a:	089b      	lsrs	r3, r3, #2
 801475c:	b29b      	uxth	r3, r3
 801475e:	3305      	adds	r3, #5
 8014760:	b29b      	uxth	r3, r3
 8014762:	031b      	lsls	r3, r3, #12
 8014764:	b29a      	uxth	r2, r3
 8014766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801476a:	b29b      	uxth	r3, r3
 801476c:	4313      	orrs	r3, r2
 801476e:	b29b      	uxth	r3, r3
 8014770:	4618      	mov	r0, r3
 8014772:	f7f8 fec5 	bl	800d500 <lwip_htons>
 8014776:	4603      	mov	r3, r0
 8014778:	461a      	mov	r2, r3
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801477e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014780:	4618      	mov	r0, r3
 8014782:	f7f8 febd 	bl	800d500 <lwip_htons>
 8014786:	4603      	mov	r3, r0
 8014788:	461a      	mov	r2, r3
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	2200      	movs	r2, #0
 8014792:	741a      	strb	r2, [r3, #16]
 8014794:	2200      	movs	r2, #0
 8014796:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	2200      	movs	r2, #0
 801479c:	749a      	strb	r2, [r3, #18]
 801479e:	2200      	movs	r2, #0
 80147a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80147a2:	697b      	ldr	r3, [r7, #20]
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3718      	adds	r7, #24
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	0801dbc4 	.word	0x0801dbc4
 80147b0:	0801e29c 	.word	0x0801e29c
 80147b4:	0801dc18 	.word	0x0801dc18

080147b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80147b8:	b5b0      	push	{r4, r5, r7, lr}
 80147ba:	b08a      	sub	sp, #40	; 0x28
 80147bc:	af04      	add	r7, sp, #16
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	607b      	str	r3, [r7, #4]
 80147c2:	460b      	mov	r3, r1
 80147c4:	817b      	strh	r3, [r7, #10]
 80147c6:	4613      	mov	r3, r2
 80147c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d106      	bne.n	80147de <tcp_output_alloc_header+0x26>
 80147d0:	4b15      	ldr	r3, [pc, #84]	; (8014828 <tcp_output_alloc_header+0x70>)
 80147d2:	f240 7242 	movw	r2, #1858	; 0x742
 80147d6:	4915      	ldr	r1, [pc, #84]	; (801482c <tcp_output_alloc_header+0x74>)
 80147d8:	4815      	ldr	r0, [pc, #84]	; (8014830 <tcp_output_alloc_header+0x78>)
 80147da:	f006 f99d 	bl	801ab18 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	8adb      	ldrh	r3, [r3, #22]
 80147e6:	68fa      	ldr	r2, [r7, #12]
 80147e8:	8b12      	ldrh	r2, [r2, #24]
 80147ea:	68f9      	ldr	r1, [r7, #12]
 80147ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80147ee:	893d      	ldrh	r5, [r7, #8]
 80147f0:	897c      	ldrh	r4, [r7, #10]
 80147f2:	9103      	str	r1, [sp, #12]
 80147f4:	2110      	movs	r1, #16
 80147f6:	9102      	str	r1, [sp, #8]
 80147f8:	9201      	str	r2, [sp, #4]
 80147fa:	9300      	str	r3, [sp, #0]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	462a      	mov	r2, r5
 8014800:	4621      	mov	r1, r4
 8014802:	f7ff ff67 	bl	80146d4 <tcp_output_alloc_header_common>
 8014806:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d006      	beq.n	801481c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014812:	68fa      	ldr	r2, [r7, #12]
 8014814:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014816:	441a      	add	r2, r3
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801481c:	697b      	ldr	r3, [r7, #20]
}
 801481e:	4618      	mov	r0, r3
 8014820:	3718      	adds	r7, #24
 8014822:	46bd      	mov	sp, r7
 8014824:	bdb0      	pop	{r4, r5, r7, pc}
 8014826:	bf00      	nop
 8014828:	0801dbc4 	.word	0x0801dbc4
 801482c:	0801e2cc 	.word	0x0801e2cc
 8014830:	0801dc18 	.word	0x0801dc18

08014834 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b088      	sub	sp, #32
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	4611      	mov	r1, r2
 8014840:	461a      	mov	r2, r3
 8014842:	460b      	mov	r3, r1
 8014844:	71fb      	strb	r3, [r7, #7]
 8014846:	4613      	mov	r3, r2
 8014848:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801484a:	2300      	movs	r3, #0
 801484c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d106      	bne.n	8014862 <tcp_output_fill_options+0x2e>
 8014854:	4b12      	ldr	r3, [pc, #72]	; (80148a0 <tcp_output_fill_options+0x6c>)
 8014856:	f240 7256 	movw	r2, #1878	; 0x756
 801485a:	4912      	ldr	r1, [pc, #72]	; (80148a4 <tcp_output_fill_options+0x70>)
 801485c:	4812      	ldr	r0, [pc, #72]	; (80148a8 <tcp_output_fill_options+0x74>)
 801485e:	f006 f95b 	bl	801ab18 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	685b      	ldr	r3, [r3, #4]
 8014866:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014868:	69bb      	ldr	r3, [r7, #24]
 801486a:	3314      	adds	r3, #20
 801486c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801486e:	8bfb      	ldrh	r3, [r7, #30]
 8014870:	009b      	lsls	r3, r3, #2
 8014872:	461a      	mov	r2, r3
 8014874:	79fb      	ldrb	r3, [r7, #7]
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	f003 0304 	and.w	r3, r3, #4
 801487c:	4413      	add	r3, r2
 801487e:	3314      	adds	r3, #20
 8014880:	69ba      	ldr	r2, [r7, #24]
 8014882:	4413      	add	r3, r2
 8014884:	697a      	ldr	r2, [r7, #20]
 8014886:	429a      	cmp	r2, r3
 8014888:	d006      	beq.n	8014898 <tcp_output_fill_options+0x64>
 801488a:	4b05      	ldr	r3, [pc, #20]	; (80148a0 <tcp_output_fill_options+0x6c>)
 801488c:	f240 7275 	movw	r2, #1909	; 0x775
 8014890:	4906      	ldr	r1, [pc, #24]	; (80148ac <tcp_output_fill_options+0x78>)
 8014892:	4805      	ldr	r0, [pc, #20]	; (80148a8 <tcp_output_fill_options+0x74>)
 8014894:	f006 f940 	bl	801ab18 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014898:	bf00      	nop
 801489a:	3720      	adds	r7, #32
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}
 80148a0:	0801dbc4 	.word	0x0801dbc4
 80148a4:	0801e2f4 	.word	0x0801e2f4
 80148a8:	0801dc18 	.word	0x0801dc18
 80148ac:	0801e1ec 	.word	0x0801e1ec

080148b0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b08a      	sub	sp, #40	; 0x28
 80148b4:	af04      	add	r7, sp, #16
 80148b6:	60f8      	str	r0, [r7, #12]
 80148b8:	60b9      	str	r1, [r7, #8]
 80148ba:	607a      	str	r2, [r7, #4]
 80148bc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d106      	bne.n	80148d2 <tcp_output_control_segment+0x22>
 80148c4:	4b1c      	ldr	r3, [pc, #112]	; (8014938 <tcp_output_control_segment+0x88>)
 80148c6:	f240 7287 	movw	r2, #1927	; 0x787
 80148ca:	491c      	ldr	r1, [pc, #112]	; (801493c <tcp_output_control_segment+0x8c>)
 80148cc:	481c      	ldr	r0, [pc, #112]	; (8014940 <tcp_output_control_segment+0x90>)
 80148ce:	f006 f923 	bl	801ab18 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80148d2:	683a      	ldr	r2, [r7, #0]
 80148d4:	6879      	ldr	r1, [r7, #4]
 80148d6:	68f8      	ldr	r0, [r7, #12]
 80148d8:	f7fe ff40 	bl	801375c <tcp_route>
 80148dc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d102      	bne.n	80148ea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80148e4:	23fc      	movs	r3, #252	; 0xfc
 80148e6:	75fb      	strb	r3, [r7, #23]
 80148e8:	e01c      	b.n	8014924 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d006      	beq.n	80148fe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	7adb      	ldrb	r3, [r3, #11]
 80148f4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	7a9b      	ldrb	r3, [r3, #10]
 80148fa:	757b      	strb	r3, [r7, #21]
 80148fc:	e003      	b.n	8014906 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80148fe:	23ff      	movs	r3, #255	; 0xff
 8014900:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014902:	2300      	movs	r3, #0
 8014904:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014906:	7dba      	ldrb	r2, [r7, #22]
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	9302      	str	r3, [sp, #8]
 801490c:	2306      	movs	r3, #6
 801490e:	9301      	str	r3, [sp, #4]
 8014910:	7d7b      	ldrb	r3, [r7, #21]
 8014912:	9300      	str	r3, [sp, #0]
 8014914:	4613      	mov	r3, r2
 8014916:	683a      	ldr	r2, [r7, #0]
 8014918:	6879      	ldr	r1, [r7, #4]
 801491a:	68b8      	ldr	r0, [r7, #8]
 801491c:	f004 f9c6 	bl	8018cac <ip4_output_if>
 8014920:	4603      	mov	r3, r0
 8014922:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014924:	68b8      	ldr	r0, [r7, #8]
 8014926:	f7fa fc6f 	bl	800f208 <pbuf_free>
  return err;
 801492a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801492e:	4618      	mov	r0, r3
 8014930:	3718      	adds	r7, #24
 8014932:	46bd      	mov	sp, r7
 8014934:	bd80      	pop	{r7, pc}
 8014936:	bf00      	nop
 8014938:	0801dbc4 	.word	0x0801dbc4
 801493c:	0801e31c 	.word	0x0801e31c
 8014940:	0801dc18 	.word	0x0801dc18

08014944 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014944:	b590      	push	{r4, r7, lr}
 8014946:	b08b      	sub	sp, #44	; 0x2c
 8014948:	af04      	add	r7, sp, #16
 801494a:	60f8      	str	r0, [r7, #12]
 801494c:	60b9      	str	r1, [r7, #8]
 801494e:	607a      	str	r2, [r7, #4]
 8014950:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d106      	bne.n	8014966 <tcp_rst+0x22>
 8014958:	4b1f      	ldr	r3, [pc, #124]	; (80149d8 <tcp_rst+0x94>)
 801495a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801495e:	491f      	ldr	r1, [pc, #124]	; (80149dc <tcp_rst+0x98>)
 8014960:	481f      	ldr	r0, [pc, #124]	; (80149e0 <tcp_rst+0x9c>)
 8014962:	f006 f8d9 	bl	801ab18 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014968:	2b00      	cmp	r3, #0
 801496a:	d106      	bne.n	801497a <tcp_rst+0x36>
 801496c:	4b1a      	ldr	r3, [pc, #104]	; (80149d8 <tcp_rst+0x94>)
 801496e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014972:	491c      	ldr	r1, [pc, #112]	; (80149e4 <tcp_rst+0xa0>)
 8014974:	481a      	ldr	r0, [pc, #104]	; (80149e0 <tcp_rst+0x9c>)
 8014976:	f006 f8cf 	bl	801ab18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801497a:	2300      	movs	r3, #0
 801497c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801497e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014982:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014984:	7dfb      	ldrb	r3, [r7, #23]
 8014986:	b29c      	uxth	r4, r3
 8014988:	68b8      	ldr	r0, [r7, #8]
 801498a:	f7f8 fdce 	bl	800d52a <lwip_htonl>
 801498e:	4602      	mov	r2, r0
 8014990:	8abb      	ldrh	r3, [r7, #20]
 8014992:	9303      	str	r3, [sp, #12]
 8014994:	2314      	movs	r3, #20
 8014996:	9302      	str	r3, [sp, #8]
 8014998:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801499a:	9301      	str	r3, [sp, #4]
 801499c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801499e:	9300      	str	r3, [sp, #0]
 80149a0:	4613      	mov	r3, r2
 80149a2:	2200      	movs	r2, #0
 80149a4:	4621      	mov	r1, r4
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f7ff fe94 	bl	80146d4 <tcp_output_alloc_header_common>
 80149ac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d00c      	beq.n	80149ce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80149b4:	7dfb      	ldrb	r3, [r7, #23]
 80149b6:	2200      	movs	r2, #0
 80149b8:	6939      	ldr	r1, [r7, #16]
 80149ba:	68f8      	ldr	r0, [r7, #12]
 80149bc:	f7ff ff3a 	bl	8014834 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80149c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	6939      	ldr	r1, [r7, #16]
 80149c6:	68f8      	ldr	r0, [r7, #12]
 80149c8:	f7ff ff72 	bl	80148b0 <tcp_output_control_segment>
 80149cc:	e000      	b.n	80149d0 <tcp_rst+0x8c>
    return;
 80149ce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80149d0:	371c      	adds	r7, #28
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd90      	pop	{r4, r7, pc}
 80149d6:	bf00      	nop
 80149d8:	0801dbc4 	.word	0x0801dbc4
 80149dc:	0801e348 	.word	0x0801e348
 80149e0:	0801dc18 	.word	0x0801dc18
 80149e4:	0801e364 	.word	0x0801e364

080149e8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80149e8:	b590      	push	{r4, r7, lr}
 80149ea:	b087      	sub	sp, #28
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80149f0:	2300      	movs	r3, #0
 80149f2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80149f4:	2300      	movs	r3, #0
 80149f6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d106      	bne.n	8014a0c <tcp_send_empty_ack+0x24>
 80149fe:	4b28      	ldr	r3, [pc, #160]	; (8014aa0 <tcp_send_empty_ack+0xb8>)
 8014a00:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014a04:	4927      	ldr	r1, [pc, #156]	; (8014aa4 <tcp_send_empty_ack+0xbc>)
 8014a06:	4828      	ldr	r0, [pc, #160]	; (8014aa8 <tcp_send_empty_ack+0xc0>)
 8014a08:	f006 f886 	bl	801ab18 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a0c:	7dfb      	ldrb	r3, [r7, #23]
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	b2db      	uxtb	r3, r3
 8014a12:	f003 0304 	and.w	r3, r3, #4
 8014a16:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014a18:	7d7b      	ldrb	r3, [r7, #21]
 8014a1a:	b29c      	uxth	r4, r3
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a20:	4618      	mov	r0, r3
 8014a22:	f7f8 fd82 	bl	800d52a <lwip_htonl>
 8014a26:	4603      	mov	r3, r0
 8014a28:	2200      	movs	r2, #0
 8014a2a:	4621      	mov	r1, r4
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f7ff fec3 	bl	80147b8 <tcp_output_alloc_header>
 8014a32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d109      	bne.n	8014a4e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	8b5b      	ldrh	r3, [r3, #26]
 8014a3e:	f043 0303 	orr.w	r3, r3, #3
 8014a42:	b29a      	uxth	r2, r3
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014a48:	f06f 0301 	mvn.w	r3, #1
 8014a4c:	e023      	b.n	8014a96 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014a4e:	7dbb      	ldrb	r3, [r7, #22]
 8014a50:	7dfa      	ldrb	r2, [r7, #23]
 8014a52:	6939      	ldr	r1, [r7, #16]
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f7ff feed 	bl	8014834 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a5a:	687a      	ldr	r2, [r7, #4]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	3304      	adds	r3, #4
 8014a60:	6939      	ldr	r1, [r7, #16]
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f7ff ff24 	bl	80148b0 <tcp_output_control_segment>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d007      	beq.n	8014a84 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	8b5b      	ldrh	r3, [r3, #26]
 8014a78:	f043 0303 	orr.w	r3, r3, #3
 8014a7c:	b29a      	uxth	r2, r3
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	835a      	strh	r2, [r3, #26]
 8014a82:	e006      	b.n	8014a92 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	8b5b      	ldrh	r3, [r3, #26]
 8014a88:	f023 0303 	bic.w	r3, r3, #3
 8014a8c:	b29a      	uxth	r2, r3
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	371c      	adds	r7, #28
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd90      	pop	{r4, r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	0801dbc4 	.word	0x0801dbc4
 8014aa4:	0801e380 	.word	0x0801e380
 8014aa8:	0801dc18 	.word	0x0801dc18

08014aac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014aac:	b590      	push	{r4, r7, lr}
 8014aae:	b087      	sub	sp, #28
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d106      	bne.n	8014acc <tcp_keepalive+0x20>
 8014abe:	4b18      	ldr	r3, [pc, #96]	; (8014b20 <tcp_keepalive+0x74>)
 8014ac0:	f640 0224 	movw	r2, #2084	; 0x824
 8014ac4:	4917      	ldr	r1, [pc, #92]	; (8014b24 <tcp_keepalive+0x78>)
 8014ac6:	4818      	ldr	r0, [pc, #96]	; (8014b28 <tcp_keepalive+0x7c>)
 8014ac8:	f006 f826 	bl	801ab18 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014acc:	7dfb      	ldrb	r3, [r7, #23]
 8014ace:	b29c      	uxth	r4, r3
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ad4:	3b01      	subs	r3, #1
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7f8 fd27 	bl	800d52a <lwip_htonl>
 8014adc:	4603      	mov	r3, r0
 8014ade:	2200      	movs	r2, #0
 8014ae0:	4621      	mov	r1, r4
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f7ff fe68 	bl	80147b8 <tcp_output_alloc_header>
 8014ae8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d102      	bne.n	8014af6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014af0:	f04f 33ff 	mov.w	r3, #4294967295
 8014af4:	e010      	b.n	8014b18 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014af6:	7dfb      	ldrb	r3, [r7, #23]
 8014af8:	2200      	movs	r2, #0
 8014afa:	6939      	ldr	r1, [r7, #16]
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7ff fe99 	bl	8014834 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	3304      	adds	r3, #4
 8014b08:	6939      	ldr	r1, [r7, #16]
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f7ff fed0 	bl	80148b0 <tcp_output_control_segment>
 8014b10:	4603      	mov	r3, r0
 8014b12:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b18:	4618      	mov	r0, r3
 8014b1a:	371c      	adds	r7, #28
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd90      	pop	{r4, r7, pc}
 8014b20:	0801dbc4 	.word	0x0801dbc4
 8014b24:	0801e3a0 	.word	0x0801e3a0
 8014b28:	0801dc18 	.word	0x0801dc18

08014b2c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014b2c:	b590      	push	{r4, r7, lr}
 8014b2e:	b08b      	sub	sp, #44	; 0x2c
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b34:	2300      	movs	r3, #0
 8014b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d106      	bne.n	8014b4e <tcp_zero_window_probe+0x22>
 8014b40:	4b4c      	ldr	r3, [pc, #304]	; (8014c74 <tcp_zero_window_probe+0x148>)
 8014b42:	f640 024f 	movw	r2, #2127	; 0x84f
 8014b46:	494c      	ldr	r1, [pc, #304]	; (8014c78 <tcp_zero_window_probe+0x14c>)
 8014b48:	484c      	ldr	r0, [pc, #304]	; (8014c7c <tcp_zero_window_probe+0x150>)
 8014b4a:	f005 ffe5 	bl	801ab18 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b52:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014b54:	6a3b      	ldr	r3, [r7, #32]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d101      	bne.n	8014b5e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	e086      	b.n	8014c6c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014b64:	2bff      	cmp	r3, #255	; 0xff
 8014b66:	d007      	beq.n	8014b78 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014b6e:	3301      	adds	r3, #1
 8014b70:	b2da      	uxtb	r2, r3
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014b78:	6a3b      	ldr	r3, [r7, #32]
 8014b7a:	68db      	ldr	r3, [r3, #12]
 8014b7c:	899b      	ldrh	r3, [r3, #12]
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7f8 fcbd 	bl	800d500 <lwip_htons>
 8014b86:	4603      	mov	r3, r0
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	f003 0301 	and.w	r3, r3, #1
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d005      	beq.n	8014b9e <tcp_zero_window_probe+0x72>
 8014b92:	6a3b      	ldr	r3, [r7, #32]
 8014b94:	891b      	ldrh	r3, [r3, #8]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d101      	bne.n	8014b9e <tcp_zero_window_probe+0x72>
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	e000      	b.n	8014ba0 <tcp_zero_window_probe+0x74>
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014ba2:	7ffb      	ldrb	r3, [r7, #31]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	bf0c      	ite	eq
 8014ba8:	2301      	moveq	r3, #1
 8014baa:	2300      	movne	r3, #0
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bb4:	b299      	uxth	r1, r3
 8014bb6:	6a3b      	ldr	r3, [r7, #32]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	685b      	ldr	r3, [r3, #4]
 8014bbc:	8bba      	ldrh	r2, [r7, #28]
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f7ff fdfa 	bl	80147b8 <tcp_output_alloc_header>
 8014bc4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014bc6:	69bb      	ldr	r3, [r7, #24]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d102      	bne.n	8014bd2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd0:	e04c      	b.n	8014c6c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014bd2:	69bb      	ldr	r3, [r7, #24]
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014bd8:	7ffb      	ldrb	r3, [r7, #31]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d011      	beq.n	8014c02 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	899b      	ldrh	r3, [r3, #12]
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	b21b      	sxth	r3, r3
 8014be6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014bea:	b21c      	sxth	r4, r3
 8014bec:	2011      	movs	r0, #17
 8014bee:	f7f8 fc87 	bl	800d500 <lwip_htons>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	b21b      	sxth	r3, r3
 8014bf6:	4323      	orrs	r3, r4
 8014bf8:	b21b      	sxth	r3, r3
 8014bfa:	b29a      	uxth	r2, r3
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	819a      	strh	r2, [r3, #12]
 8014c00:	e010      	b.n	8014c24 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014c02:	69bb      	ldr	r3, [r7, #24]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	3314      	adds	r3, #20
 8014c08:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014c0a:	6a3b      	ldr	r3, [r7, #32]
 8014c0c:	6858      	ldr	r0, [r3, #4]
 8014c0e:	6a3b      	ldr	r3, [r7, #32]
 8014c10:	685b      	ldr	r3, [r3, #4]
 8014c12:	891a      	ldrh	r2, [r3, #8]
 8014c14:	6a3b      	ldr	r3, [r7, #32]
 8014c16:	891b      	ldrh	r3, [r3, #8]
 8014c18:	1ad3      	subs	r3, r2, r3
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	2201      	movs	r2, #1
 8014c1e:	6939      	ldr	r1, [r7, #16]
 8014c20:	f7fa fcf8 	bl	800f614 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014c24:	6a3b      	ldr	r3, [r7, #32]
 8014c26:	68db      	ldr	r3, [r3, #12]
 8014c28:	685b      	ldr	r3, [r3, #4]
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f7f8 fc7d 	bl	800d52a <lwip_htonl>
 8014c30:	4603      	mov	r3, r0
 8014c32:	3301      	adds	r3, #1
 8014c34:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	1ad3      	subs	r3, r2, r3
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	da02      	bge.n	8014c48 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	68fa      	ldr	r2, [r7, #12]
 8014c46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	69b9      	ldr	r1, [r7, #24]
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f7ff fdef 	bl	8014834 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c56:	687a      	ldr	r2, [r7, #4]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	3304      	adds	r3, #4
 8014c5c:	69b9      	ldr	r1, [r7, #24]
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f7ff fe26 	bl	80148b0 <tcp_output_control_segment>
 8014c64:	4603      	mov	r3, r0
 8014c66:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014c68:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	372c      	adds	r7, #44	; 0x2c
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd90      	pop	{r4, r7, pc}
 8014c74:	0801dbc4 	.word	0x0801dbc4
 8014c78:	0801e3bc 	.word	0x0801e3bc
 8014c7c:	0801dc18 	.word	0x0801dc18

08014c80 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014c88:	f7fa ff0c 	bl	800faa4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014c8c:	4b0a      	ldr	r3, [pc, #40]	; (8014cb8 <tcpip_tcp_timer+0x38>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d103      	bne.n	8014c9c <tcpip_tcp_timer+0x1c>
 8014c94:	4b09      	ldr	r3, [pc, #36]	; (8014cbc <tcpip_tcp_timer+0x3c>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d005      	beq.n	8014ca8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	4908      	ldr	r1, [pc, #32]	; (8014cc0 <tcpip_tcp_timer+0x40>)
 8014ca0:	20fa      	movs	r0, #250	; 0xfa
 8014ca2:	f000 f8f3 	bl	8014e8c <sys_timeout>
 8014ca6:	e003      	b.n	8014cb0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014ca8:	4b06      	ldr	r3, [pc, #24]	; (8014cc4 <tcpip_tcp_timer+0x44>)
 8014caa:	2200      	movs	r2, #0
 8014cac:	601a      	str	r2, [r3, #0]
  }
}
 8014cae:	bf00      	nop
 8014cb0:	bf00      	nop
 8014cb2:	3708      	adds	r7, #8
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	20012288 	.word	0x20012288
 8014cbc:	2001228c 	.word	0x2001228c
 8014cc0:	08014c81 	.word	0x08014c81
 8014cc4:	200122d4 	.word	0x200122d4

08014cc8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014ccc:	4b0a      	ldr	r3, [pc, #40]	; (8014cf8 <tcp_timer_needed+0x30>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d10f      	bne.n	8014cf4 <tcp_timer_needed+0x2c>
 8014cd4:	4b09      	ldr	r3, [pc, #36]	; (8014cfc <tcp_timer_needed+0x34>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d103      	bne.n	8014ce4 <tcp_timer_needed+0x1c>
 8014cdc:	4b08      	ldr	r3, [pc, #32]	; (8014d00 <tcp_timer_needed+0x38>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d007      	beq.n	8014cf4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014ce4:	4b04      	ldr	r3, [pc, #16]	; (8014cf8 <tcp_timer_needed+0x30>)
 8014ce6:	2201      	movs	r2, #1
 8014ce8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014cea:	2200      	movs	r2, #0
 8014cec:	4905      	ldr	r1, [pc, #20]	; (8014d04 <tcp_timer_needed+0x3c>)
 8014cee:	20fa      	movs	r0, #250	; 0xfa
 8014cf0:	f000 f8cc 	bl	8014e8c <sys_timeout>
  }
}
 8014cf4:	bf00      	nop
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	200122d4 	.word	0x200122d4
 8014cfc:	20012288 	.word	0x20012288
 8014d00:	2001228c 	.word	0x2001228c
 8014d04:	08014c81 	.word	0x08014c81

08014d08 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b086      	sub	sp, #24
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	60f8      	str	r0, [r7, #12]
 8014d10:	60b9      	str	r1, [r7, #8]
 8014d12:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014d14:	200a      	movs	r0, #10
 8014d16:	f7f9 fbb9 	bl	800e48c <memp_malloc>
 8014d1a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d109      	bne.n	8014d36 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d151      	bne.n	8014dcc <sys_timeout_abs+0xc4>
 8014d28:	4b2a      	ldr	r3, [pc, #168]	; (8014dd4 <sys_timeout_abs+0xcc>)
 8014d2a:	22be      	movs	r2, #190	; 0xbe
 8014d2c:	492a      	ldr	r1, [pc, #168]	; (8014dd8 <sys_timeout_abs+0xd0>)
 8014d2e:	482b      	ldr	r0, [pc, #172]	; (8014ddc <sys_timeout_abs+0xd4>)
 8014d30:	f005 fef2 	bl	801ab18 <iprintf>
    return;
 8014d34:	e04a      	b.n	8014dcc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	68ba      	ldr	r2, [r7, #8]
 8014d40:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	687a      	ldr	r2, [r7, #4]
 8014d46:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	68fa      	ldr	r2, [r7, #12]
 8014d4c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014d4e:	4b24      	ldr	r3, [pc, #144]	; (8014de0 <sys_timeout_abs+0xd8>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d103      	bne.n	8014d5e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014d56:	4a22      	ldr	r2, [pc, #136]	; (8014de0 <sys_timeout_abs+0xd8>)
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	6013      	str	r3, [r2, #0]
    return;
 8014d5c:	e037      	b.n	8014dce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	685a      	ldr	r2, [r3, #4]
 8014d62:	4b1f      	ldr	r3, [pc, #124]	; (8014de0 <sys_timeout_abs+0xd8>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	685b      	ldr	r3, [r3, #4]
 8014d68:	1ad3      	subs	r3, r2, r3
 8014d6a:	0fdb      	lsrs	r3, r3, #31
 8014d6c:	f003 0301 	and.w	r3, r3, #1
 8014d70:	b2db      	uxtb	r3, r3
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d007      	beq.n	8014d86 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014d76:	4b1a      	ldr	r3, [pc, #104]	; (8014de0 <sys_timeout_abs+0xd8>)
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014d7e:	4a18      	ldr	r2, [pc, #96]	; (8014de0 <sys_timeout_abs+0xd8>)
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	6013      	str	r3, [r2, #0]
 8014d84:	e023      	b.n	8014dce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014d86:	4b16      	ldr	r3, [pc, #88]	; (8014de0 <sys_timeout_abs+0xd8>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	617b      	str	r3, [r7, #20]
 8014d8c:	e01a      	b.n	8014dc4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d00b      	beq.n	8014dae <sys_timeout_abs+0xa6>
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	685a      	ldr	r2, [r3, #4]
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	1ad3      	subs	r3, r2, r3
 8014da2:	0fdb      	lsrs	r3, r3, #31
 8014da4:	f003 0301 	and.w	r3, r3, #1
 8014da8:	b2db      	uxtb	r3, r3
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d007      	beq.n	8014dbe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	681a      	ldr	r2, [r3, #0]
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	693a      	ldr	r2, [r7, #16]
 8014dba:	601a      	str	r2, [r3, #0]
        break;
 8014dbc:	e007      	b.n	8014dce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	617b      	str	r3, [r7, #20]
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d1e1      	bne.n	8014d8e <sys_timeout_abs+0x86>
 8014dca:	e000      	b.n	8014dce <sys_timeout_abs+0xc6>
    return;
 8014dcc:	bf00      	nop
      }
    }
  }
}
 8014dce:	3718      	adds	r7, #24
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}
 8014dd4:	0801e3e0 	.word	0x0801e3e0
 8014dd8:	0801e414 	.word	0x0801e414
 8014ddc:	0801e454 	.word	0x0801e454
 8014de0:	200122cc 	.word	0x200122cc

08014de4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b086      	sub	sp, #24
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	4798      	blx	r3

  now = sys_now();
 8014df6:	f7f4 fb27 	bl	8009448 <sys_now>
 8014dfa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	681a      	ldr	r2, [r3, #0]
 8014e00:	4b0f      	ldr	r3, [pc, #60]	; (8014e40 <lwip_cyclic_timer+0x5c>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	4413      	add	r3, r2
 8014e06:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	1ad3      	subs	r3, r2, r3
 8014e0e:	0fdb      	lsrs	r3, r3, #31
 8014e10:	f003 0301 	and.w	r3, r3, #1
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d009      	beq.n	8014e2e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014e1a:	697b      	ldr	r3, [r7, #20]
 8014e1c:	681a      	ldr	r2, [r3, #0]
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	4413      	add	r3, r2
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	4907      	ldr	r1, [pc, #28]	; (8014e44 <lwip_cyclic_timer+0x60>)
 8014e26:	4618      	mov	r0, r3
 8014e28:	f7ff ff6e 	bl	8014d08 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014e2c:	e004      	b.n	8014e38 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014e2e:	687a      	ldr	r2, [r7, #4]
 8014e30:	4904      	ldr	r1, [pc, #16]	; (8014e44 <lwip_cyclic_timer+0x60>)
 8014e32:	68f8      	ldr	r0, [r7, #12]
 8014e34:	f7ff ff68 	bl	8014d08 <sys_timeout_abs>
}
 8014e38:	bf00      	nop
 8014e3a:	3718      	adds	r7, #24
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	200122d0 	.word	0x200122d0
 8014e44:	08014de5 	.word	0x08014de5

08014e48 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e4e:	2301      	movs	r3, #1
 8014e50:	607b      	str	r3, [r7, #4]
 8014e52:	e00e      	b.n	8014e72 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014e54:	4a0b      	ldr	r2, [pc, #44]	; (8014e84 <sys_timeouts_init+0x3c>)
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	00db      	lsls	r3, r3, #3
 8014e60:	4a08      	ldr	r2, [pc, #32]	; (8014e84 <sys_timeouts_init+0x3c>)
 8014e62:	4413      	add	r3, r2
 8014e64:	461a      	mov	r2, r3
 8014e66:	4908      	ldr	r1, [pc, #32]	; (8014e88 <sys_timeouts_init+0x40>)
 8014e68:	f000 f810 	bl	8014e8c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	3301      	adds	r3, #1
 8014e70:	607b      	str	r3, [r7, #4]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b05      	cmp	r3, #5
 8014e76:	d9ed      	bls.n	8014e54 <sys_timeouts_init+0xc>
  }
}
 8014e78:	bf00      	nop
 8014e7a:	bf00      	nop
 8014e7c:	3708      	adds	r7, #8
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}
 8014e82:	bf00      	nop
 8014e84:	0801f428 	.word	0x0801f428
 8014e88:	08014de5 	.word	0x08014de5

08014e8c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b086      	sub	sp, #24
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	60b9      	str	r1, [r7, #8]
 8014e96:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e9e:	d306      	bcc.n	8014eae <sys_timeout+0x22>
 8014ea0:	4b0a      	ldr	r3, [pc, #40]	; (8014ecc <sys_timeout+0x40>)
 8014ea2:	f240 1229 	movw	r2, #297	; 0x129
 8014ea6:	490a      	ldr	r1, [pc, #40]	; (8014ed0 <sys_timeout+0x44>)
 8014ea8:	480a      	ldr	r0, [pc, #40]	; (8014ed4 <sys_timeout+0x48>)
 8014eaa:	f005 fe35 	bl	801ab18 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014eae:	f7f4 facb 	bl	8009448 <sys_now>
 8014eb2:	4602      	mov	r2, r0
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	4413      	add	r3, r2
 8014eb8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	68b9      	ldr	r1, [r7, #8]
 8014ebe:	6978      	ldr	r0, [r7, #20]
 8014ec0:	f7ff ff22 	bl	8014d08 <sys_timeout_abs>
#endif
}
 8014ec4:	bf00      	nop
 8014ec6:	3718      	adds	r7, #24
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	0801e3e0 	.word	0x0801e3e0
 8014ed0:	0801e47c 	.word	0x0801e47c
 8014ed4:	0801e454 	.word	0x0801e454

08014ed8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b084      	sub	sp, #16
 8014edc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014ede:	f7f4 fab3 	bl	8009448 <sys_now>
 8014ee2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014ee4:	4b17      	ldr	r3, [pc, #92]	; (8014f44 <sys_check_timeouts+0x6c>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d022      	beq.n	8014f36 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	68fa      	ldr	r2, [r7, #12]
 8014ef6:	1ad3      	subs	r3, r2, r3
 8014ef8:	0fdb      	lsrs	r3, r3, #31
 8014efa:	f003 0301 	and.w	r3, r3, #1
 8014efe:	b2db      	uxtb	r3, r3
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d11a      	bne.n	8014f3a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	4a0e      	ldr	r2, [pc, #56]	; (8014f44 <sys_check_timeouts+0x6c>)
 8014f0a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	689b      	ldr	r3, [r3, #8]
 8014f10:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	68db      	ldr	r3, [r3, #12]
 8014f16:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	685b      	ldr	r3, [r3, #4]
 8014f1c:	4a0a      	ldr	r2, [pc, #40]	; (8014f48 <sys_check_timeouts+0x70>)
 8014f1e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014f20:	68b9      	ldr	r1, [r7, #8]
 8014f22:	200a      	movs	r0, #10
 8014f24:	f7f9 fb28 	bl	800e578 <memp_free>
    if (handler != NULL) {
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d0da      	beq.n	8014ee4 <sys_check_timeouts+0xc>
      handler(arg);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6838      	ldr	r0, [r7, #0]
 8014f32:	4798      	blx	r3
  do {
 8014f34:	e7d6      	b.n	8014ee4 <sys_check_timeouts+0xc>
      return;
 8014f36:	bf00      	nop
 8014f38:	e000      	b.n	8014f3c <sys_check_timeouts+0x64>
      return;
 8014f3a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014f3c:	3710      	adds	r7, #16
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	200122cc 	.word	0x200122cc
 8014f48:	200122d0 	.word	0x200122d0

08014f4c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b082      	sub	sp, #8
 8014f50:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014f52:	4b16      	ldr	r3, [pc, #88]	; (8014fac <sys_timeouts_sleeptime+0x60>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d102      	bne.n	8014f60 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f5e:	e020      	b.n	8014fa2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014f60:	f7f4 fa72 	bl	8009448 <sys_now>
 8014f64:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014f66:	4b11      	ldr	r3, [pc, #68]	; (8014fac <sys_timeouts_sleeptime+0x60>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	685a      	ldr	r2, [r3, #4]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	1ad3      	subs	r3, r2, r3
 8014f70:	0fdb      	lsrs	r3, r3, #31
 8014f72:	f003 0301 	and.w	r3, r3, #1
 8014f76:	b2db      	uxtb	r3, r3
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d001      	beq.n	8014f80 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	e010      	b.n	8014fa2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014f80:	4b0a      	ldr	r3, [pc, #40]	; (8014fac <sys_timeouts_sleeptime+0x60>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	685a      	ldr	r2, [r3, #4]
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	1ad3      	subs	r3, r2, r3
 8014f8a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	da06      	bge.n	8014fa0 <sys_timeouts_sleeptime+0x54>
 8014f92:	4b07      	ldr	r3, [pc, #28]	; (8014fb0 <sys_timeouts_sleeptime+0x64>)
 8014f94:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014f98:	4906      	ldr	r1, [pc, #24]	; (8014fb4 <sys_timeouts_sleeptime+0x68>)
 8014f9a:	4807      	ldr	r0, [pc, #28]	; (8014fb8 <sys_timeouts_sleeptime+0x6c>)
 8014f9c:	f005 fdbc 	bl	801ab18 <iprintf>
    return ret;
 8014fa0:	683b      	ldr	r3, [r7, #0]
  }
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3708      	adds	r7, #8
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	200122cc 	.word	0x200122cc
 8014fb0:	0801e3e0 	.word	0x0801e3e0
 8014fb4:	0801e4b4 	.word	0x0801e4b4
 8014fb8:	0801e454 	.word	0x0801e454

08014fbc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014fc0:	f005 fcaa 	bl	801a918 <rand>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	b29b      	uxth	r3, r3
 8014fc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014fcc:	b29b      	uxth	r3, r3
 8014fce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014fd2:	b29a      	uxth	r2, r3
 8014fd4:	4b01      	ldr	r3, [pc, #4]	; (8014fdc <udp_init+0x20>)
 8014fd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014fd8:	bf00      	nop
 8014fda:	bd80      	pop	{r7, pc}
 8014fdc:	20000044 	.word	0x20000044

08014fe0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014fea:	4b17      	ldr	r3, [pc, #92]	; (8015048 <udp_new_port+0x68>)
 8014fec:	881b      	ldrh	r3, [r3, #0]
 8014fee:	1c5a      	adds	r2, r3, #1
 8014ff0:	b291      	uxth	r1, r2
 8014ff2:	4a15      	ldr	r2, [pc, #84]	; (8015048 <udp_new_port+0x68>)
 8014ff4:	8011      	strh	r1, [r2, #0]
 8014ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ffa:	4293      	cmp	r3, r2
 8014ffc:	d103      	bne.n	8015006 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014ffe:	4b12      	ldr	r3, [pc, #72]	; (8015048 <udp_new_port+0x68>)
 8015000:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015004:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015006:	4b11      	ldr	r3, [pc, #68]	; (801504c <udp_new_port+0x6c>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	603b      	str	r3, [r7, #0]
 801500c:	e011      	b.n	8015032 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	8a5a      	ldrh	r2, [r3, #18]
 8015012:	4b0d      	ldr	r3, [pc, #52]	; (8015048 <udp_new_port+0x68>)
 8015014:	881b      	ldrh	r3, [r3, #0]
 8015016:	429a      	cmp	r2, r3
 8015018:	d108      	bne.n	801502c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801501a:	88fb      	ldrh	r3, [r7, #6]
 801501c:	3301      	adds	r3, #1
 801501e:	80fb      	strh	r3, [r7, #6]
 8015020:	88fb      	ldrh	r3, [r7, #6]
 8015022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015026:	d3e0      	bcc.n	8014fea <udp_new_port+0xa>
        return 0;
 8015028:	2300      	movs	r3, #0
 801502a:	e007      	b.n	801503c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	68db      	ldr	r3, [r3, #12]
 8015030:	603b      	str	r3, [r7, #0]
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d1ea      	bne.n	801500e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015038:	4b03      	ldr	r3, [pc, #12]	; (8015048 <udp_new_port+0x68>)
 801503a:	881b      	ldrh	r3, [r3, #0]
}
 801503c:	4618      	mov	r0, r3
 801503e:	370c      	adds	r7, #12
 8015040:	46bd      	mov	sp, r7
 8015042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015046:	4770      	bx	lr
 8015048:	20000044 	.word	0x20000044
 801504c:	200122d8 	.word	0x200122d8

08015050 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b084      	sub	sp, #16
 8015054:	af00      	add	r7, sp, #0
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	4613      	mov	r3, r2
 801505c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d105      	bne.n	8015070 <udp_input_local_match+0x20>
 8015064:	4b27      	ldr	r3, [pc, #156]	; (8015104 <udp_input_local_match+0xb4>)
 8015066:	2287      	movs	r2, #135	; 0x87
 8015068:	4927      	ldr	r1, [pc, #156]	; (8015108 <udp_input_local_match+0xb8>)
 801506a:	4828      	ldr	r0, [pc, #160]	; (801510c <udp_input_local_match+0xbc>)
 801506c:	f005 fd54 	bl	801ab18 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015070:	68bb      	ldr	r3, [r7, #8]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d105      	bne.n	8015082 <udp_input_local_match+0x32>
 8015076:	4b23      	ldr	r3, [pc, #140]	; (8015104 <udp_input_local_match+0xb4>)
 8015078:	2288      	movs	r2, #136	; 0x88
 801507a:	4925      	ldr	r1, [pc, #148]	; (8015110 <udp_input_local_match+0xc0>)
 801507c:	4823      	ldr	r0, [pc, #140]	; (801510c <udp_input_local_match+0xbc>)
 801507e:	f005 fd4b 	bl	801ab18 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	7a1b      	ldrb	r3, [r3, #8]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d00b      	beq.n	80150a2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	7a1a      	ldrb	r2, [r3, #8]
 801508e:	4b21      	ldr	r3, [pc, #132]	; (8015114 <udp_input_local_match+0xc4>)
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015096:	3301      	adds	r3, #1
 8015098:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801509a:	429a      	cmp	r2, r3
 801509c:	d001      	beq.n	80150a2 <udp_input_local_match+0x52>
    return 0;
 801509e:	2300      	movs	r3, #0
 80150a0:	e02b      	b.n	80150fa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80150a2:	79fb      	ldrb	r3, [r7, #7]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d018      	beq.n	80150da <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d013      	beq.n	80150d6 <udp_input_local_match+0x86>
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d00f      	beq.n	80150d6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80150b6:	4b17      	ldr	r3, [pc, #92]	; (8015114 <udp_input_local_match+0xc4>)
 80150b8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80150ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150be:	d00a      	beq.n	80150d6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681a      	ldr	r2, [r3, #0]
 80150c4:	4b13      	ldr	r3, [pc, #76]	; (8015114 <udp_input_local_match+0xc4>)
 80150c6:	695b      	ldr	r3, [r3, #20]
 80150c8:	405a      	eors	r2, r3
 80150ca:	68bb      	ldr	r3, [r7, #8]
 80150cc:	3308      	adds	r3, #8
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d110      	bne.n	80150f8 <udp_input_local_match+0xa8>
          return 1;
 80150d6:	2301      	movs	r3, #1
 80150d8:	e00f      	b.n	80150fa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d009      	beq.n	80150f4 <udp_input_local_match+0xa4>
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d005      	beq.n	80150f4 <udp_input_local_match+0xa4>
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	681a      	ldr	r2, [r3, #0]
 80150ec:	4b09      	ldr	r3, [pc, #36]	; (8015114 <udp_input_local_match+0xc4>)
 80150ee:	695b      	ldr	r3, [r3, #20]
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d101      	bne.n	80150f8 <udp_input_local_match+0xa8>
        return 1;
 80150f4:	2301      	movs	r3, #1
 80150f6:	e000      	b.n	80150fa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80150f8:	2300      	movs	r3, #0
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3710      	adds	r7, #16
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	0801e4c8 	.word	0x0801e4c8
 8015108:	0801e4f8 	.word	0x0801e4f8
 801510c:	0801e51c 	.word	0x0801e51c
 8015110:	0801e544 	.word	0x0801e544
 8015114:	2000ab9c 	.word	0x2000ab9c

08015118 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015118:	b590      	push	{r4, r7, lr}
 801511a:	b08d      	sub	sp, #52	; 0x34
 801511c:	af02      	add	r7, sp, #8
 801511e:	6078      	str	r0, [r7, #4]
 8015120:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015122:	2300      	movs	r3, #0
 8015124:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d105      	bne.n	8015138 <udp_input+0x20>
 801512c:	4b7c      	ldr	r3, [pc, #496]	; (8015320 <udp_input+0x208>)
 801512e:	22cf      	movs	r2, #207	; 0xcf
 8015130:	497c      	ldr	r1, [pc, #496]	; (8015324 <udp_input+0x20c>)
 8015132:	487d      	ldr	r0, [pc, #500]	; (8015328 <udp_input+0x210>)
 8015134:	f005 fcf0 	bl	801ab18 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d105      	bne.n	801514a <udp_input+0x32>
 801513e:	4b78      	ldr	r3, [pc, #480]	; (8015320 <udp_input+0x208>)
 8015140:	22d0      	movs	r2, #208	; 0xd0
 8015142:	497a      	ldr	r1, [pc, #488]	; (801532c <udp_input+0x214>)
 8015144:	4878      	ldr	r0, [pc, #480]	; (8015328 <udp_input+0x210>)
 8015146:	f005 fce7 	bl	801ab18 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	895b      	ldrh	r3, [r3, #10]
 801514e:	2b07      	cmp	r3, #7
 8015150:	d803      	bhi.n	801515a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	f7fa f858 	bl	800f208 <pbuf_free>
    goto end;
 8015158:	e0de      	b.n	8015318 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	685b      	ldr	r3, [r3, #4]
 801515e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015160:	4b73      	ldr	r3, [pc, #460]	; (8015330 <udp_input+0x218>)
 8015162:	695b      	ldr	r3, [r3, #20]
 8015164:	4a72      	ldr	r2, [pc, #456]	; (8015330 <udp_input+0x218>)
 8015166:	6812      	ldr	r2, [r2, #0]
 8015168:	4611      	mov	r1, r2
 801516a:	4618      	mov	r0, r3
 801516c:	f003 fe76 	bl	8018e5c <ip4_addr_isbroadcast_u32>
 8015170:	4603      	mov	r3, r0
 8015172:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	881b      	ldrh	r3, [r3, #0]
 8015178:	b29b      	uxth	r3, r3
 801517a:	4618      	mov	r0, r3
 801517c:	f7f8 f9c0 	bl	800d500 <lwip_htons>
 8015180:	4603      	mov	r3, r0
 8015182:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	885b      	ldrh	r3, [r3, #2]
 8015188:	b29b      	uxth	r3, r3
 801518a:	4618      	mov	r0, r3
 801518c:	f7f8 f9b8 	bl	800d500 <lwip_htons>
 8015190:	4603      	mov	r3, r0
 8015192:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015194:	2300      	movs	r3, #0
 8015196:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015198:	2300      	movs	r3, #0
 801519a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801519c:	2300      	movs	r3, #0
 801519e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151a0:	4b64      	ldr	r3, [pc, #400]	; (8015334 <udp_input+0x21c>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	627b      	str	r3, [r7, #36]	; 0x24
 80151a6:	e054      	b.n	8015252 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80151a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151aa:	8a5b      	ldrh	r3, [r3, #18]
 80151ac:	89fa      	ldrh	r2, [r7, #14]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d14a      	bne.n	8015248 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80151b2:	7cfb      	ldrb	r3, [r7, #19]
 80151b4:	461a      	mov	r2, r3
 80151b6:	6839      	ldr	r1, [r7, #0]
 80151b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151ba:	f7ff ff49 	bl	8015050 <udp_input_local_match>
 80151be:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d041      	beq.n	8015248 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c6:	7c1b      	ldrb	r3, [r3, #16]
 80151c8:	f003 0304 	and.w	r3, r3, #4
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d11d      	bne.n	801520c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80151d0:	69fb      	ldr	r3, [r7, #28]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d102      	bne.n	80151dc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80151d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d8:	61fb      	str	r3, [r7, #28]
 80151da:	e017      	b.n	801520c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80151dc:	7cfb      	ldrb	r3, [r7, #19]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d014      	beq.n	801520c <udp_input+0xf4>
 80151e2:	4b53      	ldr	r3, [pc, #332]	; (8015330 <udp_input+0x218>)
 80151e4:	695b      	ldr	r3, [r3, #20]
 80151e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ea:	d10f      	bne.n	801520c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80151ec:	69fb      	ldr	r3, [r7, #28]
 80151ee:	681a      	ldr	r2, [r3, #0]
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	3304      	adds	r3, #4
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d008      	beq.n	801520c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80151fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151fc:	681a      	ldr	r2, [r3, #0]
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	3304      	adds	r3, #4
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	429a      	cmp	r2, r3
 8015206:	d101      	bne.n	801520c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801520a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801520e:	8a9b      	ldrh	r3, [r3, #20]
 8015210:	8a3a      	ldrh	r2, [r7, #16]
 8015212:	429a      	cmp	r2, r3
 8015214:	d118      	bne.n	8015248 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015218:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801521a:	2b00      	cmp	r3, #0
 801521c:	d005      	beq.n	801522a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015220:	685a      	ldr	r2, [r3, #4]
 8015222:	4b43      	ldr	r3, [pc, #268]	; (8015330 <udp_input+0x218>)
 8015224:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015226:	429a      	cmp	r2, r3
 8015228:	d10e      	bne.n	8015248 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801522a:	6a3b      	ldr	r3, [r7, #32]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d014      	beq.n	801525a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015232:	68da      	ldr	r2, [r3, #12]
 8015234:	6a3b      	ldr	r3, [r7, #32]
 8015236:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015238:	4b3e      	ldr	r3, [pc, #248]	; (8015334 <udp_input+0x21c>)
 801523a:	681a      	ldr	r2, [r3, #0]
 801523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015240:	4a3c      	ldr	r2, [pc, #240]	; (8015334 <udp_input+0x21c>)
 8015242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015244:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015246:	e008      	b.n	801525a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801524a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801524e:	68db      	ldr	r3, [r3, #12]
 8015250:	627b      	str	r3, [r7, #36]	; 0x24
 8015252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015254:	2b00      	cmp	r3, #0
 8015256:	d1a7      	bne.n	80151a8 <udp_input+0x90>
 8015258:	e000      	b.n	801525c <udp_input+0x144>
        break;
 801525a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525e:	2b00      	cmp	r3, #0
 8015260:	d101      	bne.n	8015266 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015268:	2b00      	cmp	r3, #0
 801526a:	d002      	beq.n	8015272 <udp_input+0x15a>
    for_us = 1;
 801526c:	2301      	movs	r3, #1
 801526e:	76fb      	strb	r3, [r7, #27]
 8015270:	e00a      	b.n	8015288 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	3304      	adds	r3, #4
 8015276:	681a      	ldr	r2, [r3, #0]
 8015278:	4b2d      	ldr	r3, [pc, #180]	; (8015330 <udp_input+0x218>)
 801527a:	695b      	ldr	r3, [r3, #20]
 801527c:	429a      	cmp	r2, r3
 801527e:	bf0c      	ite	eq
 8015280:	2301      	moveq	r3, #1
 8015282:	2300      	movne	r3, #0
 8015284:	b2db      	uxtb	r3, r3
 8015286:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015288:	7efb      	ldrb	r3, [r7, #27]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d041      	beq.n	8015312 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801528e:	2108      	movs	r1, #8
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f7f9 ff33 	bl	800f0fc <pbuf_remove_header>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	d00a      	beq.n	80152b2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801529c:	4b20      	ldr	r3, [pc, #128]	; (8015320 <udp_input+0x208>)
 801529e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80152a2:	4925      	ldr	r1, [pc, #148]	; (8015338 <udp_input+0x220>)
 80152a4:	4820      	ldr	r0, [pc, #128]	; (8015328 <udp_input+0x210>)
 80152a6:	f005 fc37 	bl	801ab18 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f7f9 ffac 	bl	800f208 <pbuf_free>
      goto end;
 80152b0:	e032      	b.n	8015318 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80152b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d012      	beq.n	80152de <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80152b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ba:	699b      	ldr	r3, [r3, #24]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d00a      	beq.n	80152d6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80152c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c2:	699c      	ldr	r4, [r3, #24]
 80152c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c6:	69d8      	ldr	r0, [r3, #28]
 80152c8:	8a3b      	ldrh	r3, [r7, #16]
 80152ca:	9300      	str	r3, [sp, #0]
 80152cc:	4b1b      	ldr	r3, [pc, #108]	; (801533c <udp_input+0x224>)
 80152ce:	687a      	ldr	r2, [r7, #4]
 80152d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80152d2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80152d4:	e021      	b.n	801531a <udp_input+0x202>
        pbuf_free(p);
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f7f9 ff96 	bl	800f208 <pbuf_free>
        goto end;
 80152dc:	e01c      	b.n	8015318 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80152de:	7cfb      	ldrb	r3, [r7, #19]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d112      	bne.n	801530a <udp_input+0x1f2>
 80152e4:	4b12      	ldr	r3, [pc, #72]	; (8015330 <udp_input+0x218>)
 80152e6:	695b      	ldr	r3, [r3, #20]
 80152e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152ec:	2be0      	cmp	r3, #224	; 0xe0
 80152ee:	d00c      	beq.n	801530a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80152f0:	4b0f      	ldr	r3, [pc, #60]	; (8015330 <udp_input+0x218>)
 80152f2:	899b      	ldrh	r3, [r3, #12]
 80152f4:	3308      	adds	r3, #8
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	b21b      	sxth	r3, r3
 80152fa:	4619      	mov	r1, r3
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f7f9 ff70 	bl	800f1e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015302:	2103      	movs	r1, #3
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f003 fa6b 	bl	80187e0 <icmp_dest_unreach>
      pbuf_free(p);
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f7f9 ff7c 	bl	800f208 <pbuf_free>
  return;
 8015310:	e003      	b.n	801531a <udp_input+0x202>
    pbuf_free(p);
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f7f9 ff78 	bl	800f208 <pbuf_free>
  return;
 8015318:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801531a:	372c      	adds	r7, #44	; 0x2c
 801531c:	46bd      	mov	sp, r7
 801531e:	bd90      	pop	{r4, r7, pc}
 8015320:	0801e4c8 	.word	0x0801e4c8
 8015324:	0801e56c 	.word	0x0801e56c
 8015328:	0801e51c 	.word	0x0801e51c
 801532c:	0801e584 	.word	0x0801e584
 8015330:	2000ab9c 	.word	0x2000ab9c
 8015334:	200122d8 	.word	0x200122d8
 8015338:	0801e5a0 	.word	0x0801e5a0
 801533c:	2000abac 	.word	0x2000abac

08015340 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b088      	sub	sp, #32
 8015344:	af02      	add	r7, sp, #8
 8015346:	60f8      	str	r0, [r7, #12]
 8015348:	60b9      	str	r1, [r7, #8]
 801534a:	607a      	str	r2, [r7, #4]
 801534c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d109      	bne.n	8015368 <udp_sendto+0x28>
 8015354:	4b23      	ldr	r3, [pc, #140]	; (80153e4 <udp_sendto+0xa4>)
 8015356:	f44f 7206 	mov.w	r2, #536	; 0x218
 801535a:	4923      	ldr	r1, [pc, #140]	; (80153e8 <udp_sendto+0xa8>)
 801535c:	4823      	ldr	r0, [pc, #140]	; (80153ec <udp_sendto+0xac>)
 801535e:	f005 fbdb 	bl	801ab18 <iprintf>
 8015362:	f06f 030f 	mvn.w	r3, #15
 8015366:	e038      	b.n	80153da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015368:	68bb      	ldr	r3, [r7, #8]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d109      	bne.n	8015382 <udp_sendto+0x42>
 801536e:	4b1d      	ldr	r3, [pc, #116]	; (80153e4 <udp_sendto+0xa4>)
 8015370:	f240 2219 	movw	r2, #537	; 0x219
 8015374:	491e      	ldr	r1, [pc, #120]	; (80153f0 <udp_sendto+0xb0>)
 8015376:	481d      	ldr	r0, [pc, #116]	; (80153ec <udp_sendto+0xac>)
 8015378:	f005 fbce 	bl	801ab18 <iprintf>
 801537c:	f06f 030f 	mvn.w	r3, #15
 8015380:	e02b      	b.n	80153da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d109      	bne.n	801539c <udp_sendto+0x5c>
 8015388:	4b16      	ldr	r3, [pc, #88]	; (80153e4 <udp_sendto+0xa4>)
 801538a:	f240 221a 	movw	r2, #538	; 0x21a
 801538e:	4919      	ldr	r1, [pc, #100]	; (80153f4 <udp_sendto+0xb4>)
 8015390:	4816      	ldr	r0, [pc, #88]	; (80153ec <udp_sendto+0xac>)
 8015392:	f005 fbc1 	bl	801ab18 <iprintf>
 8015396:	f06f 030f 	mvn.w	r3, #15
 801539a:	e01e      	b.n	80153da <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	7a1b      	ldrb	r3, [r3, #8]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d006      	beq.n	80153b2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	7a1b      	ldrb	r3, [r3, #8]
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7f9 fb9f 	bl	800eaec <netif_get_by_index>
 80153ae:	6178      	str	r0, [r7, #20]
 80153b0:	e003      	b.n	80153ba <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f003 fa9e 	bl	80188f4 <ip4_route>
 80153b8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d102      	bne.n	80153c6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80153c0:	f06f 0303 	mvn.w	r3, #3
 80153c4:	e009      	b.n	80153da <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80153c6:	887a      	ldrh	r2, [r7, #2]
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	9300      	str	r3, [sp, #0]
 80153cc:	4613      	mov	r3, r2
 80153ce:	687a      	ldr	r2, [r7, #4]
 80153d0:	68b9      	ldr	r1, [r7, #8]
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	f000 f810 	bl	80153f8 <udp_sendto_if>
 80153d8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3718      	adds	r7, #24
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
 80153e2:	bf00      	nop
 80153e4:	0801e4c8 	.word	0x0801e4c8
 80153e8:	0801e5ec 	.word	0x0801e5ec
 80153ec:	0801e51c 	.word	0x0801e51c
 80153f0:	0801e604 	.word	0x0801e604
 80153f4:	0801e620 	.word	0x0801e620

080153f8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b088      	sub	sp, #32
 80153fc:	af02      	add	r7, sp, #8
 80153fe:	60f8      	str	r0, [r7, #12]
 8015400:	60b9      	str	r1, [r7, #8]
 8015402:	607a      	str	r2, [r7, #4]
 8015404:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d109      	bne.n	8015420 <udp_sendto_if+0x28>
 801540c:	4b2e      	ldr	r3, [pc, #184]	; (80154c8 <udp_sendto_if+0xd0>)
 801540e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015412:	492e      	ldr	r1, [pc, #184]	; (80154cc <udp_sendto_if+0xd4>)
 8015414:	482e      	ldr	r0, [pc, #184]	; (80154d0 <udp_sendto_if+0xd8>)
 8015416:	f005 fb7f 	bl	801ab18 <iprintf>
 801541a:	f06f 030f 	mvn.w	r3, #15
 801541e:	e04f      	b.n	80154c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d109      	bne.n	801543a <udp_sendto_if+0x42>
 8015426:	4b28      	ldr	r3, [pc, #160]	; (80154c8 <udp_sendto_if+0xd0>)
 8015428:	f240 2281 	movw	r2, #641	; 0x281
 801542c:	4929      	ldr	r1, [pc, #164]	; (80154d4 <udp_sendto_if+0xdc>)
 801542e:	4828      	ldr	r0, [pc, #160]	; (80154d0 <udp_sendto_if+0xd8>)
 8015430:	f005 fb72 	bl	801ab18 <iprintf>
 8015434:	f06f 030f 	mvn.w	r3, #15
 8015438:	e042      	b.n	80154c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d109      	bne.n	8015454 <udp_sendto_if+0x5c>
 8015440:	4b21      	ldr	r3, [pc, #132]	; (80154c8 <udp_sendto_if+0xd0>)
 8015442:	f240 2282 	movw	r2, #642	; 0x282
 8015446:	4924      	ldr	r1, [pc, #144]	; (80154d8 <udp_sendto_if+0xe0>)
 8015448:	4821      	ldr	r0, [pc, #132]	; (80154d0 <udp_sendto_if+0xd8>)
 801544a:	f005 fb65 	bl	801ab18 <iprintf>
 801544e:	f06f 030f 	mvn.w	r3, #15
 8015452:	e035      	b.n	80154c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015454:	6a3b      	ldr	r3, [r7, #32]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d109      	bne.n	801546e <udp_sendto_if+0x76>
 801545a:	4b1b      	ldr	r3, [pc, #108]	; (80154c8 <udp_sendto_if+0xd0>)
 801545c:	f240 2283 	movw	r2, #643	; 0x283
 8015460:	491e      	ldr	r1, [pc, #120]	; (80154dc <udp_sendto_if+0xe4>)
 8015462:	481b      	ldr	r0, [pc, #108]	; (80154d0 <udp_sendto_if+0xd8>)
 8015464:	f005 fb58 	bl	801ab18 <iprintf>
 8015468:	f06f 030f 	mvn.w	r3, #15
 801546c:	e028      	b.n	80154c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d009      	beq.n	8015488 <udp_sendto_if+0x90>
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d005      	beq.n	8015488 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015484:	2be0      	cmp	r3, #224	; 0xe0
 8015486:	d103      	bne.n	8015490 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015488:	6a3b      	ldr	r3, [r7, #32]
 801548a:	3304      	adds	r3, #4
 801548c:	617b      	str	r3, [r7, #20]
 801548e:	e00b      	b.n	80154a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	681a      	ldr	r2, [r3, #0]
 8015494:	6a3b      	ldr	r3, [r7, #32]
 8015496:	3304      	adds	r3, #4
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	429a      	cmp	r2, r3
 801549c:	d002      	beq.n	80154a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801549e:	f06f 0303 	mvn.w	r3, #3
 80154a2:	e00d      	b.n	80154c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80154a8:	887a      	ldrh	r2, [r7, #2]
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	9301      	str	r3, [sp, #4]
 80154ae:	6a3b      	ldr	r3, [r7, #32]
 80154b0:	9300      	str	r3, [sp, #0]
 80154b2:	4613      	mov	r3, r2
 80154b4:	687a      	ldr	r2, [r7, #4]
 80154b6:	68b9      	ldr	r1, [r7, #8]
 80154b8:	68f8      	ldr	r0, [r7, #12]
 80154ba:	f000 f811 	bl	80154e0 <udp_sendto_if_src>
 80154be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3718      	adds	r7, #24
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	0801e4c8 	.word	0x0801e4c8
 80154cc:	0801e63c 	.word	0x0801e63c
 80154d0:	0801e51c 	.word	0x0801e51c
 80154d4:	0801e658 	.word	0x0801e658
 80154d8:	0801e674 	.word	0x0801e674
 80154dc:	0801e694 	.word	0x0801e694

080154e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b08c      	sub	sp, #48	; 0x30
 80154e4:	af04      	add	r7, sp, #16
 80154e6:	60f8      	str	r0, [r7, #12]
 80154e8:	60b9      	str	r1, [r7, #8]
 80154ea:	607a      	str	r2, [r7, #4]
 80154ec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d109      	bne.n	8015508 <udp_sendto_if_src+0x28>
 80154f4:	4b65      	ldr	r3, [pc, #404]	; (801568c <udp_sendto_if_src+0x1ac>)
 80154f6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80154fa:	4965      	ldr	r1, [pc, #404]	; (8015690 <udp_sendto_if_src+0x1b0>)
 80154fc:	4865      	ldr	r0, [pc, #404]	; (8015694 <udp_sendto_if_src+0x1b4>)
 80154fe:	f005 fb0b 	bl	801ab18 <iprintf>
 8015502:	f06f 030f 	mvn.w	r3, #15
 8015506:	e0bc      	b.n	8015682 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d109      	bne.n	8015522 <udp_sendto_if_src+0x42>
 801550e:	4b5f      	ldr	r3, [pc, #380]	; (801568c <udp_sendto_if_src+0x1ac>)
 8015510:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015514:	4960      	ldr	r1, [pc, #384]	; (8015698 <udp_sendto_if_src+0x1b8>)
 8015516:	485f      	ldr	r0, [pc, #380]	; (8015694 <udp_sendto_if_src+0x1b4>)
 8015518:	f005 fafe 	bl	801ab18 <iprintf>
 801551c:	f06f 030f 	mvn.w	r3, #15
 8015520:	e0af      	b.n	8015682 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d109      	bne.n	801553c <udp_sendto_if_src+0x5c>
 8015528:	4b58      	ldr	r3, [pc, #352]	; (801568c <udp_sendto_if_src+0x1ac>)
 801552a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801552e:	495b      	ldr	r1, [pc, #364]	; (801569c <udp_sendto_if_src+0x1bc>)
 8015530:	4858      	ldr	r0, [pc, #352]	; (8015694 <udp_sendto_if_src+0x1b4>)
 8015532:	f005 faf1 	bl	801ab18 <iprintf>
 8015536:	f06f 030f 	mvn.w	r3, #15
 801553a:	e0a2      	b.n	8015682 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801553e:	2b00      	cmp	r3, #0
 8015540:	d109      	bne.n	8015556 <udp_sendto_if_src+0x76>
 8015542:	4b52      	ldr	r3, [pc, #328]	; (801568c <udp_sendto_if_src+0x1ac>)
 8015544:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8015548:	4955      	ldr	r1, [pc, #340]	; (80156a0 <udp_sendto_if_src+0x1c0>)
 801554a:	4852      	ldr	r0, [pc, #328]	; (8015694 <udp_sendto_if_src+0x1b4>)
 801554c:	f005 fae4 	bl	801ab18 <iprintf>
 8015550:	f06f 030f 	mvn.w	r3, #15
 8015554:	e095      	b.n	8015682 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015558:	2b00      	cmp	r3, #0
 801555a:	d109      	bne.n	8015570 <udp_sendto_if_src+0x90>
 801555c:	4b4b      	ldr	r3, [pc, #300]	; (801568c <udp_sendto_if_src+0x1ac>)
 801555e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015562:	4950      	ldr	r1, [pc, #320]	; (80156a4 <udp_sendto_if_src+0x1c4>)
 8015564:	484b      	ldr	r0, [pc, #300]	; (8015694 <udp_sendto_if_src+0x1b4>)
 8015566:	f005 fad7 	bl	801ab18 <iprintf>
 801556a:	f06f 030f 	mvn.w	r3, #15
 801556e:	e088      	b.n	8015682 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	8a5b      	ldrh	r3, [r3, #18]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d10f      	bne.n	8015598 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015578:	68f9      	ldr	r1, [r7, #12]
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	8a5b      	ldrh	r3, [r3, #18]
 801557e:	461a      	mov	r2, r3
 8015580:	68f8      	ldr	r0, [r7, #12]
 8015582:	f000 f893 	bl	80156ac <udp_bind>
 8015586:	4603      	mov	r3, r0
 8015588:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801558a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d002      	beq.n	8015598 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015592:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015596:	e074      	b.n	8015682 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	891b      	ldrh	r3, [r3, #8]
 801559c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80155a0:	4293      	cmp	r3, r2
 80155a2:	d902      	bls.n	80155aa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80155a4:	f04f 33ff 	mov.w	r3, #4294967295
 80155a8:	e06b      	b.n	8015682 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80155aa:	2108      	movs	r1, #8
 80155ac:	68b8      	ldr	r0, [r7, #8]
 80155ae:	f7f9 fd95 	bl	800f0dc <pbuf_add_header>
 80155b2:	4603      	mov	r3, r0
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d015      	beq.n	80155e4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80155b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155bc:	2108      	movs	r1, #8
 80155be:	2022      	movs	r0, #34	; 0x22
 80155c0:	f7f9 fb3e 	bl	800ec40 <pbuf_alloc>
 80155c4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d102      	bne.n	80155d2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80155cc:	f04f 33ff 	mov.w	r3, #4294967295
 80155d0:	e057      	b.n	8015682 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	891b      	ldrh	r3, [r3, #8]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d006      	beq.n	80155e8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80155da:	68b9      	ldr	r1, [r7, #8]
 80155dc:	69f8      	ldr	r0, [r7, #28]
 80155de:	f7f9 ff37 	bl	800f450 <pbuf_chain>
 80155e2:	e001      	b.n	80155e8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80155e8:	69fb      	ldr	r3, [r7, #28]
 80155ea:	895b      	ldrh	r3, [r3, #10]
 80155ec:	2b07      	cmp	r3, #7
 80155ee:	d806      	bhi.n	80155fe <udp_sendto_if_src+0x11e>
 80155f0:	4b26      	ldr	r3, [pc, #152]	; (801568c <udp_sendto_if_src+0x1ac>)
 80155f2:	f240 320d 	movw	r2, #781	; 0x30d
 80155f6:	492c      	ldr	r1, [pc, #176]	; (80156a8 <udp_sendto_if_src+0x1c8>)
 80155f8:	4826      	ldr	r0, [pc, #152]	; (8015694 <udp_sendto_if_src+0x1b4>)
 80155fa:	f005 fa8d 	bl	801ab18 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80155fe:	69fb      	ldr	r3, [r7, #28]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	8a5b      	ldrh	r3, [r3, #18]
 8015608:	4618      	mov	r0, r3
 801560a:	f7f7 ff79 	bl	800d500 <lwip_htons>
 801560e:	4603      	mov	r3, r0
 8015610:	461a      	mov	r2, r3
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015616:	887b      	ldrh	r3, [r7, #2]
 8015618:	4618      	mov	r0, r3
 801561a:	f7f7 ff71 	bl	800d500 <lwip_htons>
 801561e:	4603      	mov	r3, r0
 8015620:	461a      	mov	r2, r3
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	2200      	movs	r2, #0
 801562a:	719a      	strb	r2, [r3, #6]
 801562c:	2200      	movs	r2, #0
 801562e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015630:	69fb      	ldr	r3, [r7, #28]
 8015632:	891b      	ldrh	r3, [r3, #8]
 8015634:	4618      	mov	r0, r3
 8015636:	f7f7 ff63 	bl	800d500 <lwip_htons>
 801563a:	4603      	mov	r3, r0
 801563c:	461a      	mov	r2, r3
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015642:	2311      	movs	r3, #17
 8015644:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	7adb      	ldrb	r3, [r3, #11]
 801564a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	7a9b      	ldrb	r3, [r3, #10]
 8015650:	7cb9      	ldrb	r1, [r7, #18]
 8015652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015654:	9202      	str	r2, [sp, #8]
 8015656:	7cfa      	ldrb	r2, [r7, #19]
 8015658:	9201      	str	r2, [sp, #4]
 801565a:	9300      	str	r3, [sp, #0]
 801565c:	460b      	mov	r3, r1
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015662:	69f8      	ldr	r0, [r7, #28]
 8015664:	f003 fb4c 	bl	8018d00 <ip4_output_if_src>
 8015668:	4603      	mov	r3, r0
 801566a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801566c:	69fa      	ldr	r2, [r7, #28]
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	429a      	cmp	r2, r3
 8015672:	d004      	beq.n	801567e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015674:	69f8      	ldr	r0, [r7, #28]
 8015676:	f7f9 fdc7 	bl	800f208 <pbuf_free>
    q = NULL;
 801567a:	2300      	movs	r3, #0
 801567c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801567e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015682:	4618      	mov	r0, r3
 8015684:	3720      	adds	r7, #32
 8015686:	46bd      	mov	sp, r7
 8015688:	bd80      	pop	{r7, pc}
 801568a:	bf00      	nop
 801568c:	0801e4c8 	.word	0x0801e4c8
 8015690:	0801e6b4 	.word	0x0801e6b4
 8015694:	0801e51c 	.word	0x0801e51c
 8015698:	0801e6d4 	.word	0x0801e6d4
 801569c:	0801e6f4 	.word	0x0801e6f4
 80156a0:	0801e718 	.word	0x0801e718
 80156a4:	0801e73c 	.word	0x0801e73c
 80156a8:	0801e760 	.word	0x0801e760

080156ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b086      	sub	sp, #24
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	60f8      	str	r0, [r7, #12]
 80156b4:	60b9      	str	r1, [r7, #8]
 80156b6:	4613      	mov	r3, r2
 80156b8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d101      	bne.n	80156c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80156c0:	4b39      	ldr	r3, [pc, #228]	; (80157a8 <udp_bind+0xfc>)
 80156c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d109      	bne.n	80156de <udp_bind+0x32>
 80156ca:	4b38      	ldr	r3, [pc, #224]	; (80157ac <udp_bind+0x100>)
 80156cc:	f240 32b7 	movw	r2, #951	; 0x3b7
 80156d0:	4937      	ldr	r1, [pc, #220]	; (80157b0 <udp_bind+0x104>)
 80156d2:	4838      	ldr	r0, [pc, #224]	; (80157b4 <udp_bind+0x108>)
 80156d4:	f005 fa20 	bl	801ab18 <iprintf>
 80156d8:	f06f 030f 	mvn.w	r3, #15
 80156dc:	e060      	b.n	80157a0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80156de:	2300      	movs	r3, #0
 80156e0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156e2:	4b35      	ldr	r3, [pc, #212]	; (80157b8 <udp_bind+0x10c>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	617b      	str	r3, [r7, #20]
 80156e8:	e009      	b.n	80156fe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80156ea:	68fa      	ldr	r2, [r7, #12]
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d102      	bne.n	80156f8 <udp_bind+0x4c>
      rebind = 1;
 80156f2:	2301      	movs	r3, #1
 80156f4:	74fb      	strb	r3, [r7, #19]
      break;
 80156f6:	e005      	b.n	8015704 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	68db      	ldr	r3, [r3, #12]
 80156fc:	617b      	str	r3, [r7, #20]
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d1f2      	bne.n	80156ea <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015704:	88fb      	ldrh	r3, [r7, #6]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d109      	bne.n	801571e <udp_bind+0x72>
    port = udp_new_port();
 801570a:	f7ff fc69 	bl	8014fe0 <udp_new_port>
 801570e:	4603      	mov	r3, r0
 8015710:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015712:	88fb      	ldrh	r3, [r7, #6]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d12c      	bne.n	8015772 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015718:	f06f 0307 	mvn.w	r3, #7
 801571c:	e040      	b.n	80157a0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801571e:	4b26      	ldr	r3, [pc, #152]	; (80157b8 <udp_bind+0x10c>)
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	617b      	str	r3, [r7, #20]
 8015724:	e022      	b.n	801576c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015726:	68fa      	ldr	r2, [r7, #12]
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	429a      	cmp	r2, r3
 801572c:	d01b      	beq.n	8015766 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	8a5b      	ldrh	r3, [r3, #18]
 8015732:	88fa      	ldrh	r2, [r7, #6]
 8015734:	429a      	cmp	r2, r3
 8015736:	d116      	bne.n	8015766 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	681a      	ldr	r2, [r3, #0]
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015740:	429a      	cmp	r2, r3
 8015742:	d00d      	beq.n	8015760 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d00a      	beq.n	8015760 <udp_bind+0xb4>
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d006      	beq.n	8015760 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015752:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015754:	2b00      	cmp	r3, #0
 8015756:	d003      	beq.n	8015760 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d102      	bne.n	8015766 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015760:	f06f 0307 	mvn.w	r3, #7
 8015764:	e01c      	b.n	80157a0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	617b      	str	r3, [r7, #20]
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d1d9      	bne.n	8015726 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d002      	beq.n	801577e <udp_bind+0xd2>
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	e000      	b.n	8015780 <udp_bind+0xd4>
 801577e:	2300      	movs	r3, #0
 8015780:	68fa      	ldr	r2, [r7, #12]
 8015782:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	88fa      	ldrh	r2, [r7, #6]
 8015788:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801578a:	7cfb      	ldrb	r3, [r7, #19]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d106      	bne.n	801579e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015790:	4b09      	ldr	r3, [pc, #36]	; (80157b8 <udp_bind+0x10c>)
 8015792:	681a      	ldr	r2, [r3, #0]
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015798:	4a07      	ldr	r2, [pc, #28]	; (80157b8 <udp_bind+0x10c>)
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801579e:	2300      	movs	r3, #0
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3718      	adds	r7, #24
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}
 80157a8:	0801f458 	.word	0x0801f458
 80157ac:	0801e4c8 	.word	0x0801e4c8
 80157b0:	0801e790 	.word	0x0801e790
 80157b4:	0801e51c 	.word	0x0801e51c
 80157b8:	200122d8 	.word	0x200122d8

080157bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b086      	sub	sp, #24
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	60f8      	str	r0, [r7, #12]
 80157c4:	60b9      	str	r1, [r7, #8]
 80157c6:	4613      	mov	r3, r2
 80157c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d109      	bne.n	80157e4 <udp_connect+0x28>
 80157d0:	4b2c      	ldr	r3, [pc, #176]	; (8015884 <udp_connect+0xc8>)
 80157d2:	f240 4235 	movw	r2, #1077	; 0x435
 80157d6:	492c      	ldr	r1, [pc, #176]	; (8015888 <udp_connect+0xcc>)
 80157d8:	482c      	ldr	r0, [pc, #176]	; (801588c <udp_connect+0xd0>)
 80157da:	f005 f99d 	bl	801ab18 <iprintf>
 80157de:	f06f 030f 	mvn.w	r3, #15
 80157e2:	e04b      	b.n	801587c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d109      	bne.n	80157fe <udp_connect+0x42>
 80157ea:	4b26      	ldr	r3, [pc, #152]	; (8015884 <udp_connect+0xc8>)
 80157ec:	f240 4236 	movw	r2, #1078	; 0x436
 80157f0:	4927      	ldr	r1, [pc, #156]	; (8015890 <udp_connect+0xd4>)
 80157f2:	4826      	ldr	r0, [pc, #152]	; (801588c <udp_connect+0xd0>)
 80157f4:	f005 f990 	bl	801ab18 <iprintf>
 80157f8:	f06f 030f 	mvn.w	r3, #15
 80157fc:	e03e      	b.n	801587c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	8a5b      	ldrh	r3, [r3, #18]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d10f      	bne.n	8015826 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015806:	68f9      	ldr	r1, [r7, #12]
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	8a5b      	ldrh	r3, [r3, #18]
 801580c:	461a      	mov	r2, r3
 801580e:	68f8      	ldr	r0, [r7, #12]
 8015810:	f7ff ff4c 	bl	80156ac <udp_bind>
 8015814:	4603      	mov	r3, r0
 8015816:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8015818:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d002      	beq.n	8015826 <udp_connect+0x6a>
      return err;
 8015820:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015824:	e02a      	b.n	801587c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d002      	beq.n	8015832 <udp_connect+0x76>
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	e000      	b.n	8015834 <udp_connect+0x78>
 8015832:	2300      	movs	r3, #0
 8015834:	68fa      	ldr	r2, [r7, #12]
 8015836:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	88fa      	ldrh	r2, [r7, #6]
 801583c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	7c1b      	ldrb	r3, [r3, #16]
 8015842:	f043 0304 	orr.w	r3, r3, #4
 8015846:	b2da      	uxtb	r2, r3
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801584c:	4b11      	ldr	r3, [pc, #68]	; (8015894 <udp_connect+0xd8>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	617b      	str	r3, [r7, #20]
 8015852:	e008      	b.n	8015866 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015854:	68fa      	ldr	r2, [r7, #12]
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	429a      	cmp	r2, r3
 801585a:	d101      	bne.n	8015860 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801585c:	2300      	movs	r3, #0
 801585e:	e00d      	b.n	801587c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	617b      	str	r3, [r7, #20]
 8015866:	697b      	ldr	r3, [r7, #20]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d1f3      	bne.n	8015854 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801586c:	4b09      	ldr	r3, [pc, #36]	; (8015894 <udp_connect+0xd8>)
 801586e:	681a      	ldr	r2, [r3, #0]
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015874:	4a07      	ldr	r2, [pc, #28]	; (8015894 <udp_connect+0xd8>)
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801587a:	2300      	movs	r3, #0
}
 801587c:	4618      	mov	r0, r3
 801587e:	3718      	adds	r7, #24
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}
 8015884:	0801e4c8 	.word	0x0801e4c8
 8015888:	0801e7a8 	.word	0x0801e7a8
 801588c:	0801e51c 	.word	0x0801e51c
 8015890:	0801e7c4 	.word	0x0801e7c4
 8015894:	200122d8 	.word	0x200122d8

08015898 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	60f8      	str	r0, [r7, #12]
 80158a0:	60b9      	str	r1, [r7, #8]
 80158a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d107      	bne.n	80158ba <udp_recv+0x22>
 80158aa:	4b08      	ldr	r3, [pc, #32]	; (80158cc <udp_recv+0x34>)
 80158ac:	f240 428a 	movw	r2, #1162	; 0x48a
 80158b0:	4907      	ldr	r1, [pc, #28]	; (80158d0 <udp_recv+0x38>)
 80158b2:	4808      	ldr	r0, [pc, #32]	; (80158d4 <udp_recv+0x3c>)
 80158b4:	f005 f930 	bl	801ab18 <iprintf>
 80158b8:	e005      	b.n	80158c6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	68ba      	ldr	r2, [r7, #8]
 80158be:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	61da      	str	r2, [r3, #28]
}
 80158c6:	3710      	adds	r7, #16
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	0801e4c8 	.word	0x0801e4c8
 80158d0:	0801e7fc 	.word	0x0801e7fc
 80158d4:	0801e51c 	.word	0x0801e51c

080158d8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d107      	bne.n	80158f6 <udp_remove+0x1e>
 80158e6:	4b19      	ldr	r3, [pc, #100]	; (801594c <udp_remove+0x74>)
 80158e8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80158ec:	4918      	ldr	r1, [pc, #96]	; (8015950 <udp_remove+0x78>)
 80158ee:	4819      	ldr	r0, [pc, #100]	; (8015954 <udp_remove+0x7c>)
 80158f0:	f005 f912 	bl	801ab18 <iprintf>
 80158f4:	e026      	b.n	8015944 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80158f6:	4b18      	ldr	r3, [pc, #96]	; (8015958 <udp_remove+0x80>)
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	687a      	ldr	r2, [r7, #4]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d105      	bne.n	801590c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015900:	4b15      	ldr	r3, [pc, #84]	; (8015958 <udp_remove+0x80>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	68db      	ldr	r3, [r3, #12]
 8015906:	4a14      	ldr	r2, [pc, #80]	; (8015958 <udp_remove+0x80>)
 8015908:	6013      	str	r3, [r2, #0]
 801590a:	e017      	b.n	801593c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801590c:	4b12      	ldr	r3, [pc, #72]	; (8015958 <udp_remove+0x80>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	60fb      	str	r3, [r7, #12]
 8015912:	e010      	b.n	8015936 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	68db      	ldr	r3, [r3, #12]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d009      	beq.n	8015930 <udp_remove+0x58>
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	68db      	ldr	r3, [r3, #12]
 8015920:	687a      	ldr	r2, [r7, #4]
 8015922:	429a      	cmp	r2, r3
 8015924:	d104      	bne.n	8015930 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	68da      	ldr	r2, [r3, #12]
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	60da      	str	r2, [r3, #12]
        break;
 801592e:	e005      	b.n	801593c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	60fb      	str	r3, [r7, #12]
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d1eb      	bne.n	8015914 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801593c:	6879      	ldr	r1, [r7, #4]
 801593e:	2000      	movs	r0, #0
 8015940:	f7f8 fe1a 	bl	800e578 <memp_free>
}
 8015944:	3710      	adds	r7, #16
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
 801594a:	bf00      	nop
 801594c:	0801e4c8 	.word	0x0801e4c8
 8015950:	0801e814 	.word	0x0801e814
 8015954:	0801e51c 	.word	0x0801e51c
 8015958:	200122d8 	.word	0x200122d8

0801595c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b082      	sub	sp, #8
 8015960:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015962:	2000      	movs	r0, #0
 8015964:	f7f8 fd92 	bl	800e48c <memp_malloc>
 8015968:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d007      	beq.n	8015980 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015970:	2220      	movs	r2, #32
 8015972:	2100      	movs	r1, #0
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f005 f934 	bl	801abe2 <memset>
    pcb->ttl = UDP_TTL;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	22ff      	movs	r2, #255	; 0xff
 801597e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015980:	687b      	ldr	r3, [r7, #4]
}
 8015982:	4618      	mov	r0, r3
 8015984:	3708      	adds	r7, #8
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}
	...

0801598c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801598c:	b480      	push	{r7}
 801598e:	b085      	sub	sp, #20
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d01e      	beq.n	80159da <udp_netif_ip_addr_changed+0x4e>
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d01a      	beq.n	80159da <udp_netif_ip_addr_changed+0x4e>
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d017      	beq.n	80159da <udp_netif_ip_addr_changed+0x4e>
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d013      	beq.n	80159da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159b2:	4b0d      	ldr	r3, [pc, #52]	; (80159e8 <udp_netif_ip_addr_changed+0x5c>)
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	60fb      	str	r3, [r7, #12]
 80159b8:	e00c      	b.n	80159d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	681a      	ldr	r2, [r3, #0]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d103      	bne.n	80159ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	68db      	ldr	r3, [r3, #12]
 80159d2:	60fb      	str	r3, [r7, #12]
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d1ef      	bne.n	80159ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80159da:	bf00      	nop
 80159dc:	3714      	adds	r7, #20
 80159de:	46bd      	mov	sp, r7
 80159e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e4:	4770      	bx	lr
 80159e6:	bf00      	nop
 80159e8:	200122d8 	.word	0x200122d8

080159ec <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80159f0:	4b20      	ldr	r3, [pc, #128]	; (8015a74 <dhcp_inc_pcb_refcount+0x88>)
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d133      	bne.n	8015a60 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80159f8:	4b1f      	ldr	r3, [pc, #124]	; (8015a78 <dhcp_inc_pcb_refcount+0x8c>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d005      	beq.n	8015a0c <dhcp_inc_pcb_refcount+0x20>
 8015a00:	4b1e      	ldr	r3, [pc, #120]	; (8015a7c <dhcp_inc_pcb_refcount+0x90>)
 8015a02:	22e5      	movs	r2, #229	; 0xe5
 8015a04:	491e      	ldr	r1, [pc, #120]	; (8015a80 <dhcp_inc_pcb_refcount+0x94>)
 8015a06:	481f      	ldr	r0, [pc, #124]	; (8015a84 <dhcp_inc_pcb_refcount+0x98>)
 8015a08:	f005 f886 	bl	801ab18 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015a0c:	f7ff ffa6 	bl	801595c <udp_new>
 8015a10:	4603      	mov	r3, r0
 8015a12:	4a19      	ldr	r2, [pc, #100]	; (8015a78 <dhcp_inc_pcb_refcount+0x8c>)
 8015a14:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015a16:	4b18      	ldr	r3, [pc, #96]	; (8015a78 <dhcp_inc_pcb_refcount+0x8c>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d102      	bne.n	8015a24 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a22:	e024      	b.n	8015a6e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015a24:	4b14      	ldr	r3, [pc, #80]	; (8015a78 <dhcp_inc_pcb_refcount+0x8c>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	7a5a      	ldrb	r2, [r3, #9]
 8015a2a:	4b13      	ldr	r3, [pc, #76]	; (8015a78 <dhcp_inc_pcb_refcount+0x8c>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	f042 0220 	orr.w	r2, r2, #32
 8015a32:	b2d2      	uxtb	r2, r2
 8015a34:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015a36:	4b10      	ldr	r3, [pc, #64]	; (8015a78 <dhcp_inc_pcb_refcount+0x8c>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	2244      	movs	r2, #68	; 0x44
 8015a3c:	4912      	ldr	r1, [pc, #72]	; (8015a88 <dhcp_inc_pcb_refcount+0x9c>)
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7ff fe34 	bl	80156ac <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015a44:	4b0c      	ldr	r3, [pc, #48]	; (8015a78 <dhcp_inc_pcb_refcount+0x8c>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	2243      	movs	r2, #67	; 0x43
 8015a4a:	490f      	ldr	r1, [pc, #60]	; (8015a88 <dhcp_inc_pcb_refcount+0x9c>)
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7ff feb5 	bl	80157bc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015a52:	4b09      	ldr	r3, [pc, #36]	; (8015a78 <dhcp_inc_pcb_refcount+0x8c>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	2200      	movs	r2, #0
 8015a58:	490c      	ldr	r1, [pc, #48]	; (8015a8c <dhcp_inc_pcb_refcount+0xa0>)
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7ff ff1c 	bl	8015898 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015a60:	4b04      	ldr	r3, [pc, #16]	; (8015a74 <dhcp_inc_pcb_refcount+0x88>)
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	3301      	adds	r3, #1
 8015a66:	b2da      	uxtb	r2, r3
 8015a68:	4b02      	ldr	r3, [pc, #8]	; (8015a74 <dhcp_inc_pcb_refcount+0x88>)
 8015a6a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015a6c:	2300      	movs	r3, #0
}
 8015a6e:	4618      	mov	r0, r3
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	20012314 	.word	0x20012314
 8015a78:	20012310 	.word	0x20012310
 8015a7c:	0801e82c 	.word	0x0801e82c
 8015a80:	0801e864 	.word	0x0801e864
 8015a84:	0801e88c 	.word	0x0801e88c
 8015a88:	0801f458 	.word	0x0801f458
 8015a8c:	08017349 	.word	0x08017349

08015a90 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015a94:	4b0e      	ldr	r3, [pc, #56]	; (8015ad0 <dhcp_dec_pcb_refcount+0x40>)
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d105      	bne.n	8015aa8 <dhcp_dec_pcb_refcount+0x18>
 8015a9c:	4b0d      	ldr	r3, [pc, #52]	; (8015ad4 <dhcp_dec_pcb_refcount+0x44>)
 8015a9e:	22ff      	movs	r2, #255	; 0xff
 8015aa0:	490d      	ldr	r1, [pc, #52]	; (8015ad8 <dhcp_dec_pcb_refcount+0x48>)
 8015aa2:	480e      	ldr	r0, [pc, #56]	; (8015adc <dhcp_dec_pcb_refcount+0x4c>)
 8015aa4:	f005 f838 	bl	801ab18 <iprintf>
  dhcp_pcb_refcount--;
 8015aa8:	4b09      	ldr	r3, [pc, #36]	; (8015ad0 <dhcp_dec_pcb_refcount+0x40>)
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	3b01      	subs	r3, #1
 8015aae:	b2da      	uxtb	r2, r3
 8015ab0:	4b07      	ldr	r3, [pc, #28]	; (8015ad0 <dhcp_dec_pcb_refcount+0x40>)
 8015ab2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015ab4:	4b06      	ldr	r3, [pc, #24]	; (8015ad0 <dhcp_dec_pcb_refcount+0x40>)
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d107      	bne.n	8015acc <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015abc:	4b08      	ldr	r3, [pc, #32]	; (8015ae0 <dhcp_dec_pcb_refcount+0x50>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7ff ff09 	bl	80158d8 <udp_remove>
    dhcp_pcb = NULL;
 8015ac6:	4b06      	ldr	r3, [pc, #24]	; (8015ae0 <dhcp_dec_pcb_refcount+0x50>)
 8015ac8:	2200      	movs	r2, #0
 8015aca:	601a      	str	r2, [r3, #0]
  }
}
 8015acc:	bf00      	nop
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	20012314 	.word	0x20012314
 8015ad4:	0801e82c 	.word	0x0801e82c
 8015ad8:	0801e8b4 	.word	0x0801e8b4
 8015adc:	0801e88c 	.word	0x0801e88c
 8015ae0:	20012310 	.word	0x20012310

08015ae4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015af0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015af2:	210c      	movs	r1, #12
 8015af4:	68f8      	ldr	r0, [r7, #12]
 8015af6:	f001 f839 	bl	8016b6c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015afa:	4b06      	ldr	r3, [pc, #24]	; (8015b14 <dhcp_handle_nak+0x30>)
 8015afc:	4a05      	ldr	r2, [pc, #20]	; (8015b14 <dhcp_handle_nak+0x30>)
 8015afe:	4905      	ldr	r1, [pc, #20]	; (8015b14 <dhcp_handle_nak+0x30>)
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f7f8 fedb 	bl	800e8bc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 fc2c 	bl	8016364 <dhcp_discover>
}
 8015b0c:	bf00      	nop
 8015b0e:	3710      	adds	r7, #16
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}
 8015b14:	0801f458 	.word	0x0801f458

08015b18 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b24:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015b26:	2108      	movs	r1, #8
 8015b28:	68f8      	ldr	r0, [r7, #12]
 8015b2a:	f001 f81f 	bl	8016b6c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	331c      	adds	r3, #28
 8015b32:	2200      	movs	r2, #0
 8015b34:	4619      	mov	r1, r3
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f002 fb50 	bl	80181dc <etharp_query>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	799b      	ldrb	r3, [r3, #6]
 8015b44:	2bff      	cmp	r3, #255	; 0xff
 8015b46:	d005      	beq.n	8015b54 <dhcp_check+0x3c>
    dhcp->tries++;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	799b      	ldrb	r3, [r3, #6]
 8015b4c:	3301      	adds	r3, #1
 8015b4e:	b2da      	uxtb	r2, r3
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015b54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015b58:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b5a:	893b      	ldrh	r3, [r7, #8]
 8015b5c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015b60:	4a06      	ldr	r2, [pc, #24]	; (8015b7c <dhcp_check+0x64>)
 8015b62:	fb82 1203 	smull	r1, r2, r2, r3
 8015b66:	1152      	asrs	r2, r2, #5
 8015b68:	17db      	asrs	r3, r3, #31
 8015b6a:	1ad3      	subs	r3, r2, r3
 8015b6c:	b29a      	uxth	r2, r3
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015b72:	bf00      	nop
 8015b74:	3710      	adds	r7, #16
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}
 8015b7a:	bf00      	nop
 8015b7c:	10624dd3 	.word	0x10624dd3

08015b80 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b084      	sub	sp, #16
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
 8015b88:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b8e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015b90:	4b0c      	ldr	r3, [pc, #48]	; (8015bc4 <dhcp_handle_offer+0x44>)
 8015b92:	789b      	ldrb	r3, [r3, #2]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d011      	beq.n	8015bbc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015b9e:	4b0a      	ldr	r3, [pc, #40]	; (8015bc8 <dhcp_handle_offer+0x48>)
 8015ba0:	689b      	ldr	r3, [r3, #8]
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7f7 fcc1 	bl	800d52a <lwip_htonl>
 8015ba8:	4602      	mov	r2, r0
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	691a      	ldr	r2, [r3, #16]
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f000 f808 	bl	8015bcc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015bbc:	bf00      	nop
 8015bbe:	3710      	adds	r7, #16
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}
 8015bc4:	20012304 	.word	0x20012304
 8015bc8:	200122dc 	.word	0x200122dc

08015bcc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015bcc:	b5b0      	push	{r4, r5, r7, lr}
 8015bce:	b08a      	sub	sp, #40	; 0x28
 8015bd0:	af02      	add	r7, sp, #8
 8015bd2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d109      	bne.n	8015bee <dhcp_select+0x22>
 8015bda:	4b71      	ldr	r3, [pc, #452]	; (8015da0 <dhcp_select+0x1d4>)
 8015bdc:	f240 1277 	movw	r2, #375	; 0x177
 8015be0:	4970      	ldr	r1, [pc, #448]	; (8015da4 <dhcp_select+0x1d8>)
 8015be2:	4871      	ldr	r0, [pc, #452]	; (8015da8 <dhcp_select+0x1dc>)
 8015be4:	f004 ff98 	bl	801ab18 <iprintf>
 8015be8:	f06f 030f 	mvn.w	r3, #15
 8015bec:	e0d3      	b.n	8015d96 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015bf4:	69bb      	ldr	r3, [r7, #24]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d109      	bne.n	8015c0e <dhcp_select+0x42>
 8015bfa:	4b69      	ldr	r3, [pc, #420]	; (8015da0 <dhcp_select+0x1d4>)
 8015bfc:	f240 1279 	movw	r2, #377	; 0x179
 8015c00:	496a      	ldr	r1, [pc, #424]	; (8015dac <dhcp_select+0x1e0>)
 8015c02:	4869      	ldr	r0, [pc, #420]	; (8015da8 <dhcp_select+0x1dc>)
 8015c04:	f004 ff88 	bl	801ab18 <iprintf>
 8015c08:	f06f 0305 	mvn.w	r3, #5
 8015c0c:	e0c3      	b.n	8015d96 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015c0e:	2101      	movs	r1, #1
 8015c10:	69b8      	ldr	r0, [r7, #24]
 8015c12:	f000 ffab 	bl	8016b6c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015c16:	f107 030c 	add.w	r3, r7, #12
 8015c1a:	2203      	movs	r2, #3
 8015c1c:	69b9      	ldr	r1, [r7, #24]
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	f001 fc60 	bl	80174e4 <dhcp_create_msg>
 8015c24:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015c26:	697b      	ldr	r3, [r7, #20]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	f000 8085 	beq.w	8015d38 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015c34:	89b8      	ldrh	r0, [r7, #12]
 8015c36:	693b      	ldr	r3, [r7, #16]
 8015c38:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c3c:	2302      	movs	r3, #2
 8015c3e:	2239      	movs	r2, #57	; 0x39
 8015c40:	f000 ffae 	bl	8016ba0 <dhcp_option>
 8015c44:	4603      	mov	r3, r0
 8015c46:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015c48:	89b8      	ldrh	r0, [r7, #12]
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c54:	461a      	mov	r2, r3
 8015c56:	f000 fffd 	bl	8016c54 <dhcp_option_short>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015c5e:	89b8      	ldrh	r0, [r7, #12]
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c66:	2304      	movs	r3, #4
 8015c68:	2232      	movs	r2, #50	; 0x32
 8015c6a:	f000 ff99 	bl	8016ba0 <dhcp_option>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015c72:	89bc      	ldrh	r4, [r7, #12]
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015c7a:	69bb      	ldr	r3, [r7, #24]
 8015c7c:	69db      	ldr	r3, [r3, #28]
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7f7 fc53 	bl	800d52a <lwip_htonl>
 8015c84:	4603      	mov	r3, r0
 8015c86:	461a      	mov	r2, r3
 8015c88:	4629      	mov	r1, r5
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f001 f814 	bl	8016cb8 <dhcp_option_long>
 8015c90:	4603      	mov	r3, r0
 8015c92:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015c94:	89b8      	ldrh	r0, [r7, #12]
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c9c:	2304      	movs	r3, #4
 8015c9e:	2236      	movs	r2, #54	; 0x36
 8015ca0:	f000 ff7e 	bl	8016ba0 <dhcp_option>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015ca8:	89bc      	ldrh	r4, [r7, #12]
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015cb0:	69bb      	ldr	r3, [r7, #24]
 8015cb2:	699b      	ldr	r3, [r3, #24]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7f7 fc38 	bl	800d52a <lwip_htonl>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	461a      	mov	r2, r3
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	4620      	mov	r0, r4
 8015cc2:	f000 fff9 	bl	8016cb8 <dhcp_option_long>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015cca:	89b8      	ldrh	r0, [r7, #12]
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015cd2:	2304      	movs	r3, #4
 8015cd4:	2237      	movs	r2, #55	; 0x37
 8015cd6:	f000 ff63 	bl	8016ba0 <dhcp_option>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015cde:	2300      	movs	r3, #0
 8015ce0:	77bb      	strb	r3, [r7, #30]
 8015ce2:	e00e      	b.n	8015d02 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015ce4:	89b8      	ldrh	r0, [r7, #12]
 8015ce6:	693b      	ldr	r3, [r7, #16]
 8015ce8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015cec:	7fbb      	ldrb	r3, [r7, #30]
 8015cee:	4a30      	ldr	r2, [pc, #192]	; (8015db0 <dhcp_select+0x1e4>)
 8015cf0:	5cd3      	ldrb	r3, [r2, r3]
 8015cf2:	461a      	mov	r2, r3
 8015cf4:	f000 ff88 	bl	8016c08 <dhcp_option_byte>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015cfc:	7fbb      	ldrb	r3, [r7, #30]
 8015cfe:	3301      	adds	r3, #1
 8015d00:	77bb      	strb	r3, [r7, #30]
 8015d02:	7fbb      	ldrb	r3, [r7, #30]
 8015d04:	2b03      	cmp	r3, #3
 8015d06:	d9ed      	bls.n	8015ce4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015d08:	89b8      	ldrh	r0, [r7, #12]
 8015d0a:	693b      	ldr	r3, [r7, #16]
 8015d0c:	33f0      	adds	r3, #240	; 0xf0
 8015d0e:	697a      	ldr	r2, [r7, #20]
 8015d10:	4619      	mov	r1, r3
 8015d12:	f001 fcbd 	bl	8017690 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015d16:	4b27      	ldr	r3, [pc, #156]	; (8015db4 <dhcp_select+0x1e8>)
 8015d18:	6818      	ldr	r0, [r3, #0]
 8015d1a:	4b27      	ldr	r3, [pc, #156]	; (8015db8 <dhcp_select+0x1ec>)
 8015d1c:	9301      	str	r3, [sp, #4]
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	9300      	str	r3, [sp, #0]
 8015d22:	2343      	movs	r3, #67	; 0x43
 8015d24:	4a25      	ldr	r2, [pc, #148]	; (8015dbc <dhcp_select+0x1f0>)
 8015d26:	6979      	ldr	r1, [r7, #20]
 8015d28:	f7ff fbda 	bl	80154e0 <udp_sendto_if_src>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015d30:	6978      	ldr	r0, [r7, #20]
 8015d32:	f7f9 fa69 	bl	800f208 <pbuf_free>
 8015d36:	e001      	b.n	8015d3c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015d38:	23ff      	movs	r3, #255	; 0xff
 8015d3a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015d3c:	69bb      	ldr	r3, [r7, #24]
 8015d3e:	799b      	ldrb	r3, [r3, #6]
 8015d40:	2bff      	cmp	r3, #255	; 0xff
 8015d42:	d005      	beq.n	8015d50 <dhcp_select+0x184>
    dhcp->tries++;
 8015d44:	69bb      	ldr	r3, [r7, #24]
 8015d46:	799b      	ldrb	r3, [r3, #6]
 8015d48:	3301      	adds	r3, #1
 8015d4a:	b2da      	uxtb	r2, r3
 8015d4c:	69bb      	ldr	r3, [r7, #24]
 8015d4e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015d50:	69bb      	ldr	r3, [r7, #24]
 8015d52:	799b      	ldrb	r3, [r3, #6]
 8015d54:	2b05      	cmp	r3, #5
 8015d56:	d80d      	bhi.n	8015d74 <dhcp_select+0x1a8>
 8015d58:	69bb      	ldr	r3, [r7, #24]
 8015d5a:	799b      	ldrb	r3, [r3, #6]
 8015d5c:	461a      	mov	r2, r3
 8015d5e:	2301      	movs	r3, #1
 8015d60:	4093      	lsls	r3, r2
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	461a      	mov	r2, r3
 8015d66:	0152      	lsls	r2, r2, #5
 8015d68:	1ad2      	subs	r2, r2, r3
 8015d6a:	0092      	lsls	r2, r2, #2
 8015d6c:	4413      	add	r3, r2
 8015d6e:	00db      	lsls	r3, r3, #3
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	e001      	b.n	8015d78 <dhcp_select+0x1ac>
 8015d74:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015d78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015d7a:	89fb      	ldrh	r3, [r7, #14]
 8015d7c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015d80:	4a0f      	ldr	r2, [pc, #60]	; (8015dc0 <dhcp_select+0x1f4>)
 8015d82:	fb82 1203 	smull	r1, r2, r2, r3
 8015d86:	1152      	asrs	r2, r2, #5
 8015d88:	17db      	asrs	r3, r3, #31
 8015d8a:	1ad3      	subs	r3, r2, r3
 8015d8c:	b29a      	uxth	r2, r3
 8015d8e:	69bb      	ldr	r3, [r7, #24]
 8015d90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015d92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3720      	adds	r7, #32
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8015d9e:	bf00      	nop
 8015da0:	0801e82c 	.word	0x0801e82c
 8015da4:	0801e8d8 	.word	0x0801e8d8
 8015da8:	0801e88c 	.word	0x0801e88c
 8015dac:	0801e8f4 	.word	0x0801e8f4
 8015db0:	20000048 	.word	0x20000048
 8015db4:	20012310 	.word	0x20012310
 8015db8:	0801f458 	.word	0x0801f458
 8015dbc:	0801f45c 	.word	0x0801f45c
 8015dc0:	10624dd3 	.word	0x10624dd3

08015dc4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b082      	sub	sp, #8
 8015dc8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015dca:	4b27      	ldr	r3, [pc, #156]	; (8015e68 <dhcp_coarse_tmr+0xa4>)
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	607b      	str	r3, [r7, #4]
 8015dd0:	e042      	b.n	8015e58 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d039      	beq.n	8015e52 <dhcp_coarse_tmr+0x8e>
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	795b      	ldrb	r3, [r3, #5]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d035      	beq.n	8015e52 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	8a9b      	ldrh	r3, [r3, #20]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d012      	beq.n	8015e14 <dhcp_coarse_tmr+0x50>
 8015dee:	683b      	ldr	r3, [r7, #0]
 8015df0:	8a5b      	ldrh	r3, [r3, #18]
 8015df2:	3301      	adds	r3, #1
 8015df4:	b29a      	uxth	r2, r3
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	825a      	strh	r2, [r3, #18]
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	8a5a      	ldrh	r2, [r3, #18]
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	8a9b      	ldrh	r3, [r3, #20]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d106      	bne.n	8015e14 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f000 fe16 	bl	8016a38 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f000 f989 	bl	8016124 <dhcp_start>
 8015e12:	e01e      	b.n	8015e52 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	8a1b      	ldrh	r3, [r3, #16]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d00b      	beq.n	8015e34 <dhcp_coarse_tmr+0x70>
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	8a1b      	ldrh	r3, [r3, #16]
 8015e20:	1e5a      	subs	r2, r3, #1
 8015e22:	b291      	uxth	r1, r2
 8015e24:	683a      	ldr	r2, [r7, #0]
 8015e26:	8211      	strh	r1, [r2, #16]
 8015e28:	2b01      	cmp	r3, #1
 8015e2a:	d103      	bne.n	8015e34 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f000 f8c6 	bl	8015fbe <dhcp_t2_timeout>
 8015e32:	e00e      	b.n	8015e52 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	89db      	ldrh	r3, [r3, #14]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d00a      	beq.n	8015e52 <dhcp_coarse_tmr+0x8e>
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	89db      	ldrh	r3, [r3, #14]
 8015e40:	1e5a      	subs	r2, r3, #1
 8015e42:	b291      	uxth	r1, r2
 8015e44:	683a      	ldr	r2, [r7, #0]
 8015e46:	81d1      	strh	r1, [r2, #14]
 8015e48:	2b01      	cmp	r3, #1
 8015e4a:	d102      	bne.n	8015e52 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f000 f888 	bl	8015f62 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	607b      	str	r3, [r7, #4]
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d1b9      	bne.n	8015dd2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015e5e:	bf00      	nop
 8015e60:	bf00      	nop
 8015e62:	3708      	adds	r7, #8
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	20012270 	.word	0x20012270

08015e6c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015e72:	4b16      	ldr	r3, [pc, #88]	; (8015ecc <dhcp_fine_tmr+0x60>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	607b      	str	r3, [r7, #4]
 8015e78:	e020      	b.n	8015ebc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e7e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d017      	beq.n	8015eb6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	891b      	ldrh	r3, [r3, #8]
 8015e8a:	2b01      	cmp	r3, #1
 8015e8c:	d906      	bls.n	8015e9c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015e8e:	683b      	ldr	r3, [r7, #0]
 8015e90:	891b      	ldrh	r3, [r3, #8]
 8015e92:	3b01      	subs	r3, #1
 8015e94:	b29a      	uxth	r2, r3
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	811a      	strh	r2, [r3, #8]
 8015e9a:	e00c      	b.n	8015eb6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	891b      	ldrh	r3, [r3, #8]
 8015ea0:	2b01      	cmp	r3, #1
 8015ea2:	d108      	bne.n	8015eb6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	891b      	ldrh	r3, [r3, #8]
 8015ea8:	3b01      	subs	r3, #1
 8015eaa:	b29a      	uxth	r2, r3
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f000 f80d 	bl	8015ed0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	607b      	str	r3, [r7, #4]
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d1db      	bne.n	8015e7a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015ec2:	bf00      	nop
 8015ec4:	bf00      	nop
 8015ec6:	3708      	adds	r7, #8
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}
 8015ecc:	20012270 	.word	0x20012270

08015ed0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b084      	sub	sp, #16
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015edc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	795b      	ldrb	r3, [r3, #5]
 8015ee2:	2b0c      	cmp	r3, #12
 8015ee4:	d003      	beq.n	8015eee <dhcp_timeout+0x1e>
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	795b      	ldrb	r3, [r3, #5]
 8015eea:	2b06      	cmp	r3, #6
 8015eec:	d103      	bne.n	8015ef6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f000 fa38 	bl	8016364 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015ef4:	e031      	b.n	8015f5a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	795b      	ldrb	r3, [r3, #5]
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d10e      	bne.n	8015f1c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	799b      	ldrb	r3, [r3, #6]
 8015f02:	2b05      	cmp	r3, #5
 8015f04:	d803      	bhi.n	8015f0e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f7ff fe60 	bl	8015bcc <dhcp_select>
}
 8015f0c:	e025      	b.n	8015f5a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f000 fd92 	bl	8016a38 <dhcp_release_and_stop>
      dhcp_start(netif);
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f000 f905 	bl	8016124 <dhcp_start>
}
 8015f1a:	e01e      	b.n	8015f5a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	795b      	ldrb	r3, [r3, #5]
 8015f20:	2b08      	cmp	r3, #8
 8015f22:	d10b      	bne.n	8015f3c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	799b      	ldrb	r3, [r3, #6]
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	d803      	bhi.n	8015f34 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f7ff fdf3 	bl	8015b18 <dhcp_check>
}
 8015f32:	e012      	b.n	8015f5a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 fab7 	bl	80164a8 <dhcp_bind>
}
 8015f3a:	e00e      	b.n	8015f5a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	795b      	ldrb	r3, [r3, #5]
 8015f40:	2b03      	cmp	r3, #3
 8015f42:	d10a      	bne.n	8015f5a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	799b      	ldrb	r3, [r3, #6]
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	d803      	bhi.n	8015f54 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f000 fcbd 	bl	80168cc <dhcp_reboot>
}
 8015f52:	e002      	b.n	8015f5a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	f000 fa05 	bl	8016364 <dhcp_discover>
}
 8015f5a:	bf00      	nop
 8015f5c:	3710      	adds	r7, #16
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}

08015f62 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015f62:	b580      	push	{r7, lr}
 8015f64:	b084      	sub	sp, #16
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f6e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	795b      	ldrb	r3, [r3, #5]
 8015f74:	2b01      	cmp	r3, #1
 8015f76:	d007      	beq.n	8015f88 <dhcp_t1_timeout+0x26>
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	795b      	ldrb	r3, [r3, #5]
 8015f7c:	2b0a      	cmp	r3, #10
 8015f7e:	d003      	beq.n	8015f88 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015f84:	2b05      	cmp	r3, #5
 8015f86:	d116      	bne.n	8015fb6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f000 fb67 	bl	801665c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	899b      	ldrh	r3, [r3, #12]
 8015f92:	461a      	mov	r2, r3
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	8a5b      	ldrh	r3, [r3, #18]
 8015f98:	1ad3      	subs	r3, r2, r3
 8015f9a:	2b01      	cmp	r3, #1
 8015f9c:	dd0b      	ble.n	8015fb6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	899b      	ldrh	r3, [r3, #12]
 8015fa2:	461a      	mov	r2, r3
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	8a5b      	ldrh	r3, [r3, #18]
 8015fa8:	1ad3      	subs	r3, r2, r3
 8015faa:	0fda      	lsrs	r2, r3, #31
 8015fac:	4413      	add	r3, r2
 8015fae:	105b      	asrs	r3, r3, #1
 8015fb0:	b29a      	uxth	r2, r3
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8015fb6:	bf00      	nop
 8015fb8:	3710      	adds	r7, #16
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}

08015fbe <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015fbe:	b580      	push	{r7, lr}
 8015fc0:	b084      	sub	sp, #16
 8015fc2:	af00      	add	r7, sp, #0
 8015fc4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	795b      	ldrb	r3, [r3, #5]
 8015fd0:	2b01      	cmp	r3, #1
 8015fd2:	d00b      	beq.n	8015fec <dhcp_t2_timeout+0x2e>
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	795b      	ldrb	r3, [r3, #5]
 8015fd8:	2b0a      	cmp	r3, #10
 8015fda:	d007      	beq.n	8015fec <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015fe0:	2b05      	cmp	r3, #5
 8015fe2:	d003      	beq.n	8015fec <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	795b      	ldrb	r3, [r3, #5]
 8015fe8:	2b04      	cmp	r3, #4
 8015fea:	d116      	bne.n	801601a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f000 fbd1 	bl	8016794 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	8a9b      	ldrh	r3, [r3, #20]
 8015ff6:	461a      	mov	r2, r3
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	8a5b      	ldrh	r3, [r3, #18]
 8015ffc:	1ad3      	subs	r3, r2, r3
 8015ffe:	2b01      	cmp	r3, #1
 8016000:	dd0b      	ble.n	801601a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	8a9b      	ldrh	r3, [r3, #20]
 8016006:	461a      	mov	r2, r3
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	8a5b      	ldrh	r3, [r3, #18]
 801600c:	1ad3      	subs	r3, r2, r3
 801600e:	0fda      	lsrs	r2, r3, #31
 8016010:	4413      	add	r3, r2
 8016012:	105b      	asrs	r3, r3, #1
 8016014:	b29a      	uxth	r2, r3
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801601a:	bf00      	nop
 801601c:	3710      	adds	r7, #16
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
	...

08016024 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b086      	sub	sp, #24
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016032:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016034:	693b      	ldr	r3, [r7, #16]
 8016036:	2200      	movs	r2, #0
 8016038:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801603a:	693b      	ldr	r3, [r7, #16]
 801603c:	2200      	movs	r2, #0
 801603e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8016040:	4b36      	ldr	r3, [pc, #216]	; (801611c <dhcp_handle_ack+0xf8>)
 8016042:	78db      	ldrb	r3, [r3, #3]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d003      	beq.n	8016050 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016048:	4b35      	ldr	r3, [pc, #212]	; (8016120 <dhcp_handle_ack+0xfc>)
 801604a:	68da      	ldr	r2, [r3, #12]
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016050:	4b32      	ldr	r3, [pc, #200]	; (801611c <dhcp_handle_ack+0xf8>)
 8016052:	791b      	ldrb	r3, [r3, #4]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d004      	beq.n	8016062 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016058:	4b31      	ldr	r3, [pc, #196]	; (8016120 <dhcp_handle_ack+0xfc>)
 801605a:	691a      	ldr	r2, [r3, #16]
 801605c:	693b      	ldr	r3, [r7, #16]
 801605e:	62da      	str	r2, [r3, #44]	; 0x2c
 8016060:	e004      	b.n	801606c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8016062:	693b      	ldr	r3, [r7, #16]
 8016064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016066:	085a      	lsrs	r2, r3, #1
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801606c:	4b2b      	ldr	r3, [pc, #172]	; (801611c <dhcp_handle_ack+0xf8>)
 801606e:	795b      	ldrb	r3, [r3, #5]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d004      	beq.n	801607e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016074:	4b2a      	ldr	r3, [pc, #168]	; (8016120 <dhcp_handle_ack+0xfc>)
 8016076:	695a      	ldr	r2, [r3, #20]
 8016078:	693b      	ldr	r3, [r7, #16]
 801607a:	631a      	str	r2, [r3, #48]	; 0x30
 801607c:	e007      	b.n	801608e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016082:	4613      	mov	r3, r2
 8016084:	00db      	lsls	r3, r3, #3
 8016086:	1a9b      	subs	r3, r3, r2
 8016088:	08da      	lsrs	r2, r3, #3
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	691a      	ldr	r2, [r3, #16]
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016096:	4b21      	ldr	r3, [pc, #132]	; (801611c <dhcp_handle_ack+0xf8>)
 8016098:	799b      	ldrb	r3, [r3, #6]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d00b      	beq.n	80160b6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801609e:	4b20      	ldr	r3, [pc, #128]	; (8016120 <dhcp_handle_ack+0xfc>)
 80160a0:	699b      	ldr	r3, [r3, #24]
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7f7 fa41 	bl	800d52a <lwip_htonl>
 80160a8:	4602      	mov	r2, r0
 80160aa:	693b      	ldr	r3, [r7, #16]
 80160ac:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80160ae:	693b      	ldr	r3, [r7, #16]
 80160b0:	2201      	movs	r2, #1
 80160b2:	71da      	strb	r2, [r3, #7]
 80160b4:	e002      	b.n	80160bc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	2200      	movs	r2, #0
 80160ba:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80160bc:	4b17      	ldr	r3, [pc, #92]	; (801611c <dhcp_handle_ack+0xf8>)
 80160be:	79db      	ldrb	r3, [r3, #7]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d007      	beq.n	80160d4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80160c4:	4b16      	ldr	r3, [pc, #88]	; (8016120 <dhcp_handle_ack+0xfc>)
 80160c6:	69db      	ldr	r3, [r3, #28]
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7f7 fa2e 	bl	800d52a <lwip_htonl>
 80160ce:	4602      	mov	r2, r0
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80160d4:	2300      	movs	r3, #0
 80160d6:	75fb      	strb	r3, [r7, #23]
 80160d8:	e013      	b.n	8016102 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 80160da:	7dfb      	ldrb	r3, [r7, #23]
 80160dc:	3308      	adds	r3, #8
 80160de:	4a10      	ldr	r2, [pc, #64]	; (8016120 <dhcp_handle_ack+0xfc>)
 80160e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80160e4:	4618      	mov	r0, r3
 80160e6:	f7f7 fa20 	bl	800d52a <lwip_htonl>
 80160ea:	4603      	mov	r3, r0
 80160ec:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 80160ee:	f107 020c 	add.w	r2, r7, #12
 80160f2:	7dfb      	ldrb	r3, [r7, #23]
 80160f4:	4611      	mov	r1, r2
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7f7 fa38 	bl	800d56c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80160fc:	7dfb      	ldrb	r3, [r7, #23]
 80160fe:	3301      	adds	r3, #1
 8016100:	75fb      	strb	r3, [r7, #23]
 8016102:	7dfb      	ldrb	r3, [r7, #23]
 8016104:	2b01      	cmp	r3, #1
 8016106:	d805      	bhi.n	8016114 <dhcp_handle_ack+0xf0>
 8016108:	7dfb      	ldrb	r3, [r7, #23]
 801610a:	3308      	adds	r3, #8
 801610c:	4a03      	ldr	r2, [pc, #12]	; (801611c <dhcp_handle_ack+0xf8>)
 801610e:	5cd3      	ldrb	r3, [r2, r3]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d1e2      	bne.n	80160da <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016114:	bf00      	nop
 8016116:	3718      	adds	r7, #24
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}
 801611c:	20012304 	.word	0x20012304
 8016120:	200122dc 	.word	0x200122dc

08016124 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b084      	sub	sp, #16
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d109      	bne.n	8016146 <dhcp_start+0x22>
 8016132:	4b37      	ldr	r3, [pc, #220]	; (8016210 <dhcp_start+0xec>)
 8016134:	f240 22e7 	movw	r2, #743	; 0x2e7
 8016138:	4936      	ldr	r1, [pc, #216]	; (8016214 <dhcp_start+0xf0>)
 801613a:	4837      	ldr	r0, [pc, #220]	; (8016218 <dhcp_start+0xf4>)
 801613c:	f004 fcec 	bl	801ab18 <iprintf>
 8016140:	f06f 030f 	mvn.w	r3, #15
 8016144:	e060      	b.n	8016208 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801614c:	f003 0301 	and.w	r3, r3, #1
 8016150:	2b00      	cmp	r3, #0
 8016152:	d109      	bne.n	8016168 <dhcp_start+0x44>
 8016154:	4b2e      	ldr	r3, [pc, #184]	; (8016210 <dhcp_start+0xec>)
 8016156:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801615a:	4930      	ldr	r1, [pc, #192]	; (801621c <dhcp_start+0xf8>)
 801615c:	482e      	ldr	r0, [pc, #184]	; (8016218 <dhcp_start+0xf4>)
 801615e:	f004 fcdb 	bl	801ab18 <iprintf>
 8016162:	f06f 030f 	mvn.w	r3, #15
 8016166:	e04f      	b.n	8016208 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801616c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016172:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8016176:	d202      	bcs.n	801617e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8016178:	f04f 33ff 	mov.w	r3, #4294967295
 801617c:	e044      	b.n	8016208 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d10d      	bne.n	80161a0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016184:	2034      	movs	r0, #52	; 0x34
 8016186:	f7f7 ffdd 	bl	800e144 <mem_malloc>
 801618a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d102      	bne.n	8016198 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016192:	f04f 33ff 	mov.w	r3, #4294967295
 8016196:	e037      	b.n	8016208 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	68fa      	ldr	r2, [r7, #12]
 801619c:	625a      	str	r2, [r3, #36]	; 0x24
 801619e:	e005      	b.n	80161ac <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	791b      	ldrb	r3, [r3, #4]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d001      	beq.n	80161ac <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80161a8:	f7ff fc72 	bl	8015a90 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80161ac:	2234      	movs	r2, #52	; 0x34
 80161ae:	2100      	movs	r1, #0
 80161b0:	68f8      	ldr	r0, [r7, #12]
 80161b2:	f004 fd16 	bl	801abe2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80161b6:	f7ff fc19 	bl	80159ec <dhcp_inc_pcb_refcount>
 80161ba:	4603      	mov	r3, r0
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d002      	beq.n	80161c6 <dhcp_start+0xa2>
    return ERR_MEM;
 80161c0:	f04f 33ff 	mov.w	r3, #4294967295
 80161c4:	e020      	b.n	8016208 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2201      	movs	r2, #1
 80161ca:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80161d2:	f003 0304 	and.w	r3, r3, #4
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d105      	bne.n	80161e6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80161da:	2102      	movs	r1, #2
 80161dc:	68f8      	ldr	r0, [r7, #12]
 80161de:	f000 fcc5 	bl	8016b6c <dhcp_set_state>
    return ERR_OK;
 80161e2:	2300      	movs	r3, #0
 80161e4:	e010      	b.n	8016208 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80161e6:	6878      	ldr	r0, [r7, #4]
 80161e8:	f000 f8bc 	bl	8016364 <dhcp_discover>
 80161ec:	4603      	mov	r3, r0
 80161ee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80161f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d005      	beq.n	8016204 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f000 fc1d 	bl	8016a38 <dhcp_release_and_stop>
    return ERR_MEM;
 80161fe:	f04f 33ff 	mov.w	r3, #4294967295
 8016202:	e001      	b.n	8016208 <dhcp_start+0xe4>
  }
  return result;
 8016204:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016208:	4618      	mov	r0, r3
 801620a:	3710      	adds	r7, #16
 801620c:	46bd      	mov	sp, r7
 801620e:	bd80      	pop	{r7, pc}
 8016210:	0801e82c 	.word	0x0801e82c
 8016214:	0801e910 	.word	0x0801e910
 8016218:	0801e88c 	.word	0x0801e88c
 801621c:	0801e954 	.word	0x0801e954

08016220 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b084      	sub	sp, #16
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d107      	bne.n	8016240 <dhcp_arp_reply+0x20>
 8016230:	4b0e      	ldr	r3, [pc, #56]	; (801626c <dhcp_arp_reply+0x4c>)
 8016232:	f240 328b 	movw	r2, #907	; 0x38b
 8016236:	490e      	ldr	r1, [pc, #56]	; (8016270 <dhcp_arp_reply+0x50>)
 8016238:	480e      	ldr	r0, [pc, #56]	; (8016274 <dhcp_arp_reply+0x54>)
 801623a:	f004 fc6d 	bl	801ab18 <iprintf>
 801623e:	e012      	b.n	8016266 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016244:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d00c      	beq.n	8016266 <dhcp_arp_reply+0x46>
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	795b      	ldrb	r3, [r3, #5]
 8016250:	2b08      	cmp	r3, #8
 8016252:	d108      	bne.n	8016266 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016254:	683b      	ldr	r3, [r7, #0]
 8016256:	681a      	ldr	r2, [r3, #0]
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	69db      	ldr	r3, [r3, #28]
 801625c:	429a      	cmp	r2, r3
 801625e:	d102      	bne.n	8016266 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f000 f809 	bl	8016278 <dhcp_decline>
    }
  }
}
 8016266:	3710      	adds	r7, #16
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}
 801626c:	0801e82c 	.word	0x0801e82c
 8016270:	0801e910 	.word	0x0801e910
 8016274:	0801e88c 	.word	0x0801e88c

08016278 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016278:	b5b0      	push	{r4, r5, r7, lr}
 801627a:	b08a      	sub	sp, #40	; 0x28
 801627c:	af02      	add	r7, sp, #8
 801627e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016284:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016286:	210c      	movs	r1, #12
 8016288:	69b8      	ldr	r0, [r7, #24]
 801628a:	f000 fc6f 	bl	8016b6c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801628e:	f107 030c 	add.w	r3, r7, #12
 8016292:	2204      	movs	r2, #4
 8016294:	69b9      	ldr	r1, [r7, #24]
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f001 f924 	bl	80174e4 <dhcp_create_msg>
 801629c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d035      	beq.n	8016310 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80162a4:	697b      	ldr	r3, [r7, #20]
 80162a6:	685b      	ldr	r3, [r3, #4]
 80162a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80162aa:	89b8      	ldrh	r0, [r7, #12]
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80162b2:	2304      	movs	r3, #4
 80162b4:	2232      	movs	r2, #50	; 0x32
 80162b6:	f000 fc73 	bl	8016ba0 <dhcp_option>
 80162ba:	4603      	mov	r3, r0
 80162bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80162be:	89bc      	ldrh	r4, [r7, #12]
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	69db      	ldr	r3, [r3, #28]
 80162ca:	4618      	mov	r0, r3
 80162cc:	f7f7 f92d 	bl	800d52a <lwip_htonl>
 80162d0:	4603      	mov	r3, r0
 80162d2:	461a      	mov	r2, r3
 80162d4:	4629      	mov	r1, r5
 80162d6:	4620      	mov	r0, r4
 80162d8:	f000 fcee 	bl	8016cb8 <dhcp_option_long>
 80162dc:	4603      	mov	r3, r0
 80162de:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80162e0:	89b8      	ldrh	r0, [r7, #12]
 80162e2:	693b      	ldr	r3, [r7, #16]
 80162e4:	33f0      	adds	r3, #240	; 0xf0
 80162e6:	697a      	ldr	r2, [r7, #20]
 80162e8:	4619      	mov	r1, r3
 80162ea:	f001 f9d1 	bl	8017690 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80162ee:	4b19      	ldr	r3, [pc, #100]	; (8016354 <dhcp_decline+0xdc>)
 80162f0:	6818      	ldr	r0, [r3, #0]
 80162f2:	4b19      	ldr	r3, [pc, #100]	; (8016358 <dhcp_decline+0xe0>)
 80162f4:	9301      	str	r3, [sp, #4]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	9300      	str	r3, [sp, #0]
 80162fa:	2343      	movs	r3, #67	; 0x43
 80162fc:	4a17      	ldr	r2, [pc, #92]	; (801635c <dhcp_decline+0xe4>)
 80162fe:	6979      	ldr	r1, [r7, #20]
 8016300:	f7ff f8ee 	bl	80154e0 <udp_sendto_if_src>
 8016304:	4603      	mov	r3, r0
 8016306:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016308:	6978      	ldr	r0, [r7, #20]
 801630a:	f7f8 ff7d 	bl	800f208 <pbuf_free>
 801630e:	e001      	b.n	8016314 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016310:	23ff      	movs	r3, #255	; 0xff
 8016312:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016314:	69bb      	ldr	r3, [r7, #24]
 8016316:	799b      	ldrb	r3, [r3, #6]
 8016318:	2bff      	cmp	r3, #255	; 0xff
 801631a:	d005      	beq.n	8016328 <dhcp_decline+0xb0>
    dhcp->tries++;
 801631c:	69bb      	ldr	r3, [r7, #24]
 801631e:	799b      	ldrb	r3, [r3, #6]
 8016320:	3301      	adds	r3, #1
 8016322:	b2da      	uxtb	r2, r3
 8016324:	69bb      	ldr	r3, [r7, #24]
 8016326:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016328:	f242 7310 	movw	r3, #10000	; 0x2710
 801632c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801632e:	89fb      	ldrh	r3, [r7, #14]
 8016330:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016334:	4a0a      	ldr	r2, [pc, #40]	; (8016360 <dhcp_decline+0xe8>)
 8016336:	fb82 1203 	smull	r1, r2, r2, r3
 801633a:	1152      	asrs	r2, r2, #5
 801633c:	17db      	asrs	r3, r3, #31
 801633e:	1ad3      	subs	r3, r2, r3
 8016340:	b29a      	uxth	r2, r3
 8016342:	69bb      	ldr	r3, [r7, #24]
 8016344:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016346:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801634a:	4618      	mov	r0, r3
 801634c:	3720      	adds	r7, #32
 801634e:	46bd      	mov	sp, r7
 8016350:	bdb0      	pop	{r4, r5, r7, pc}
 8016352:	bf00      	nop
 8016354:	20012310 	.word	0x20012310
 8016358:	0801f458 	.word	0x0801f458
 801635c:	0801f45c 	.word	0x0801f45c
 8016360:	10624dd3 	.word	0x10624dd3

08016364 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b08a      	sub	sp, #40	; 0x28
 8016368:	af02      	add	r7, sp, #8
 801636a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016370:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016372:	2300      	movs	r3, #0
 8016374:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	2200      	movs	r2, #0
 801637a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801637c:	2106      	movs	r1, #6
 801637e:	69b8      	ldr	r0, [r7, #24]
 8016380:	f000 fbf4 	bl	8016b6c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016384:	f107 0308 	add.w	r3, r7, #8
 8016388:	2201      	movs	r2, #1
 801638a:	69b9      	ldr	r1, [r7, #24]
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f001 f8a9 	bl	80174e4 <dhcp_create_msg>
 8016392:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016394:	693b      	ldr	r3, [r7, #16]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d04b      	beq.n	8016432 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80163a0:	8938      	ldrh	r0, [r7, #8]
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163a8:	2302      	movs	r3, #2
 80163aa:	2239      	movs	r2, #57	; 0x39
 80163ac:	f000 fbf8 	bl	8016ba0 <dhcp_option>
 80163b0:	4603      	mov	r3, r0
 80163b2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80163b4:	8938      	ldrh	r0, [r7, #8]
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163c0:	461a      	mov	r2, r3
 80163c2:	f000 fc47 	bl	8016c54 <dhcp_option_short>
 80163c6:	4603      	mov	r3, r0
 80163c8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80163ca:	8938      	ldrh	r0, [r7, #8]
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163d2:	2304      	movs	r3, #4
 80163d4:	2237      	movs	r2, #55	; 0x37
 80163d6:	f000 fbe3 	bl	8016ba0 <dhcp_option>
 80163da:	4603      	mov	r3, r0
 80163dc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80163de:	2300      	movs	r3, #0
 80163e0:	77fb      	strb	r3, [r7, #31]
 80163e2:	e00e      	b.n	8016402 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80163e4:	8938      	ldrh	r0, [r7, #8]
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163ec:	7ffb      	ldrb	r3, [r7, #31]
 80163ee:	4a29      	ldr	r2, [pc, #164]	; (8016494 <dhcp_discover+0x130>)
 80163f0:	5cd3      	ldrb	r3, [r2, r3]
 80163f2:	461a      	mov	r2, r3
 80163f4:	f000 fc08 	bl	8016c08 <dhcp_option_byte>
 80163f8:	4603      	mov	r3, r0
 80163fa:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80163fc:	7ffb      	ldrb	r3, [r7, #31]
 80163fe:	3301      	adds	r3, #1
 8016400:	77fb      	strb	r3, [r7, #31]
 8016402:	7ffb      	ldrb	r3, [r7, #31]
 8016404:	2b03      	cmp	r3, #3
 8016406:	d9ed      	bls.n	80163e4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016408:	8938      	ldrh	r0, [r7, #8]
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	33f0      	adds	r3, #240	; 0xf0
 801640e:	693a      	ldr	r2, [r7, #16]
 8016410:	4619      	mov	r1, r3
 8016412:	f001 f93d 	bl	8017690 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016416:	4b20      	ldr	r3, [pc, #128]	; (8016498 <dhcp_discover+0x134>)
 8016418:	6818      	ldr	r0, [r3, #0]
 801641a:	4b20      	ldr	r3, [pc, #128]	; (801649c <dhcp_discover+0x138>)
 801641c:	9301      	str	r3, [sp, #4]
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	9300      	str	r3, [sp, #0]
 8016422:	2343      	movs	r3, #67	; 0x43
 8016424:	4a1e      	ldr	r2, [pc, #120]	; (80164a0 <dhcp_discover+0x13c>)
 8016426:	6939      	ldr	r1, [r7, #16]
 8016428:	f7ff f85a 	bl	80154e0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801642c:	6938      	ldr	r0, [r7, #16]
 801642e:	f7f8 feeb 	bl	800f208 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016432:	69bb      	ldr	r3, [r7, #24]
 8016434:	799b      	ldrb	r3, [r3, #6]
 8016436:	2bff      	cmp	r3, #255	; 0xff
 8016438:	d005      	beq.n	8016446 <dhcp_discover+0xe2>
    dhcp->tries++;
 801643a:	69bb      	ldr	r3, [r7, #24]
 801643c:	799b      	ldrb	r3, [r3, #6]
 801643e:	3301      	adds	r3, #1
 8016440:	b2da      	uxtb	r2, r3
 8016442:	69bb      	ldr	r3, [r7, #24]
 8016444:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016446:	69bb      	ldr	r3, [r7, #24]
 8016448:	799b      	ldrb	r3, [r3, #6]
 801644a:	2b05      	cmp	r3, #5
 801644c:	d80d      	bhi.n	801646a <dhcp_discover+0x106>
 801644e:	69bb      	ldr	r3, [r7, #24]
 8016450:	799b      	ldrb	r3, [r3, #6]
 8016452:	461a      	mov	r2, r3
 8016454:	2301      	movs	r3, #1
 8016456:	4093      	lsls	r3, r2
 8016458:	b29b      	uxth	r3, r3
 801645a:	461a      	mov	r2, r3
 801645c:	0152      	lsls	r2, r2, #5
 801645e:	1ad2      	subs	r2, r2, r3
 8016460:	0092      	lsls	r2, r2, #2
 8016462:	4413      	add	r3, r2
 8016464:	00db      	lsls	r3, r3, #3
 8016466:	b29b      	uxth	r3, r3
 8016468:	e001      	b.n	801646e <dhcp_discover+0x10a>
 801646a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801646e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016470:	897b      	ldrh	r3, [r7, #10]
 8016472:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016476:	4a0b      	ldr	r2, [pc, #44]	; (80164a4 <dhcp_discover+0x140>)
 8016478:	fb82 1203 	smull	r1, r2, r2, r3
 801647c:	1152      	asrs	r2, r2, #5
 801647e:	17db      	asrs	r3, r3, #31
 8016480:	1ad3      	subs	r3, r2, r3
 8016482:	b29a      	uxth	r2, r3
 8016484:	69bb      	ldr	r3, [r7, #24]
 8016486:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016488:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801648c:	4618      	mov	r0, r3
 801648e:	3720      	adds	r7, #32
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}
 8016494:	20000048 	.word	0x20000048
 8016498:	20012310 	.word	0x20012310
 801649c:	0801f458 	.word	0x0801f458
 80164a0:	0801f45c 	.word	0x0801f45c
 80164a4:	10624dd3 	.word	0x10624dd3

080164a8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b088      	sub	sp, #32
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d107      	bne.n	80164c6 <dhcp_bind+0x1e>
 80164b6:	4b64      	ldr	r3, [pc, #400]	; (8016648 <dhcp_bind+0x1a0>)
 80164b8:	f240 4215 	movw	r2, #1045	; 0x415
 80164bc:	4963      	ldr	r1, [pc, #396]	; (801664c <dhcp_bind+0x1a4>)
 80164be:	4864      	ldr	r0, [pc, #400]	; (8016650 <dhcp_bind+0x1a8>)
 80164c0:	f004 fb2a 	bl	801ab18 <iprintf>
 80164c4:	e0bc      	b.n	8016640 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ca:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80164cc:	69bb      	ldr	r3, [r7, #24]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d107      	bne.n	80164e2 <dhcp_bind+0x3a>
 80164d2:	4b5d      	ldr	r3, [pc, #372]	; (8016648 <dhcp_bind+0x1a0>)
 80164d4:	f240 4217 	movw	r2, #1047	; 0x417
 80164d8:	495e      	ldr	r1, [pc, #376]	; (8016654 <dhcp_bind+0x1ac>)
 80164da:	485d      	ldr	r0, [pc, #372]	; (8016650 <dhcp_bind+0x1a8>)
 80164dc:	f004 fb1c 	bl	801ab18 <iprintf>
 80164e0:	e0ae      	b.n	8016640 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80164e2:	69bb      	ldr	r3, [r7, #24]
 80164e4:	2200      	movs	r2, #0
 80164e6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80164e8:	69bb      	ldr	r3, [r7, #24]
 80164ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164f0:	d019      	beq.n	8016526 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80164f2:	69bb      	ldr	r3, [r7, #24]
 80164f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164f6:	331e      	adds	r3, #30
 80164f8:	4a57      	ldr	r2, [pc, #348]	; (8016658 <dhcp_bind+0x1b0>)
 80164fa:	fba2 2303 	umull	r2, r3, r2, r3
 80164fe:	095b      	lsrs	r3, r3, #5
 8016500:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016502:	69fb      	ldr	r3, [r7, #28]
 8016504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016508:	d302      	bcc.n	8016510 <dhcp_bind+0x68>
      timeout = 0xffff;
 801650a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801650e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8016510:	69fb      	ldr	r3, [r7, #28]
 8016512:	b29a      	uxth	r2, r3
 8016514:	69bb      	ldr	r3, [r7, #24]
 8016516:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016518:	69bb      	ldr	r3, [r7, #24]
 801651a:	8a9b      	ldrh	r3, [r3, #20]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d102      	bne.n	8016526 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8016520:	69bb      	ldr	r3, [r7, #24]
 8016522:	2201      	movs	r2, #1
 8016524:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016526:	69bb      	ldr	r3, [r7, #24]
 8016528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801652e:	d01d      	beq.n	801656c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016530:	69bb      	ldr	r3, [r7, #24]
 8016532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016534:	331e      	adds	r3, #30
 8016536:	4a48      	ldr	r2, [pc, #288]	; (8016658 <dhcp_bind+0x1b0>)
 8016538:	fba2 2303 	umull	r2, r3, r2, r3
 801653c:	095b      	lsrs	r3, r3, #5
 801653e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016540:	69fb      	ldr	r3, [r7, #28]
 8016542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016546:	d302      	bcc.n	801654e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801654c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801654e:	69fb      	ldr	r3, [r7, #28]
 8016550:	b29a      	uxth	r2, r3
 8016552:	69bb      	ldr	r3, [r7, #24]
 8016554:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	895b      	ldrh	r3, [r3, #10]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d102      	bne.n	8016564 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801655e:	69bb      	ldr	r3, [r7, #24]
 8016560:	2201      	movs	r2, #1
 8016562:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	895a      	ldrh	r2, [r3, #10]
 8016568:	69bb      	ldr	r3, [r7, #24]
 801656a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801656c:	69bb      	ldr	r3, [r7, #24]
 801656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016574:	d01d      	beq.n	80165b2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016576:	69bb      	ldr	r3, [r7, #24]
 8016578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801657a:	331e      	adds	r3, #30
 801657c:	4a36      	ldr	r2, [pc, #216]	; (8016658 <dhcp_bind+0x1b0>)
 801657e:	fba2 2303 	umull	r2, r3, r2, r3
 8016582:	095b      	lsrs	r3, r3, #5
 8016584:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016586:	69fb      	ldr	r3, [r7, #28]
 8016588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801658c:	d302      	bcc.n	8016594 <dhcp_bind+0xec>
      timeout = 0xffff;
 801658e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016592:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016594:	69fb      	ldr	r3, [r7, #28]
 8016596:	b29a      	uxth	r2, r3
 8016598:	69bb      	ldr	r3, [r7, #24]
 801659a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801659c:	69bb      	ldr	r3, [r7, #24]
 801659e:	899b      	ldrh	r3, [r3, #12]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d102      	bne.n	80165aa <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80165a4:	69bb      	ldr	r3, [r7, #24]
 80165a6:	2201      	movs	r2, #1
 80165a8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80165aa:	69bb      	ldr	r3, [r7, #24]
 80165ac:	899a      	ldrh	r2, [r3, #12]
 80165ae:	69bb      	ldr	r3, [r7, #24]
 80165b0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80165b2:	69bb      	ldr	r3, [r7, #24]
 80165b4:	895a      	ldrh	r2, [r3, #10]
 80165b6:	69bb      	ldr	r3, [r7, #24]
 80165b8:	899b      	ldrh	r3, [r3, #12]
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d306      	bcc.n	80165cc <dhcp_bind+0x124>
 80165be:	69bb      	ldr	r3, [r7, #24]
 80165c0:	899b      	ldrh	r3, [r3, #12]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d002      	beq.n	80165cc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80165c6:	69bb      	ldr	r3, [r7, #24]
 80165c8:	2200      	movs	r2, #0
 80165ca:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80165cc:	69bb      	ldr	r3, [r7, #24]
 80165ce:	79db      	ldrb	r3, [r3, #7]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d003      	beq.n	80165dc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80165d4:	69bb      	ldr	r3, [r7, #24]
 80165d6:	6a1b      	ldr	r3, [r3, #32]
 80165d8:	613b      	str	r3, [r7, #16]
 80165da:	e014      	b.n	8016606 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80165dc:	69bb      	ldr	r3, [r7, #24]
 80165de:	331c      	adds	r3, #28
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80165e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	db02      	blt.n	80165f2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80165ec:	23ff      	movs	r3, #255	; 0xff
 80165ee:	613b      	str	r3, [r7, #16]
 80165f0:	e009      	b.n	8016606 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80165f2:	7dfb      	ldrb	r3, [r7, #23]
 80165f4:	2bbf      	cmp	r3, #191	; 0xbf
 80165f6:	d903      	bls.n	8016600 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80165f8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80165fc:	613b      	str	r3, [r7, #16]
 80165fe:	e002      	b.n	8016606 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8016600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016604:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801660a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d108      	bne.n	8016624 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8016612:	69bb      	ldr	r3, [r7, #24]
 8016614:	69da      	ldr	r2, [r3, #28]
 8016616:	693b      	ldr	r3, [r7, #16]
 8016618:	4013      	ands	r3, r2
 801661a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016622:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016624:	210a      	movs	r1, #10
 8016626:	69b8      	ldr	r0, [r7, #24]
 8016628:	f000 faa0 	bl	8016b6c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801662c:	69bb      	ldr	r3, [r7, #24]
 801662e:	f103 011c 	add.w	r1, r3, #28
 8016632:	f107 030c 	add.w	r3, r7, #12
 8016636:	f107 0210 	add.w	r2, r7, #16
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f7f8 f93e 	bl	800e8bc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8016640:	3720      	adds	r7, #32
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
 8016646:	bf00      	nop
 8016648:	0801e82c 	.word	0x0801e82c
 801664c:	0801e98c 	.word	0x0801e98c
 8016650:	0801e88c 	.word	0x0801e88c
 8016654:	0801e9a8 	.word	0x0801e9a8
 8016658:	88888889 	.word	0x88888889

0801665c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b08a      	sub	sp, #40	; 0x28
 8016660:	af02      	add	r7, sp, #8
 8016662:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016668:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801666a:	2105      	movs	r1, #5
 801666c:	69b8      	ldr	r0, [r7, #24]
 801666e:	f000 fa7d 	bl	8016b6c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016672:	f107 030c 	add.w	r3, r7, #12
 8016676:	2203      	movs	r2, #3
 8016678:	69b9      	ldr	r1, [r7, #24]
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f000 ff32 	bl	80174e4 <dhcp_create_msg>
 8016680:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d04e      	beq.n	8016726 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016688:	697b      	ldr	r3, [r7, #20]
 801668a:	685b      	ldr	r3, [r3, #4]
 801668c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801668e:	89b8      	ldrh	r0, [r7, #12]
 8016690:	693b      	ldr	r3, [r7, #16]
 8016692:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016696:	2302      	movs	r3, #2
 8016698:	2239      	movs	r2, #57	; 0x39
 801669a:	f000 fa81 	bl	8016ba0 <dhcp_option>
 801669e:	4603      	mov	r3, r0
 80166a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80166a2:	89b8      	ldrh	r0, [r7, #12]
 80166a4:	693b      	ldr	r3, [r7, #16]
 80166a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80166ae:	461a      	mov	r2, r3
 80166b0:	f000 fad0 	bl	8016c54 <dhcp_option_short>
 80166b4:	4603      	mov	r3, r0
 80166b6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80166b8:	89b8      	ldrh	r0, [r7, #12]
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166c0:	2304      	movs	r3, #4
 80166c2:	2237      	movs	r2, #55	; 0x37
 80166c4:	f000 fa6c 	bl	8016ba0 <dhcp_option>
 80166c8:	4603      	mov	r3, r0
 80166ca:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80166cc:	2300      	movs	r3, #0
 80166ce:	77bb      	strb	r3, [r7, #30]
 80166d0:	e00e      	b.n	80166f0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80166d2:	89b8      	ldrh	r0, [r7, #12]
 80166d4:	693b      	ldr	r3, [r7, #16]
 80166d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166da:	7fbb      	ldrb	r3, [r7, #30]
 80166dc:	4a2a      	ldr	r2, [pc, #168]	; (8016788 <dhcp_renew+0x12c>)
 80166de:	5cd3      	ldrb	r3, [r2, r3]
 80166e0:	461a      	mov	r2, r3
 80166e2:	f000 fa91 	bl	8016c08 <dhcp_option_byte>
 80166e6:	4603      	mov	r3, r0
 80166e8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80166ea:	7fbb      	ldrb	r3, [r7, #30]
 80166ec:	3301      	adds	r3, #1
 80166ee:	77bb      	strb	r3, [r7, #30]
 80166f0:	7fbb      	ldrb	r3, [r7, #30]
 80166f2:	2b03      	cmp	r3, #3
 80166f4:	d9ed      	bls.n	80166d2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80166f6:	89b8      	ldrh	r0, [r7, #12]
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	33f0      	adds	r3, #240	; 0xf0
 80166fc:	697a      	ldr	r2, [r7, #20]
 80166fe:	4619      	mov	r1, r3
 8016700:	f000 ffc6 	bl	8017690 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016704:	4b21      	ldr	r3, [pc, #132]	; (801678c <dhcp_renew+0x130>)
 8016706:	6818      	ldr	r0, [r3, #0]
 8016708:	69bb      	ldr	r3, [r7, #24]
 801670a:	f103 0218 	add.w	r2, r3, #24
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	9300      	str	r3, [sp, #0]
 8016712:	2343      	movs	r3, #67	; 0x43
 8016714:	6979      	ldr	r1, [r7, #20]
 8016716:	f7fe fe6f 	bl	80153f8 <udp_sendto_if>
 801671a:	4603      	mov	r3, r0
 801671c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801671e:	6978      	ldr	r0, [r7, #20]
 8016720:	f7f8 fd72 	bl	800f208 <pbuf_free>
 8016724:	e001      	b.n	801672a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016726:	23ff      	movs	r3, #255	; 0xff
 8016728:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801672a:	69bb      	ldr	r3, [r7, #24]
 801672c:	799b      	ldrb	r3, [r3, #6]
 801672e:	2bff      	cmp	r3, #255	; 0xff
 8016730:	d005      	beq.n	801673e <dhcp_renew+0xe2>
    dhcp->tries++;
 8016732:	69bb      	ldr	r3, [r7, #24]
 8016734:	799b      	ldrb	r3, [r3, #6]
 8016736:	3301      	adds	r3, #1
 8016738:	b2da      	uxtb	r2, r3
 801673a:	69bb      	ldr	r3, [r7, #24]
 801673c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801673e:	69bb      	ldr	r3, [r7, #24]
 8016740:	799b      	ldrb	r3, [r3, #6]
 8016742:	2b09      	cmp	r3, #9
 8016744:	d80a      	bhi.n	801675c <dhcp_renew+0x100>
 8016746:	69bb      	ldr	r3, [r7, #24]
 8016748:	799b      	ldrb	r3, [r3, #6]
 801674a:	b29b      	uxth	r3, r3
 801674c:	461a      	mov	r2, r3
 801674e:	0152      	lsls	r2, r2, #5
 8016750:	1ad2      	subs	r2, r2, r3
 8016752:	0092      	lsls	r2, r2, #2
 8016754:	4413      	add	r3, r2
 8016756:	011b      	lsls	r3, r3, #4
 8016758:	b29b      	uxth	r3, r3
 801675a:	e001      	b.n	8016760 <dhcp_renew+0x104>
 801675c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016760:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016762:	89fb      	ldrh	r3, [r7, #14]
 8016764:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016768:	4a09      	ldr	r2, [pc, #36]	; (8016790 <dhcp_renew+0x134>)
 801676a:	fb82 1203 	smull	r1, r2, r2, r3
 801676e:	1152      	asrs	r2, r2, #5
 8016770:	17db      	asrs	r3, r3, #31
 8016772:	1ad3      	subs	r3, r2, r3
 8016774:	b29a      	uxth	r2, r3
 8016776:	69bb      	ldr	r3, [r7, #24]
 8016778:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801677a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801677e:	4618      	mov	r0, r3
 8016780:	3720      	adds	r7, #32
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	20000048 	.word	0x20000048
 801678c:	20012310 	.word	0x20012310
 8016790:	10624dd3 	.word	0x10624dd3

08016794 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b08a      	sub	sp, #40	; 0x28
 8016798:	af02      	add	r7, sp, #8
 801679a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167a0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80167a2:	2104      	movs	r1, #4
 80167a4:	69b8      	ldr	r0, [r7, #24]
 80167a6:	f000 f9e1 	bl	8016b6c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80167aa:	f107 030c 	add.w	r3, r7, #12
 80167ae:	2203      	movs	r2, #3
 80167b0:	69b9      	ldr	r1, [r7, #24]
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	f000 fe96 	bl	80174e4 <dhcp_create_msg>
 80167b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d04c      	beq.n	801685a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80167c6:	89b8      	ldrh	r0, [r7, #12]
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167ce:	2302      	movs	r3, #2
 80167d0:	2239      	movs	r2, #57	; 0x39
 80167d2:	f000 f9e5 	bl	8016ba0 <dhcp_option>
 80167d6:	4603      	mov	r3, r0
 80167d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80167da:	89b8      	ldrh	r0, [r7, #12]
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80167e6:	461a      	mov	r2, r3
 80167e8:	f000 fa34 	bl	8016c54 <dhcp_option_short>
 80167ec:	4603      	mov	r3, r0
 80167ee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80167f0:	89b8      	ldrh	r0, [r7, #12]
 80167f2:	693b      	ldr	r3, [r7, #16]
 80167f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167f8:	2304      	movs	r3, #4
 80167fa:	2237      	movs	r2, #55	; 0x37
 80167fc:	f000 f9d0 	bl	8016ba0 <dhcp_option>
 8016800:	4603      	mov	r3, r0
 8016802:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016804:	2300      	movs	r3, #0
 8016806:	77bb      	strb	r3, [r7, #30]
 8016808:	e00e      	b.n	8016828 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801680a:	89b8      	ldrh	r0, [r7, #12]
 801680c:	693b      	ldr	r3, [r7, #16]
 801680e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016812:	7fbb      	ldrb	r3, [r7, #30]
 8016814:	4a29      	ldr	r2, [pc, #164]	; (80168bc <dhcp_rebind+0x128>)
 8016816:	5cd3      	ldrb	r3, [r2, r3]
 8016818:	461a      	mov	r2, r3
 801681a:	f000 f9f5 	bl	8016c08 <dhcp_option_byte>
 801681e:	4603      	mov	r3, r0
 8016820:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016822:	7fbb      	ldrb	r3, [r7, #30]
 8016824:	3301      	adds	r3, #1
 8016826:	77bb      	strb	r3, [r7, #30]
 8016828:	7fbb      	ldrb	r3, [r7, #30]
 801682a:	2b03      	cmp	r3, #3
 801682c:	d9ed      	bls.n	801680a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801682e:	89b8      	ldrh	r0, [r7, #12]
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	33f0      	adds	r3, #240	; 0xf0
 8016834:	697a      	ldr	r2, [r7, #20]
 8016836:	4619      	mov	r1, r3
 8016838:	f000 ff2a 	bl	8017690 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801683c:	4b20      	ldr	r3, [pc, #128]	; (80168c0 <dhcp_rebind+0x12c>)
 801683e:	6818      	ldr	r0, [r3, #0]
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	9300      	str	r3, [sp, #0]
 8016844:	2343      	movs	r3, #67	; 0x43
 8016846:	4a1f      	ldr	r2, [pc, #124]	; (80168c4 <dhcp_rebind+0x130>)
 8016848:	6979      	ldr	r1, [r7, #20]
 801684a:	f7fe fdd5 	bl	80153f8 <udp_sendto_if>
 801684e:	4603      	mov	r3, r0
 8016850:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016852:	6978      	ldr	r0, [r7, #20]
 8016854:	f7f8 fcd8 	bl	800f208 <pbuf_free>
 8016858:	e001      	b.n	801685e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801685a:	23ff      	movs	r3, #255	; 0xff
 801685c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801685e:	69bb      	ldr	r3, [r7, #24]
 8016860:	799b      	ldrb	r3, [r3, #6]
 8016862:	2bff      	cmp	r3, #255	; 0xff
 8016864:	d005      	beq.n	8016872 <dhcp_rebind+0xde>
    dhcp->tries++;
 8016866:	69bb      	ldr	r3, [r7, #24]
 8016868:	799b      	ldrb	r3, [r3, #6]
 801686a:	3301      	adds	r3, #1
 801686c:	b2da      	uxtb	r2, r3
 801686e:	69bb      	ldr	r3, [r7, #24]
 8016870:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016872:	69bb      	ldr	r3, [r7, #24]
 8016874:	799b      	ldrb	r3, [r3, #6]
 8016876:	2b09      	cmp	r3, #9
 8016878:	d80a      	bhi.n	8016890 <dhcp_rebind+0xfc>
 801687a:	69bb      	ldr	r3, [r7, #24]
 801687c:	799b      	ldrb	r3, [r3, #6]
 801687e:	b29b      	uxth	r3, r3
 8016880:	461a      	mov	r2, r3
 8016882:	0152      	lsls	r2, r2, #5
 8016884:	1ad2      	subs	r2, r2, r3
 8016886:	0092      	lsls	r2, r2, #2
 8016888:	4413      	add	r3, r2
 801688a:	00db      	lsls	r3, r3, #3
 801688c:	b29b      	uxth	r3, r3
 801688e:	e001      	b.n	8016894 <dhcp_rebind+0x100>
 8016890:	f242 7310 	movw	r3, #10000	; 0x2710
 8016894:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016896:	89fb      	ldrh	r3, [r7, #14]
 8016898:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801689c:	4a0a      	ldr	r2, [pc, #40]	; (80168c8 <dhcp_rebind+0x134>)
 801689e:	fb82 1203 	smull	r1, r2, r2, r3
 80168a2:	1152      	asrs	r2, r2, #5
 80168a4:	17db      	asrs	r3, r3, #31
 80168a6:	1ad3      	subs	r3, r2, r3
 80168a8:	b29a      	uxth	r2, r3
 80168aa:	69bb      	ldr	r3, [r7, #24]
 80168ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80168ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80168b2:	4618      	mov	r0, r3
 80168b4:	3720      	adds	r7, #32
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
 80168ba:	bf00      	nop
 80168bc:	20000048 	.word	0x20000048
 80168c0:	20012310 	.word	0x20012310
 80168c4:	0801f45c 	.word	0x0801f45c
 80168c8:	10624dd3 	.word	0x10624dd3

080168cc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80168cc:	b5b0      	push	{r4, r5, r7, lr}
 80168ce:	b08a      	sub	sp, #40	; 0x28
 80168d0:	af02      	add	r7, sp, #8
 80168d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80168da:	2103      	movs	r1, #3
 80168dc:	69b8      	ldr	r0, [r7, #24]
 80168de:	f000 f945 	bl	8016b6c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80168e2:	f107 030c 	add.w	r3, r7, #12
 80168e6:	2203      	movs	r2, #3
 80168e8:	69b9      	ldr	r1, [r7, #24]
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f000 fdfa 	bl	80174e4 <dhcp_create_msg>
 80168f0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d066      	beq.n	80169c6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80168f8:	697b      	ldr	r3, [r7, #20]
 80168fa:	685b      	ldr	r3, [r3, #4]
 80168fc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80168fe:	89b8      	ldrh	r0, [r7, #12]
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016906:	2302      	movs	r3, #2
 8016908:	2239      	movs	r2, #57	; 0x39
 801690a:	f000 f949 	bl	8016ba0 <dhcp_option>
 801690e:	4603      	mov	r3, r0
 8016910:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016912:	89b8      	ldrh	r0, [r7, #12]
 8016914:	693b      	ldr	r3, [r7, #16]
 8016916:	33f0      	adds	r3, #240	; 0xf0
 8016918:	f44f 7210 	mov.w	r2, #576	; 0x240
 801691c:	4619      	mov	r1, r3
 801691e:	f000 f999 	bl	8016c54 <dhcp_option_short>
 8016922:	4603      	mov	r3, r0
 8016924:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016926:	89b8      	ldrh	r0, [r7, #12]
 8016928:	693b      	ldr	r3, [r7, #16]
 801692a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801692e:	2304      	movs	r3, #4
 8016930:	2232      	movs	r2, #50	; 0x32
 8016932:	f000 f935 	bl	8016ba0 <dhcp_option>
 8016936:	4603      	mov	r3, r0
 8016938:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801693a:	89bc      	ldrh	r4, [r7, #12]
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016942:	69bb      	ldr	r3, [r7, #24]
 8016944:	69db      	ldr	r3, [r3, #28]
 8016946:	4618      	mov	r0, r3
 8016948:	f7f6 fdef 	bl	800d52a <lwip_htonl>
 801694c:	4603      	mov	r3, r0
 801694e:	461a      	mov	r2, r3
 8016950:	4629      	mov	r1, r5
 8016952:	4620      	mov	r0, r4
 8016954:	f000 f9b0 	bl	8016cb8 <dhcp_option_long>
 8016958:	4603      	mov	r3, r0
 801695a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801695c:	89b8      	ldrh	r0, [r7, #12]
 801695e:	693b      	ldr	r3, [r7, #16]
 8016960:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016964:	2304      	movs	r3, #4
 8016966:	2237      	movs	r2, #55	; 0x37
 8016968:	f000 f91a 	bl	8016ba0 <dhcp_option>
 801696c:	4603      	mov	r3, r0
 801696e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016970:	2300      	movs	r3, #0
 8016972:	77bb      	strb	r3, [r7, #30]
 8016974:	e00e      	b.n	8016994 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016976:	89b8      	ldrh	r0, [r7, #12]
 8016978:	693b      	ldr	r3, [r7, #16]
 801697a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801697e:	7fbb      	ldrb	r3, [r7, #30]
 8016980:	4a29      	ldr	r2, [pc, #164]	; (8016a28 <dhcp_reboot+0x15c>)
 8016982:	5cd3      	ldrb	r3, [r2, r3]
 8016984:	461a      	mov	r2, r3
 8016986:	f000 f93f 	bl	8016c08 <dhcp_option_byte>
 801698a:	4603      	mov	r3, r0
 801698c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801698e:	7fbb      	ldrb	r3, [r7, #30]
 8016990:	3301      	adds	r3, #1
 8016992:	77bb      	strb	r3, [r7, #30]
 8016994:	7fbb      	ldrb	r3, [r7, #30]
 8016996:	2b03      	cmp	r3, #3
 8016998:	d9ed      	bls.n	8016976 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801699a:	89b8      	ldrh	r0, [r7, #12]
 801699c:	693b      	ldr	r3, [r7, #16]
 801699e:	33f0      	adds	r3, #240	; 0xf0
 80169a0:	697a      	ldr	r2, [r7, #20]
 80169a2:	4619      	mov	r1, r3
 80169a4:	f000 fe74 	bl	8017690 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80169a8:	4b20      	ldr	r3, [pc, #128]	; (8016a2c <dhcp_reboot+0x160>)
 80169aa:	6818      	ldr	r0, [r3, #0]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	9300      	str	r3, [sp, #0]
 80169b0:	2343      	movs	r3, #67	; 0x43
 80169b2:	4a1f      	ldr	r2, [pc, #124]	; (8016a30 <dhcp_reboot+0x164>)
 80169b4:	6979      	ldr	r1, [r7, #20]
 80169b6:	f7fe fd1f 	bl	80153f8 <udp_sendto_if>
 80169ba:	4603      	mov	r3, r0
 80169bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80169be:	6978      	ldr	r0, [r7, #20]
 80169c0:	f7f8 fc22 	bl	800f208 <pbuf_free>
 80169c4:	e001      	b.n	80169ca <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80169c6:	23ff      	movs	r3, #255	; 0xff
 80169c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80169ca:	69bb      	ldr	r3, [r7, #24]
 80169cc:	799b      	ldrb	r3, [r3, #6]
 80169ce:	2bff      	cmp	r3, #255	; 0xff
 80169d0:	d005      	beq.n	80169de <dhcp_reboot+0x112>
    dhcp->tries++;
 80169d2:	69bb      	ldr	r3, [r7, #24]
 80169d4:	799b      	ldrb	r3, [r3, #6]
 80169d6:	3301      	adds	r3, #1
 80169d8:	b2da      	uxtb	r2, r3
 80169da:	69bb      	ldr	r3, [r7, #24]
 80169dc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80169de:	69bb      	ldr	r3, [r7, #24]
 80169e0:	799b      	ldrb	r3, [r3, #6]
 80169e2:	2b09      	cmp	r3, #9
 80169e4:	d80a      	bhi.n	80169fc <dhcp_reboot+0x130>
 80169e6:	69bb      	ldr	r3, [r7, #24]
 80169e8:	799b      	ldrb	r3, [r3, #6]
 80169ea:	b29b      	uxth	r3, r3
 80169ec:	461a      	mov	r2, r3
 80169ee:	0152      	lsls	r2, r2, #5
 80169f0:	1ad2      	subs	r2, r2, r3
 80169f2:	0092      	lsls	r2, r2, #2
 80169f4:	4413      	add	r3, r2
 80169f6:	00db      	lsls	r3, r3, #3
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	e001      	b.n	8016a00 <dhcp_reboot+0x134>
 80169fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8016a00:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016a02:	89fb      	ldrh	r3, [r7, #14]
 8016a04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016a08:	4a0a      	ldr	r2, [pc, #40]	; (8016a34 <dhcp_reboot+0x168>)
 8016a0a:	fb82 1203 	smull	r1, r2, r2, r3
 8016a0e:	1152      	asrs	r2, r2, #5
 8016a10:	17db      	asrs	r3, r3, #31
 8016a12:	1ad3      	subs	r3, r2, r3
 8016a14:	b29a      	uxth	r2, r3
 8016a16:	69bb      	ldr	r3, [r7, #24]
 8016a18:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3720      	adds	r7, #32
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bdb0      	pop	{r4, r5, r7, pc}
 8016a26:	bf00      	nop
 8016a28:	20000048 	.word	0x20000048
 8016a2c:	20012310 	.word	0x20012310
 8016a30:	0801f45c 	.word	0x0801f45c
 8016a34:	10624dd3 	.word	0x10624dd3

08016a38 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016a38:	b5b0      	push	{r4, r5, r7, lr}
 8016a3a:	b08a      	sub	sp, #40	; 0x28
 8016a3c:	af02      	add	r7, sp, #8
 8016a3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a44:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016a46:	69fb      	ldr	r3, [r7, #28]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	f000 8084 	beq.w	8016b56 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016a4e:	69fb      	ldr	r3, [r7, #28]
 8016a50:	795b      	ldrb	r3, [r3, #5]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	f000 8081 	beq.w	8016b5a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016a58:	69fb      	ldr	r3, [r7, #28]
 8016a5a:	699b      	ldr	r3, [r3, #24]
 8016a5c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016a5e:	69fb      	ldr	r3, [r7, #28]
 8016a60:	2200      	movs	r2, #0
 8016a62:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016a64:	69fb      	ldr	r3, [r7, #28]
 8016a66:	2200      	movs	r2, #0
 8016a68:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016a6a:	69fb      	ldr	r3, [r7, #28]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	2200      	movs	r2, #0
 8016a74:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016a76:	69fb      	ldr	r3, [r7, #28]
 8016a78:	2200      	movs	r2, #0
 8016a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8016a7c:	69fb      	ldr	r3, [r7, #28]
 8016a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016a80:	69fb      	ldr	r3, [r7, #28]
 8016a82:	62da      	str	r2, [r3, #44]	; 0x2c
 8016a84:	69fb      	ldr	r3, [r7, #28]
 8016a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a88:	69fb      	ldr	r3, [r7, #28]
 8016a8a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016a8c:	69fb      	ldr	r3, [r7, #28]
 8016a8e:	2200      	movs	r2, #0
 8016a90:	829a      	strh	r2, [r3, #20]
 8016a92:	69fb      	ldr	r3, [r7, #28]
 8016a94:	8a9a      	ldrh	r2, [r3, #20]
 8016a96:	69fb      	ldr	r3, [r7, #28]
 8016a98:	825a      	strh	r2, [r3, #18]
 8016a9a:	69fb      	ldr	r3, [r7, #28]
 8016a9c:	8a5a      	ldrh	r2, [r3, #18]
 8016a9e:	69fb      	ldr	r3, [r7, #28]
 8016aa0:	821a      	strh	r2, [r3, #16]
 8016aa2:	69fb      	ldr	r3, [r7, #28]
 8016aa4:	8a1a      	ldrh	r2, [r3, #16]
 8016aa6:	69fb      	ldr	r3, [r7, #28]
 8016aa8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	f000 fe1e 	bl	80176ec <dhcp_supplied_address>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d03b      	beq.n	8016b2e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016ab6:	f107 030e 	add.w	r3, r7, #14
 8016aba:	2207      	movs	r2, #7
 8016abc:	69f9      	ldr	r1, [r7, #28]
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f000 fd10 	bl	80174e4 <dhcp_create_msg>
 8016ac4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8016ac6:	69bb      	ldr	r3, [r7, #24]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d030      	beq.n	8016b2e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016acc:	69bb      	ldr	r3, [r7, #24]
 8016ace:	685b      	ldr	r3, [r3, #4]
 8016ad0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016ad2:	89f8      	ldrh	r0, [r7, #14]
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ada:	2304      	movs	r3, #4
 8016adc:	2236      	movs	r2, #54	; 0x36
 8016ade:	f000 f85f 	bl	8016ba0 <dhcp_option>
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016ae6:	89fc      	ldrh	r4, [r7, #14]
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	4618      	mov	r0, r3
 8016af2:	f7f6 fd1a 	bl	800d52a <lwip_htonl>
 8016af6:	4603      	mov	r3, r0
 8016af8:	461a      	mov	r2, r3
 8016afa:	4629      	mov	r1, r5
 8016afc:	4620      	mov	r0, r4
 8016afe:	f000 f8db 	bl	8016cb8 <dhcp_option_long>
 8016b02:	4603      	mov	r3, r0
 8016b04:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016b06:	89f8      	ldrh	r0, [r7, #14]
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	33f0      	adds	r3, #240	; 0xf0
 8016b0c:	69ba      	ldr	r2, [r7, #24]
 8016b0e:	4619      	mov	r1, r3
 8016b10:	f000 fdbe 	bl	8017690 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016b14:	4b13      	ldr	r3, [pc, #76]	; (8016b64 <dhcp_release_and_stop+0x12c>)
 8016b16:	6818      	ldr	r0, [r3, #0]
 8016b18:	f107 0210 	add.w	r2, r7, #16
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	9300      	str	r3, [sp, #0]
 8016b20:	2343      	movs	r3, #67	; 0x43
 8016b22:	69b9      	ldr	r1, [r7, #24]
 8016b24:	f7fe fc68 	bl	80153f8 <udp_sendto_if>
      pbuf_free(p_out);
 8016b28:	69b8      	ldr	r0, [r7, #24]
 8016b2a:	f7f8 fb6d 	bl	800f208 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016b2e:	4b0e      	ldr	r3, [pc, #56]	; (8016b68 <dhcp_release_and_stop+0x130>)
 8016b30:	4a0d      	ldr	r2, [pc, #52]	; (8016b68 <dhcp_release_and_stop+0x130>)
 8016b32:	490d      	ldr	r1, [pc, #52]	; (8016b68 <dhcp_release_and_stop+0x130>)
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f7f7 fec1 	bl	800e8bc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016b3a:	2100      	movs	r1, #0
 8016b3c:	69f8      	ldr	r0, [r7, #28]
 8016b3e:	f000 f815 	bl	8016b6c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	791b      	ldrb	r3, [r3, #4]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d008      	beq.n	8016b5c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016b4a:	f7fe ffa1 	bl	8015a90 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8016b4e:	69fb      	ldr	r3, [r7, #28]
 8016b50:	2200      	movs	r2, #0
 8016b52:	711a      	strb	r2, [r3, #4]
 8016b54:	e002      	b.n	8016b5c <dhcp_release_and_stop+0x124>
    return;
 8016b56:	bf00      	nop
 8016b58:	e000      	b.n	8016b5c <dhcp_release_and_stop+0x124>
    return;
 8016b5a:	bf00      	nop
  }
}
 8016b5c:	3720      	adds	r7, #32
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bdb0      	pop	{r4, r5, r7, pc}
 8016b62:	bf00      	nop
 8016b64:	20012310 	.word	0x20012310
 8016b68:	0801f458 	.word	0x0801f458

08016b6c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016b6c:	b480      	push	{r7}
 8016b6e:	b083      	sub	sp, #12
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	460b      	mov	r3, r1
 8016b76:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	795b      	ldrb	r3, [r3, #5]
 8016b7c:	78fa      	ldrb	r2, [r7, #3]
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d008      	beq.n	8016b94 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	78fa      	ldrb	r2, [r7, #3]
 8016b86:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	2200      	movs	r2, #0
 8016b92:	811a      	strh	r2, [r3, #8]
  }
}
 8016b94:	bf00      	nop
 8016b96:	370c      	adds	r7, #12
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9e:	4770      	bx	lr

08016ba0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b082      	sub	sp, #8
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6039      	str	r1, [r7, #0]
 8016ba8:	4611      	mov	r1, r2
 8016baa:	461a      	mov	r2, r3
 8016bac:	4603      	mov	r3, r0
 8016bae:	80fb      	strh	r3, [r7, #6]
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	717b      	strb	r3, [r7, #5]
 8016bb4:	4613      	mov	r3, r2
 8016bb6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016bb8:	88fa      	ldrh	r2, [r7, #6]
 8016bba:	793b      	ldrb	r3, [r7, #4]
 8016bbc:	4413      	add	r3, r2
 8016bbe:	3302      	adds	r3, #2
 8016bc0:	2b44      	cmp	r3, #68	; 0x44
 8016bc2:	d906      	bls.n	8016bd2 <dhcp_option+0x32>
 8016bc4:	4b0d      	ldr	r3, [pc, #52]	; (8016bfc <dhcp_option+0x5c>)
 8016bc6:	f240 529a 	movw	r2, #1434	; 0x59a
 8016bca:	490d      	ldr	r1, [pc, #52]	; (8016c00 <dhcp_option+0x60>)
 8016bcc:	480d      	ldr	r0, [pc, #52]	; (8016c04 <dhcp_option+0x64>)
 8016bce:	f003 ffa3 	bl	801ab18 <iprintf>
  options[options_out_len++] = option_type;
 8016bd2:	88fb      	ldrh	r3, [r7, #6]
 8016bd4:	1c5a      	adds	r2, r3, #1
 8016bd6:	80fa      	strh	r2, [r7, #6]
 8016bd8:	461a      	mov	r2, r3
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	4413      	add	r3, r2
 8016bde:	797a      	ldrb	r2, [r7, #5]
 8016be0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016be2:	88fb      	ldrh	r3, [r7, #6]
 8016be4:	1c5a      	adds	r2, r3, #1
 8016be6:	80fa      	strh	r2, [r7, #6]
 8016be8:	461a      	mov	r2, r3
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	4413      	add	r3, r2
 8016bee:	793a      	ldrb	r2, [r7, #4]
 8016bf0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016bf2:	88fb      	ldrh	r3, [r7, #6]
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3708      	adds	r7, #8
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	0801e82c 	.word	0x0801e82c
 8016c00:	0801e9c0 	.word	0x0801e9c0
 8016c04:	0801e88c 	.word	0x0801e88c

08016c08 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	4603      	mov	r3, r0
 8016c10:	6039      	str	r1, [r7, #0]
 8016c12:	80fb      	strh	r3, [r7, #6]
 8016c14:	4613      	mov	r3, r2
 8016c16:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016c18:	88fb      	ldrh	r3, [r7, #6]
 8016c1a:	2b43      	cmp	r3, #67	; 0x43
 8016c1c:	d906      	bls.n	8016c2c <dhcp_option_byte+0x24>
 8016c1e:	4b0a      	ldr	r3, [pc, #40]	; (8016c48 <dhcp_option_byte+0x40>)
 8016c20:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016c24:	4909      	ldr	r1, [pc, #36]	; (8016c4c <dhcp_option_byte+0x44>)
 8016c26:	480a      	ldr	r0, [pc, #40]	; (8016c50 <dhcp_option_byte+0x48>)
 8016c28:	f003 ff76 	bl	801ab18 <iprintf>
  options[options_out_len++] = value;
 8016c2c:	88fb      	ldrh	r3, [r7, #6]
 8016c2e:	1c5a      	adds	r2, r3, #1
 8016c30:	80fa      	strh	r2, [r7, #6]
 8016c32:	461a      	mov	r2, r3
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	4413      	add	r3, r2
 8016c38:	797a      	ldrb	r2, [r7, #5]
 8016c3a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016c3c:	88fb      	ldrh	r3, [r7, #6]
}
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3708      	adds	r7, #8
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	bf00      	nop
 8016c48:	0801e82c 	.word	0x0801e82c
 8016c4c:	0801ea04 	.word	0x0801ea04
 8016c50:	0801e88c 	.word	0x0801e88c

08016c54 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	6039      	str	r1, [r7, #0]
 8016c5e:	80fb      	strh	r3, [r7, #6]
 8016c60:	4613      	mov	r3, r2
 8016c62:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016c64:	88fb      	ldrh	r3, [r7, #6]
 8016c66:	3302      	adds	r3, #2
 8016c68:	2b44      	cmp	r3, #68	; 0x44
 8016c6a:	d906      	bls.n	8016c7a <dhcp_option_short+0x26>
 8016c6c:	4b0f      	ldr	r3, [pc, #60]	; (8016cac <dhcp_option_short+0x58>)
 8016c6e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8016c72:	490f      	ldr	r1, [pc, #60]	; (8016cb0 <dhcp_option_short+0x5c>)
 8016c74:	480f      	ldr	r0, [pc, #60]	; (8016cb4 <dhcp_option_short+0x60>)
 8016c76:	f003 ff4f 	bl	801ab18 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016c7a:	88bb      	ldrh	r3, [r7, #4]
 8016c7c:	0a1b      	lsrs	r3, r3, #8
 8016c7e:	b29a      	uxth	r2, r3
 8016c80:	88fb      	ldrh	r3, [r7, #6]
 8016c82:	1c59      	adds	r1, r3, #1
 8016c84:	80f9      	strh	r1, [r7, #6]
 8016c86:	4619      	mov	r1, r3
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	440b      	add	r3, r1
 8016c8c:	b2d2      	uxtb	r2, r2
 8016c8e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016c90:	88fb      	ldrh	r3, [r7, #6]
 8016c92:	1c5a      	adds	r2, r3, #1
 8016c94:	80fa      	strh	r2, [r7, #6]
 8016c96:	461a      	mov	r2, r3
 8016c98:	683b      	ldr	r3, [r7, #0]
 8016c9a:	4413      	add	r3, r2
 8016c9c:	88ba      	ldrh	r2, [r7, #4]
 8016c9e:	b2d2      	uxtb	r2, r2
 8016ca0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016ca2:	88fb      	ldrh	r3, [r7, #6]
}
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	3708      	adds	r7, #8
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}
 8016cac:	0801e82c 	.word	0x0801e82c
 8016cb0:	0801ea3c 	.word	0x0801ea3c
 8016cb4:	0801e88c 	.word	0x0801e88c

08016cb8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b084      	sub	sp, #16
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
 8016cc4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016cc6:	89fb      	ldrh	r3, [r7, #14]
 8016cc8:	3304      	adds	r3, #4
 8016cca:	2b44      	cmp	r3, #68	; 0x44
 8016ccc:	d906      	bls.n	8016cdc <dhcp_option_long+0x24>
 8016cce:	4b19      	ldr	r3, [pc, #100]	; (8016d34 <dhcp_option_long+0x7c>)
 8016cd0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016cd4:	4918      	ldr	r1, [pc, #96]	; (8016d38 <dhcp_option_long+0x80>)
 8016cd6:	4819      	ldr	r0, [pc, #100]	; (8016d3c <dhcp_option_long+0x84>)
 8016cd8:	f003 ff1e 	bl	801ab18 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	0e1a      	lsrs	r2, r3, #24
 8016ce0:	89fb      	ldrh	r3, [r7, #14]
 8016ce2:	1c59      	adds	r1, r3, #1
 8016ce4:	81f9      	strh	r1, [r7, #14]
 8016ce6:	4619      	mov	r1, r3
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	440b      	add	r3, r1
 8016cec:	b2d2      	uxtb	r2, r2
 8016cee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	0c1a      	lsrs	r2, r3, #16
 8016cf4:	89fb      	ldrh	r3, [r7, #14]
 8016cf6:	1c59      	adds	r1, r3, #1
 8016cf8:	81f9      	strh	r1, [r7, #14]
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	440b      	add	r3, r1
 8016d00:	b2d2      	uxtb	r2, r2
 8016d02:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	0a1a      	lsrs	r2, r3, #8
 8016d08:	89fb      	ldrh	r3, [r7, #14]
 8016d0a:	1c59      	adds	r1, r3, #1
 8016d0c:	81f9      	strh	r1, [r7, #14]
 8016d0e:	4619      	mov	r1, r3
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	440b      	add	r3, r1
 8016d14:	b2d2      	uxtb	r2, r2
 8016d16:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016d18:	89fb      	ldrh	r3, [r7, #14]
 8016d1a:	1c5a      	adds	r2, r3, #1
 8016d1c:	81fa      	strh	r2, [r7, #14]
 8016d1e:	461a      	mov	r2, r3
 8016d20:	68bb      	ldr	r3, [r7, #8]
 8016d22:	4413      	add	r3, r2
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	b2d2      	uxtb	r2, r2
 8016d28:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	3710      	adds	r7, #16
 8016d30:	46bd      	mov	sp, r7
 8016d32:	bd80      	pop	{r7, pc}
 8016d34:	0801e82c 	.word	0x0801e82c
 8016d38:	0801ea78 	.word	0x0801ea78
 8016d3c:	0801e88c 	.word	0x0801e88c

08016d40 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b090      	sub	sp, #64	; 0x40
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
 8016d48:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016d52:	220a      	movs	r2, #10
 8016d54:	2100      	movs	r1, #0
 8016d56:	48ba      	ldr	r0, [pc, #744]	; (8017040 <dhcp_parse_reply+0x300>)
 8016d58:	f003 ff43 	bl	801abe2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	895b      	ldrh	r3, [r3, #10]
 8016d60:	2b2b      	cmp	r3, #43	; 0x2b
 8016d62:	d802      	bhi.n	8016d6a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016d64:	f06f 0301 	mvn.w	r3, #1
 8016d68:	e2ea      	b.n	8017340 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	685b      	ldr	r3, [r3, #4]
 8016d6e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016d70:	23f0      	movs	r3, #240	; 0xf0
 8016d72:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	891b      	ldrh	r3, [r3, #8]
 8016d78:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016d7e:	e00c      	b.n	8016d9a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d82:	895b      	ldrh	r3, [r3, #10]
 8016d84:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016d86:	1ad3      	subs	r3, r2, r3
 8016d88:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8c:	895b      	ldrh	r3, [r3, #10]
 8016d8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016d90:	1ad3      	subs	r3, r2, r3
 8016d92:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8016d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d004      	beq.n	8016daa <dhcp_parse_reply+0x6a>
 8016da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da2:	895b      	ldrh	r3, [r3, #10]
 8016da4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016da6:	429a      	cmp	r2, r3
 8016da8:	d2ea      	bcs.n	8016d80 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8016daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d102      	bne.n	8016db6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016db0:	f06f 0301 	mvn.w	r3, #1
 8016db4:	e2c4      	b.n	8017340 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 8016db6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016db8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8016dba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016dbc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8016dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016dc4:	e267      	b.n	8017296 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8016dc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016dc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016dca:	4413      	add	r3, r2
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8016dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8016dda:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8016ddc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016dde:	3302      	adds	r3, #2
 8016de0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8016de2:	8bfa      	ldrh	r2, [r7, #30]
 8016de4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d202      	bcs.n	8016df0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8016dea:	f06f 0301 	mvn.w	r3, #1
 8016dee:	e2a7      	b.n	8017340 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016df0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016df2:	3301      	adds	r3, #1
 8016df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016df6:	8952      	ldrh	r2, [r2, #10]
 8016df8:	4293      	cmp	r3, r2
 8016dfa:	da07      	bge.n	8016e0c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8016dfc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016dfe:	3301      	adds	r3, #1
 8016e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e02:	4413      	add	r3, r2
 8016e04:	781b      	ldrb	r3, [r3, #0]
 8016e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e0a:	e00b      	b.n	8016e24 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d004      	beq.n	8016e1e <dhcp_parse_reply+0xde>
 8016e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	685b      	ldr	r3, [r3, #4]
 8016e1a:	781b      	ldrb	r3, [r3, #0]
 8016e1c:	e000      	b.n	8016e20 <dhcp_parse_reply+0xe0>
 8016e1e:	2300      	movs	r3, #0
 8016e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8016e2c:	7dfb      	ldrb	r3, [r7, #23]
 8016e2e:	2b3b      	cmp	r3, #59	; 0x3b
 8016e30:	f200 815a 	bhi.w	80170e8 <dhcp_parse_reply+0x3a8>
 8016e34:	a201      	add	r2, pc, #4	; (adr r2, 8016e3c <dhcp_parse_reply+0xfc>)
 8016e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e3a:	bf00      	nop
 8016e3c:	08016f2d 	.word	0x08016f2d
 8016e40:	08016f3d 	.word	0x08016f3d
 8016e44:	080170e9 	.word	0x080170e9
 8016e48:	08016f5f 	.word	0x08016f5f
 8016e4c:	080170e9 	.word	0x080170e9
 8016e50:	080170e9 	.word	0x080170e9
 8016e54:	08016f8b 	.word	0x08016f8b
 8016e58:	080170e9 	.word	0x080170e9
 8016e5c:	080170e9 	.word	0x080170e9
 8016e60:	080170e9 	.word	0x080170e9
 8016e64:	080170e9 	.word	0x080170e9
 8016e68:	080170e9 	.word	0x080170e9
 8016e6c:	080170e9 	.word	0x080170e9
 8016e70:	080170e9 	.word	0x080170e9
 8016e74:	080170e9 	.word	0x080170e9
 8016e78:	080170e9 	.word	0x080170e9
 8016e7c:	080170e9 	.word	0x080170e9
 8016e80:	080170e9 	.word	0x080170e9
 8016e84:	080170e9 	.word	0x080170e9
 8016e88:	080170e9 	.word	0x080170e9
 8016e8c:	080170e9 	.word	0x080170e9
 8016e90:	080170e9 	.word	0x080170e9
 8016e94:	080170e9 	.word	0x080170e9
 8016e98:	080170e9 	.word	0x080170e9
 8016e9c:	080170e9 	.word	0x080170e9
 8016ea0:	080170e9 	.word	0x080170e9
 8016ea4:	080170e9 	.word	0x080170e9
 8016ea8:	080170e9 	.word	0x080170e9
 8016eac:	080170e9 	.word	0x080170e9
 8016eb0:	080170e9 	.word	0x080170e9
 8016eb4:	080170e9 	.word	0x080170e9
 8016eb8:	080170e9 	.word	0x080170e9
 8016ebc:	080170e9 	.word	0x080170e9
 8016ec0:	080170e9 	.word	0x080170e9
 8016ec4:	080170e9 	.word	0x080170e9
 8016ec8:	080170e9 	.word	0x080170e9
 8016ecc:	080170e9 	.word	0x080170e9
 8016ed0:	080170e9 	.word	0x080170e9
 8016ed4:	080170e9 	.word	0x080170e9
 8016ed8:	080170e9 	.word	0x080170e9
 8016edc:	080170e9 	.word	0x080170e9
 8016ee0:	080170e9 	.word	0x080170e9
 8016ee4:	080170e9 	.word	0x080170e9
 8016ee8:	080170e9 	.word	0x080170e9
 8016eec:	080170e9 	.word	0x080170e9
 8016ef0:	080170e9 	.word	0x080170e9
 8016ef4:	080170e9 	.word	0x080170e9
 8016ef8:	080170e9 	.word	0x080170e9
 8016efc:	080170e9 	.word	0x080170e9
 8016f00:	080170e9 	.word	0x080170e9
 8016f04:	080170e9 	.word	0x080170e9
 8016f08:	08016fe1 	.word	0x08016fe1
 8016f0c:	08017003 	.word	0x08017003
 8016f10:	08017061 	.word	0x08017061
 8016f14:	08017083 	.word	0x08017083
 8016f18:	080170e9 	.word	0x080170e9
 8016f1c:	080170e9 	.word	0x080170e9
 8016f20:	080170e9 	.word	0x080170e9
 8016f24:	080170a5 	.word	0x080170a5
 8016f28:	080170c7 	.word	0x080170c7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8016f3a:	e0d9      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f40:	2b04      	cmp	r3, #4
 8016f42:	d009      	beq.n	8016f58 <dhcp_parse_reply+0x218>
 8016f44:	4b3f      	ldr	r3, [pc, #252]	; (8017044 <dhcp_parse_reply+0x304>)
 8016f46:	f240 622e 	movw	r2, #1582	; 0x62e
 8016f4a:	493f      	ldr	r1, [pc, #252]	; (8017048 <dhcp_parse_reply+0x308>)
 8016f4c:	483f      	ldr	r0, [pc, #252]	; (801704c <dhcp_parse_reply+0x30c>)
 8016f4e:	f003 fde3 	bl	801ab18 <iprintf>
 8016f52:	f06f 0305 	mvn.w	r3, #5
 8016f56:	e1f3      	b.n	8017340 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016f58:	2306      	movs	r3, #6
 8016f5a:	623b      	str	r3, [r7, #32]
        break;
 8016f5c:	e0c8      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016f5e:	2304      	movs	r3, #4
 8016f60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016f64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016f68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	d209      	bcs.n	8016f84 <dhcp_parse_reply+0x244>
 8016f70:	4b34      	ldr	r3, [pc, #208]	; (8017044 <dhcp_parse_reply+0x304>)
 8016f72:	f240 6233 	movw	r2, #1587	; 0x633
 8016f76:	4936      	ldr	r1, [pc, #216]	; (8017050 <dhcp_parse_reply+0x310>)
 8016f78:	4834      	ldr	r0, [pc, #208]	; (801704c <dhcp_parse_reply+0x30c>)
 8016f7a:	f003 fdcd 	bl	801ab18 <iprintf>
 8016f7e:	f06f 0305 	mvn.w	r3, #5
 8016f82:	e1dd      	b.n	8017340 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016f84:	2307      	movs	r3, #7
 8016f86:	623b      	str	r3, [r7, #32]
        break;
 8016f88:	e0b2      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8016f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f8e:	f003 0303 	and.w	r3, r3, #3
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d009      	beq.n	8016fac <dhcp_parse_reply+0x26c>
 8016f98:	4b2a      	ldr	r3, [pc, #168]	; (8017044 <dhcp_parse_reply+0x304>)
 8016f9a:	f240 6239 	movw	r2, #1593	; 0x639
 8016f9e:	492d      	ldr	r1, [pc, #180]	; (8017054 <dhcp_parse_reply+0x314>)
 8016fa0:	482a      	ldr	r0, [pc, #168]	; (801704c <dhcp_parse_reply+0x30c>)
 8016fa2:	f003 fdb9 	bl	801ab18 <iprintf>
 8016fa6:	f06f 0305 	mvn.w	r3, #5
 8016faa:	e1c9      	b.n	8017340 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8016fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fb0:	2b08      	cmp	r3, #8
 8016fb2:	bf28      	it	cs
 8016fb4:	2308      	movcs	r3, #8
 8016fb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016fba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016fbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016fc2:	429a      	cmp	r2, r3
 8016fc4:	d209      	bcs.n	8016fda <dhcp_parse_reply+0x29a>
 8016fc6:	4b1f      	ldr	r3, [pc, #124]	; (8017044 <dhcp_parse_reply+0x304>)
 8016fc8:	f240 623c 	movw	r2, #1596	; 0x63c
 8016fcc:	4920      	ldr	r1, [pc, #128]	; (8017050 <dhcp_parse_reply+0x310>)
 8016fce:	481f      	ldr	r0, [pc, #124]	; (801704c <dhcp_parse_reply+0x30c>)
 8016fd0:	f003 fda2 	bl	801ab18 <iprintf>
 8016fd4:	f06f 0305 	mvn.w	r3, #5
 8016fd8:	e1b2      	b.n	8017340 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8016fda:	2308      	movs	r3, #8
 8016fdc:	623b      	str	r3, [r7, #32]
        break;
 8016fde:	e087      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fe4:	2b04      	cmp	r3, #4
 8016fe6:	d009      	beq.n	8016ffc <dhcp_parse_reply+0x2bc>
 8016fe8:	4b16      	ldr	r3, [pc, #88]	; (8017044 <dhcp_parse_reply+0x304>)
 8016fea:	f240 6241 	movw	r2, #1601	; 0x641
 8016fee:	4916      	ldr	r1, [pc, #88]	; (8017048 <dhcp_parse_reply+0x308>)
 8016ff0:	4816      	ldr	r0, [pc, #88]	; (801704c <dhcp_parse_reply+0x30c>)
 8016ff2:	f003 fd91 	bl	801ab18 <iprintf>
 8016ff6:	f06f 0305 	mvn.w	r3, #5
 8016ffa:	e1a1      	b.n	8017340 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016ffc:	2303      	movs	r3, #3
 8016ffe:	623b      	str	r3, [r7, #32]
        break;
 8017000:	e076      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017006:	2b01      	cmp	r3, #1
 8017008:	d009      	beq.n	801701e <dhcp_parse_reply+0x2de>
 801700a:	4b0e      	ldr	r3, [pc, #56]	; (8017044 <dhcp_parse_reply+0x304>)
 801700c:	f240 624f 	movw	r2, #1615	; 0x64f
 8017010:	4911      	ldr	r1, [pc, #68]	; (8017058 <dhcp_parse_reply+0x318>)
 8017012:	480e      	ldr	r0, [pc, #56]	; (801704c <dhcp_parse_reply+0x30c>)
 8017014:	f003 fd80 	bl	801ab18 <iprintf>
 8017018:	f06f 0305 	mvn.w	r3, #5
 801701c:	e190      	b.n	8017340 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801701e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017020:	2bf0      	cmp	r3, #240	; 0xf0
 8017022:	d009      	beq.n	8017038 <dhcp_parse_reply+0x2f8>
 8017024:	4b07      	ldr	r3, [pc, #28]	; (8017044 <dhcp_parse_reply+0x304>)
 8017026:	f240 6251 	movw	r2, #1617	; 0x651
 801702a:	490c      	ldr	r1, [pc, #48]	; (801705c <dhcp_parse_reply+0x31c>)
 801702c:	4807      	ldr	r0, [pc, #28]	; (801704c <dhcp_parse_reply+0x30c>)
 801702e:	f003 fd73 	bl	801ab18 <iprintf>
 8017032:	f06f 0305 	mvn.w	r3, #5
 8017036:	e183      	b.n	8017340 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017038:	2300      	movs	r3, #0
 801703a:	623b      	str	r3, [r7, #32]
        break;
 801703c:	e058      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
 801703e:	bf00      	nop
 8017040:	20012304 	.word	0x20012304
 8017044:	0801e82c 	.word	0x0801e82c
 8017048:	0801eab4 	.word	0x0801eab4
 801704c:	0801e88c 	.word	0x0801e88c
 8017050:	0801eac0 	.word	0x0801eac0
 8017054:	0801ead4 	.word	0x0801ead4
 8017058:	0801eae4 	.word	0x0801eae4
 801705c:	0801eaf0 	.word	0x0801eaf0
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017064:	2b01      	cmp	r3, #1
 8017066:	d009      	beq.n	801707c <dhcp_parse_reply+0x33c>
 8017068:	4b9d      	ldr	r3, [pc, #628]	; (80172e0 <dhcp_parse_reply+0x5a0>)
 801706a:	f240 6255 	movw	r2, #1621	; 0x655
 801706e:	499d      	ldr	r1, [pc, #628]	; (80172e4 <dhcp_parse_reply+0x5a4>)
 8017070:	489d      	ldr	r0, [pc, #628]	; (80172e8 <dhcp_parse_reply+0x5a8>)
 8017072:	f003 fd51 	bl	801ab18 <iprintf>
 8017076:	f06f 0305 	mvn.w	r3, #5
 801707a:	e161      	b.n	8017340 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801707c:	2301      	movs	r3, #1
 801707e:	623b      	str	r3, [r7, #32]
        break;
 8017080:	e036      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017086:	2b04      	cmp	r3, #4
 8017088:	d009      	beq.n	801709e <dhcp_parse_reply+0x35e>
 801708a:	4b95      	ldr	r3, [pc, #596]	; (80172e0 <dhcp_parse_reply+0x5a0>)
 801708c:	f240 6259 	movw	r2, #1625	; 0x659
 8017090:	4996      	ldr	r1, [pc, #600]	; (80172ec <dhcp_parse_reply+0x5ac>)
 8017092:	4895      	ldr	r0, [pc, #596]	; (80172e8 <dhcp_parse_reply+0x5a8>)
 8017094:	f003 fd40 	bl	801ab18 <iprintf>
 8017098:	f06f 0305 	mvn.w	r3, #5
 801709c:	e150      	b.n	8017340 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801709e:	2302      	movs	r3, #2
 80170a0:	623b      	str	r3, [r7, #32]
        break;
 80170a2:	e025      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80170a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170a8:	2b04      	cmp	r3, #4
 80170aa:	d009      	beq.n	80170c0 <dhcp_parse_reply+0x380>
 80170ac:	4b8c      	ldr	r3, [pc, #560]	; (80172e0 <dhcp_parse_reply+0x5a0>)
 80170ae:	f240 625d 	movw	r2, #1629	; 0x65d
 80170b2:	498e      	ldr	r1, [pc, #568]	; (80172ec <dhcp_parse_reply+0x5ac>)
 80170b4:	488c      	ldr	r0, [pc, #560]	; (80172e8 <dhcp_parse_reply+0x5a8>)
 80170b6:	f003 fd2f 	bl	801ab18 <iprintf>
 80170ba:	f06f 0305 	mvn.w	r3, #5
 80170be:	e13f      	b.n	8017340 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 80170c0:	2304      	movs	r3, #4
 80170c2:	623b      	str	r3, [r7, #32]
        break;
 80170c4:	e014      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80170c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170ca:	2b04      	cmp	r3, #4
 80170cc:	d009      	beq.n	80170e2 <dhcp_parse_reply+0x3a2>
 80170ce:	4b84      	ldr	r3, [pc, #528]	; (80172e0 <dhcp_parse_reply+0x5a0>)
 80170d0:	f240 6261 	movw	r2, #1633	; 0x661
 80170d4:	4985      	ldr	r1, [pc, #532]	; (80172ec <dhcp_parse_reply+0x5ac>)
 80170d6:	4884      	ldr	r0, [pc, #528]	; (80172e8 <dhcp_parse_reply+0x5a8>)
 80170d8:	f003 fd1e 	bl	801ab18 <iprintf>
 80170dc:	f06f 0305 	mvn.w	r3, #5
 80170e0:	e12e      	b.n	8017340 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 80170e2:	2305      	movs	r3, #5
 80170e4:	623b      	str	r3, [r7, #32]
        break;
 80170e6:	e003      	b.n	80170f0 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 80170e8:	2300      	movs	r3, #0
 80170ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80170ee:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80170f0:	7dfb      	ldrb	r3, [r7, #23]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d103      	bne.n	80170fe <dhcp_parse_reply+0x3be>
      offset++;
 80170f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80170f8:	3301      	adds	r3, #1
 80170fa:	877b      	strh	r3, [r7, #58]	; 0x3a
 80170fc:	e0a1      	b.n	8017242 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80170fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017104:	4413      	add	r3, r2
 8017106:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801710a:	4293      	cmp	r3, r2
 801710c:	dd02      	ble.n	8017114 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801710e:	f06f 0301 	mvn.w	r3, #1
 8017112:	e115      	b.n	8017340 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8017114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017118:	b29a      	uxth	r2, r3
 801711a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801711c:	4413      	add	r3, r2
 801711e:	b29b      	uxth	r3, r3
 8017120:	3302      	adds	r3, #2
 8017122:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8017124:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017128:	2b00      	cmp	r3, #0
 801712a:	f000 808a 	beq.w	8017242 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801712e:	2300      	movs	r3, #0
 8017130:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8017132:	6a3b      	ldr	r3, [r7, #32]
 8017134:	2b00      	cmp	r3, #0
 8017136:	db02      	blt.n	801713e <dhcp_parse_reply+0x3fe>
 8017138:	6a3b      	ldr	r3, [r7, #32]
 801713a:	2b09      	cmp	r3, #9
 801713c:	dd06      	ble.n	801714c <dhcp_parse_reply+0x40c>
 801713e:	4b68      	ldr	r3, [pc, #416]	; (80172e0 <dhcp_parse_reply+0x5a0>)
 8017140:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017144:	496a      	ldr	r1, [pc, #424]	; (80172f0 <dhcp_parse_reply+0x5b0>)
 8017146:	4868      	ldr	r0, [pc, #416]	; (80172e8 <dhcp_parse_reply+0x5a8>)
 8017148:	f003 fce6 	bl	801ab18 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801714c:	4a69      	ldr	r2, [pc, #420]	; (80172f4 <dhcp_parse_reply+0x5b4>)
 801714e:	6a3b      	ldr	r3, [r7, #32]
 8017150:	4413      	add	r3, r2
 8017152:	781b      	ldrb	r3, [r3, #0]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d174      	bne.n	8017242 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8017158:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801715c:	2b04      	cmp	r3, #4
 801715e:	bf28      	it	cs
 8017160:	2304      	movcs	r3, #4
 8017162:	b2db      	uxtb	r3, r3
 8017164:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017166:	8bfb      	ldrh	r3, [r7, #30]
 8017168:	8aba      	ldrh	r2, [r7, #20]
 801716a:	f107 0108 	add.w	r1, r7, #8
 801716e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017170:	f7f8 fa50 	bl	800f614 <pbuf_copy_partial>
 8017174:	4603      	mov	r3, r0
 8017176:	461a      	mov	r2, r3
 8017178:	8abb      	ldrh	r3, [r7, #20]
 801717a:	4293      	cmp	r3, r2
 801717c:	d002      	beq.n	8017184 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801717e:	f06f 0301 	mvn.w	r3, #1
 8017182:	e0dd      	b.n	8017340 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 8017184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017188:	2b04      	cmp	r3, #4
 801718a:	d933      	bls.n	80171f4 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801718c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017190:	f003 0303 	and.w	r3, r3, #3
 8017194:	b2db      	uxtb	r3, r3
 8017196:	2b00      	cmp	r3, #0
 8017198:	d009      	beq.n	80171ae <dhcp_parse_reply+0x46e>
 801719a:	4b51      	ldr	r3, [pc, #324]	; (80172e0 <dhcp_parse_reply+0x5a0>)
 801719c:	f240 6281 	movw	r2, #1665	; 0x681
 80171a0:	4955      	ldr	r1, [pc, #340]	; (80172f8 <dhcp_parse_reply+0x5b8>)
 80171a2:	4851      	ldr	r0, [pc, #324]	; (80172e8 <dhcp_parse_reply+0x5a8>)
 80171a4:	f003 fcb8 	bl	801ab18 <iprintf>
 80171a8:	f06f 0305 	mvn.w	r3, #5
 80171ac:	e0c8      	b.n	8017340 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 80171ae:	4a51      	ldr	r2, [pc, #324]	; (80172f4 <dhcp_parse_reply+0x5b4>)
 80171b0:	6a3b      	ldr	r3, [r7, #32]
 80171b2:	4413      	add	r3, r2
 80171b4:	2201      	movs	r2, #1
 80171b6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80171b8:	68bb      	ldr	r3, [r7, #8]
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7f6 f9b5 	bl	800d52a <lwip_htonl>
 80171c0:	4602      	mov	r2, r0
 80171c2:	494e      	ldr	r1, [pc, #312]	; (80172fc <dhcp_parse_reply+0x5bc>)
 80171c4:	6a3b      	ldr	r3, [r7, #32]
 80171c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80171ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80171ce:	3b04      	subs	r3, #4
 80171d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80171d4:	8bfb      	ldrh	r3, [r7, #30]
 80171d6:	3304      	adds	r3, #4
 80171d8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80171da:	8a7a      	ldrh	r2, [r7, #18]
 80171dc:	8bfb      	ldrh	r3, [r7, #30]
 80171de:	429a      	cmp	r2, r3
 80171e0:	d202      	bcs.n	80171e8 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 80171e2:	f06f 0301 	mvn.w	r3, #1
 80171e6:	e0ab      	b.n	8017340 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 80171e8:	8a7b      	ldrh	r3, [r7, #18]
 80171ea:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80171ec:	6a3b      	ldr	r3, [r7, #32]
 80171ee:	3301      	adds	r3, #1
 80171f0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80171f2:	e79e      	b.n	8017132 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 80171f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80171f8:	2b04      	cmp	r3, #4
 80171fa:	d106      	bne.n	801720a <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	4618      	mov	r0, r3
 8017200:	f7f6 f993 	bl	800d52a <lwip_htonl>
 8017204:	4603      	mov	r3, r0
 8017206:	60bb      	str	r3, [r7, #8]
 8017208:	e011      	b.n	801722e <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801720a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801720e:	2b01      	cmp	r3, #1
 8017210:	d009      	beq.n	8017226 <dhcp_parse_reply+0x4e6>
 8017212:	4b33      	ldr	r3, [pc, #204]	; (80172e0 <dhcp_parse_reply+0x5a0>)
 8017214:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8017218:	4939      	ldr	r1, [pc, #228]	; (8017300 <dhcp_parse_reply+0x5c0>)
 801721a:	4833      	ldr	r0, [pc, #204]	; (80172e8 <dhcp_parse_reply+0x5a8>)
 801721c:	f003 fc7c 	bl	801ab18 <iprintf>
 8017220:	f06f 0305 	mvn.w	r3, #5
 8017224:	e08c      	b.n	8017340 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 8017226:	f107 0308 	add.w	r3, r7, #8
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801722e:	4a31      	ldr	r2, [pc, #196]	; (80172f4 <dhcp_parse_reply+0x5b4>)
 8017230:	6a3b      	ldr	r3, [r7, #32]
 8017232:	4413      	add	r3, r2
 8017234:	2201      	movs	r2, #1
 8017236:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8017238:	68ba      	ldr	r2, [r7, #8]
 801723a:	4930      	ldr	r1, [pc, #192]	; (80172fc <dhcp_parse_reply+0x5bc>)
 801723c:	6a3b      	ldr	r3, [r7, #32]
 801723e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017244:	895b      	ldrh	r3, [r3, #10]
 8017246:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017248:	429a      	cmp	r2, r3
 801724a:	d324      	bcc.n	8017296 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724e:	895b      	ldrh	r3, [r3, #10]
 8017250:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017252:	1ad3      	subs	r3, r2, r3
 8017254:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8017256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017258:	895b      	ldrh	r3, [r3, #10]
 801725a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801725c:	1ad3      	subs	r3, r2, r3
 801725e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8017260:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017262:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017264:	429a      	cmp	r2, r3
 8017266:	d213      	bcs.n	8017290 <dhcp_parse_reply+0x550>
        q = q->next;
 8017268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017270:	2b00      	cmp	r3, #0
 8017272:	d109      	bne.n	8017288 <dhcp_parse_reply+0x548>
 8017274:	4b1a      	ldr	r3, [pc, #104]	; (80172e0 <dhcp_parse_reply+0x5a0>)
 8017276:	f240 629d 	movw	r2, #1693	; 0x69d
 801727a:	4922      	ldr	r1, [pc, #136]	; (8017304 <dhcp_parse_reply+0x5c4>)
 801727c:	481a      	ldr	r0, [pc, #104]	; (80172e8 <dhcp_parse_reply+0x5a8>)
 801727e:	f003 fc4b 	bl	801ab18 <iprintf>
 8017282:	f06f 0305 	mvn.w	r3, #5
 8017286:	e05b      	b.n	8017340 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 8017288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801728a:	685b      	ldr	r3, [r3, #4]
 801728c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801728e:	e002      	b.n	8017296 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017290:	f06f 0301 	mvn.w	r3, #1
 8017294:	e054      	b.n	8017340 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017298:	2b00      	cmp	r3, #0
 801729a:	d00a      	beq.n	80172b2 <dhcp_parse_reply+0x572>
 801729c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801729e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d206      	bcs.n	80172b2 <dhcp_parse_reply+0x572>
 80172a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80172a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80172a8:	4413      	add	r3, r2
 80172aa:	781b      	ldrb	r3, [r3, #0]
 80172ac:	2bff      	cmp	r3, #255	; 0xff
 80172ae:	f47f ad8a 	bne.w	8016dc6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80172b2:	4b10      	ldr	r3, [pc, #64]	; (80172f4 <dhcp_parse_reply+0x5b4>)
 80172b4:	781b      	ldrb	r3, [r3, #0]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d02d      	beq.n	8017316 <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80172ba:	4b10      	ldr	r3, [pc, #64]	; (80172fc <dhcp_parse_reply+0x5bc>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80172c0:	4b0c      	ldr	r3, [pc, #48]	; (80172f4 <dhcp_parse_reply+0x5b4>)
 80172c2:	2200      	movs	r2, #0
 80172c4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	2b01      	cmp	r3, #1
 80172ca:	d102      	bne.n	80172d2 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 80172cc:	2301      	movs	r3, #1
 80172ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172d0:	e021      	b.n	8017316 <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	2b02      	cmp	r3, #2
 80172d6:	d117      	bne.n	8017308 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 80172d8:	2301      	movs	r3, #1
 80172da:	62bb      	str	r3, [r7, #40]	; 0x28
 80172dc:	e01b      	b.n	8017316 <dhcp_parse_reply+0x5d6>
 80172de:	bf00      	nop
 80172e0:	0801e82c 	.word	0x0801e82c
 80172e4:	0801eae4 	.word	0x0801eae4
 80172e8:	0801e88c 	.word	0x0801e88c
 80172ec:	0801eab4 	.word	0x0801eab4
 80172f0:	0801eb08 	.word	0x0801eb08
 80172f4:	20012304 	.word	0x20012304
 80172f8:	0801eb1c 	.word	0x0801eb1c
 80172fc:	200122dc 	.word	0x200122dc
 8017300:	0801eb34 	.word	0x0801eb34
 8017304:	0801eb48 	.word	0x0801eb48
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	2b03      	cmp	r3, #3
 801730c:	d103      	bne.n	8017316 <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 801730e:	2301      	movs	r3, #1
 8017310:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8017312:	2301      	movs	r3, #1
 8017314:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8017316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017318:	2b00      	cmp	r3, #0
 801731a:	d006      	beq.n	801732a <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801731c:	2300      	movs	r3, #0
 801731e:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8017320:	236c      	movs	r3, #108	; 0x6c
 8017322:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017324:	23ec      	movs	r3, #236	; 0xec
 8017326:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017328:	e527      	b.n	8016d7a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801732c:	2b00      	cmp	r3, #0
 801732e:	d006      	beq.n	801733e <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 8017330:	2300      	movs	r3, #0
 8017332:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8017334:	232c      	movs	r3, #44	; 0x2c
 8017336:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017338:	236c      	movs	r3, #108	; 0x6c
 801733a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801733c:	e51d      	b.n	8016d7a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801733e:	2300      	movs	r3, #0
}
 8017340:	4618      	mov	r0, r3
 8017342:	3740      	adds	r7, #64	; 0x40
 8017344:	46bd      	mov	sp, r7
 8017346:	bd80      	pop	{r7, pc}

08017348 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b08a      	sub	sp, #40	; 0x28
 801734c:	af00      	add	r7, sp, #0
 801734e:	60f8      	str	r0, [r7, #12]
 8017350:	60b9      	str	r1, [r7, #8]
 8017352:	607a      	str	r2, [r7, #4]
 8017354:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017356:	4b60      	ldr	r3, [pc, #384]	; (80174d8 <dhcp_recv+0x190>)
 8017358:	685b      	ldr	r3, [r3, #4]
 801735a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801735c:	6a3b      	ldr	r3, [r7, #32]
 801735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017360:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017368:	69fb      	ldr	r3, [r7, #28]
 801736a:	2b00      	cmp	r3, #0
 801736c:	f000 809d 	beq.w	80174aa <dhcp_recv+0x162>
 8017370:	69fb      	ldr	r3, [r7, #28]
 8017372:	791b      	ldrb	r3, [r3, #4]
 8017374:	2b00      	cmp	r3, #0
 8017376:	f000 8098 	beq.w	80174aa <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	895b      	ldrh	r3, [r3, #10]
 801737e:	2b2b      	cmp	r3, #43	; 0x2b
 8017380:	f240 8095 	bls.w	80174ae <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017384:	69bb      	ldr	r3, [r7, #24]
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	2b02      	cmp	r3, #2
 801738a:	f040 8092 	bne.w	80174b2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801738e:	2300      	movs	r3, #0
 8017390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017394:	e012      	b.n	80173bc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801739a:	6a3a      	ldr	r2, [r7, #32]
 801739c:	4413      	add	r3, r2
 801739e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80173a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173a6:	69b9      	ldr	r1, [r7, #24]
 80173a8:	440b      	add	r3, r1
 80173aa:	7f1b      	ldrb	r3, [r3, #28]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	f040 8082 	bne.w	80174b6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80173b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173b6:	3301      	adds	r3, #1
 80173b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80173bc:	6a3b      	ldr	r3, [r7, #32]
 80173be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80173c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80173c6:	429a      	cmp	r2, r3
 80173c8:	d203      	bcs.n	80173d2 <dhcp_recv+0x8a>
 80173ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173ce:	2b05      	cmp	r3, #5
 80173d0:	d9e1      	bls.n	8017396 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80173d2:	69bb      	ldr	r3, [r7, #24]
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7f6 f8a7 	bl	800d52a <lwip_htonl>
 80173dc:	4602      	mov	r2, r0
 80173de:	69fb      	ldr	r3, [r7, #28]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d169      	bne.n	80174ba <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80173e6:	69f9      	ldr	r1, [r7, #28]
 80173e8:	6878      	ldr	r0, [r7, #4]
 80173ea:	f7ff fca9 	bl	8016d40 <dhcp_parse_reply>
 80173ee:	4603      	mov	r3, r0
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d164      	bne.n	80174be <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80173f4:	4b39      	ldr	r3, [pc, #228]	; (80174dc <dhcp_recv+0x194>)
 80173f6:	785b      	ldrb	r3, [r3, #1]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d062      	beq.n	80174c2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	685b      	ldr	r3, [r3, #4]
 8017400:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017402:	4b37      	ldr	r3, [pc, #220]	; (80174e0 <dhcp_recv+0x198>)
 8017404:	685b      	ldr	r3, [r3, #4]
 8017406:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017408:	7cfb      	ldrb	r3, [r7, #19]
 801740a:	2b05      	cmp	r3, #5
 801740c:	d12a      	bne.n	8017464 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801740e:	69fb      	ldr	r3, [r7, #28]
 8017410:	795b      	ldrb	r3, [r3, #5]
 8017412:	2b01      	cmp	r3, #1
 8017414:	d112      	bne.n	801743c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8017416:	6979      	ldr	r1, [r7, #20]
 8017418:	6a38      	ldr	r0, [r7, #32]
 801741a:	f7fe fe03 	bl	8016024 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801741e:	6a3b      	ldr	r3, [r7, #32]
 8017420:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017424:	f003 0308 	and.w	r3, r3, #8
 8017428:	2b00      	cmp	r3, #0
 801742a:	d003      	beq.n	8017434 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801742c:	6a38      	ldr	r0, [r7, #32]
 801742e:	f7fe fb73 	bl	8015b18 <dhcp_check>
 8017432:	e049      	b.n	80174c8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017434:	6a38      	ldr	r0, [r7, #32]
 8017436:	f7ff f837 	bl	80164a8 <dhcp_bind>
 801743a:	e045      	b.n	80174c8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801743c:	69fb      	ldr	r3, [r7, #28]
 801743e:	795b      	ldrb	r3, [r3, #5]
 8017440:	2b03      	cmp	r3, #3
 8017442:	d007      	beq.n	8017454 <dhcp_recv+0x10c>
 8017444:	69fb      	ldr	r3, [r7, #28]
 8017446:	795b      	ldrb	r3, [r3, #5]
 8017448:	2b04      	cmp	r3, #4
 801744a:	d003      	beq.n	8017454 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801744c:	69fb      	ldr	r3, [r7, #28]
 801744e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017450:	2b05      	cmp	r3, #5
 8017452:	d139      	bne.n	80174c8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8017454:	6979      	ldr	r1, [r7, #20]
 8017456:	6a38      	ldr	r0, [r7, #32]
 8017458:	f7fe fde4 	bl	8016024 <dhcp_handle_ack>
      dhcp_bind(netif);
 801745c:	6a38      	ldr	r0, [r7, #32]
 801745e:	f7ff f823 	bl	80164a8 <dhcp_bind>
 8017462:	e031      	b.n	80174c8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017464:	7cfb      	ldrb	r3, [r7, #19]
 8017466:	2b06      	cmp	r3, #6
 8017468:	d113      	bne.n	8017492 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801746a:	69fb      	ldr	r3, [r7, #28]
 801746c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801746e:	2b03      	cmp	r3, #3
 8017470:	d00b      	beq.n	801748a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017472:	69fb      	ldr	r3, [r7, #28]
 8017474:	795b      	ldrb	r3, [r3, #5]
 8017476:	2b01      	cmp	r3, #1
 8017478:	d007      	beq.n	801748a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801747a:	69fb      	ldr	r3, [r7, #28]
 801747c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801747e:	2b04      	cmp	r3, #4
 8017480:	d003      	beq.n	801748a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	795b      	ldrb	r3, [r3, #5]
 8017486:	2b05      	cmp	r3, #5
 8017488:	d103      	bne.n	8017492 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801748a:	6a38      	ldr	r0, [r7, #32]
 801748c:	f7fe fb2a 	bl	8015ae4 <dhcp_handle_nak>
 8017490:	e01a      	b.n	80174c8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017492:	7cfb      	ldrb	r3, [r7, #19]
 8017494:	2b02      	cmp	r3, #2
 8017496:	d116      	bne.n	80174c6 <dhcp_recv+0x17e>
 8017498:	69fb      	ldr	r3, [r7, #28]
 801749a:	795b      	ldrb	r3, [r3, #5]
 801749c:	2b06      	cmp	r3, #6
 801749e:	d112      	bne.n	80174c6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80174a0:	6979      	ldr	r1, [r7, #20]
 80174a2:	6a38      	ldr	r0, [r7, #32]
 80174a4:	f7fe fb6c 	bl	8015b80 <dhcp_handle_offer>
 80174a8:	e00e      	b.n	80174c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80174aa:	bf00      	nop
 80174ac:	e00c      	b.n	80174c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80174ae:	bf00      	nop
 80174b0:	e00a      	b.n	80174c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80174b2:	bf00      	nop
 80174b4:	e008      	b.n	80174c8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80174b6:	bf00      	nop
 80174b8:	e006      	b.n	80174c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80174ba:	bf00      	nop
 80174bc:	e004      	b.n	80174c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80174be:	bf00      	nop
 80174c0:	e002      	b.n	80174c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80174c2:	bf00      	nop
 80174c4:	e000      	b.n	80174c8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80174c6:	bf00      	nop
  pbuf_free(p);
 80174c8:	6878      	ldr	r0, [r7, #4]
 80174ca:	f7f7 fe9d 	bl	800f208 <pbuf_free>
}
 80174ce:	bf00      	nop
 80174d0:	3728      	adds	r7, #40	; 0x28
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}
 80174d6:	bf00      	nop
 80174d8:	2000ab9c 	.word	0x2000ab9c
 80174dc:	20012304 	.word	0x20012304
 80174e0:	200122dc 	.word	0x200122dc

080174e4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b088      	sub	sp, #32
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	60f8      	str	r0, [r7, #12]
 80174ec:	60b9      	str	r1, [r7, #8]
 80174ee:	603b      	str	r3, [r7, #0]
 80174f0:	4613      	mov	r3, r2
 80174f2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d108      	bne.n	801750c <dhcp_create_msg+0x28>
 80174fa:	4b5f      	ldr	r3, [pc, #380]	; (8017678 <dhcp_create_msg+0x194>)
 80174fc:	f240 7269 	movw	r2, #1897	; 0x769
 8017500:	495e      	ldr	r1, [pc, #376]	; (801767c <dhcp_create_msg+0x198>)
 8017502:	485f      	ldr	r0, [pc, #380]	; (8017680 <dhcp_create_msg+0x19c>)
 8017504:	f003 fb08 	bl	801ab18 <iprintf>
 8017508:	2300      	movs	r3, #0
 801750a:	e0b1      	b.n	8017670 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d108      	bne.n	8017524 <dhcp_create_msg+0x40>
 8017512:	4b59      	ldr	r3, [pc, #356]	; (8017678 <dhcp_create_msg+0x194>)
 8017514:	f240 726a 	movw	r2, #1898	; 0x76a
 8017518:	495a      	ldr	r1, [pc, #360]	; (8017684 <dhcp_create_msg+0x1a0>)
 801751a:	4859      	ldr	r0, [pc, #356]	; (8017680 <dhcp_create_msg+0x19c>)
 801751c:	f003 fafc 	bl	801ab18 <iprintf>
 8017520:	2300      	movs	r3, #0
 8017522:	e0a5      	b.n	8017670 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017524:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017528:	f44f 719a 	mov.w	r1, #308	; 0x134
 801752c:	2036      	movs	r0, #54	; 0x36
 801752e:	f7f7 fb87 	bl	800ec40 <pbuf_alloc>
 8017532:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017534:	69bb      	ldr	r3, [r7, #24]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d101      	bne.n	801753e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801753a:	2300      	movs	r3, #0
 801753c:	e098      	b.n	8017670 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801753e:	69bb      	ldr	r3, [r7, #24]
 8017540:	895b      	ldrh	r3, [r3, #10]
 8017542:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017546:	d206      	bcs.n	8017556 <dhcp_create_msg+0x72>
 8017548:	4b4b      	ldr	r3, [pc, #300]	; (8017678 <dhcp_create_msg+0x194>)
 801754a:	f240 7271 	movw	r2, #1905	; 0x771
 801754e:	494e      	ldr	r1, [pc, #312]	; (8017688 <dhcp_create_msg+0x1a4>)
 8017550:	484b      	ldr	r0, [pc, #300]	; (8017680 <dhcp_create_msg+0x19c>)
 8017552:	f003 fae1 	bl	801ab18 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017556:	79fb      	ldrb	r3, [r7, #7]
 8017558:	2b03      	cmp	r3, #3
 801755a:	d103      	bne.n	8017564 <dhcp_create_msg+0x80>
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	795b      	ldrb	r3, [r3, #5]
 8017560:	2b03      	cmp	r3, #3
 8017562:	d10d      	bne.n	8017580 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	799b      	ldrb	r3, [r3, #6]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d105      	bne.n	8017578 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801756c:	f003 f9d4 	bl	801a918 <rand>
 8017570:	4603      	mov	r3, r0
 8017572:	461a      	mov	r2, r3
 8017574:	4b45      	ldr	r3, [pc, #276]	; (801768c <dhcp_create_msg+0x1a8>)
 8017576:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017578:	4b44      	ldr	r3, [pc, #272]	; (801768c <dhcp_create_msg+0x1a8>)
 801757a:	681a      	ldr	r2, [r3, #0]
 801757c:	68bb      	ldr	r3, [r7, #8]
 801757e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	685b      	ldr	r3, [r3, #4]
 8017584:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017586:	f44f 729a 	mov.w	r2, #308	; 0x134
 801758a:	2100      	movs	r1, #0
 801758c:	6978      	ldr	r0, [r7, #20]
 801758e:	f003 fb28 	bl	801abe2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017592:	697b      	ldr	r3, [r7, #20]
 8017594:	2201      	movs	r2, #1
 8017596:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017598:	697b      	ldr	r3, [r7, #20]
 801759a:	2201      	movs	r2, #1
 801759c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80175a4:	697b      	ldr	r3, [r7, #20]
 80175a6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7f5 ffbc 	bl	800d52a <lwip_htonl>
 80175b2:	4602      	mov	r2, r0
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80175b8:	79fb      	ldrb	r3, [r7, #7]
 80175ba:	2b08      	cmp	r3, #8
 80175bc:	d010      	beq.n	80175e0 <dhcp_create_msg+0xfc>
 80175be:	79fb      	ldrb	r3, [r7, #7]
 80175c0:	2b04      	cmp	r3, #4
 80175c2:	d00d      	beq.n	80175e0 <dhcp_create_msg+0xfc>
 80175c4:	79fb      	ldrb	r3, [r7, #7]
 80175c6:	2b07      	cmp	r3, #7
 80175c8:	d00a      	beq.n	80175e0 <dhcp_create_msg+0xfc>
 80175ca:	79fb      	ldrb	r3, [r7, #7]
 80175cc:	2b03      	cmp	r3, #3
 80175ce:	d10c      	bne.n	80175ea <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80175d4:	2b05      	cmp	r3, #5
 80175d6:	d003      	beq.n	80175e0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	795b      	ldrb	r3, [r3, #5]
 80175dc:	2b04      	cmp	r3, #4
 80175de:	d104      	bne.n	80175ea <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	3304      	adds	r3, #4
 80175e4:	681a      	ldr	r2, [r3, #0]
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80175ea:	2300      	movs	r3, #0
 80175ec:	83fb      	strh	r3, [r7, #30]
 80175ee:	e00c      	b.n	801760a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80175f0:	8bfa      	ldrh	r2, [r7, #30]
 80175f2:	8bfb      	ldrh	r3, [r7, #30]
 80175f4:	68f9      	ldr	r1, [r7, #12]
 80175f6:	440a      	add	r2, r1
 80175f8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80175fc:	697a      	ldr	r2, [r7, #20]
 80175fe:	4413      	add	r3, r2
 8017600:	460a      	mov	r2, r1
 8017602:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017604:	8bfb      	ldrh	r3, [r7, #30]
 8017606:	3301      	adds	r3, #1
 8017608:	83fb      	strh	r3, [r7, #30]
 801760a:	8bfb      	ldrh	r3, [r7, #30]
 801760c:	2b05      	cmp	r3, #5
 801760e:	d9ef      	bls.n	80175f0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	2200      	movs	r2, #0
 8017614:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017618:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801761c:	2200      	movs	r2, #0
 801761e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8017622:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8017626:	2200      	movs	r2, #0
 8017628:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801762c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8017630:	2200      	movs	r2, #0
 8017632:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017636:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017640:	2301      	movs	r3, #1
 8017642:	2235      	movs	r2, #53	; 0x35
 8017644:	2000      	movs	r0, #0
 8017646:	f7ff faab 	bl	8016ba0 <dhcp_option>
 801764a:	4603      	mov	r3, r0
 801764c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017654:	79fa      	ldrb	r2, [r7, #7]
 8017656:	8a7b      	ldrh	r3, [r7, #18]
 8017658:	4618      	mov	r0, r3
 801765a:	f7ff fad5 	bl	8016c08 <dhcp_option_byte>
 801765e:	4603      	mov	r3, r0
 8017660:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8017662:	683b      	ldr	r3, [r7, #0]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d002      	beq.n	801766e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	8a7a      	ldrh	r2, [r7, #18]
 801766c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801766e:	69bb      	ldr	r3, [r7, #24]
}
 8017670:	4618      	mov	r0, r3
 8017672:	3720      	adds	r7, #32
 8017674:	46bd      	mov	sp, r7
 8017676:	bd80      	pop	{r7, pc}
 8017678:	0801e82c 	.word	0x0801e82c
 801767c:	0801eb5c 	.word	0x0801eb5c
 8017680:	0801e88c 	.word	0x0801e88c
 8017684:	0801eb7c 	.word	0x0801eb7c
 8017688:	0801eb9c 	.word	0x0801eb9c
 801768c:	20012318 	.word	0x20012318

08017690 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b084      	sub	sp, #16
 8017694:	af00      	add	r7, sp, #0
 8017696:	4603      	mov	r3, r0
 8017698:	60b9      	str	r1, [r7, #8]
 801769a:	607a      	str	r2, [r7, #4]
 801769c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801769e:	89fb      	ldrh	r3, [r7, #14]
 80176a0:	1c5a      	adds	r2, r3, #1
 80176a2:	81fa      	strh	r2, [r7, #14]
 80176a4:	461a      	mov	r2, r3
 80176a6:	68bb      	ldr	r3, [r7, #8]
 80176a8:	4413      	add	r3, r2
 80176aa:	22ff      	movs	r2, #255	; 0xff
 80176ac:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80176ae:	e007      	b.n	80176c0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80176b0:	89fb      	ldrh	r3, [r7, #14]
 80176b2:	1c5a      	adds	r2, r3, #1
 80176b4:	81fa      	strh	r2, [r7, #14]
 80176b6:	461a      	mov	r2, r3
 80176b8:	68bb      	ldr	r3, [r7, #8]
 80176ba:	4413      	add	r3, r2
 80176bc:	2200      	movs	r2, #0
 80176be:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80176c0:	89fb      	ldrh	r3, [r7, #14]
 80176c2:	2b43      	cmp	r3, #67	; 0x43
 80176c4:	d904      	bls.n	80176d0 <dhcp_option_trailer+0x40>
 80176c6:	89fb      	ldrh	r3, [r7, #14]
 80176c8:	f003 0303 	and.w	r3, r3, #3
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d002      	beq.n	80176d6 <dhcp_option_trailer+0x46>
 80176d0:	89fb      	ldrh	r3, [r7, #14]
 80176d2:	2b43      	cmp	r3, #67	; 0x43
 80176d4:	d9ec      	bls.n	80176b0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80176d6:	89fb      	ldrh	r3, [r7, #14]
 80176d8:	33f0      	adds	r3, #240	; 0xf0
 80176da:	b29b      	uxth	r3, r3
 80176dc:	4619      	mov	r1, r3
 80176de:	6878      	ldr	r0, [r7, #4]
 80176e0:	f7f7 fc0c 	bl	800eefc <pbuf_realloc>
}
 80176e4:	bf00      	nop
 80176e6:	3710      	adds	r7, #16
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}

080176ec <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b085      	sub	sp, #20
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d017      	beq.n	801772a <dhcp_supplied_address+0x3e>
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d013      	beq.n	801772a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017706:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	795b      	ldrb	r3, [r3, #5]
 801770c:	2b0a      	cmp	r3, #10
 801770e:	d007      	beq.n	8017720 <dhcp_supplied_address+0x34>
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	795b      	ldrb	r3, [r3, #5]
 8017714:	2b05      	cmp	r3, #5
 8017716:	d003      	beq.n	8017720 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801771c:	2b04      	cmp	r3, #4
 801771e:	d101      	bne.n	8017724 <dhcp_supplied_address+0x38>
 8017720:	2301      	movs	r3, #1
 8017722:	e000      	b.n	8017726 <dhcp_supplied_address+0x3a>
 8017724:	2300      	movs	r3, #0
 8017726:	b2db      	uxtb	r3, r3
 8017728:	e000      	b.n	801772c <dhcp_supplied_address+0x40>
  }
  return 0;
 801772a:	2300      	movs	r3, #0
}
 801772c:	4618      	mov	r0, r3
 801772e:	3714      	adds	r7, #20
 8017730:	46bd      	mov	sp, r7
 8017732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017736:	4770      	bx	lr

08017738 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b082      	sub	sp, #8
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017740:	4915      	ldr	r1, [pc, #84]	; (8017798 <etharp_free_entry+0x60>)
 8017742:	687a      	ldr	r2, [r7, #4]
 8017744:	4613      	mov	r3, r2
 8017746:	005b      	lsls	r3, r3, #1
 8017748:	4413      	add	r3, r2
 801774a:	00db      	lsls	r3, r3, #3
 801774c:	440b      	add	r3, r1
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d013      	beq.n	801777c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017754:	4910      	ldr	r1, [pc, #64]	; (8017798 <etharp_free_entry+0x60>)
 8017756:	687a      	ldr	r2, [r7, #4]
 8017758:	4613      	mov	r3, r2
 801775a:	005b      	lsls	r3, r3, #1
 801775c:	4413      	add	r3, r2
 801775e:	00db      	lsls	r3, r3, #3
 8017760:	440b      	add	r3, r1
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	4618      	mov	r0, r3
 8017766:	f7f7 fd4f 	bl	800f208 <pbuf_free>
    arp_table[i].q = NULL;
 801776a:	490b      	ldr	r1, [pc, #44]	; (8017798 <etharp_free_entry+0x60>)
 801776c:	687a      	ldr	r2, [r7, #4]
 801776e:	4613      	mov	r3, r2
 8017770:	005b      	lsls	r3, r3, #1
 8017772:	4413      	add	r3, r2
 8017774:	00db      	lsls	r3, r3, #3
 8017776:	440b      	add	r3, r1
 8017778:	2200      	movs	r2, #0
 801777a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801777c:	4906      	ldr	r1, [pc, #24]	; (8017798 <etharp_free_entry+0x60>)
 801777e:	687a      	ldr	r2, [r7, #4]
 8017780:	4613      	mov	r3, r2
 8017782:	005b      	lsls	r3, r3, #1
 8017784:	4413      	add	r3, r2
 8017786:	00db      	lsls	r3, r3, #3
 8017788:	440b      	add	r3, r1
 801778a:	3314      	adds	r3, #20
 801778c:	2200      	movs	r2, #0
 801778e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017790:	bf00      	nop
 8017792:	3708      	adds	r7, #8
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}
 8017798:	2001231c 	.word	0x2001231c

0801779c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b082      	sub	sp, #8
 80177a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80177a2:	2300      	movs	r3, #0
 80177a4:	607b      	str	r3, [r7, #4]
 80177a6:	e096      	b.n	80178d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80177a8:	494f      	ldr	r1, [pc, #316]	; (80178e8 <etharp_tmr+0x14c>)
 80177aa:	687a      	ldr	r2, [r7, #4]
 80177ac:	4613      	mov	r3, r2
 80177ae:	005b      	lsls	r3, r3, #1
 80177b0:	4413      	add	r3, r2
 80177b2:	00db      	lsls	r3, r3, #3
 80177b4:	440b      	add	r3, r1
 80177b6:	3314      	adds	r3, #20
 80177b8:	781b      	ldrb	r3, [r3, #0]
 80177ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80177bc:	78fb      	ldrb	r3, [r7, #3]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	f000 8086 	beq.w	80178d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80177c4:	4948      	ldr	r1, [pc, #288]	; (80178e8 <etharp_tmr+0x14c>)
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	4613      	mov	r3, r2
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	4413      	add	r3, r2
 80177ce:	00db      	lsls	r3, r3, #3
 80177d0:	440b      	add	r3, r1
 80177d2:	3312      	adds	r3, #18
 80177d4:	881b      	ldrh	r3, [r3, #0]
 80177d6:	3301      	adds	r3, #1
 80177d8:	b298      	uxth	r0, r3
 80177da:	4943      	ldr	r1, [pc, #268]	; (80178e8 <etharp_tmr+0x14c>)
 80177dc:	687a      	ldr	r2, [r7, #4]
 80177de:	4613      	mov	r3, r2
 80177e0:	005b      	lsls	r3, r3, #1
 80177e2:	4413      	add	r3, r2
 80177e4:	00db      	lsls	r3, r3, #3
 80177e6:	440b      	add	r3, r1
 80177e8:	3312      	adds	r3, #18
 80177ea:	4602      	mov	r2, r0
 80177ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80177ee:	493e      	ldr	r1, [pc, #248]	; (80178e8 <etharp_tmr+0x14c>)
 80177f0:	687a      	ldr	r2, [r7, #4]
 80177f2:	4613      	mov	r3, r2
 80177f4:	005b      	lsls	r3, r3, #1
 80177f6:	4413      	add	r3, r2
 80177f8:	00db      	lsls	r3, r3, #3
 80177fa:	440b      	add	r3, r1
 80177fc:	3312      	adds	r3, #18
 80177fe:	881b      	ldrh	r3, [r3, #0]
 8017800:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017804:	d215      	bcs.n	8017832 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017806:	4938      	ldr	r1, [pc, #224]	; (80178e8 <etharp_tmr+0x14c>)
 8017808:	687a      	ldr	r2, [r7, #4]
 801780a:	4613      	mov	r3, r2
 801780c:	005b      	lsls	r3, r3, #1
 801780e:	4413      	add	r3, r2
 8017810:	00db      	lsls	r3, r3, #3
 8017812:	440b      	add	r3, r1
 8017814:	3314      	adds	r3, #20
 8017816:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017818:	2b01      	cmp	r3, #1
 801781a:	d10e      	bne.n	801783a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801781c:	4932      	ldr	r1, [pc, #200]	; (80178e8 <etharp_tmr+0x14c>)
 801781e:	687a      	ldr	r2, [r7, #4]
 8017820:	4613      	mov	r3, r2
 8017822:	005b      	lsls	r3, r3, #1
 8017824:	4413      	add	r3, r2
 8017826:	00db      	lsls	r3, r3, #3
 8017828:	440b      	add	r3, r1
 801782a:	3312      	adds	r3, #18
 801782c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801782e:	2b04      	cmp	r3, #4
 8017830:	d903      	bls.n	801783a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017832:	6878      	ldr	r0, [r7, #4]
 8017834:	f7ff ff80 	bl	8017738 <etharp_free_entry>
 8017838:	e04a      	b.n	80178d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801783a:	492b      	ldr	r1, [pc, #172]	; (80178e8 <etharp_tmr+0x14c>)
 801783c:	687a      	ldr	r2, [r7, #4]
 801783e:	4613      	mov	r3, r2
 8017840:	005b      	lsls	r3, r3, #1
 8017842:	4413      	add	r3, r2
 8017844:	00db      	lsls	r3, r3, #3
 8017846:	440b      	add	r3, r1
 8017848:	3314      	adds	r3, #20
 801784a:	781b      	ldrb	r3, [r3, #0]
 801784c:	2b03      	cmp	r3, #3
 801784e:	d10a      	bne.n	8017866 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017850:	4925      	ldr	r1, [pc, #148]	; (80178e8 <etharp_tmr+0x14c>)
 8017852:	687a      	ldr	r2, [r7, #4]
 8017854:	4613      	mov	r3, r2
 8017856:	005b      	lsls	r3, r3, #1
 8017858:	4413      	add	r3, r2
 801785a:	00db      	lsls	r3, r3, #3
 801785c:	440b      	add	r3, r1
 801785e:	3314      	adds	r3, #20
 8017860:	2204      	movs	r2, #4
 8017862:	701a      	strb	r2, [r3, #0]
 8017864:	e034      	b.n	80178d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017866:	4920      	ldr	r1, [pc, #128]	; (80178e8 <etharp_tmr+0x14c>)
 8017868:	687a      	ldr	r2, [r7, #4]
 801786a:	4613      	mov	r3, r2
 801786c:	005b      	lsls	r3, r3, #1
 801786e:	4413      	add	r3, r2
 8017870:	00db      	lsls	r3, r3, #3
 8017872:	440b      	add	r3, r1
 8017874:	3314      	adds	r3, #20
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	2b04      	cmp	r3, #4
 801787a:	d10a      	bne.n	8017892 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801787c:	491a      	ldr	r1, [pc, #104]	; (80178e8 <etharp_tmr+0x14c>)
 801787e:	687a      	ldr	r2, [r7, #4]
 8017880:	4613      	mov	r3, r2
 8017882:	005b      	lsls	r3, r3, #1
 8017884:	4413      	add	r3, r2
 8017886:	00db      	lsls	r3, r3, #3
 8017888:	440b      	add	r3, r1
 801788a:	3314      	adds	r3, #20
 801788c:	2202      	movs	r2, #2
 801788e:	701a      	strb	r2, [r3, #0]
 8017890:	e01e      	b.n	80178d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017892:	4915      	ldr	r1, [pc, #84]	; (80178e8 <etharp_tmr+0x14c>)
 8017894:	687a      	ldr	r2, [r7, #4]
 8017896:	4613      	mov	r3, r2
 8017898:	005b      	lsls	r3, r3, #1
 801789a:	4413      	add	r3, r2
 801789c:	00db      	lsls	r3, r3, #3
 801789e:	440b      	add	r3, r1
 80178a0:	3314      	adds	r3, #20
 80178a2:	781b      	ldrb	r3, [r3, #0]
 80178a4:	2b01      	cmp	r3, #1
 80178a6:	d113      	bne.n	80178d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80178a8:	490f      	ldr	r1, [pc, #60]	; (80178e8 <etharp_tmr+0x14c>)
 80178aa:	687a      	ldr	r2, [r7, #4]
 80178ac:	4613      	mov	r3, r2
 80178ae:	005b      	lsls	r3, r3, #1
 80178b0:	4413      	add	r3, r2
 80178b2:	00db      	lsls	r3, r3, #3
 80178b4:	440b      	add	r3, r1
 80178b6:	3308      	adds	r3, #8
 80178b8:	6818      	ldr	r0, [r3, #0]
 80178ba:	687a      	ldr	r2, [r7, #4]
 80178bc:	4613      	mov	r3, r2
 80178be:	005b      	lsls	r3, r3, #1
 80178c0:	4413      	add	r3, r2
 80178c2:	00db      	lsls	r3, r3, #3
 80178c4:	4a08      	ldr	r2, [pc, #32]	; (80178e8 <etharp_tmr+0x14c>)
 80178c6:	4413      	add	r3, r2
 80178c8:	3304      	adds	r3, #4
 80178ca:	4619      	mov	r1, r3
 80178cc:	f000 fe72 	bl	80185b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	3301      	adds	r3, #1
 80178d4:	607b      	str	r3, [r7, #4]
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	2b09      	cmp	r3, #9
 80178da:	f77f af65 	ble.w	80177a8 <etharp_tmr+0xc>
      }
    }
  }
}
 80178de:	bf00      	nop
 80178e0:	bf00      	nop
 80178e2:	3708      	adds	r7, #8
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}
 80178e8:	2001231c 	.word	0x2001231c

080178ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b08a      	sub	sp, #40	; 0x28
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	60f8      	str	r0, [r7, #12]
 80178f4:	460b      	mov	r3, r1
 80178f6:	607a      	str	r2, [r7, #4]
 80178f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80178fa:	230a      	movs	r3, #10
 80178fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80178fe:	230a      	movs	r3, #10
 8017900:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017902:	230a      	movs	r3, #10
 8017904:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017906:	2300      	movs	r3, #0
 8017908:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801790a:	230a      	movs	r3, #10
 801790c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801790e:	2300      	movs	r3, #0
 8017910:	83bb      	strh	r3, [r7, #28]
 8017912:	2300      	movs	r3, #0
 8017914:	837b      	strh	r3, [r7, #26]
 8017916:	2300      	movs	r3, #0
 8017918:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801791a:	2300      	movs	r3, #0
 801791c:	843b      	strh	r3, [r7, #32]
 801791e:	e0ae      	b.n	8017a7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017920:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017924:	49a6      	ldr	r1, [pc, #664]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017926:	4613      	mov	r3, r2
 8017928:	005b      	lsls	r3, r3, #1
 801792a:	4413      	add	r3, r2
 801792c:	00db      	lsls	r3, r3, #3
 801792e:	440b      	add	r3, r1
 8017930:	3314      	adds	r3, #20
 8017932:	781b      	ldrb	r3, [r3, #0]
 8017934:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017936:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801793a:	2b0a      	cmp	r3, #10
 801793c:	d105      	bne.n	801794a <etharp_find_entry+0x5e>
 801793e:	7dfb      	ldrb	r3, [r7, #23]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d102      	bne.n	801794a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017944:	8c3b      	ldrh	r3, [r7, #32]
 8017946:	847b      	strh	r3, [r7, #34]	; 0x22
 8017948:	e095      	b.n	8017a76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801794a:	7dfb      	ldrb	r3, [r7, #23]
 801794c:	2b00      	cmp	r3, #0
 801794e:	f000 8092 	beq.w	8017a76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017952:	7dfb      	ldrb	r3, [r7, #23]
 8017954:	2b01      	cmp	r3, #1
 8017956:	d009      	beq.n	801796c <etharp_find_entry+0x80>
 8017958:	7dfb      	ldrb	r3, [r7, #23]
 801795a:	2b01      	cmp	r3, #1
 801795c:	d806      	bhi.n	801796c <etharp_find_entry+0x80>
 801795e:	4b99      	ldr	r3, [pc, #612]	; (8017bc4 <etharp_find_entry+0x2d8>)
 8017960:	f240 1223 	movw	r2, #291	; 0x123
 8017964:	4998      	ldr	r1, [pc, #608]	; (8017bc8 <etharp_find_entry+0x2dc>)
 8017966:	4899      	ldr	r0, [pc, #612]	; (8017bcc <etharp_find_entry+0x2e0>)
 8017968:	f003 f8d6 	bl	801ab18 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d020      	beq.n	80179b4 <etharp_find_entry+0xc8>
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	6819      	ldr	r1, [r3, #0]
 8017976:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801797a:	4891      	ldr	r0, [pc, #580]	; (8017bc0 <etharp_find_entry+0x2d4>)
 801797c:	4613      	mov	r3, r2
 801797e:	005b      	lsls	r3, r3, #1
 8017980:	4413      	add	r3, r2
 8017982:	00db      	lsls	r3, r3, #3
 8017984:	4403      	add	r3, r0
 8017986:	3304      	adds	r3, #4
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	4299      	cmp	r1, r3
 801798c:	d112      	bne.n	80179b4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d00c      	beq.n	80179ae <etharp_find_entry+0xc2>
 8017994:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017998:	4989      	ldr	r1, [pc, #548]	; (8017bc0 <etharp_find_entry+0x2d4>)
 801799a:	4613      	mov	r3, r2
 801799c:	005b      	lsls	r3, r3, #1
 801799e:	4413      	add	r3, r2
 80179a0:	00db      	lsls	r3, r3, #3
 80179a2:	440b      	add	r3, r1
 80179a4:	3308      	adds	r3, #8
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	687a      	ldr	r2, [r7, #4]
 80179aa:	429a      	cmp	r2, r3
 80179ac:	d102      	bne.n	80179b4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80179ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80179b2:	e100      	b.n	8017bb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80179b4:	7dfb      	ldrb	r3, [r7, #23]
 80179b6:	2b01      	cmp	r3, #1
 80179b8:	d140      	bne.n	8017a3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80179ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179be:	4980      	ldr	r1, [pc, #512]	; (8017bc0 <etharp_find_entry+0x2d4>)
 80179c0:	4613      	mov	r3, r2
 80179c2:	005b      	lsls	r3, r3, #1
 80179c4:	4413      	add	r3, r2
 80179c6:	00db      	lsls	r3, r3, #3
 80179c8:	440b      	add	r3, r1
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d01a      	beq.n	8017a06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80179d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179d4:	497a      	ldr	r1, [pc, #488]	; (8017bc0 <etharp_find_entry+0x2d4>)
 80179d6:	4613      	mov	r3, r2
 80179d8:	005b      	lsls	r3, r3, #1
 80179da:	4413      	add	r3, r2
 80179dc:	00db      	lsls	r3, r3, #3
 80179de:	440b      	add	r3, r1
 80179e0:	3312      	adds	r3, #18
 80179e2:	881b      	ldrh	r3, [r3, #0]
 80179e4:	8bba      	ldrh	r2, [r7, #28]
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d845      	bhi.n	8017a76 <etharp_find_entry+0x18a>
            old_queue = i;
 80179ea:	8c3b      	ldrh	r3, [r7, #32]
 80179ec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80179ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179f2:	4973      	ldr	r1, [pc, #460]	; (8017bc0 <etharp_find_entry+0x2d4>)
 80179f4:	4613      	mov	r3, r2
 80179f6:	005b      	lsls	r3, r3, #1
 80179f8:	4413      	add	r3, r2
 80179fa:	00db      	lsls	r3, r3, #3
 80179fc:	440b      	add	r3, r1
 80179fe:	3312      	adds	r3, #18
 8017a00:	881b      	ldrh	r3, [r3, #0]
 8017a02:	83bb      	strh	r3, [r7, #28]
 8017a04:	e037      	b.n	8017a76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017a06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a0a:	496d      	ldr	r1, [pc, #436]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017a0c:	4613      	mov	r3, r2
 8017a0e:	005b      	lsls	r3, r3, #1
 8017a10:	4413      	add	r3, r2
 8017a12:	00db      	lsls	r3, r3, #3
 8017a14:	440b      	add	r3, r1
 8017a16:	3312      	adds	r3, #18
 8017a18:	881b      	ldrh	r3, [r3, #0]
 8017a1a:	8b7a      	ldrh	r2, [r7, #26]
 8017a1c:	429a      	cmp	r2, r3
 8017a1e:	d82a      	bhi.n	8017a76 <etharp_find_entry+0x18a>
            old_pending = i;
 8017a20:	8c3b      	ldrh	r3, [r7, #32]
 8017a22:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017a24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a28:	4965      	ldr	r1, [pc, #404]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017a2a:	4613      	mov	r3, r2
 8017a2c:	005b      	lsls	r3, r3, #1
 8017a2e:	4413      	add	r3, r2
 8017a30:	00db      	lsls	r3, r3, #3
 8017a32:	440b      	add	r3, r1
 8017a34:	3312      	adds	r3, #18
 8017a36:	881b      	ldrh	r3, [r3, #0]
 8017a38:	837b      	strh	r3, [r7, #26]
 8017a3a:	e01c      	b.n	8017a76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017a3c:	7dfb      	ldrb	r3, [r7, #23]
 8017a3e:	2b01      	cmp	r3, #1
 8017a40:	d919      	bls.n	8017a76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017a42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a46:	495e      	ldr	r1, [pc, #376]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017a48:	4613      	mov	r3, r2
 8017a4a:	005b      	lsls	r3, r3, #1
 8017a4c:	4413      	add	r3, r2
 8017a4e:	00db      	lsls	r3, r3, #3
 8017a50:	440b      	add	r3, r1
 8017a52:	3312      	adds	r3, #18
 8017a54:	881b      	ldrh	r3, [r3, #0]
 8017a56:	8b3a      	ldrh	r2, [r7, #24]
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d80c      	bhi.n	8017a76 <etharp_find_entry+0x18a>
            old_stable = i;
 8017a5c:	8c3b      	ldrh	r3, [r7, #32]
 8017a5e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017a60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a64:	4956      	ldr	r1, [pc, #344]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017a66:	4613      	mov	r3, r2
 8017a68:	005b      	lsls	r3, r3, #1
 8017a6a:	4413      	add	r3, r2
 8017a6c:	00db      	lsls	r3, r3, #3
 8017a6e:	440b      	add	r3, r1
 8017a70:	3312      	adds	r3, #18
 8017a72:	881b      	ldrh	r3, [r3, #0]
 8017a74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017a76:	8c3b      	ldrh	r3, [r7, #32]
 8017a78:	3301      	adds	r3, #1
 8017a7a:	b29b      	uxth	r3, r3
 8017a7c:	843b      	strh	r3, [r7, #32]
 8017a7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017a82:	2b09      	cmp	r3, #9
 8017a84:	f77f af4c 	ble.w	8017920 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017a88:	7afb      	ldrb	r3, [r7, #11]
 8017a8a:	f003 0302 	and.w	r3, r3, #2
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d108      	bne.n	8017aa4 <etharp_find_entry+0x1b8>
 8017a92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017a96:	2b0a      	cmp	r3, #10
 8017a98:	d107      	bne.n	8017aaa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017a9a:	7afb      	ldrb	r3, [r7, #11]
 8017a9c:	f003 0301 	and.w	r3, r3, #1
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d102      	bne.n	8017aaa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8017aa8:	e085      	b.n	8017bb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017aaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017aae:	2b09      	cmp	r3, #9
 8017ab0:	dc02      	bgt.n	8017ab8 <etharp_find_entry+0x1cc>
    i = empty;
 8017ab2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ab4:	843b      	strh	r3, [r7, #32]
 8017ab6:	e039      	b.n	8017b2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017ab8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017abc:	2b09      	cmp	r3, #9
 8017abe:	dc14      	bgt.n	8017aea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ac2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017ac4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ac8:	493d      	ldr	r1, [pc, #244]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017aca:	4613      	mov	r3, r2
 8017acc:	005b      	lsls	r3, r3, #1
 8017ace:	4413      	add	r3, r2
 8017ad0:	00db      	lsls	r3, r3, #3
 8017ad2:	440b      	add	r3, r1
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d018      	beq.n	8017b0c <etharp_find_entry+0x220>
 8017ada:	4b3a      	ldr	r3, [pc, #232]	; (8017bc4 <etharp_find_entry+0x2d8>)
 8017adc:	f240 126d 	movw	r2, #365	; 0x16d
 8017ae0:	493b      	ldr	r1, [pc, #236]	; (8017bd0 <etharp_find_entry+0x2e4>)
 8017ae2:	483a      	ldr	r0, [pc, #232]	; (8017bcc <etharp_find_entry+0x2e0>)
 8017ae4:	f003 f818 	bl	801ab18 <iprintf>
 8017ae8:	e010      	b.n	8017b0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017aea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017aee:	2b09      	cmp	r3, #9
 8017af0:	dc02      	bgt.n	8017af8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017af2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017af4:	843b      	strh	r3, [r7, #32]
 8017af6:	e009      	b.n	8017b0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017af8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017afc:	2b09      	cmp	r3, #9
 8017afe:	dc02      	bgt.n	8017b06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017b00:	8bfb      	ldrh	r3, [r7, #30]
 8017b02:	843b      	strh	r3, [r7, #32]
 8017b04:	e002      	b.n	8017b0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017b06:	f04f 33ff 	mov.w	r3, #4294967295
 8017b0a:	e054      	b.n	8017bb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017b0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017b10:	2b09      	cmp	r3, #9
 8017b12:	dd06      	ble.n	8017b22 <etharp_find_entry+0x236>
 8017b14:	4b2b      	ldr	r3, [pc, #172]	; (8017bc4 <etharp_find_entry+0x2d8>)
 8017b16:	f240 127f 	movw	r2, #383	; 0x17f
 8017b1a:	492e      	ldr	r1, [pc, #184]	; (8017bd4 <etharp_find_entry+0x2e8>)
 8017b1c:	482b      	ldr	r0, [pc, #172]	; (8017bcc <etharp_find_entry+0x2e0>)
 8017b1e:	f002 fffb 	bl	801ab18 <iprintf>
    etharp_free_entry(i);
 8017b22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017b26:	4618      	mov	r0, r3
 8017b28:	f7ff fe06 	bl	8017738 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017b2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017b30:	2b09      	cmp	r3, #9
 8017b32:	dd06      	ble.n	8017b42 <etharp_find_entry+0x256>
 8017b34:	4b23      	ldr	r3, [pc, #140]	; (8017bc4 <etharp_find_entry+0x2d8>)
 8017b36:	f240 1283 	movw	r2, #387	; 0x183
 8017b3a:	4926      	ldr	r1, [pc, #152]	; (8017bd4 <etharp_find_entry+0x2e8>)
 8017b3c:	4823      	ldr	r0, [pc, #140]	; (8017bcc <etharp_find_entry+0x2e0>)
 8017b3e:	f002 ffeb 	bl	801ab18 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017b42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b46:	491e      	ldr	r1, [pc, #120]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017b48:	4613      	mov	r3, r2
 8017b4a:	005b      	lsls	r3, r3, #1
 8017b4c:	4413      	add	r3, r2
 8017b4e:	00db      	lsls	r3, r3, #3
 8017b50:	440b      	add	r3, r1
 8017b52:	3314      	adds	r3, #20
 8017b54:	781b      	ldrb	r3, [r3, #0]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d006      	beq.n	8017b68 <etharp_find_entry+0x27c>
 8017b5a:	4b1a      	ldr	r3, [pc, #104]	; (8017bc4 <etharp_find_entry+0x2d8>)
 8017b5c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017b60:	491d      	ldr	r1, [pc, #116]	; (8017bd8 <etharp_find_entry+0x2ec>)
 8017b62:	481a      	ldr	r0, [pc, #104]	; (8017bcc <etharp_find_entry+0x2e0>)
 8017b64:	f002 ffd8 	bl	801ab18 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d00b      	beq.n	8017b86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017b6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	6819      	ldr	r1, [r3, #0]
 8017b76:	4812      	ldr	r0, [pc, #72]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017b78:	4613      	mov	r3, r2
 8017b7a:	005b      	lsls	r3, r3, #1
 8017b7c:	4413      	add	r3, r2
 8017b7e:	00db      	lsls	r3, r3, #3
 8017b80:	4403      	add	r3, r0
 8017b82:	3304      	adds	r3, #4
 8017b84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017b86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b8a:	490d      	ldr	r1, [pc, #52]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017b8c:	4613      	mov	r3, r2
 8017b8e:	005b      	lsls	r3, r3, #1
 8017b90:	4413      	add	r3, r2
 8017b92:	00db      	lsls	r3, r3, #3
 8017b94:	440b      	add	r3, r1
 8017b96:	3312      	adds	r3, #18
 8017b98:	2200      	movs	r2, #0
 8017b9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017b9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ba0:	4907      	ldr	r1, [pc, #28]	; (8017bc0 <etharp_find_entry+0x2d4>)
 8017ba2:	4613      	mov	r3, r2
 8017ba4:	005b      	lsls	r3, r3, #1
 8017ba6:	4413      	add	r3, r2
 8017ba8:	00db      	lsls	r3, r3, #3
 8017baa:	440b      	add	r3, r1
 8017bac:	3308      	adds	r3, #8
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017bb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	3728      	adds	r7, #40	; 0x28
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
 8017bbe:	bf00      	nop
 8017bc0:	2001231c 	.word	0x2001231c
 8017bc4:	0801ebdc 	.word	0x0801ebdc
 8017bc8:	0801ec14 	.word	0x0801ec14
 8017bcc:	0801ec54 	.word	0x0801ec54
 8017bd0:	0801ec7c 	.word	0x0801ec7c
 8017bd4:	0801ec94 	.word	0x0801ec94
 8017bd8:	0801eca8 	.word	0x0801eca8

08017bdc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b088      	sub	sp, #32
 8017be0:	af02      	add	r7, sp, #8
 8017be2:	60f8      	str	r0, [r7, #12]
 8017be4:	60b9      	str	r1, [r7, #8]
 8017be6:	607a      	str	r2, [r7, #4]
 8017be8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017bf0:	2b06      	cmp	r3, #6
 8017bf2:	d006      	beq.n	8017c02 <etharp_update_arp_entry+0x26>
 8017bf4:	4b48      	ldr	r3, [pc, #288]	; (8017d18 <etharp_update_arp_entry+0x13c>)
 8017bf6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017bfa:	4948      	ldr	r1, [pc, #288]	; (8017d1c <etharp_update_arp_entry+0x140>)
 8017bfc:	4848      	ldr	r0, [pc, #288]	; (8017d20 <etharp_update_arp_entry+0x144>)
 8017bfe:	f002 ff8b 	bl	801ab18 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017c02:	68bb      	ldr	r3, [r7, #8]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d012      	beq.n	8017c2e <etharp_update_arp_entry+0x52>
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d00e      	beq.n	8017c2e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017c10:	68bb      	ldr	r3, [r7, #8]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	68f9      	ldr	r1, [r7, #12]
 8017c16:	4618      	mov	r0, r3
 8017c18:	f001 f920 	bl	8018e5c <ip4_addr_isbroadcast_u32>
 8017c1c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d105      	bne.n	8017c2e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017c22:	68bb      	ldr	r3, [r7, #8]
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017c2a:	2be0      	cmp	r3, #224	; 0xe0
 8017c2c:	d102      	bne.n	8017c34 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017c2e:	f06f 030f 	mvn.w	r3, #15
 8017c32:	e06c      	b.n	8017d0e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017c34:	78fb      	ldrb	r3, [r7, #3]
 8017c36:	68fa      	ldr	r2, [r7, #12]
 8017c38:	4619      	mov	r1, r3
 8017c3a:	68b8      	ldr	r0, [r7, #8]
 8017c3c:	f7ff fe56 	bl	80178ec <etharp_find_entry>
 8017c40:	4603      	mov	r3, r0
 8017c42:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017c44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	da02      	bge.n	8017c52 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017c4c:	8afb      	ldrh	r3, [r7, #22]
 8017c4e:	b25b      	sxtb	r3, r3
 8017c50:	e05d      	b.n	8017d0e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017c52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c56:	4933      	ldr	r1, [pc, #204]	; (8017d24 <etharp_update_arp_entry+0x148>)
 8017c58:	4613      	mov	r3, r2
 8017c5a:	005b      	lsls	r3, r3, #1
 8017c5c:	4413      	add	r3, r2
 8017c5e:	00db      	lsls	r3, r3, #3
 8017c60:	440b      	add	r3, r1
 8017c62:	3314      	adds	r3, #20
 8017c64:	2202      	movs	r2, #2
 8017c66:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017c68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c6c:	492d      	ldr	r1, [pc, #180]	; (8017d24 <etharp_update_arp_entry+0x148>)
 8017c6e:	4613      	mov	r3, r2
 8017c70:	005b      	lsls	r3, r3, #1
 8017c72:	4413      	add	r3, r2
 8017c74:	00db      	lsls	r3, r3, #3
 8017c76:	440b      	add	r3, r1
 8017c78:	3308      	adds	r3, #8
 8017c7a:	68fa      	ldr	r2, [r7, #12]
 8017c7c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017c7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c82:	4613      	mov	r3, r2
 8017c84:	005b      	lsls	r3, r3, #1
 8017c86:	4413      	add	r3, r2
 8017c88:	00db      	lsls	r3, r3, #3
 8017c8a:	3308      	adds	r3, #8
 8017c8c:	4a25      	ldr	r2, [pc, #148]	; (8017d24 <etharp_update_arp_entry+0x148>)
 8017c8e:	4413      	add	r3, r2
 8017c90:	3304      	adds	r3, #4
 8017c92:	2206      	movs	r2, #6
 8017c94:	6879      	ldr	r1, [r7, #4]
 8017c96:	4618      	mov	r0, r3
 8017c98:	f003 f875 	bl	801ad86 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017c9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ca0:	4920      	ldr	r1, [pc, #128]	; (8017d24 <etharp_update_arp_entry+0x148>)
 8017ca2:	4613      	mov	r3, r2
 8017ca4:	005b      	lsls	r3, r3, #1
 8017ca6:	4413      	add	r3, r2
 8017ca8:	00db      	lsls	r3, r3, #3
 8017caa:	440b      	add	r3, r1
 8017cac:	3312      	adds	r3, #18
 8017cae:	2200      	movs	r2, #0
 8017cb0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017cb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017cb6:	491b      	ldr	r1, [pc, #108]	; (8017d24 <etharp_update_arp_entry+0x148>)
 8017cb8:	4613      	mov	r3, r2
 8017cba:	005b      	lsls	r3, r3, #1
 8017cbc:	4413      	add	r3, r2
 8017cbe:	00db      	lsls	r3, r3, #3
 8017cc0:	440b      	add	r3, r1
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d021      	beq.n	8017d0c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017cc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ccc:	4915      	ldr	r1, [pc, #84]	; (8017d24 <etharp_update_arp_entry+0x148>)
 8017cce:	4613      	mov	r3, r2
 8017cd0:	005b      	lsls	r3, r3, #1
 8017cd2:	4413      	add	r3, r2
 8017cd4:	00db      	lsls	r3, r3, #3
 8017cd6:	440b      	add	r3, r1
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017cdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ce0:	4910      	ldr	r1, [pc, #64]	; (8017d24 <etharp_update_arp_entry+0x148>)
 8017ce2:	4613      	mov	r3, r2
 8017ce4:	005b      	lsls	r3, r3, #1
 8017ce6:	4413      	add	r3, r2
 8017ce8:	00db      	lsls	r3, r3, #3
 8017cea:	440b      	add	r3, r1
 8017cec:	2200      	movs	r2, #0
 8017cee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017cfa:	9300      	str	r3, [sp, #0]
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	6939      	ldr	r1, [r7, #16]
 8017d00:	68f8      	ldr	r0, [r7, #12]
 8017d02:	f001 ffb9 	bl	8019c78 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017d06:	6938      	ldr	r0, [r7, #16]
 8017d08:	f7f7 fa7e 	bl	800f208 <pbuf_free>
  }
  return ERR_OK;
 8017d0c:	2300      	movs	r3, #0
}
 8017d0e:	4618      	mov	r0, r3
 8017d10:	3718      	adds	r7, #24
 8017d12:	46bd      	mov	sp, r7
 8017d14:	bd80      	pop	{r7, pc}
 8017d16:	bf00      	nop
 8017d18:	0801ebdc 	.word	0x0801ebdc
 8017d1c:	0801ecd4 	.word	0x0801ecd4
 8017d20:	0801ec54 	.word	0x0801ec54
 8017d24:	2001231c 	.word	0x2001231c

08017d28 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b084      	sub	sp, #16
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d30:	2300      	movs	r3, #0
 8017d32:	60fb      	str	r3, [r7, #12]
 8017d34:	e01e      	b.n	8017d74 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017d36:	4913      	ldr	r1, [pc, #76]	; (8017d84 <etharp_cleanup_netif+0x5c>)
 8017d38:	68fa      	ldr	r2, [r7, #12]
 8017d3a:	4613      	mov	r3, r2
 8017d3c:	005b      	lsls	r3, r3, #1
 8017d3e:	4413      	add	r3, r2
 8017d40:	00db      	lsls	r3, r3, #3
 8017d42:	440b      	add	r3, r1
 8017d44:	3314      	adds	r3, #20
 8017d46:	781b      	ldrb	r3, [r3, #0]
 8017d48:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017d4a:	7afb      	ldrb	r3, [r7, #11]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d00e      	beq.n	8017d6e <etharp_cleanup_netif+0x46>
 8017d50:	490c      	ldr	r1, [pc, #48]	; (8017d84 <etharp_cleanup_netif+0x5c>)
 8017d52:	68fa      	ldr	r2, [r7, #12]
 8017d54:	4613      	mov	r3, r2
 8017d56:	005b      	lsls	r3, r3, #1
 8017d58:	4413      	add	r3, r2
 8017d5a:	00db      	lsls	r3, r3, #3
 8017d5c:	440b      	add	r3, r1
 8017d5e:	3308      	adds	r3, #8
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d102      	bne.n	8017d6e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017d68:	68f8      	ldr	r0, [r7, #12]
 8017d6a:	f7ff fce5 	bl	8017738 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	3301      	adds	r3, #1
 8017d72:	60fb      	str	r3, [r7, #12]
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	2b09      	cmp	r3, #9
 8017d78:	dddd      	ble.n	8017d36 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017d7a:	bf00      	nop
 8017d7c:	bf00      	nop
 8017d7e:	3710      	adds	r7, #16
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}
 8017d84:	2001231c 	.word	0x2001231c

08017d88 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017d88:	b5b0      	push	{r4, r5, r7, lr}
 8017d8a:	b08a      	sub	sp, #40	; 0x28
 8017d8c:	af04      	add	r7, sp, #16
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017d92:	683b      	ldr	r3, [r7, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d107      	bne.n	8017da8 <etharp_input+0x20>
 8017d98:	4b3f      	ldr	r3, [pc, #252]	; (8017e98 <etharp_input+0x110>)
 8017d9a:	f240 228a 	movw	r2, #650	; 0x28a
 8017d9e:	493f      	ldr	r1, [pc, #252]	; (8017e9c <etharp_input+0x114>)
 8017da0:	483f      	ldr	r0, [pc, #252]	; (8017ea0 <etharp_input+0x118>)
 8017da2:	f002 feb9 	bl	801ab18 <iprintf>
 8017da6:	e074      	b.n	8017e92 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	881b      	ldrh	r3, [r3, #0]
 8017db2:	b29b      	uxth	r3, r3
 8017db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017db8:	d10c      	bne.n	8017dd4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017dba:	693b      	ldr	r3, [r7, #16]
 8017dbc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017dbe:	2b06      	cmp	r3, #6
 8017dc0:	d108      	bne.n	8017dd4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017dc2:	693b      	ldr	r3, [r7, #16]
 8017dc4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017dc6:	2b04      	cmp	r3, #4
 8017dc8:	d104      	bne.n	8017dd4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	885b      	ldrh	r3, [r3, #2]
 8017dce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017dd0:	2b08      	cmp	r3, #8
 8017dd2:	d003      	beq.n	8017ddc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017dd4:	6878      	ldr	r0, [r7, #4]
 8017dd6:	f7f7 fa17 	bl	800f208 <pbuf_free>
    return;
 8017dda:	e05a      	b.n	8017e92 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	330e      	adds	r3, #14
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017de4:	693b      	ldr	r3, [r7, #16]
 8017de6:	3318      	adds	r3, #24
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	3304      	adds	r3, #4
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d102      	bne.n	8017dfc <etharp_input+0x74>
    for_us = 0;
 8017df6:	2300      	movs	r3, #0
 8017df8:	75fb      	strb	r3, [r7, #23]
 8017dfa:	e009      	b.n	8017e10 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017dfc:	68ba      	ldr	r2, [r7, #8]
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	3304      	adds	r3, #4
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	429a      	cmp	r2, r3
 8017e06:	bf0c      	ite	eq
 8017e08:	2301      	moveq	r3, #1
 8017e0a:	2300      	movne	r3, #0
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	f103 0208 	add.w	r2, r3, #8
 8017e16:	7dfb      	ldrb	r3, [r7, #23]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d001      	beq.n	8017e20 <etharp_input+0x98>
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	e000      	b.n	8017e22 <etharp_input+0x9a>
 8017e20:	2302      	movs	r3, #2
 8017e22:	f107 010c 	add.w	r1, r7, #12
 8017e26:	6838      	ldr	r0, [r7, #0]
 8017e28:	f7ff fed8 	bl	8017bdc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017e2c:	693b      	ldr	r3, [r7, #16]
 8017e2e:	88db      	ldrh	r3, [r3, #6]
 8017e30:	b29b      	uxth	r3, r3
 8017e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017e36:	d003      	beq.n	8017e40 <etharp_input+0xb8>
 8017e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e3c:	d01e      	beq.n	8017e7c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017e3e:	e025      	b.n	8017e8c <etharp_input+0x104>
      if (for_us) {
 8017e40:	7dfb      	ldrb	r3, [r7, #23]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d021      	beq.n	8017e8a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017e46:	683b      	ldr	r3, [r7, #0]
 8017e48:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017e4c:	693b      	ldr	r3, [r7, #16]
 8017e4e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017e58:	683b      	ldr	r3, [r7, #0]
 8017e5a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017e5c:	693a      	ldr	r2, [r7, #16]
 8017e5e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017e60:	2102      	movs	r1, #2
 8017e62:	9103      	str	r1, [sp, #12]
 8017e64:	f107 010c 	add.w	r1, r7, #12
 8017e68:	9102      	str	r1, [sp, #8]
 8017e6a:	9201      	str	r2, [sp, #4]
 8017e6c:	9300      	str	r3, [sp, #0]
 8017e6e:	462b      	mov	r3, r5
 8017e70:	4622      	mov	r2, r4
 8017e72:	4601      	mov	r1, r0
 8017e74:	6838      	ldr	r0, [r7, #0]
 8017e76:	f000 faef 	bl	8018458 <etharp_raw>
      break;
 8017e7a:	e006      	b.n	8017e8a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017e7c:	f107 030c 	add.w	r3, r7, #12
 8017e80:	4619      	mov	r1, r3
 8017e82:	6838      	ldr	r0, [r7, #0]
 8017e84:	f7fe f9cc 	bl	8016220 <dhcp_arp_reply>
      break;
 8017e88:	e000      	b.n	8017e8c <etharp_input+0x104>
      break;
 8017e8a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f7f7 f9bb 	bl	800f208 <pbuf_free>
}
 8017e92:	3718      	adds	r7, #24
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bdb0      	pop	{r4, r5, r7, pc}
 8017e98:	0801ebdc 	.word	0x0801ebdc
 8017e9c:	0801ed2c 	.word	0x0801ed2c
 8017ea0:	0801ec54 	.word	0x0801ec54

08017ea4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b086      	sub	sp, #24
 8017ea8:	af02      	add	r7, sp, #8
 8017eaa:	60f8      	str	r0, [r7, #12]
 8017eac:	60b9      	str	r1, [r7, #8]
 8017eae:	4613      	mov	r3, r2
 8017eb0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017eb2:	79fa      	ldrb	r2, [r7, #7]
 8017eb4:	4944      	ldr	r1, [pc, #272]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017eb6:	4613      	mov	r3, r2
 8017eb8:	005b      	lsls	r3, r3, #1
 8017eba:	4413      	add	r3, r2
 8017ebc:	00db      	lsls	r3, r3, #3
 8017ebe:	440b      	add	r3, r1
 8017ec0:	3314      	adds	r3, #20
 8017ec2:	781b      	ldrb	r3, [r3, #0]
 8017ec4:	2b01      	cmp	r3, #1
 8017ec6:	d806      	bhi.n	8017ed6 <etharp_output_to_arp_index+0x32>
 8017ec8:	4b40      	ldr	r3, [pc, #256]	; (8017fcc <etharp_output_to_arp_index+0x128>)
 8017eca:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017ece:	4940      	ldr	r1, [pc, #256]	; (8017fd0 <etharp_output_to_arp_index+0x12c>)
 8017ed0:	4840      	ldr	r0, [pc, #256]	; (8017fd4 <etharp_output_to_arp_index+0x130>)
 8017ed2:	f002 fe21 	bl	801ab18 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017ed6:	79fa      	ldrb	r2, [r7, #7]
 8017ed8:	493b      	ldr	r1, [pc, #236]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017eda:	4613      	mov	r3, r2
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	4413      	add	r3, r2
 8017ee0:	00db      	lsls	r3, r3, #3
 8017ee2:	440b      	add	r3, r1
 8017ee4:	3314      	adds	r3, #20
 8017ee6:	781b      	ldrb	r3, [r3, #0]
 8017ee8:	2b02      	cmp	r3, #2
 8017eea:	d153      	bne.n	8017f94 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017eec:	79fa      	ldrb	r2, [r7, #7]
 8017eee:	4936      	ldr	r1, [pc, #216]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017ef0:	4613      	mov	r3, r2
 8017ef2:	005b      	lsls	r3, r3, #1
 8017ef4:	4413      	add	r3, r2
 8017ef6:	00db      	lsls	r3, r3, #3
 8017ef8:	440b      	add	r3, r1
 8017efa:	3312      	adds	r3, #18
 8017efc:	881b      	ldrh	r3, [r3, #0]
 8017efe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017f02:	d919      	bls.n	8017f38 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017f04:	79fa      	ldrb	r2, [r7, #7]
 8017f06:	4613      	mov	r3, r2
 8017f08:	005b      	lsls	r3, r3, #1
 8017f0a:	4413      	add	r3, r2
 8017f0c:	00db      	lsls	r3, r3, #3
 8017f0e:	4a2e      	ldr	r2, [pc, #184]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017f10:	4413      	add	r3, r2
 8017f12:	3304      	adds	r3, #4
 8017f14:	4619      	mov	r1, r3
 8017f16:	68f8      	ldr	r0, [r7, #12]
 8017f18:	f000 fb4c 	bl	80185b4 <etharp_request>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d138      	bne.n	8017f94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017f22:	79fa      	ldrb	r2, [r7, #7]
 8017f24:	4928      	ldr	r1, [pc, #160]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017f26:	4613      	mov	r3, r2
 8017f28:	005b      	lsls	r3, r3, #1
 8017f2a:	4413      	add	r3, r2
 8017f2c:	00db      	lsls	r3, r3, #3
 8017f2e:	440b      	add	r3, r1
 8017f30:	3314      	adds	r3, #20
 8017f32:	2203      	movs	r2, #3
 8017f34:	701a      	strb	r2, [r3, #0]
 8017f36:	e02d      	b.n	8017f94 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017f38:	79fa      	ldrb	r2, [r7, #7]
 8017f3a:	4923      	ldr	r1, [pc, #140]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017f3c:	4613      	mov	r3, r2
 8017f3e:	005b      	lsls	r3, r3, #1
 8017f40:	4413      	add	r3, r2
 8017f42:	00db      	lsls	r3, r3, #3
 8017f44:	440b      	add	r3, r1
 8017f46:	3312      	adds	r3, #18
 8017f48:	881b      	ldrh	r3, [r3, #0]
 8017f4a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017f4e:	d321      	bcc.n	8017f94 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017f50:	79fa      	ldrb	r2, [r7, #7]
 8017f52:	4613      	mov	r3, r2
 8017f54:	005b      	lsls	r3, r3, #1
 8017f56:	4413      	add	r3, r2
 8017f58:	00db      	lsls	r3, r3, #3
 8017f5a:	4a1b      	ldr	r2, [pc, #108]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017f5c:	4413      	add	r3, r2
 8017f5e:	1d19      	adds	r1, r3, #4
 8017f60:	79fa      	ldrb	r2, [r7, #7]
 8017f62:	4613      	mov	r3, r2
 8017f64:	005b      	lsls	r3, r3, #1
 8017f66:	4413      	add	r3, r2
 8017f68:	00db      	lsls	r3, r3, #3
 8017f6a:	3308      	adds	r3, #8
 8017f6c:	4a16      	ldr	r2, [pc, #88]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017f6e:	4413      	add	r3, r2
 8017f70:	3304      	adds	r3, #4
 8017f72:	461a      	mov	r2, r3
 8017f74:	68f8      	ldr	r0, [r7, #12]
 8017f76:	f000 fafb 	bl	8018570 <etharp_request_dst>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d109      	bne.n	8017f94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017f80:	79fa      	ldrb	r2, [r7, #7]
 8017f82:	4911      	ldr	r1, [pc, #68]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017f84:	4613      	mov	r3, r2
 8017f86:	005b      	lsls	r3, r3, #1
 8017f88:	4413      	add	r3, r2
 8017f8a:	00db      	lsls	r3, r3, #3
 8017f8c:	440b      	add	r3, r1
 8017f8e:	3314      	adds	r3, #20
 8017f90:	2203      	movs	r2, #3
 8017f92:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017f9a:	79fa      	ldrb	r2, [r7, #7]
 8017f9c:	4613      	mov	r3, r2
 8017f9e:	005b      	lsls	r3, r3, #1
 8017fa0:	4413      	add	r3, r2
 8017fa2:	00db      	lsls	r3, r3, #3
 8017fa4:	3308      	adds	r3, #8
 8017fa6:	4a08      	ldr	r2, [pc, #32]	; (8017fc8 <etharp_output_to_arp_index+0x124>)
 8017fa8:	4413      	add	r3, r2
 8017faa:	3304      	adds	r3, #4
 8017fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017fb0:	9200      	str	r2, [sp, #0]
 8017fb2:	460a      	mov	r2, r1
 8017fb4:	68b9      	ldr	r1, [r7, #8]
 8017fb6:	68f8      	ldr	r0, [r7, #12]
 8017fb8:	f001 fe5e 	bl	8019c78 <ethernet_output>
 8017fbc:	4603      	mov	r3, r0
}
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	3710      	adds	r7, #16
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}
 8017fc6:	bf00      	nop
 8017fc8:	2001231c 	.word	0x2001231c
 8017fcc:	0801ebdc 	.word	0x0801ebdc
 8017fd0:	0801ed4c 	.word	0x0801ed4c
 8017fd4:	0801ec54 	.word	0x0801ec54

08017fd8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b08a      	sub	sp, #40	; 0x28
 8017fdc:	af02      	add	r7, sp, #8
 8017fde:	60f8      	str	r0, [r7, #12]
 8017fe0:	60b9      	str	r1, [r7, #8]
 8017fe2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d106      	bne.n	8017ffc <etharp_output+0x24>
 8017fee:	4b73      	ldr	r3, [pc, #460]	; (80181bc <etharp_output+0x1e4>)
 8017ff0:	f240 321e 	movw	r2, #798	; 0x31e
 8017ff4:	4972      	ldr	r1, [pc, #456]	; (80181c0 <etharp_output+0x1e8>)
 8017ff6:	4873      	ldr	r0, [pc, #460]	; (80181c4 <etharp_output+0x1ec>)
 8017ff8:	f002 fd8e 	bl	801ab18 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017ffc:	68bb      	ldr	r3, [r7, #8]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d106      	bne.n	8018010 <etharp_output+0x38>
 8018002:	4b6e      	ldr	r3, [pc, #440]	; (80181bc <etharp_output+0x1e4>)
 8018004:	f240 321f 	movw	r2, #799	; 0x31f
 8018008:	496f      	ldr	r1, [pc, #444]	; (80181c8 <etharp_output+0x1f0>)
 801800a:	486e      	ldr	r0, [pc, #440]	; (80181c4 <etharp_output+0x1ec>)
 801800c:	f002 fd84 	bl	801ab18 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d106      	bne.n	8018024 <etharp_output+0x4c>
 8018016:	4b69      	ldr	r3, [pc, #420]	; (80181bc <etharp_output+0x1e4>)
 8018018:	f44f 7248 	mov.w	r2, #800	; 0x320
 801801c:	496b      	ldr	r1, [pc, #428]	; (80181cc <etharp_output+0x1f4>)
 801801e:	4869      	ldr	r0, [pc, #420]	; (80181c4 <etharp_output+0x1ec>)
 8018020:	f002 fd7a 	bl	801ab18 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	68f9      	ldr	r1, [r7, #12]
 801802a:	4618      	mov	r0, r3
 801802c:	f000 ff16 	bl	8018e5c <ip4_addr_isbroadcast_u32>
 8018030:	4603      	mov	r3, r0
 8018032:	2b00      	cmp	r3, #0
 8018034:	d002      	beq.n	801803c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018036:	4b66      	ldr	r3, [pc, #408]	; (80181d0 <etharp_output+0x1f8>)
 8018038:	61fb      	str	r3, [r7, #28]
 801803a:	e0af      	b.n	801819c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018044:	2be0      	cmp	r3, #224	; 0xe0
 8018046:	d118      	bne.n	801807a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018048:	2301      	movs	r3, #1
 801804a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801804c:	2300      	movs	r3, #0
 801804e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018050:	235e      	movs	r3, #94	; 0x5e
 8018052:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	3301      	adds	r3, #1
 8018058:	781b      	ldrb	r3, [r3, #0]
 801805a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801805e:	b2db      	uxtb	r3, r3
 8018060:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	3302      	adds	r3, #2
 8018066:	781b      	ldrb	r3, [r3, #0]
 8018068:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	3303      	adds	r3, #3
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018072:	f107 0310 	add.w	r3, r7, #16
 8018076:	61fb      	str	r3, [r7, #28]
 8018078:	e090      	b.n	801819c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	681a      	ldr	r2, [r3, #0]
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	3304      	adds	r3, #4
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	405a      	eors	r2, r3
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	3308      	adds	r3, #8
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	4013      	ands	r3, r2
 801808e:	2b00      	cmp	r3, #0
 8018090:	d012      	beq.n	80180b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018098:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801809c:	4293      	cmp	r3, r2
 801809e:	d00b      	beq.n	80180b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	330c      	adds	r3, #12
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d003      	beq.n	80180b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	330c      	adds	r3, #12
 80180ae:	61bb      	str	r3, [r7, #24]
 80180b0:	e002      	b.n	80180b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80180b2:	f06f 0303 	mvn.w	r3, #3
 80180b6:	e07d      	b.n	80181b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80180b8:	4b46      	ldr	r3, [pc, #280]	; (80181d4 <etharp_output+0x1fc>)
 80180ba:	781b      	ldrb	r3, [r3, #0]
 80180bc:	4619      	mov	r1, r3
 80180be:	4a46      	ldr	r2, [pc, #280]	; (80181d8 <etharp_output+0x200>)
 80180c0:	460b      	mov	r3, r1
 80180c2:	005b      	lsls	r3, r3, #1
 80180c4:	440b      	add	r3, r1
 80180c6:	00db      	lsls	r3, r3, #3
 80180c8:	4413      	add	r3, r2
 80180ca:	3314      	adds	r3, #20
 80180cc:	781b      	ldrb	r3, [r3, #0]
 80180ce:	2b01      	cmp	r3, #1
 80180d0:	d925      	bls.n	801811e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80180d2:	4b40      	ldr	r3, [pc, #256]	; (80181d4 <etharp_output+0x1fc>)
 80180d4:	781b      	ldrb	r3, [r3, #0]
 80180d6:	4619      	mov	r1, r3
 80180d8:	4a3f      	ldr	r2, [pc, #252]	; (80181d8 <etharp_output+0x200>)
 80180da:	460b      	mov	r3, r1
 80180dc:	005b      	lsls	r3, r3, #1
 80180de:	440b      	add	r3, r1
 80180e0:	00db      	lsls	r3, r3, #3
 80180e2:	4413      	add	r3, r2
 80180e4:	3308      	adds	r3, #8
 80180e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80180e8:	68fa      	ldr	r2, [r7, #12]
 80180ea:	429a      	cmp	r2, r3
 80180ec:	d117      	bne.n	801811e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80180ee:	69bb      	ldr	r3, [r7, #24]
 80180f0:	681a      	ldr	r2, [r3, #0]
 80180f2:	4b38      	ldr	r3, [pc, #224]	; (80181d4 <etharp_output+0x1fc>)
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	4618      	mov	r0, r3
 80180f8:	4937      	ldr	r1, [pc, #220]	; (80181d8 <etharp_output+0x200>)
 80180fa:	4603      	mov	r3, r0
 80180fc:	005b      	lsls	r3, r3, #1
 80180fe:	4403      	add	r3, r0
 8018100:	00db      	lsls	r3, r3, #3
 8018102:	440b      	add	r3, r1
 8018104:	3304      	adds	r3, #4
 8018106:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018108:	429a      	cmp	r2, r3
 801810a:	d108      	bne.n	801811e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801810c:	4b31      	ldr	r3, [pc, #196]	; (80181d4 <etharp_output+0x1fc>)
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	461a      	mov	r2, r3
 8018112:	68b9      	ldr	r1, [r7, #8]
 8018114:	68f8      	ldr	r0, [r7, #12]
 8018116:	f7ff fec5 	bl	8017ea4 <etharp_output_to_arp_index>
 801811a:	4603      	mov	r3, r0
 801811c:	e04a      	b.n	80181b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801811e:	2300      	movs	r3, #0
 8018120:	75fb      	strb	r3, [r7, #23]
 8018122:	e031      	b.n	8018188 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018124:	7dfa      	ldrb	r2, [r7, #23]
 8018126:	492c      	ldr	r1, [pc, #176]	; (80181d8 <etharp_output+0x200>)
 8018128:	4613      	mov	r3, r2
 801812a:	005b      	lsls	r3, r3, #1
 801812c:	4413      	add	r3, r2
 801812e:	00db      	lsls	r3, r3, #3
 8018130:	440b      	add	r3, r1
 8018132:	3314      	adds	r3, #20
 8018134:	781b      	ldrb	r3, [r3, #0]
 8018136:	2b01      	cmp	r3, #1
 8018138:	d923      	bls.n	8018182 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801813a:	7dfa      	ldrb	r2, [r7, #23]
 801813c:	4926      	ldr	r1, [pc, #152]	; (80181d8 <etharp_output+0x200>)
 801813e:	4613      	mov	r3, r2
 8018140:	005b      	lsls	r3, r3, #1
 8018142:	4413      	add	r3, r2
 8018144:	00db      	lsls	r3, r3, #3
 8018146:	440b      	add	r3, r1
 8018148:	3308      	adds	r3, #8
 801814a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801814c:	68fa      	ldr	r2, [r7, #12]
 801814e:	429a      	cmp	r2, r3
 8018150:	d117      	bne.n	8018182 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018152:	69bb      	ldr	r3, [r7, #24]
 8018154:	6819      	ldr	r1, [r3, #0]
 8018156:	7dfa      	ldrb	r2, [r7, #23]
 8018158:	481f      	ldr	r0, [pc, #124]	; (80181d8 <etharp_output+0x200>)
 801815a:	4613      	mov	r3, r2
 801815c:	005b      	lsls	r3, r3, #1
 801815e:	4413      	add	r3, r2
 8018160:	00db      	lsls	r3, r3, #3
 8018162:	4403      	add	r3, r0
 8018164:	3304      	adds	r3, #4
 8018166:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018168:	4299      	cmp	r1, r3
 801816a:	d10a      	bne.n	8018182 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801816c:	4a19      	ldr	r2, [pc, #100]	; (80181d4 <etharp_output+0x1fc>)
 801816e:	7dfb      	ldrb	r3, [r7, #23]
 8018170:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018172:	7dfb      	ldrb	r3, [r7, #23]
 8018174:	461a      	mov	r2, r3
 8018176:	68b9      	ldr	r1, [r7, #8]
 8018178:	68f8      	ldr	r0, [r7, #12]
 801817a:	f7ff fe93 	bl	8017ea4 <etharp_output_to_arp_index>
 801817e:	4603      	mov	r3, r0
 8018180:	e018      	b.n	80181b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018182:	7dfb      	ldrb	r3, [r7, #23]
 8018184:	3301      	adds	r3, #1
 8018186:	75fb      	strb	r3, [r7, #23]
 8018188:	7dfb      	ldrb	r3, [r7, #23]
 801818a:	2b09      	cmp	r3, #9
 801818c:	d9ca      	bls.n	8018124 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801818e:	68ba      	ldr	r2, [r7, #8]
 8018190:	69b9      	ldr	r1, [r7, #24]
 8018192:	68f8      	ldr	r0, [r7, #12]
 8018194:	f000 f822 	bl	80181dc <etharp_query>
 8018198:	4603      	mov	r3, r0
 801819a:	e00b      	b.n	80181b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80181a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80181a6:	9300      	str	r3, [sp, #0]
 80181a8:	69fb      	ldr	r3, [r7, #28]
 80181aa:	68b9      	ldr	r1, [r7, #8]
 80181ac:	68f8      	ldr	r0, [r7, #12]
 80181ae:	f001 fd63 	bl	8019c78 <ethernet_output>
 80181b2:	4603      	mov	r3, r0
}
 80181b4:	4618      	mov	r0, r3
 80181b6:	3720      	adds	r7, #32
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd80      	pop	{r7, pc}
 80181bc:	0801ebdc 	.word	0x0801ebdc
 80181c0:	0801ed2c 	.word	0x0801ed2c
 80181c4:	0801ec54 	.word	0x0801ec54
 80181c8:	0801ed7c 	.word	0x0801ed7c
 80181cc:	0801ed1c 	.word	0x0801ed1c
 80181d0:	0801f460 	.word	0x0801f460
 80181d4:	2001240c 	.word	0x2001240c
 80181d8:	2001231c 	.word	0x2001231c

080181dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b08c      	sub	sp, #48	; 0x30
 80181e0:	af02      	add	r7, sp, #8
 80181e2:	60f8      	str	r0, [r7, #12]
 80181e4:	60b9      	str	r1, [r7, #8]
 80181e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	332a      	adds	r3, #42	; 0x2a
 80181ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80181ee:	23ff      	movs	r3, #255	; 0xff
 80181f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80181f4:	2300      	movs	r3, #0
 80181f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80181f8:	68bb      	ldr	r3, [r7, #8]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	68f9      	ldr	r1, [r7, #12]
 80181fe:	4618      	mov	r0, r3
 8018200:	f000 fe2c 	bl	8018e5c <ip4_addr_isbroadcast_u32>
 8018204:	4603      	mov	r3, r0
 8018206:	2b00      	cmp	r3, #0
 8018208:	d10c      	bne.n	8018224 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801820a:	68bb      	ldr	r3, [r7, #8]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018212:	2be0      	cmp	r3, #224	; 0xe0
 8018214:	d006      	beq.n	8018224 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018216:	68bb      	ldr	r3, [r7, #8]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d003      	beq.n	8018224 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801821c:	68bb      	ldr	r3, [r7, #8]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d102      	bne.n	801822a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018224:	f06f 030f 	mvn.w	r3, #15
 8018228:	e101      	b.n	801842e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801822a:	68fa      	ldr	r2, [r7, #12]
 801822c:	2101      	movs	r1, #1
 801822e:	68b8      	ldr	r0, [r7, #8]
 8018230:	f7ff fb5c 	bl	80178ec <etharp_find_entry>
 8018234:	4603      	mov	r3, r0
 8018236:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801823c:	2b00      	cmp	r3, #0
 801823e:	da02      	bge.n	8018246 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018240:	8a7b      	ldrh	r3, [r7, #18]
 8018242:	b25b      	sxtb	r3, r3
 8018244:	e0f3      	b.n	801842e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018246:	8a7b      	ldrh	r3, [r7, #18]
 8018248:	2b7e      	cmp	r3, #126	; 0x7e
 801824a:	d906      	bls.n	801825a <etharp_query+0x7e>
 801824c:	4b7a      	ldr	r3, [pc, #488]	; (8018438 <etharp_query+0x25c>)
 801824e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018252:	497a      	ldr	r1, [pc, #488]	; (801843c <etharp_query+0x260>)
 8018254:	487a      	ldr	r0, [pc, #488]	; (8018440 <etharp_query+0x264>)
 8018256:	f002 fc5f 	bl	801ab18 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801825a:	8a7b      	ldrh	r3, [r7, #18]
 801825c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801825e:	7c7a      	ldrb	r2, [r7, #17]
 8018260:	4978      	ldr	r1, [pc, #480]	; (8018444 <etharp_query+0x268>)
 8018262:	4613      	mov	r3, r2
 8018264:	005b      	lsls	r3, r3, #1
 8018266:	4413      	add	r3, r2
 8018268:	00db      	lsls	r3, r3, #3
 801826a:	440b      	add	r3, r1
 801826c:	3314      	adds	r3, #20
 801826e:	781b      	ldrb	r3, [r3, #0]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d115      	bne.n	80182a0 <etharp_query+0xc4>
    is_new_entry = 1;
 8018274:	2301      	movs	r3, #1
 8018276:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018278:	7c7a      	ldrb	r2, [r7, #17]
 801827a:	4972      	ldr	r1, [pc, #456]	; (8018444 <etharp_query+0x268>)
 801827c:	4613      	mov	r3, r2
 801827e:	005b      	lsls	r3, r3, #1
 8018280:	4413      	add	r3, r2
 8018282:	00db      	lsls	r3, r3, #3
 8018284:	440b      	add	r3, r1
 8018286:	3314      	adds	r3, #20
 8018288:	2201      	movs	r2, #1
 801828a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801828c:	7c7a      	ldrb	r2, [r7, #17]
 801828e:	496d      	ldr	r1, [pc, #436]	; (8018444 <etharp_query+0x268>)
 8018290:	4613      	mov	r3, r2
 8018292:	005b      	lsls	r3, r3, #1
 8018294:	4413      	add	r3, r2
 8018296:	00db      	lsls	r3, r3, #3
 8018298:	440b      	add	r3, r1
 801829a:	3308      	adds	r3, #8
 801829c:	68fa      	ldr	r2, [r7, #12]
 801829e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80182a0:	7c7a      	ldrb	r2, [r7, #17]
 80182a2:	4968      	ldr	r1, [pc, #416]	; (8018444 <etharp_query+0x268>)
 80182a4:	4613      	mov	r3, r2
 80182a6:	005b      	lsls	r3, r3, #1
 80182a8:	4413      	add	r3, r2
 80182aa:	00db      	lsls	r3, r3, #3
 80182ac:	440b      	add	r3, r1
 80182ae:	3314      	adds	r3, #20
 80182b0:	781b      	ldrb	r3, [r3, #0]
 80182b2:	2b01      	cmp	r3, #1
 80182b4:	d011      	beq.n	80182da <etharp_query+0xfe>
 80182b6:	7c7a      	ldrb	r2, [r7, #17]
 80182b8:	4962      	ldr	r1, [pc, #392]	; (8018444 <etharp_query+0x268>)
 80182ba:	4613      	mov	r3, r2
 80182bc:	005b      	lsls	r3, r3, #1
 80182be:	4413      	add	r3, r2
 80182c0:	00db      	lsls	r3, r3, #3
 80182c2:	440b      	add	r3, r1
 80182c4:	3314      	adds	r3, #20
 80182c6:	781b      	ldrb	r3, [r3, #0]
 80182c8:	2b01      	cmp	r3, #1
 80182ca:	d806      	bhi.n	80182da <etharp_query+0xfe>
 80182cc:	4b5a      	ldr	r3, [pc, #360]	; (8018438 <etharp_query+0x25c>)
 80182ce:	f240 32cd 	movw	r2, #973	; 0x3cd
 80182d2:	495d      	ldr	r1, [pc, #372]	; (8018448 <etharp_query+0x26c>)
 80182d4:	485a      	ldr	r0, [pc, #360]	; (8018440 <etharp_query+0x264>)
 80182d6:	f002 fc1f 	bl	801ab18 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80182da:	6a3b      	ldr	r3, [r7, #32]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d102      	bne.n	80182e6 <etharp_query+0x10a>
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d10c      	bne.n	8018300 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80182e6:	68b9      	ldr	r1, [r7, #8]
 80182e8:	68f8      	ldr	r0, [r7, #12]
 80182ea:	f000 f963 	bl	80185b4 <etharp_request>
 80182ee:	4603      	mov	r3, r0
 80182f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d102      	bne.n	8018300 <etharp_query+0x124>
      return result;
 80182fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80182fe:	e096      	b.n	801842e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d106      	bne.n	8018314 <etharp_query+0x138>
 8018306:	4b4c      	ldr	r3, [pc, #304]	; (8018438 <etharp_query+0x25c>)
 8018308:	f240 32e1 	movw	r2, #993	; 0x3e1
 801830c:	494f      	ldr	r1, [pc, #316]	; (801844c <etharp_query+0x270>)
 801830e:	484c      	ldr	r0, [pc, #304]	; (8018440 <etharp_query+0x264>)
 8018310:	f002 fc02 	bl	801ab18 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018314:	7c7a      	ldrb	r2, [r7, #17]
 8018316:	494b      	ldr	r1, [pc, #300]	; (8018444 <etharp_query+0x268>)
 8018318:	4613      	mov	r3, r2
 801831a:	005b      	lsls	r3, r3, #1
 801831c:	4413      	add	r3, r2
 801831e:	00db      	lsls	r3, r3, #3
 8018320:	440b      	add	r3, r1
 8018322:	3314      	adds	r3, #20
 8018324:	781b      	ldrb	r3, [r3, #0]
 8018326:	2b01      	cmp	r3, #1
 8018328:	d917      	bls.n	801835a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801832a:	4a49      	ldr	r2, [pc, #292]	; (8018450 <etharp_query+0x274>)
 801832c:	7c7b      	ldrb	r3, [r7, #17]
 801832e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018330:	7c7a      	ldrb	r2, [r7, #17]
 8018332:	4613      	mov	r3, r2
 8018334:	005b      	lsls	r3, r3, #1
 8018336:	4413      	add	r3, r2
 8018338:	00db      	lsls	r3, r3, #3
 801833a:	3308      	adds	r3, #8
 801833c:	4a41      	ldr	r2, [pc, #260]	; (8018444 <etharp_query+0x268>)
 801833e:	4413      	add	r3, r2
 8018340:	3304      	adds	r3, #4
 8018342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018346:	9200      	str	r2, [sp, #0]
 8018348:	697a      	ldr	r2, [r7, #20]
 801834a:	6879      	ldr	r1, [r7, #4]
 801834c:	68f8      	ldr	r0, [r7, #12]
 801834e:	f001 fc93 	bl	8019c78 <ethernet_output>
 8018352:	4603      	mov	r3, r0
 8018354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018358:	e067      	b.n	801842a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801835a:	7c7a      	ldrb	r2, [r7, #17]
 801835c:	4939      	ldr	r1, [pc, #228]	; (8018444 <etharp_query+0x268>)
 801835e:	4613      	mov	r3, r2
 8018360:	005b      	lsls	r3, r3, #1
 8018362:	4413      	add	r3, r2
 8018364:	00db      	lsls	r3, r3, #3
 8018366:	440b      	add	r3, r1
 8018368:	3314      	adds	r3, #20
 801836a:	781b      	ldrb	r3, [r3, #0]
 801836c:	2b01      	cmp	r3, #1
 801836e:	d15c      	bne.n	801842a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018370:	2300      	movs	r3, #0
 8018372:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018378:	e01c      	b.n	80183b4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801837a:	69fb      	ldr	r3, [r7, #28]
 801837c:	895a      	ldrh	r2, [r3, #10]
 801837e:	69fb      	ldr	r3, [r7, #28]
 8018380:	891b      	ldrh	r3, [r3, #8]
 8018382:	429a      	cmp	r2, r3
 8018384:	d10a      	bne.n	801839c <etharp_query+0x1c0>
 8018386:	69fb      	ldr	r3, [r7, #28]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d006      	beq.n	801839c <etharp_query+0x1c0>
 801838e:	4b2a      	ldr	r3, [pc, #168]	; (8018438 <etharp_query+0x25c>)
 8018390:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018394:	492f      	ldr	r1, [pc, #188]	; (8018454 <etharp_query+0x278>)
 8018396:	482a      	ldr	r0, [pc, #168]	; (8018440 <etharp_query+0x264>)
 8018398:	f002 fbbe 	bl	801ab18 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801839c:	69fb      	ldr	r3, [r7, #28]
 801839e:	7b1b      	ldrb	r3, [r3, #12]
 80183a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d002      	beq.n	80183ae <etharp_query+0x1d2>
        copy_needed = 1;
 80183a8:	2301      	movs	r3, #1
 80183aa:	61bb      	str	r3, [r7, #24]
        break;
 80183ac:	e005      	b.n	80183ba <etharp_query+0x1de>
      }
      p = p->next;
 80183ae:	69fb      	ldr	r3, [r7, #28]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80183b4:	69fb      	ldr	r3, [r7, #28]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d1df      	bne.n	801837a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80183ba:	69bb      	ldr	r3, [r7, #24]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d007      	beq.n	80183d0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80183c0:	687a      	ldr	r2, [r7, #4]
 80183c2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80183c6:	200e      	movs	r0, #14
 80183c8:	f7f7 face 	bl	800f968 <pbuf_clone>
 80183cc:	61f8      	str	r0, [r7, #28]
 80183ce:	e004      	b.n	80183da <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80183d4:	69f8      	ldr	r0, [r7, #28]
 80183d6:	f7f6 ffbd 	bl	800f354 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80183da:	69fb      	ldr	r3, [r7, #28]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d021      	beq.n	8018424 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80183e0:	7c7a      	ldrb	r2, [r7, #17]
 80183e2:	4918      	ldr	r1, [pc, #96]	; (8018444 <etharp_query+0x268>)
 80183e4:	4613      	mov	r3, r2
 80183e6:	005b      	lsls	r3, r3, #1
 80183e8:	4413      	add	r3, r2
 80183ea:	00db      	lsls	r3, r3, #3
 80183ec:	440b      	add	r3, r1
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d00a      	beq.n	801840a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80183f4:	7c7a      	ldrb	r2, [r7, #17]
 80183f6:	4913      	ldr	r1, [pc, #76]	; (8018444 <etharp_query+0x268>)
 80183f8:	4613      	mov	r3, r2
 80183fa:	005b      	lsls	r3, r3, #1
 80183fc:	4413      	add	r3, r2
 80183fe:	00db      	lsls	r3, r3, #3
 8018400:	440b      	add	r3, r1
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	4618      	mov	r0, r3
 8018406:	f7f6 feff 	bl	800f208 <pbuf_free>
      }
      arp_table[i].q = p;
 801840a:	7c7a      	ldrb	r2, [r7, #17]
 801840c:	490d      	ldr	r1, [pc, #52]	; (8018444 <etharp_query+0x268>)
 801840e:	4613      	mov	r3, r2
 8018410:	005b      	lsls	r3, r3, #1
 8018412:	4413      	add	r3, r2
 8018414:	00db      	lsls	r3, r3, #3
 8018416:	440b      	add	r3, r1
 8018418:	69fa      	ldr	r2, [r7, #28]
 801841a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801841c:	2300      	movs	r3, #0
 801841e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018422:	e002      	b.n	801842a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018424:	23ff      	movs	r3, #255	; 0xff
 8018426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801842a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801842e:	4618      	mov	r0, r3
 8018430:	3728      	adds	r7, #40	; 0x28
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
 8018436:	bf00      	nop
 8018438:	0801ebdc 	.word	0x0801ebdc
 801843c:	0801ed88 	.word	0x0801ed88
 8018440:	0801ec54 	.word	0x0801ec54
 8018444:	2001231c 	.word	0x2001231c
 8018448:	0801ed98 	.word	0x0801ed98
 801844c:	0801ed7c 	.word	0x0801ed7c
 8018450:	2001240c 	.word	0x2001240c
 8018454:	0801edc0 	.word	0x0801edc0

08018458 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b08a      	sub	sp, #40	; 0x28
 801845c:	af02      	add	r7, sp, #8
 801845e:	60f8      	str	r0, [r7, #12]
 8018460:	60b9      	str	r1, [r7, #8]
 8018462:	607a      	str	r2, [r7, #4]
 8018464:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018466:	2300      	movs	r3, #0
 8018468:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d106      	bne.n	801847e <etharp_raw+0x26>
 8018470:	4b3a      	ldr	r3, [pc, #232]	; (801855c <etharp_raw+0x104>)
 8018472:	f240 4257 	movw	r2, #1111	; 0x457
 8018476:	493a      	ldr	r1, [pc, #232]	; (8018560 <etharp_raw+0x108>)
 8018478:	483a      	ldr	r0, [pc, #232]	; (8018564 <etharp_raw+0x10c>)
 801847a:	f002 fb4d 	bl	801ab18 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801847e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018482:	211c      	movs	r1, #28
 8018484:	200e      	movs	r0, #14
 8018486:	f7f6 fbdb 	bl	800ec40 <pbuf_alloc>
 801848a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801848c:	69bb      	ldr	r3, [r7, #24]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d102      	bne.n	8018498 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018492:	f04f 33ff 	mov.w	r3, #4294967295
 8018496:	e05d      	b.n	8018554 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018498:	69bb      	ldr	r3, [r7, #24]
 801849a:	895b      	ldrh	r3, [r3, #10]
 801849c:	2b1b      	cmp	r3, #27
 801849e:	d806      	bhi.n	80184ae <etharp_raw+0x56>
 80184a0:	4b2e      	ldr	r3, [pc, #184]	; (801855c <etharp_raw+0x104>)
 80184a2:	f240 4262 	movw	r2, #1122	; 0x462
 80184a6:	4930      	ldr	r1, [pc, #192]	; (8018568 <etharp_raw+0x110>)
 80184a8:	482e      	ldr	r0, [pc, #184]	; (8018564 <etharp_raw+0x10c>)
 80184aa:	f002 fb35 	bl	801ab18 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80184ae:	69bb      	ldr	r3, [r7, #24]
 80184b0:	685b      	ldr	r3, [r3, #4]
 80184b2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80184b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7f5 f822 	bl	800d500 <lwip_htons>
 80184bc:	4603      	mov	r3, r0
 80184be:	461a      	mov	r2, r3
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80184ca:	2b06      	cmp	r3, #6
 80184cc:	d006      	beq.n	80184dc <etharp_raw+0x84>
 80184ce:	4b23      	ldr	r3, [pc, #140]	; (801855c <etharp_raw+0x104>)
 80184d0:	f240 4269 	movw	r2, #1129	; 0x469
 80184d4:	4925      	ldr	r1, [pc, #148]	; (801856c <etharp_raw+0x114>)
 80184d6:	4823      	ldr	r0, [pc, #140]	; (8018564 <etharp_raw+0x10c>)
 80184d8:	f002 fb1e 	bl	801ab18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	3308      	adds	r3, #8
 80184e0:	2206      	movs	r2, #6
 80184e2:	6839      	ldr	r1, [r7, #0]
 80184e4:	4618      	mov	r0, r3
 80184e6:	f002 fc4e 	bl	801ad86 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80184ea:	697b      	ldr	r3, [r7, #20]
 80184ec:	3312      	adds	r3, #18
 80184ee:	2206      	movs	r2, #6
 80184f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80184f2:	4618      	mov	r0, r3
 80184f4:	f002 fc47 	bl	801ad86 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80184f8:	697b      	ldr	r3, [r7, #20]
 80184fa:	330e      	adds	r3, #14
 80184fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184fe:	6812      	ldr	r2, [r2, #0]
 8018500:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018502:	697b      	ldr	r3, [r7, #20]
 8018504:	3318      	adds	r3, #24
 8018506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018508:	6812      	ldr	r2, [r2, #0]
 801850a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801850c:	697b      	ldr	r3, [r7, #20]
 801850e:	2200      	movs	r2, #0
 8018510:	701a      	strb	r2, [r3, #0]
 8018512:	2200      	movs	r2, #0
 8018514:	f042 0201 	orr.w	r2, r2, #1
 8018518:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801851a:	697b      	ldr	r3, [r7, #20]
 801851c:	2200      	movs	r2, #0
 801851e:	f042 0208 	orr.w	r2, r2, #8
 8018522:	709a      	strb	r2, [r3, #2]
 8018524:	2200      	movs	r2, #0
 8018526:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	2206      	movs	r2, #6
 801852c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	2204      	movs	r2, #4
 8018532:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018534:	f640 0306 	movw	r3, #2054	; 0x806
 8018538:	9300      	str	r3, [sp, #0]
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	68ba      	ldr	r2, [r7, #8]
 801853e:	69b9      	ldr	r1, [r7, #24]
 8018540:	68f8      	ldr	r0, [r7, #12]
 8018542:	f001 fb99 	bl	8019c78 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018546:	69b8      	ldr	r0, [r7, #24]
 8018548:	f7f6 fe5e 	bl	800f208 <pbuf_free>
  p = NULL;
 801854c:	2300      	movs	r3, #0
 801854e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018550:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018554:	4618      	mov	r0, r3
 8018556:	3720      	adds	r7, #32
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}
 801855c:	0801ebdc 	.word	0x0801ebdc
 8018560:	0801ed2c 	.word	0x0801ed2c
 8018564:	0801ec54 	.word	0x0801ec54
 8018568:	0801eddc 	.word	0x0801eddc
 801856c:	0801ee10 	.word	0x0801ee10

08018570 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b088      	sub	sp, #32
 8018574:	af04      	add	r7, sp, #16
 8018576:	60f8      	str	r0, [r7, #12]
 8018578:	60b9      	str	r1, [r7, #8]
 801857a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801858c:	2201      	movs	r2, #1
 801858e:	9203      	str	r2, [sp, #12]
 8018590:	68ba      	ldr	r2, [r7, #8]
 8018592:	9202      	str	r2, [sp, #8]
 8018594:	4a06      	ldr	r2, [pc, #24]	; (80185b0 <etharp_request_dst+0x40>)
 8018596:	9201      	str	r2, [sp, #4]
 8018598:	9300      	str	r3, [sp, #0]
 801859a:	4603      	mov	r3, r0
 801859c:	687a      	ldr	r2, [r7, #4]
 801859e:	68f8      	ldr	r0, [r7, #12]
 80185a0:	f7ff ff5a 	bl	8018458 <etharp_raw>
 80185a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80185a6:	4618      	mov	r0, r3
 80185a8:	3710      	adds	r7, #16
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	0801f468 	.word	0x0801f468

080185b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b082      	sub	sp, #8
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
 80185bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80185be:	4a05      	ldr	r2, [pc, #20]	; (80185d4 <etharp_request+0x20>)
 80185c0:	6839      	ldr	r1, [r7, #0]
 80185c2:	6878      	ldr	r0, [r7, #4]
 80185c4:	f7ff ffd4 	bl	8018570 <etharp_request_dst>
 80185c8:	4603      	mov	r3, r0
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	3708      	adds	r7, #8
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd80      	pop	{r7, pc}
 80185d2:	bf00      	nop
 80185d4:	0801f460 	.word	0x0801f460

080185d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b08e      	sub	sp, #56	; 0x38
 80185dc:	af04      	add	r7, sp, #16
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80185e2:	4b79      	ldr	r3, [pc, #484]	; (80187c8 <icmp_input+0x1f0>)
 80185e4:	689b      	ldr	r3, [r3, #8]
 80185e6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80185e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ea:	781b      	ldrb	r3, [r3, #0]
 80185ec:	f003 030f 	and.w	r3, r3, #15
 80185f0:	b2db      	uxtb	r3, r3
 80185f2:	009b      	lsls	r3, r3, #2
 80185f4:	b2db      	uxtb	r3, r3
 80185f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80185f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185fa:	2b13      	cmp	r3, #19
 80185fc:	f240 80cd 	bls.w	801879a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	895b      	ldrh	r3, [r3, #10]
 8018604:	2b03      	cmp	r3, #3
 8018606:	f240 80ca 	bls.w	801879e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	685b      	ldr	r3, [r3, #4]
 801860e:	781b      	ldrb	r3, [r3, #0]
 8018610:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018614:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018618:	2b00      	cmp	r3, #0
 801861a:	f000 80b7 	beq.w	801878c <icmp_input+0x1b4>
 801861e:	2b08      	cmp	r3, #8
 8018620:	f040 80b7 	bne.w	8018792 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018624:	4b69      	ldr	r3, [pc, #420]	; (80187cc <icmp_input+0x1f4>)
 8018626:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018628:	4b67      	ldr	r3, [pc, #412]	; (80187c8 <icmp_input+0x1f0>)
 801862a:	695b      	ldr	r3, [r3, #20]
 801862c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018630:	2be0      	cmp	r3, #224	; 0xe0
 8018632:	f000 80bb 	beq.w	80187ac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018636:	4b64      	ldr	r3, [pc, #400]	; (80187c8 <icmp_input+0x1f0>)
 8018638:	695b      	ldr	r3, [r3, #20]
 801863a:	4a63      	ldr	r2, [pc, #396]	; (80187c8 <icmp_input+0x1f0>)
 801863c:	6812      	ldr	r2, [r2, #0]
 801863e:	4611      	mov	r1, r2
 8018640:	4618      	mov	r0, r3
 8018642:	f000 fc0b 	bl	8018e5c <ip4_addr_isbroadcast_u32>
 8018646:	4603      	mov	r3, r0
 8018648:	2b00      	cmp	r3, #0
 801864a:	f040 80b1 	bne.w	80187b0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	891b      	ldrh	r3, [r3, #8]
 8018652:	2b07      	cmp	r3, #7
 8018654:	f240 80a5 	bls.w	80187a2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801865a:	330e      	adds	r3, #14
 801865c:	4619      	mov	r1, r3
 801865e:	6878      	ldr	r0, [r7, #4]
 8018660:	f7f6 fd3c 	bl	800f0dc <pbuf_add_header>
 8018664:	4603      	mov	r3, r0
 8018666:	2b00      	cmp	r3, #0
 8018668:	d04b      	beq.n	8018702 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	891a      	ldrh	r2, [r3, #8]
 801866e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018670:	4413      	add	r3, r2
 8018672:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	891b      	ldrh	r3, [r3, #8]
 8018678:	8b7a      	ldrh	r2, [r7, #26]
 801867a:	429a      	cmp	r2, r3
 801867c:	f0c0 809a 	bcc.w	80187b4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018680:	8b7b      	ldrh	r3, [r7, #26]
 8018682:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018686:	4619      	mov	r1, r3
 8018688:	200e      	movs	r0, #14
 801868a:	f7f6 fad9 	bl	800ec40 <pbuf_alloc>
 801868e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018690:	697b      	ldr	r3, [r7, #20]
 8018692:	2b00      	cmp	r3, #0
 8018694:	f000 8090 	beq.w	80187b8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018698:	697b      	ldr	r3, [r7, #20]
 801869a:	895b      	ldrh	r3, [r3, #10]
 801869c:	461a      	mov	r2, r3
 801869e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186a0:	3308      	adds	r3, #8
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d203      	bcs.n	80186ae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80186a6:	6978      	ldr	r0, [r7, #20]
 80186a8:	f7f6 fdae 	bl	800f208 <pbuf_free>
          goto icmperr;
 80186ac:	e085      	b.n	80187ba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80186ae:	697b      	ldr	r3, [r7, #20]
 80186b0:	685b      	ldr	r3, [r3, #4]
 80186b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80186b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80186b6:	4618      	mov	r0, r3
 80186b8:	f002 fb65 	bl	801ad86 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80186bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186be:	4619      	mov	r1, r3
 80186c0:	6978      	ldr	r0, [r7, #20]
 80186c2:	f7f6 fd1b 	bl	800f0fc <pbuf_remove_header>
 80186c6:	4603      	mov	r3, r0
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d009      	beq.n	80186e0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80186cc:	4b40      	ldr	r3, [pc, #256]	; (80187d0 <icmp_input+0x1f8>)
 80186ce:	22b6      	movs	r2, #182	; 0xb6
 80186d0:	4940      	ldr	r1, [pc, #256]	; (80187d4 <icmp_input+0x1fc>)
 80186d2:	4841      	ldr	r0, [pc, #260]	; (80187d8 <icmp_input+0x200>)
 80186d4:	f002 fa20 	bl	801ab18 <iprintf>
          pbuf_free(r);
 80186d8:	6978      	ldr	r0, [r7, #20]
 80186da:	f7f6 fd95 	bl	800f208 <pbuf_free>
          goto icmperr;
 80186de:	e06c      	b.n	80187ba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80186e0:	6879      	ldr	r1, [r7, #4]
 80186e2:	6978      	ldr	r0, [r7, #20]
 80186e4:	f7f6 fec4 	bl	800f470 <pbuf_copy>
 80186e8:	4603      	mov	r3, r0
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d003      	beq.n	80186f6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80186ee:	6978      	ldr	r0, [r7, #20]
 80186f0:	f7f6 fd8a 	bl	800f208 <pbuf_free>
          goto icmperr;
 80186f4:	e061      	b.n	80187ba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80186f6:	6878      	ldr	r0, [r7, #4]
 80186f8:	f7f6 fd86 	bl	800f208 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	607b      	str	r3, [r7, #4]
 8018700:	e00f      	b.n	8018722 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018702:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018704:	330e      	adds	r3, #14
 8018706:	4619      	mov	r1, r3
 8018708:	6878      	ldr	r0, [r7, #4]
 801870a:	f7f6 fcf7 	bl	800f0fc <pbuf_remove_header>
 801870e:	4603      	mov	r3, r0
 8018710:	2b00      	cmp	r3, #0
 8018712:	d006      	beq.n	8018722 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018714:	4b2e      	ldr	r3, [pc, #184]	; (80187d0 <icmp_input+0x1f8>)
 8018716:	22c7      	movs	r2, #199	; 0xc7
 8018718:	4930      	ldr	r1, [pc, #192]	; (80187dc <icmp_input+0x204>)
 801871a:	482f      	ldr	r0, [pc, #188]	; (80187d8 <icmp_input+0x200>)
 801871c:	f002 f9fc 	bl	801ab18 <iprintf>
          goto icmperr;
 8018720:	e04b      	b.n	80187ba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	685b      	ldr	r3, [r3, #4]
 8018726:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801872a:	4619      	mov	r1, r3
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	f7f6 fcd5 	bl	800f0dc <pbuf_add_header>
 8018732:	4603      	mov	r3, r0
 8018734:	2b00      	cmp	r3, #0
 8018736:	d12b      	bne.n	8018790 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	685b      	ldr	r3, [r3, #4]
 801873c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	681a      	ldr	r2, [r3, #0]
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018746:	4b20      	ldr	r3, [pc, #128]	; (80187c8 <icmp_input+0x1f0>)
 8018748:	691a      	ldr	r2, [r3, #16]
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	2200      	movs	r2, #0
 8018752:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018754:	693b      	ldr	r3, [r7, #16]
 8018756:	2200      	movs	r2, #0
 8018758:	709a      	strb	r2, [r3, #2]
 801875a:	2200      	movs	r2, #0
 801875c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	22ff      	movs	r2, #255	; 0xff
 8018762:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	2200      	movs	r2, #0
 8018768:	729a      	strb	r2, [r3, #10]
 801876a:	2200      	movs	r2, #0
 801876c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801876e:	683b      	ldr	r3, [r7, #0]
 8018770:	9302      	str	r3, [sp, #8]
 8018772:	2301      	movs	r3, #1
 8018774:	9301      	str	r3, [sp, #4]
 8018776:	2300      	movs	r3, #0
 8018778:	9300      	str	r3, [sp, #0]
 801877a:	23ff      	movs	r3, #255	; 0xff
 801877c:	2200      	movs	r2, #0
 801877e:	69f9      	ldr	r1, [r7, #28]
 8018780:	6878      	ldr	r0, [r7, #4]
 8018782:	f000 fa93 	bl	8018cac <ip4_output_if>
 8018786:	4603      	mov	r3, r0
 8018788:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801878a:	e001      	b.n	8018790 <icmp_input+0x1b8>
      break;
 801878c:	bf00      	nop
 801878e:	e000      	b.n	8018792 <icmp_input+0x1ba>
      break;
 8018790:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018792:	6878      	ldr	r0, [r7, #4]
 8018794:	f7f6 fd38 	bl	800f208 <pbuf_free>
  return;
 8018798:	e013      	b.n	80187c2 <icmp_input+0x1ea>
    goto lenerr;
 801879a:	bf00      	nop
 801879c:	e002      	b.n	80187a4 <icmp_input+0x1cc>
    goto lenerr;
 801879e:	bf00      	nop
 80187a0:	e000      	b.n	80187a4 <icmp_input+0x1cc>
        goto lenerr;
 80187a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80187a4:	6878      	ldr	r0, [r7, #4]
 80187a6:	f7f6 fd2f 	bl	800f208 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80187aa:	e00a      	b.n	80187c2 <icmp_input+0x1ea>
        goto icmperr;
 80187ac:	bf00      	nop
 80187ae:	e004      	b.n	80187ba <icmp_input+0x1e2>
        goto icmperr;
 80187b0:	bf00      	nop
 80187b2:	e002      	b.n	80187ba <icmp_input+0x1e2>
          goto icmperr;
 80187b4:	bf00      	nop
 80187b6:	e000      	b.n	80187ba <icmp_input+0x1e2>
          goto icmperr;
 80187b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80187ba:	6878      	ldr	r0, [r7, #4]
 80187bc:	f7f6 fd24 	bl	800f208 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80187c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80187c2:	3728      	adds	r7, #40	; 0x28
 80187c4:	46bd      	mov	sp, r7
 80187c6:	bd80      	pop	{r7, pc}
 80187c8:	2000ab9c 	.word	0x2000ab9c
 80187cc:	2000abb0 	.word	0x2000abb0
 80187d0:	0801ee54 	.word	0x0801ee54
 80187d4:	0801ee8c 	.word	0x0801ee8c
 80187d8:	0801eec4 	.word	0x0801eec4
 80187dc:	0801eeec 	.word	0x0801eeec

080187e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b082      	sub	sp, #8
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	460b      	mov	r3, r1
 80187ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80187ec:	78fb      	ldrb	r3, [r7, #3]
 80187ee:	461a      	mov	r2, r3
 80187f0:	2103      	movs	r1, #3
 80187f2:	6878      	ldr	r0, [r7, #4]
 80187f4:	f000 f814 	bl	8018820 <icmp_send_response>
}
 80187f8:	bf00      	nop
 80187fa:	3708      	adds	r7, #8
 80187fc:	46bd      	mov	sp, r7
 80187fe:	bd80      	pop	{r7, pc}

08018800 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b082      	sub	sp, #8
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
 8018808:	460b      	mov	r3, r1
 801880a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801880c:	78fb      	ldrb	r3, [r7, #3]
 801880e:	461a      	mov	r2, r3
 8018810:	210b      	movs	r1, #11
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f000 f804 	bl	8018820 <icmp_send_response>
}
 8018818:	bf00      	nop
 801881a:	3708      	adds	r7, #8
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}

08018820 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b08c      	sub	sp, #48	; 0x30
 8018824:	af04      	add	r7, sp, #16
 8018826:	6078      	str	r0, [r7, #4]
 8018828:	460b      	mov	r3, r1
 801882a:	70fb      	strb	r3, [r7, #3]
 801882c:	4613      	mov	r3, r2
 801882e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018830:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018834:	2124      	movs	r1, #36	; 0x24
 8018836:	2022      	movs	r0, #34	; 0x22
 8018838:	f7f6 fa02 	bl	800ec40 <pbuf_alloc>
 801883c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801883e:	69fb      	ldr	r3, [r7, #28]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d04c      	beq.n	80188de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018844:	69fb      	ldr	r3, [r7, #28]
 8018846:	895b      	ldrh	r3, [r3, #10]
 8018848:	2b23      	cmp	r3, #35	; 0x23
 801884a:	d806      	bhi.n	801885a <icmp_send_response+0x3a>
 801884c:	4b26      	ldr	r3, [pc, #152]	; (80188e8 <icmp_send_response+0xc8>)
 801884e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018852:	4926      	ldr	r1, [pc, #152]	; (80188ec <icmp_send_response+0xcc>)
 8018854:	4826      	ldr	r0, [pc, #152]	; (80188f0 <icmp_send_response+0xd0>)
 8018856:	f002 f95f 	bl	801ab18 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	685b      	ldr	r3, [r3, #4]
 801885e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018860:	69fb      	ldr	r3, [r7, #28]
 8018862:	685b      	ldr	r3, [r3, #4]
 8018864:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018866:	697b      	ldr	r3, [r7, #20]
 8018868:	78fa      	ldrb	r2, [r7, #3]
 801886a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801886c:	697b      	ldr	r3, [r7, #20]
 801886e:	78ba      	ldrb	r2, [r7, #2]
 8018870:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018872:	697b      	ldr	r3, [r7, #20]
 8018874:	2200      	movs	r2, #0
 8018876:	711a      	strb	r2, [r3, #4]
 8018878:	2200      	movs	r2, #0
 801887a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801887c:	697b      	ldr	r3, [r7, #20]
 801887e:	2200      	movs	r2, #0
 8018880:	719a      	strb	r2, [r3, #6]
 8018882:	2200      	movs	r2, #0
 8018884:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018886:	69fb      	ldr	r3, [r7, #28]
 8018888:	685b      	ldr	r3, [r3, #4]
 801888a:	f103 0008 	add.w	r0, r3, #8
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	685b      	ldr	r3, [r3, #4]
 8018892:	221c      	movs	r2, #28
 8018894:	4619      	mov	r1, r3
 8018896:	f002 fa76 	bl	801ad86 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801889a:	69bb      	ldr	r3, [r7, #24]
 801889c:	68db      	ldr	r3, [r3, #12]
 801889e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80188a0:	f107 030c 	add.w	r3, r7, #12
 80188a4:	4618      	mov	r0, r3
 80188a6:	f000 f825 	bl	80188f4 <ip4_route>
 80188aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80188ac:	693b      	ldr	r3, [r7, #16]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d011      	beq.n	80188d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	2200      	movs	r2, #0
 80188b6:	709a      	strb	r2, [r3, #2]
 80188b8:	2200      	movs	r2, #0
 80188ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80188bc:	f107 020c 	add.w	r2, r7, #12
 80188c0:	693b      	ldr	r3, [r7, #16]
 80188c2:	9302      	str	r3, [sp, #8]
 80188c4:	2301      	movs	r3, #1
 80188c6:	9301      	str	r3, [sp, #4]
 80188c8:	2300      	movs	r3, #0
 80188ca:	9300      	str	r3, [sp, #0]
 80188cc:	23ff      	movs	r3, #255	; 0xff
 80188ce:	2100      	movs	r1, #0
 80188d0:	69f8      	ldr	r0, [r7, #28]
 80188d2:	f000 f9eb 	bl	8018cac <ip4_output_if>
  }
  pbuf_free(q);
 80188d6:	69f8      	ldr	r0, [r7, #28]
 80188d8:	f7f6 fc96 	bl	800f208 <pbuf_free>
 80188dc:	e000      	b.n	80188e0 <icmp_send_response+0xc0>
    return;
 80188de:	bf00      	nop
}
 80188e0:	3720      	adds	r7, #32
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd80      	pop	{r7, pc}
 80188e6:	bf00      	nop
 80188e8:	0801ee54 	.word	0x0801ee54
 80188ec:	0801ef20 	.word	0x0801ef20
 80188f0:	0801eec4 	.word	0x0801eec4

080188f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80188f4:	b480      	push	{r7}
 80188f6:	b085      	sub	sp, #20
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80188fc:	4b33      	ldr	r3, [pc, #204]	; (80189cc <ip4_route+0xd8>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	60fb      	str	r3, [r7, #12]
 8018902:	e036      	b.n	8018972 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801890a:	f003 0301 	and.w	r3, r3, #1
 801890e:	b2db      	uxtb	r3, r3
 8018910:	2b00      	cmp	r3, #0
 8018912:	d02b      	beq.n	801896c <ip4_route+0x78>
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801891a:	089b      	lsrs	r3, r3, #2
 801891c:	f003 0301 	and.w	r3, r3, #1
 8018920:	b2db      	uxtb	r3, r3
 8018922:	2b00      	cmp	r3, #0
 8018924:	d022      	beq.n	801896c <ip4_route+0x78>
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	3304      	adds	r3, #4
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d01d      	beq.n	801896c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	681a      	ldr	r2, [r3, #0]
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	3304      	adds	r3, #4
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	405a      	eors	r2, r3
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	3308      	adds	r3, #8
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	4013      	ands	r3, r2
 8018944:	2b00      	cmp	r3, #0
 8018946:	d101      	bne.n	801894c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	e038      	b.n	80189be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018952:	f003 0302 	and.w	r3, r3, #2
 8018956:	2b00      	cmp	r3, #0
 8018958:	d108      	bne.n	801896c <ip4_route+0x78>
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	681a      	ldr	r2, [r3, #0]
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	330c      	adds	r3, #12
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	429a      	cmp	r2, r3
 8018966:	d101      	bne.n	801896c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	e028      	b.n	80189be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	60fb      	str	r3, [r7, #12]
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	2b00      	cmp	r3, #0
 8018976:	d1c5      	bne.n	8018904 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018978:	4b15      	ldr	r3, [pc, #84]	; (80189d0 <ip4_route+0xdc>)
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d01a      	beq.n	80189b6 <ip4_route+0xc2>
 8018980:	4b13      	ldr	r3, [pc, #76]	; (80189d0 <ip4_route+0xdc>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018988:	f003 0301 	and.w	r3, r3, #1
 801898c:	2b00      	cmp	r3, #0
 801898e:	d012      	beq.n	80189b6 <ip4_route+0xc2>
 8018990:	4b0f      	ldr	r3, [pc, #60]	; (80189d0 <ip4_route+0xdc>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018998:	f003 0304 	and.w	r3, r3, #4
 801899c:	2b00      	cmp	r3, #0
 801899e:	d00a      	beq.n	80189b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80189a0:	4b0b      	ldr	r3, [pc, #44]	; (80189d0 <ip4_route+0xdc>)
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	3304      	adds	r3, #4
 80189a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d004      	beq.n	80189b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	b2db      	uxtb	r3, r3
 80189b2:	2b7f      	cmp	r3, #127	; 0x7f
 80189b4:	d101      	bne.n	80189ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80189b6:	2300      	movs	r3, #0
 80189b8:	e001      	b.n	80189be <ip4_route+0xca>
  }

  return netif_default;
 80189ba:	4b05      	ldr	r3, [pc, #20]	; (80189d0 <ip4_route+0xdc>)
 80189bc:	681b      	ldr	r3, [r3, #0]
}
 80189be:	4618      	mov	r0, r3
 80189c0:	3714      	adds	r7, #20
 80189c2:	46bd      	mov	sp, r7
 80189c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c8:	4770      	bx	lr
 80189ca:	bf00      	nop
 80189cc:	20012270 	.word	0x20012270
 80189d0:	20012274 	.word	0x20012274

080189d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b082      	sub	sp, #8
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80189e2:	f003 0301 	and.w	r3, r3, #1
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d016      	beq.n	8018a1a <ip4_input_accept+0x46>
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	3304      	adds	r3, #4
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d011      	beq.n	8018a1a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80189f6:	4b0b      	ldr	r3, [pc, #44]	; (8018a24 <ip4_input_accept+0x50>)
 80189f8:	695a      	ldr	r2, [r3, #20]
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	3304      	adds	r3, #4
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	429a      	cmp	r2, r3
 8018a02:	d008      	beq.n	8018a16 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018a04:	4b07      	ldr	r3, [pc, #28]	; (8018a24 <ip4_input_accept+0x50>)
 8018a06:	695b      	ldr	r3, [r3, #20]
 8018a08:	6879      	ldr	r1, [r7, #4]
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f000 fa26 	bl	8018e5c <ip4_addr_isbroadcast_u32>
 8018a10:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d001      	beq.n	8018a1a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018a16:	2301      	movs	r3, #1
 8018a18:	e000      	b.n	8018a1c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018a1a:	2300      	movs	r3, #0
}
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	3708      	adds	r7, #8
 8018a20:	46bd      	mov	sp, r7
 8018a22:	bd80      	pop	{r7, pc}
 8018a24:	2000ab9c 	.word	0x2000ab9c

08018a28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018a28:	b580      	push	{r7, lr}
 8018a2a:	b088      	sub	sp, #32
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
 8018a30:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018a32:	2301      	movs	r3, #1
 8018a34:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	685b      	ldr	r3, [r3, #4]
 8018a3a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8018a3c:	69fb      	ldr	r3, [r7, #28]
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	091b      	lsrs	r3, r3, #4
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	2b04      	cmp	r3, #4
 8018a46:	d004      	beq.n	8018a52 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018a48:	6878      	ldr	r0, [r7, #4]
 8018a4a:	f7f6 fbdd 	bl	800f208 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018a4e:	2300      	movs	r3, #0
 8018a50:	e123      	b.n	8018c9a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018a52:	69fb      	ldr	r3, [r7, #28]
 8018a54:	781b      	ldrb	r3, [r3, #0]
 8018a56:	f003 030f 	and.w	r3, r3, #15
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	009b      	lsls	r3, r3, #2
 8018a5e:	b2db      	uxtb	r3, r3
 8018a60:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018a62:	69fb      	ldr	r3, [r7, #28]
 8018a64:	885b      	ldrh	r3, [r3, #2]
 8018a66:	b29b      	uxth	r3, r3
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f7f4 fd49 	bl	800d500 <lwip_htons>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	891b      	ldrh	r3, [r3, #8]
 8018a76:	8a3a      	ldrh	r2, [r7, #16]
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	d204      	bcs.n	8018a86 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018a7c:	8a3b      	ldrh	r3, [r7, #16]
 8018a7e:	4619      	mov	r1, r3
 8018a80:	6878      	ldr	r0, [r7, #4]
 8018a82:	f7f6 fa3b 	bl	800eefc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	895b      	ldrh	r3, [r3, #10]
 8018a8a:	8a7a      	ldrh	r2, [r7, #18]
 8018a8c:	429a      	cmp	r2, r3
 8018a8e:	d807      	bhi.n	8018aa0 <ip4_input+0x78>
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	891b      	ldrh	r3, [r3, #8]
 8018a94:	8a3a      	ldrh	r2, [r7, #16]
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d802      	bhi.n	8018aa0 <ip4_input+0x78>
 8018a9a:	8a7b      	ldrh	r3, [r7, #18]
 8018a9c:	2b13      	cmp	r3, #19
 8018a9e:	d804      	bhi.n	8018aaa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	f7f6 fbb1 	bl	800f208 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	e0f7      	b.n	8018c9a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018aaa:	69fb      	ldr	r3, [r7, #28]
 8018aac:	691b      	ldr	r3, [r3, #16]
 8018aae:	4a7d      	ldr	r2, [pc, #500]	; (8018ca4 <ip4_input+0x27c>)
 8018ab0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018ab2:	69fb      	ldr	r3, [r7, #28]
 8018ab4:	68db      	ldr	r3, [r3, #12]
 8018ab6:	4a7b      	ldr	r2, [pc, #492]	; (8018ca4 <ip4_input+0x27c>)
 8018ab8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018aba:	4b7a      	ldr	r3, [pc, #488]	; (8018ca4 <ip4_input+0x27c>)
 8018abc:	695b      	ldr	r3, [r3, #20]
 8018abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ac2:	2be0      	cmp	r3, #224	; 0xe0
 8018ac4:	d112      	bne.n	8018aec <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018ac6:	683b      	ldr	r3, [r7, #0]
 8018ac8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018acc:	f003 0301 	and.w	r3, r3, #1
 8018ad0:	b2db      	uxtb	r3, r3
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d007      	beq.n	8018ae6 <ip4_input+0xbe>
 8018ad6:	683b      	ldr	r3, [r7, #0]
 8018ad8:	3304      	adds	r3, #4
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d002      	beq.n	8018ae6 <ip4_input+0xbe>
      netif = inp;
 8018ae0:	683b      	ldr	r3, [r7, #0]
 8018ae2:	61bb      	str	r3, [r7, #24]
 8018ae4:	e02a      	b.n	8018b3c <ip4_input+0x114>
    } else {
      netif = NULL;
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	61bb      	str	r3, [r7, #24]
 8018aea:	e027      	b.n	8018b3c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018aec:	6838      	ldr	r0, [r7, #0]
 8018aee:	f7ff ff71 	bl	80189d4 <ip4_input_accept>
 8018af2:	4603      	mov	r3, r0
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d002      	beq.n	8018afe <ip4_input+0xd6>
      netif = inp;
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	61bb      	str	r3, [r7, #24]
 8018afc:	e01e      	b.n	8018b3c <ip4_input+0x114>
    } else {
      netif = NULL;
 8018afe:	2300      	movs	r3, #0
 8018b00:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018b02:	4b68      	ldr	r3, [pc, #416]	; (8018ca4 <ip4_input+0x27c>)
 8018b04:	695b      	ldr	r3, [r3, #20]
 8018b06:	b2db      	uxtb	r3, r3
 8018b08:	2b7f      	cmp	r3, #127	; 0x7f
 8018b0a:	d017      	beq.n	8018b3c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018b0c:	4b66      	ldr	r3, [pc, #408]	; (8018ca8 <ip4_input+0x280>)
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	61bb      	str	r3, [r7, #24]
 8018b12:	e00e      	b.n	8018b32 <ip4_input+0x10a>
          if (netif == inp) {
 8018b14:	69ba      	ldr	r2, [r7, #24]
 8018b16:	683b      	ldr	r3, [r7, #0]
 8018b18:	429a      	cmp	r2, r3
 8018b1a:	d006      	beq.n	8018b2a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018b1c:	69b8      	ldr	r0, [r7, #24]
 8018b1e:	f7ff ff59 	bl	80189d4 <ip4_input_accept>
 8018b22:	4603      	mov	r3, r0
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d108      	bne.n	8018b3a <ip4_input+0x112>
 8018b28:	e000      	b.n	8018b2c <ip4_input+0x104>
            continue;
 8018b2a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018b2c:	69bb      	ldr	r3, [r7, #24]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	61bb      	str	r3, [r7, #24]
 8018b32:	69bb      	ldr	r3, [r7, #24]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d1ed      	bne.n	8018b14 <ip4_input+0xec>
 8018b38:	e000      	b.n	8018b3c <ip4_input+0x114>
            break;
 8018b3a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018b3c:	69bb      	ldr	r3, [r7, #24]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d111      	bne.n	8018b66 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018b42:	69fb      	ldr	r3, [r7, #28]
 8018b44:	7a5b      	ldrb	r3, [r3, #9]
 8018b46:	2b11      	cmp	r3, #17
 8018b48:	d10d      	bne.n	8018b66 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018b4a:	8a7b      	ldrh	r3, [r7, #18]
 8018b4c:	69fa      	ldr	r2, [r7, #28]
 8018b4e:	4413      	add	r3, r2
 8018b50:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	885b      	ldrh	r3, [r3, #2]
 8018b56:	b29b      	uxth	r3, r3
 8018b58:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018b5c:	d103      	bne.n	8018b66 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8018b5e:	683b      	ldr	r3, [r7, #0]
 8018b60:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8018b62:	2300      	movs	r3, #0
 8018b64:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018b66:	697b      	ldr	r3, [r7, #20]
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d017      	beq.n	8018b9c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018b6c:	4b4d      	ldr	r3, [pc, #308]	; (8018ca4 <ip4_input+0x27c>)
 8018b6e:	691b      	ldr	r3, [r3, #16]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d013      	beq.n	8018b9c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018b74:	4b4b      	ldr	r3, [pc, #300]	; (8018ca4 <ip4_input+0x27c>)
 8018b76:	691b      	ldr	r3, [r3, #16]
 8018b78:	6839      	ldr	r1, [r7, #0]
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	f000 f96e 	bl	8018e5c <ip4_addr_isbroadcast_u32>
 8018b80:	4603      	mov	r3, r0
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d105      	bne.n	8018b92 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018b86:	4b47      	ldr	r3, [pc, #284]	; (8018ca4 <ip4_input+0x27c>)
 8018b88:	691b      	ldr	r3, [r3, #16]
 8018b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018b8e:	2be0      	cmp	r3, #224	; 0xe0
 8018b90:	d104      	bne.n	8018b9c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018b92:	6878      	ldr	r0, [r7, #4]
 8018b94:	f7f6 fb38 	bl	800f208 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	e07e      	b.n	8018c9a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018b9c:	69bb      	ldr	r3, [r7, #24]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d104      	bne.n	8018bac <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018ba2:	6878      	ldr	r0, [r7, #4]
 8018ba4:	f7f6 fb30 	bl	800f208 <pbuf_free>
    return ERR_OK;
 8018ba8:	2300      	movs	r3, #0
 8018baa:	e076      	b.n	8018c9a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018bac:	69fb      	ldr	r3, [r7, #28]
 8018bae:	88db      	ldrh	r3, [r3, #6]
 8018bb0:	b29b      	uxth	r3, r3
 8018bb2:	461a      	mov	r2, r3
 8018bb4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018bb8:	4013      	ands	r3, r2
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d00b      	beq.n	8018bd6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018bbe:	6878      	ldr	r0, [r7, #4]
 8018bc0:	f000 fc92 	bl	80194e8 <ip4_reass>
 8018bc4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d101      	bne.n	8018bd0 <ip4_input+0x1a8>
      return ERR_OK;
 8018bcc:	2300      	movs	r3, #0
 8018bce:	e064      	b.n	8018c9a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	685b      	ldr	r3, [r3, #4]
 8018bd4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018bd6:	4a33      	ldr	r2, [pc, #204]	; (8018ca4 <ip4_input+0x27c>)
 8018bd8:	69bb      	ldr	r3, [r7, #24]
 8018bda:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018bdc:	4a31      	ldr	r2, [pc, #196]	; (8018ca4 <ip4_input+0x27c>)
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018be2:	4a30      	ldr	r2, [pc, #192]	; (8018ca4 <ip4_input+0x27c>)
 8018be4:	69fb      	ldr	r3, [r7, #28]
 8018be6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018be8:	69fb      	ldr	r3, [r7, #28]
 8018bea:	781b      	ldrb	r3, [r3, #0]
 8018bec:	f003 030f 	and.w	r3, r3, #15
 8018bf0:	b2db      	uxtb	r3, r3
 8018bf2:	009b      	lsls	r3, r3, #2
 8018bf4:	b2db      	uxtb	r3, r3
 8018bf6:	b29a      	uxth	r2, r3
 8018bf8:	4b2a      	ldr	r3, [pc, #168]	; (8018ca4 <ip4_input+0x27c>)
 8018bfa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018bfc:	8a7b      	ldrh	r3, [r7, #18]
 8018bfe:	4619      	mov	r1, r3
 8018c00:	6878      	ldr	r0, [r7, #4]
 8018c02:	f7f6 fa7b 	bl	800f0fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018c06:	69fb      	ldr	r3, [r7, #28]
 8018c08:	7a5b      	ldrb	r3, [r3, #9]
 8018c0a:	2b11      	cmp	r3, #17
 8018c0c:	d006      	beq.n	8018c1c <ip4_input+0x1f4>
 8018c0e:	2b11      	cmp	r3, #17
 8018c10:	dc13      	bgt.n	8018c3a <ip4_input+0x212>
 8018c12:	2b01      	cmp	r3, #1
 8018c14:	d00c      	beq.n	8018c30 <ip4_input+0x208>
 8018c16:	2b06      	cmp	r3, #6
 8018c18:	d005      	beq.n	8018c26 <ip4_input+0x1fe>
 8018c1a:	e00e      	b.n	8018c3a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018c1c:	6839      	ldr	r1, [r7, #0]
 8018c1e:	6878      	ldr	r0, [r7, #4]
 8018c20:	f7fc fa7a 	bl	8015118 <udp_input>
        break;
 8018c24:	e026      	b.n	8018c74 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018c26:	6839      	ldr	r1, [r7, #0]
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f7f8 fa8b 	bl	8011144 <tcp_input>
        break;
 8018c2e:	e021      	b.n	8018c74 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018c30:	6839      	ldr	r1, [r7, #0]
 8018c32:	6878      	ldr	r0, [r7, #4]
 8018c34:	f7ff fcd0 	bl	80185d8 <icmp_input>
        break;
 8018c38:	e01c      	b.n	8018c74 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018c3a:	4b1a      	ldr	r3, [pc, #104]	; (8018ca4 <ip4_input+0x27c>)
 8018c3c:	695b      	ldr	r3, [r3, #20]
 8018c3e:	69b9      	ldr	r1, [r7, #24]
 8018c40:	4618      	mov	r0, r3
 8018c42:	f000 f90b 	bl	8018e5c <ip4_addr_isbroadcast_u32>
 8018c46:	4603      	mov	r3, r0
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d10f      	bne.n	8018c6c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018c4c:	4b15      	ldr	r3, [pc, #84]	; (8018ca4 <ip4_input+0x27c>)
 8018c4e:	695b      	ldr	r3, [r3, #20]
 8018c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018c54:	2be0      	cmp	r3, #224	; 0xe0
 8018c56:	d009      	beq.n	8018c6c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018c58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	f7f6 fabf 	bl	800f1e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018c64:	2102      	movs	r1, #2
 8018c66:	6878      	ldr	r0, [r7, #4]
 8018c68:	f7ff fdba 	bl	80187e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018c6c:	6878      	ldr	r0, [r7, #4]
 8018c6e:	f7f6 facb 	bl	800f208 <pbuf_free>
        break;
 8018c72:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018c74:	4b0b      	ldr	r3, [pc, #44]	; (8018ca4 <ip4_input+0x27c>)
 8018c76:	2200      	movs	r2, #0
 8018c78:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018c7a:	4b0a      	ldr	r3, [pc, #40]	; (8018ca4 <ip4_input+0x27c>)
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018c80:	4b08      	ldr	r3, [pc, #32]	; (8018ca4 <ip4_input+0x27c>)
 8018c82:	2200      	movs	r2, #0
 8018c84:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018c86:	4b07      	ldr	r3, [pc, #28]	; (8018ca4 <ip4_input+0x27c>)
 8018c88:	2200      	movs	r2, #0
 8018c8a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018c8c:	4b05      	ldr	r3, [pc, #20]	; (8018ca4 <ip4_input+0x27c>)
 8018c8e:	2200      	movs	r2, #0
 8018c90:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018c92:	4b04      	ldr	r3, [pc, #16]	; (8018ca4 <ip4_input+0x27c>)
 8018c94:	2200      	movs	r2, #0
 8018c96:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018c98:	2300      	movs	r3, #0
}
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	3720      	adds	r7, #32
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	bd80      	pop	{r7, pc}
 8018ca2:	bf00      	nop
 8018ca4:	2000ab9c 	.word	0x2000ab9c
 8018ca8:	20012270 	.word	0x20012270

08018cac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b08a      	sub	sp, #40	; 0x28
 8018cb0:	af04      	add	r7, sp, #16
 8018cb2:	60f8      	str	r0, [r7, #12]
 8018cb4:	60b9      	str	r1, [r7, #8]
 8018cb6:	607a      	str	r2, [r7, #4]
 8018cb8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018cba:	68bb      	ldr	r3, [r7, #8]
 8018cbc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d009      	beq.n	8018cd8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018cc4:	68bb      	ldr	r3, [r7, #8]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d003      	beq.n	8018cd2 <ip4_output_if+0x26>
 8018cca:	68bb      	ldr	r3, [r7, #8]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d102      	bne.n	8018cd8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cd4:	3304      	adds	r3, #4
 8018cd6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018cd8:	78fa      	ldrb	r2, [r7, #3]
 8018cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cdc:	9302      	str	r3, [sp, #8]
 8018cde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018ce2:	9301      	str	r3, [sp, #4]
 8018ce4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018ce8:	9300      	str	r3, [sp, #0]
 8018cea:	4613      	mov	r3, r2
 8018cec:	687a      	ldr	r2, [r7, #4]
 8018cee:	6979      	ldr	r1, [r7, #20]
 8018cf0:	68f8      	ldr	r0, [r7, #12]
 8018cf2:	f000 f805 	bl	8018d00 <ip4_output_if_src>
 8018cf6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	3718      	adds	r7, #24
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd80      	pop	{r7, pc}

08018d00 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b088      	sub	sp, #32
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	60f8      	str	r0, [r7, #12]
 8018d08:	60b9      	str	r1, [r7, #8]
 8018d0a:	607a      	str	r2, [r7, #4]
 8018d0c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	7b9b      	ldrb	r3, [r3, #14]
 8018d12:	2b01      	cmp	r3, #1
 8018d14:	d006      	beq.n	8018d24 <ip4_output_if_src+0x24>
 8018d16:	4b4b      	ldr	r3, [pc, #300]	; (8018e44 <ip4_output_if_src+0x144>)
 8018d18:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018d1c:	494a      	ldr	r1, [pc, #296]	; (8018e48 <ip4_output_if_src+0x148>)
 8018d1e:	484b      	ldr	r0, [pc, #300]	; (8018e4c <ip4_output_if_src+0x14c>)
 8018d20:	f001 fefa 	bl	801ab18 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d060      	beq.n	8018dec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018d2a:	2314      	movs	r3, #20
 8018d2c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018d2e:	2114      	movs	r1, #20
 8018d30:	68f8      	ldr	r0, [r7, #12]
 8018d32:	f7f6 f9d3 	bl	800f0dc <pbuf_add_header>
 8018d36:	4603      	mov	r3, r0
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d002      	beq.n	8018d42 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018d3c:	f06f 0301 	mvn.w	r3, #1
 8018d40:	e07c      	b.n	8018e3c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	685b      	ldr	r3, [r3, #4]
 8018d46:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	895b      	ldrh	r3, [r3, #10]
 8018d4c:	2b13      	cmp	r3, #19
 8018d4e:	d806      	bhi.n	8018d5e <ip4_output_if_src+0x5e>
 8018d50:	4b3c      	ldr	r3, [pc, #240]	; (8018e44 <ip4_output_if_src+0x144>)
 8018d52:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018d56:	493e      	ldr	r1, [pc, #248]	; (8018e50 <ip4_output_if_src+0x150>)
 8018d58:	483c      	ldr	r0, [pc, #240]	; (8018e4c <ip4_output_if_src+0x14c>)
 8018d5a:	f001 fedd 	bl	801ab18 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018d5e:	69fb      	ldr	r3, [r7, #28]
 8018d60:	78fa      	ldrb	r2, [r7, #3]
 8018d62:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018d64:	69fb      	ldr	r3, [r7, #28]
 8018d66:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018d6a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	681a      	ldr	r2, [r3, #0]
 8018d70:	69fb      	ldr	r3, [r7, #28]
 8018d72:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018d74:	8b7b      	ldrh	r3, [r7, #26]
 8018d76:	089b      	lsrs	r3, r3, #2
 8018d78:	b29b      	uxth	r3, r3
 8018d7a:	b2db      	uxtb	r3, r3
 8018d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d80:	b2da      	uxtb	r2, r3
 8018d82:	69fb      	ldr	r3, [r7, #28]
 8018d84:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018d86:	69fb      	ldr	r3, [r7, #28]
 8018d88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018d8c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	891b      	ldrh	r3, [r3, #8]
 8018d92:	4618      	mov	r0, r3
 8018d94:	f7f4 fbb4 	bl	800d500 <lwip_htons>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	461a      	mov	r2, r3
 8018d9c:	69fb      	ldr	r3, [r7, #28]
 8018d9e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018da0:	69fb      	ldr	r3, [r7, #28]
 8018da2:	2200      	movs	r2, #0
 8018da4:	719a      	strb	r2, [r3, #6]
 8018da6:	2200      	movs	r2, #0
 8018da8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018daa:	4b2a      	ldr	r3, [pc, #168]	; (8018e54 <ip4_output_if_src+0x154>)
 8018dac:	881b      	ldrh	r3, [r3, #0]
 8018dae:	4618      	mov	r0, r3
 8018db0:	f7f4 fba6 	bl	800d500 <lwip_htons>
 8018db4:	4603      	mov	r3, r0
 8018db6:	461a      	mov	r2, r3
 8018db8:	69fb      	ldr	r3, [r7, #28]
 8018dba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018dbc:	4b25      	ldr	r3, [pc, #148]	; (8018e54 <ip4_output_if_src+0x154>)
 8018dbe:	881b      	ldrh	r3, [r3, #0]
 8018dc0:	3301      	adds	r3, #1
 8018dc2:	b29a      	uxth	r2, r3
 8018dc4:	4b23      	ldr	r3, [pc, #140]	; (8018e54 <ip4_output_if_src+0x154>)
 8018dc6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d104      	bne.n	8018dd8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018dce:	4b22      	ldr	r3, [pc, #136]	; (8018e58 <ip4_output_if_src+0x158>)
 8018dd0:	681a      	ldr	r2, [r3, #0]
 8018dd2:	69fb      	ldr	r3, [r7, #28]
 8018dd4:	60da      	str	r2, [r3, #12]
 8018dd6:	e003      	b.n	8018de0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018dd8:	68bb      	ldr	r3, [r7, #8]
 8018dda:	681a      	ldr	r2, [r3, #0]
 8018ddc:	69fb      	ldr	r3, [r7, #28]
 8018dde:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018de0:	69fb      	ldr	r3, [r7, #28]
 8018de2:	2200      	movs	r2, #0
 8018de4:	729a      	strb	r2, [r3, #10]
 8018de6:	2200      	movs	r2, #0
 8018de8:	72da      	strb	r2, [r3, #11]
 8018dea:	e00f      	b.n	8018e0c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	895b      	ldrh	r3, [r3, #10]
 8018df0:	2b13      	cmp	r3, #19
 8018df2:	d802      	bhi.n	8018dfa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018df4:	f06f 0301 	mvn.w	r3, #1
 8018df8:	e020      	b.n	8018e3c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018e00:	69fb      	ldr	r3, [r7, #28]
 8018e02:	691b      	ldr	r3, [r3, #16]
 8018e04:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018e06:	f107 0314 	add.w	r3, r7, #20
 8018e0a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d00c      	beq.n	8018e2e <ip4_output_if_src+0x12e>
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	891a      	ldrh	r2, [r3, #8]
 8018e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e1c:	429a      	cmp	r2, r3
 8018e1e:	d906      	bls.n	8018e2e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018e20:	687a      	ldr	r2, [r7, #4]
 8018e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018e24:	68f8      	ldr	r0, [r7, #12]
 8018e26:	f000 fd53 	bl	80198d0 <ip4_frag>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	e006      	b.n	8018e3c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e30:	695b      	ldr	r3, [r3, #20]
 8018e32:	687a      	ldr	r2, [r7, #4]
 8018e34:	68f9      	ldr	r1, [r7, #12]
 8018e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e38:	4798      	blx	r3
 8018e3a:	4603      	mov	r3, r0
}
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	3720      	adds	r7, #32
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}
 8018e44:	0801ef4c 	.word	0x0801ef4c
 8018e48:	0801ef80 	.word	0x0801ef80
 8018e4c:	0801ef8c 	.word	0x0801ef8c
 8018e50:	0801efb4 	.word	0x0801efb4
 8018e54:	2001240e 	.word	0x2001240e
 8018e58:	0801f458 	.word	0x0801f458

08018e5c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018e5c:	b480      	push	{r7}
 8018e5e:	b085      	sub	sp, #20
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
 8018e64:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e70:	d002      	beq.n	8018e78 <ip4_addr_isbroadcast_u32+0x1c>
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d101      	bne.n	8018e7c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018e78:	2301      	movs	r3, #1
 8018e7a:	e02a      	b.n	8018ed2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018e82:	f003 0302 	and.w	r3, r3, #2
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d101      	bne.n	8018e8e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	e021      	b.n	8018ed2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018e8e:	683b      	ldr	r3, [r7, #0]
 8018e90:	3304      	adds	r3, #4
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	687a      	ldr	r2, [r7, #4]
 8018e96:	429a      	cmp	r2, r3
 8018e98:	d101      	bne.n	8018e9e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	e019      	b.n	8018ed2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018e9e:	68fa      	ldr	r2, [r7, #12]
 8018ea0:	683b      	ldr	r3, [r7, #0]
 8018ea2:	3304      	adds	r3, #4
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	405a      	eors	r2, r3
 8018ea8:	683b      	ldr	r3, [r7, #0]
 8018eaa:	3308      	adds	r3, #8
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	4013      	ands	r3, r2
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d10d      	bne.n	8018ed0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018eb4:	683b      	ldr	r3, [r7, #0]
 8018eb6:	3308      	adds	r3, #8
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	43da      	mvns	r2, r3
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018ec0:	683b      	ldr	r3, [r7, #0]
 8018ec2:	3308      	adds	r3, #8
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018ec8:	429a      	cmp	r2, r3
 8018eca:	d101      	bne.n	8018ed0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018ecc:	2301      	movs	r3, #1
 8018ece:	e000      	b.n	8018ed2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018ed0:	2300      	movs	r3, #0
  }
}
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	3714      	adds	r7, #20
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018edc:	4770      	bx	lr
	...

08018ee0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b084      	sub	sp, #16
 8018ee4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018eea:	4b12      	ldr	r3, [pc, #72]	; (8018f34 <ip_reass_tmr+0x54>)
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018ef0:	e018      	b.n	8018f24 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	7fdb      	ldrb	r3, [r3, #31]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d00b      	beq.n	8018f12 <ip_reass_tmr+0x32>
      r->timer--;
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	7fdb      	ldrb	r3, [r3, #31]
 8018efe:	3b01      	subs	r3, #1
 8018f00:	b2da      	uxtb	r2, r3
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	60fb      	str	r3, [r7, #12]
 8018f10:	e008      	b.n	8018f24 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018f1c:	68b9      	ldr	r1, [r7, #8]
 8018f1e:	6878      	ldr	r0, [r7, #4]
 8018f20:	f000 f80a 	bl	8018f38 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d1e3      	bne.n	8018ef2 <ip_reass_tmr+0x12>
    }
  }
}
 8018f2a:	bf00      	nop
 8018f2c:	bf00      	nop
 8018f2e:	3710      	adds	r7, #16
 8018f30:	46bd      	mov	sp, r7
 8018f32:	bd80      	pop	{r7, pc}
 8018f34:	20012410 	.word	0x20012410

08018f38 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b088      	sub	sp, #32
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018f42:	2300      	movs	r3, #0
 8018f44:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018f46:	683a      	ldr	r2, [r7, #0]
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	429a      	cmp	r2, r3
 8018f4c:	d105      	bne.n	8018f5a <ip_reass_free_complete_datagram+0x22>
 8018f4e:	4b45      	ldr	r3, [pc, #276]	; (8019064 <ip_reass_free_complete_datagram+0x12c>)
 8018f50:	22ab      	movs	r2, #171	; 0xab
 8018f52:	4945      	ldr	r1, [pc, #276]	; (8019068 <ip_reass_free_complete_datagram+0x130>)
 8018f54:	4845      	ldr	r0, [pc, #276]	; (801906c <ip_reass_free_complete_datagram+0x134>)
 8018f56:	f001 fddf 	bl	801ab18 <iprintf>
  if (prev != NULL) {
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d00a      	beq.n	8018f76 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018f60:	683b      	ldr	r3, [r7, #0]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	687a      	ldr	r2, [r7, #4]
 8018f66:	429a      	cmp	r2, r3
 8018f68:	d005      	beq.n	8018f76 <ip_reass_free_complete_datagram+0x3e>
 8018f6a:	4b3e      	ldr	r3, [pc, #248]	; (8019064 <ip_reass_free_complete_datagram+0x12c>)
 8018f6c:	22ad      	movs	r2, #173	; 0xad
 8018f6e:	4940      	ldr	r1, [pc, #256]	; (8019070 <ip_reass_free_complete_datagram+0x138>)
 8018f70:	483e      	ldr	r0, [pc, #248]	; (801906c <ip_reass_free_complete_datagram+0x134>)
 8018f72:	f001 fdd1 	bl	801ab18 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	685b      	ldr	r3, [r3, #4]
 8018f7a:	685b      	ldr	r3, [r3, #4]
 8018f7c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018f7e:	697b      	ldr	r3, [r7, #20]
 8018f80:	889b      	ldrh	r3, [r3, #4]
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d12a      	bne.n	8018fde <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	685b      	ldr	r3, [r3, #4]
 8018f8c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018f8e:	697b      	ldr	r3, [r7, #20]
 8018f90:	681a      	ldr	r2, [r3, #0]
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018f96:	69bb      	ldr	r3, [r7, #24]
 8018f98:	6858      	ldr	r0, [r3, #4]
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	3308      	adds	r3, #8
 8018f9e:	2214      	movs	r2, #20
 8018fa0:	4619      	mov	r1, r3
 8018fa2:	f001 fef0 	bl	801ad86 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018fa6:	2101      	movs	r1, #1
 8018fa8:	69b8      	ldr	r0, [r7, #24]
 8018faa:	f7ff fc29 	bl	8018800 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018fae:	69b8      	ldr	r0, [r7, #24]
 8018fb0:	f7f6 f9b8 	bl	800f324 <pbuf_clen>
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018fb8:	8bfa      	ldrh	r2, [r7, #30]
 8018fba:	8a7b      	ldrh	r3, [r7, #18]
 8018fbc:	4413      	add	r3, r2
 8018fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018fc2:	db05      	blt.n	8018fd0 <ip_reass_free_complete_datagram+0x98>
 8018fc4:	4b27      	ldr	r3, [pc, #156]	; (8019064 <ip_reass_free_complete_datagram+0x12c>)
 8018fc6:	22bc      	movs	r2, #188	; 0xbc
 8018fc8:	492a      	ldr	r1, [pc, #168]	; (8019074 <ip_reass_free_complete_datagram+0x13c>)
 8018fca:	4828      	ldr	r0, [pc, #160]	; (801906c <ip_reass_free_complete_datagram+0x134>)
 8018fcc:	f001 fda4 	bl	801ab18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018fd0:	8bfa      	ldrh	r2, [r7, #30]
 8018fd2:	8a7b      	ldrh	r3, [r7, #18]
 8018fd4:	4413      	add	r3, r2
 8018fd6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018fd8:	69b8      	ldr	r0, [r7, #24]
 8018fda:	f7f6 f915 	bl	800f208 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	685b      	ldr	r3, [r3, #4]
 8018fe2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018fe4:	e01f      	b.n	8019026 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018fe6:	69bb      	ldr	r3, [r7, #24]
 8018fe8:	685b      	ldr	r3, [r3, #4]
 8018fea:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018fec:	69bb      	ldr	r3, [r7, #24]
 8018fee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018ff0:	697b      	ldr	r3, [r7, #20]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018ff6:	68f8      	ldr	r0, [r7, #12]
 8018ff8:	f7f6 f994 	bl	800f324 <pbuf_clen>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019000:	8bfa      	ldrh	r2, [r7, #30]
 8019002:	8a7b      	ldrh	r3, [r7, #18]
 8019004:	4413      	add	r3, r2
 8019006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801900a:	db05      	blt.n	8019018 <ip_reass_free_complete_datagram+0xe0>
 801900c:	4b15      	ldr	r3, [pc, #84]	; (8019064 <ip_reass_free_complete_datagram+0x12c>)
 801900e:	22cc      	movs	r2, #204	; 0xcc
 8019010:	4918      	ldr	r1, [pc, #96]	; (8019074 <ip_reass_free_complete_datagram+0x13c>)
 8019012:	4816      	ldr	r0, [pc, #88]	; (801906c <ip_reass_free_complete_datagram+0x134>)
 8019014:	f001 fd80 	bl	801ab18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019018:	8bfa      	ldrh	r2, [r7, #30]
 801901a:	8a7b      	ldrh	r3, [r7, #18]
 801901c:	4413      	add	r3, r2
 801901e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019020:	68f8      	ldr	r0, [r7, #12]
 8019022:	f7f6 f8f1 	bl	800f208 <pbuf_free>
  while (p != NULL) {
 8019026:	69bb      	ldr	r3, [r7, #24]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d1dc      	bne.n	8018fe6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801902c:	6839      	ldr	r1, [r7, #0]
 801902e:	6878      	ldr	r0, [r7, #4]
 8019030:	f000 f8c2 	bl	80191b8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019034:	4b10      	ldr	r3, [pc, #64]	; (8019078 <ip_reass_free_complete_datagram+0x140>)
 8019036:	881b      	ldrh	r3, [r3, #0]
 8019038:	8bfa      	ldrh	r2, [r7, #30]
 801903a:	429a      	cmp	r2, r3
 801903c:	d905      	bls.n	801904a <ip_reass_free_complete_datagram+0x112>
 801903e:	4b09      	ldr	r3, [pc, #36]	; (8019064 <ip_reass_free_complete_datagram+0x12c>)
 8019040:	22d2      	movs	r2, #210	; 0xd2
 8019042:	490e      	ldr	r1, [pc, #56]	; (801907c <ip_reass_free_complete_datagram+0x144>)
 8019044:	4809      	ldr	r0, [pc, #36]	; (801906c <ip_reass_free_complete_datagram+0x134>)
 8019046:	f001 fd67 	bl	801ab18 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801904a:	4b0b      	ldr	r3, [pc, #44]	; (8019078 <ip_reass_free_complete_datagram+0x140>)
 801904c:	881a      	ldrh	r2, [r3, #0]
 801904e:	8bfb      	ldrh	r3, [r7, #30]
 8019050:	1ad3      	subs	r3, r2, r3
 8019052:	b29a      	uxth	r2, r3
 8019054:	4b08      	ldr	r3, [pc, #32]	; (8019078 <ip_reass_free_complete_datagram+0x140>)
 8019056:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019058:	8bfb      	ldrh	r3, [r7, #30]
}
 801905a:	4618      	mov	r0, r3
 801905c:	3720      	adds	r7, #32
 801905e:	46bd      	mov	sp, r7
 8019060:	bd80      	pop	{r7, pc}
 8019062:	bf00      	nop
 8019064:	0801efe4 	.word	0x0801efe4
 8019068:	0801f020 	.word	0x0801f020
 801906c:	0801f02c 	.word	0x0801f02c
 8019070:	0801f054 	.word	0x0801f054
 8019074:	0801f068 	.word	0x0801f068
 8019078:	20012414 	.word	0x20012414
 801907c:	0801f088 	.word	0x0801f088

08019080 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b08a      	sub	sp, #40	; 0x28
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
 8019088:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801908a:	2300      	movs	r3, #0
 801908c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801908e:	2300      	movs	r3, #0
 8019090:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019092:	2300      	movs	r3, #0
 8019094:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019096:	2300      	movs	r3, #0
 8019098:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801909a:	2300      	movs	r3, #0
 801909c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801909e:	4b28      	ldr	r3, [pc, #160]	; (8019140 <ip_reass_remove_oldest_datagram+0xc0>)
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80190a4:	e030      	b.n	8019108 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80190a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190a8:	695a      	ldr	r2, [r3, #20]
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	68db      	ldr	r3, [r3, #12]
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d10c      	bne.n	80190cc <ip_reass_remove_oldest_datagram+0x4c>
 80190b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190b4:	699a      	ldr	r2, [r3, #24]
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	691b      	ldr	r3, [r3, #16]
 80190ba:	429a      	cmp	r2, r3
 80190bc:	d106      	bne.n	80190cc <ip_reass_remove_oldest_datagram+0x4c>
 80190be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c0:	899a      	ldrh	r2, [r3, #12]
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	889b      	ldrh	r3, [r3, #4]
 80190c6:	b29b      	uxth	r3, r3
 80190c8:	429a      	cmp	r2, r3
 80190ca:	d014      	beq.n	80190f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80190cc:	693b      	ldr	r3, [r7, #16]
 80190ce:	3301      	adds	r3, #1
 80190d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80190d2:	6a3b      	ldr	r3, [r7, #32]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d104      	bne.n	80190e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80190d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80190dc:	69fb      	ldr	r3, [r7, #28]
 80190de:	61bb      	str	r3, [r7, #24]
 80190e0:	e009      	b.n	80190f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80190e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190e4:	7fda      	ldrb	r2, [r3, #31]
 80190e6:	6a3b      	ldr	r3, [r7, #32]
 80190e8:	7fdb      	ldrb	r3, [r3, #31]
 80190ea:	429a      	cmp	r2, r3
 80190ec:	d803      	bhi.n	80190f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80190ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80190f2:	69fb      	ldr	r3, [r7, #28]
 80190f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80190f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d001      	beq.n	8019102 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80190fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019100:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801910a:	2b00      	cmp	r3, #0
 801910c:	d1cb      	bne.n	80190a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801910e:	6a3b      	ldr	r3, [r7, #32]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d008      	beq.n	8019126 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019114:	69b9      	ldr	r1, [r7, #24]
 8019116:	6a38      	ldr	r0, [r7, #32]
 8019118:	f7ff ff0e 	bl	8018f38 <ip_reass_free_complete_datagram>
 801911c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801911e:	697a      	ldr	r2, [r7, #20]
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	4413      	add	r3, r2
 8019124:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019126:	697a      	ldr	r2, [r7, #20]
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	429a      	cmp	r2, r3
 801912c:	da02      	bge.n	8019134 <ip_reass_remove_oldest_datagram+0xb4>
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	2b01      	cmp	r3, #1
 8019132:	dcac      	bgt.n	801908e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019134:	697b      	ldr	r3, [r7, #20]
}
 8019136:	4618      	mov	r0, r3
 8019138:	3728      	adds	r7, #40	; 0x28
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
 801913e:	bf00      	nop
 8019140:	20012410 	.word	0x20012410

08019144 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b084      	sub	sp, #16
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
 801914c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801914e:	2004      	movs	r0, #4
 8019150:	f7f5 f99c 	bl	800e48c <memp_malloc>
 8019154:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d110      	bne.n	801917e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801915c:	6839      	ldr	r1, [r7, #0]
 801915e:	6878      	ldr	r0, [r7, #4]
 8019160:	f7ff ff8e 	bl	8019080 <ip_reass_remove_oldest_datagram>
 8019164:	4602      	mov	r2, r0
 8019166:	683b      	ldr	r3, [r7, #0]
 8019168:	4293      	cmp	r3, r2
 801916a:	dc03      	bgt.n	8019174 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801916c:	2004      	movs	r0, #4
 801916e:	f7f5 f98d 	bl	800e48c <memp_malloc>
 8019172:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d101      	bne.n	801917e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801917a:	2300      	movs	r3, #0
 801917c:	e016      	b.n	80191ac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801917e:	2220      	movs	r2, #32
 8019180:	2100      	movs	r1, #0
 8019182:	68f8      	ldr	r0, [r7, #12]
 8019184:	f001 fd2d 	bl	801abe2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	220f      	movs	r2, #15
 801918c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801918e:	4b09      	ldr	r3, [pc, #36]	; (80191b4 <ip_reass_enqueue_new_datagram+0x70>)
 8019190:	681a      	ldr	r2, [r3, #0]
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019196:	4a07      	ldr	r2, [pc, #28]	; (80191b4 <ip_reass_enqueue_new_datagram+0x70>)
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	3308      	adds	r3, #8
 80191a0:	2214      	movs	r2, #20
 80191a2:	6879      	ldr	r1, [r7, #4]
 80191a4:	4618      	mov	r0, r3
 80191a6:	f001 fdee 	bl	801ad86 <memcpy>
  return ipr;
 80191aa:	68fb      	ldr	r3, [r7, #12]
}
 80191ac:	4618      	mov	r0, r3
 80191ae:	3710      	adds	r7, #16
 80191b0:	46bd      	mov	sp, r7
 80191b2:	bd80      	pop	{r7, pc}
 80191b4:	20012410 	.word	0x20012410

080191b8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b082      	sub	sp, #8
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80191c2:	4b10      	ldr	r3, [pc, #64]	; (8019204 <ip_reass_dequeue_datagram+0x4c>)
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	687a      	ldr	r2, [r7, #4]
 80191c8:	429a      	cmp	r2, r3
 80191ca:	d104      	bne.n	80191d6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	4a0c      	ldr	r2, [pc, #48]	; (8019204 <ip_reass_dequeue_datagram+0x4c>)
 80191d2:	6013      	str	r3, [r2, #0]
 80191d4:	e00d      	b.n	80191f2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80191d6:	683b      	ldr	r3, [r7, #0]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d106      	bne.n	80191ea <ip_reass_dequeue_datagram+0x32>
 80191dc:	4b0a      	ldr	r3, [pc, #40]	; (8019208 <ip_reass_dequeue_datagram+0x50>)
 80191de:	f240 1245 	movw	r2, #325	; 0x145
 80191e2:	490a      	ldr	r1, [pc, #40]	; (801920c <ip_reass_dequeue_datagram+0x54>)
 80191e4:	480a      	ldr	r0, [pc, #40]	; (8019210 <ip_reass_dequeue_datagram+0x58>)
 80191e6:	f001 fc97 	bl	801ab18 <iprintf>
    prev->next = ipr->next;
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	681a      	ldr	r2, [r3, #0]
 80191ee:	683b      	ldr	r3, [r7, #0]
 80191f0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80191f2:	6879      	ldr	r1, [r7, #4]
 80191f4:	2004      	movs	r0, #4
 80191f6:	f7f5 f9bf 	bl	800e578 <memp_free>
}
 80191fa:	bf00      	nop
 80191fc:	3708      	adds	r7, #8
 80191fe:	46bd      	mov	sp, r7
 8019200:	bd80      	pop	{r7, pc}
 8019202:	bf00      	nop
 8019204:	20012410 	.word	0x20012410
 8019208:	0801efe4 	.word	0x0801efe4
 801920c:	0801f0ac 	.word	0x0801f0ac
 8019210:	0801f02c 	.word	0x0801f02c

08019214 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b08c      	sub	sp, #48	; 0x30
 8019218:	af00      	add	r7, sp, #0
 801921a:	60f8      	str	r0, [r7, #12]
 801921c:	60b9      	str	r1, [r7, #8]
 801921e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019220:	2300      	movs	r3, #0
 8019222:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019224:	2301      	movs	r3, #1
 8019226:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019228:	68bb      	ldr	r3, [r7, #8]
 801922a:	685b      	ldr	r3, [r3, #4]
 801922c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801922e:	69fb      	ldr	r3, [r7, #28]
 8019230:	885b      	ldrh	r3, [r3, #2]
 8019232:	b29b      	uxth	r3, r3
 8019234:	4618      	mov	r0, r3
 8019236:	f7f4 f963 	bl	800d500 <lwip_htons>
 801923a:	4603      	mov	r3, r0
 801923c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801923e:	69fb      	ldr	r3, [r7, #28]
 8019240:	781b      	ldrb	r3, [r3, #0]
 8019242:	f003 030f 	and.w	r3, r3, #15
 8019246:	b2db      	uxtb	r3, r3
 8019248:	009b      	lsls	r3, r3, #2
 801924a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801924c:	7e7b      	ldrb	r3, [r7, #25]
 801924e:	b29b      	uxth	r3, r3
 8019250:	8b7a      	ldrh	r2, [r7, #26]
 8019252:	429a      	cmp	r2, r3
 8019254:	d202      	bcs.n	801925c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019256:	f04f 33ff 	mov.w	r3, #4294967295
 801925a:	e135      	b.n	80194c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801925c:	7e7b      	ldrb	r3, [r7, #25]
 801925e:	b29b      	uxth	r3, r3
 8019260:	8b7a      	ldrh	r2, [r7, #26]
 8019262:	1ad3      	subs	r3, r2, r3
 8019264:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019266:	69fb      	ldr	r3, [r7, #28]
 8019268:	88db      	ldrh	r3, [r3, #6]
 801926a:	b29b      	uxth	r3, r3
 801926c:	4618      	mov	r0, r3
 801926e:	f7f4 f947 	bl	800d500 <lwip_htons>
 8019272:	4603      	mov	r3, r0
 8019274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019278:	b29b      	uxth	r3, r3
 801927a:	00db      	lsls	r3, r3, #3
 801927c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801927e:	68bb      	ldr	r3, [r7, #8]
 8019280:	685b      	ldr	r3, [r3, #4]
 8019282:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019286:	2200      	movs	r2, #0
 8019288:	701a      	strb	r2, [r3, #0]
 801928a:	2200      	movs	r2, #0
 801928c:	705a      	strb	r2, [r3, #1]
 801928e:	2200      	movs	r2, #0
 8019290:	709a      	strb	r2, [r3, #2]
 8019292:	2200      	movs	r2, #0
 8019294:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019298:	8afa      	ldrh	r2, [r7, #22]
 801929a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801929c:	8afa      	ldrh	r2, [r7, #22]
 801929e:	8b7b      	ldrh	r3, [r7, #26]
 80192a0:	4413      	add	r3, r2
 80192a2:	b29a      	uxth	r2, r3
 80192a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192a6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80192a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192aa:	88db      	ldrh	r3, [r3, #6]
 80192ac:	b29b      	uxth	r3, r3
 80192ae:	8afa      	ldrh	r2, [r7, #22]
 80192b0:	429a      	cmp	r2, r3
 80192b2:	d902      	bls.n	80192ba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80192b4:	f04f 33ff 	mov.w	r3, #4294967295
 80192b8:	e106      	b.n	80194c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	685b      	ldr	r3, [r3, #4]
 80192be:	627b      	str	r3, [r7, #36]	; 0x24
 80192c0:	e068      	b.n	8019394 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80192c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c4:	685b      	ldr	r3, [r3, #4]
 80192c6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80192c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ca:	889b      	ldrh	r3, [r3, #4]
 80192cc:	b29a      	uxth	r2, r3
 80192ce:	693b      	ldr	r3, [r7, #16]
 80192d0:	889b      	ldrh	r3, [r3, #4]
 80192d2:	b29b      	uxth	r3, r3
 80192d4:	429a      	cmp	r2, r3
 80192d6:	d235      	bcs.n	8019344 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80192d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80192de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d020      	beq.n	8019326 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80192e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192e6:	889b      	ldrh	r3, [r3, #4]
 80192e8:	b29a      	uxth	r2, r3
 80192ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ec:	88db      	ldrh	r3, [r3, #6]
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	429a      	cmp	r2, r3
 80192f2:	d307      	bcc.n	8019304 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80192f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192f6:	88db      	ldrh	r3, [r3, #6]
 80192f8:	b29a      	uxth	r2, r3
 80192fa:	693b      	ldr	r3, [r7, #16]
 80192fc:	889b      	ldrh	r3, [r3, #4]
 80192fe:	b29b      	uxth	r3, r3
 8019300:	429a      	cmp	r2, r3
 8019302:	d902      	bls.n	801930a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019304:	f04f 33ff 	mov.w	r3, #4294967295
 8019308:	e0de      	b.n	80194c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801930c:	68ba      	ldr	r2, [r7, #8]
 801930e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019312:	88db      	ldrh	r3, [r3, #6]
 8019314:	b29a      	uxth	r2, r3
 8019316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019318:	889b      	ldrh	r3, [r3, #4]
 801931a:	b29b      	uxth	r3, r3
 801931c:	429a      	cmp	r2, r3
 801931e:	d03d      	beq.n	801939c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019320:	2300      	movs	r3, #0
 8019322:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019324:	e03a      	b.n	801939c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019328:	88db      	ldrh	r3, [r3, #6]
 801932a:	b29a      	uxth	r2, r3
 801932c:	693b      	ldr	r3, [r7, #16]
 801932e:	889b      	ldrh	r3, [r3, #4]
 8019330:	b29b      	uxth	r3, r3
 8019332:	429a      	cmp	r2, r3
 8019334:	d902      	bls.n	801933c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019336:	f04f 33ff 	mov.w	r3, #4294967295
 801933a:	e0c5      	b.n	80194c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	68ba      	ldr	r2, [r7, #8]
 8019340:	605a      	str	r2, [r3, #4]
      break;
 8019342:	e02b      	b.n	801939c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019346:	889b      	ldrh	r3, [r3, #4]
 8019348:	b29a      	uxth	r2, r3
 801934a:	693b      	ldr	r3, [r7, #16]
 801934c:	889b      	ldrh	r3, [r3, #4]
 801934e:	b29b      	uxth	r3, r3
 8019350:	429a      	cmp	r2, r3
 8019352:	d102      	bne.n	801935a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019354:	f04f 33ff 	mov.w	r3, #4294967295
 8019358:	e0b6      	b.n	80194c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801935c:	889b      	ldrh	r3, [r3, #4]
 801935e:	b29a      	uxth	r2, r3
 8019360:	693b      	ldr	r3, [r7, #16]
 8019362:	88db      	ldrh	r3, [r3, #6]
 8019364:	b29b      	uxth	r3, r3
 8019366:	429a      	cmp	r2, r3
 8019368:	d202      	bcs.n	8019370 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801936a:	f04f 33ff 	mov.w	r3, #4294967295
 801936e:	e0ab      	b.n	80194c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019372:	2b00      	cmp	r3, #0
 8019374:	d009      	beq.n	801938a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019378:	88db      	ldrh	r3, [r3, #6]
 801937a:	b29a      	uxth	r2, r3
 801937c:	693b      	ldr	r3, [r7, #16]
 801937e:	889b      	ldrh	r3, [r3, #4]
 8019380:	b29b      	uxth	r3, r3
 8019382:	429a      	cmp	r2, r3
 8019384:	d001      	beq.n	801938a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019386:	2300      	movs	r3, #0
 8019388:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801938a:	693b      	ldr	r3, [r7, #16]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019390:	693b      	ldr	r3, [r7, #16]
 8019392:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019396:	2b00      	cmp	r3, #0
 8019398:	d193      	bne.n	80192c2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801939a:	e000      	b.n	801939e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801939c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d12d      	bne.n	8019400 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80193a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d01c      	beq.n	80193e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80193aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ac:	88db      	ldrh	r3, [r3, #6]
 80193ae:	b29a      	uxth	r2, r3
 80193b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193b2:	889b      	ldrh	r3, [r3, #4]
 80193b4:	b29b      	uxth	r3, r3
 80193b6:	429a      	cmp	r2, r3
 80193b8:	d906      	bls.n	80193c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80193ba:	4b45      	ldr	r3, [pc, #276]	; (80194d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80193bc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80193c0:	4944      	ldr	r1, [pc, #272]	; (80194d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80193c2:	4845      	ldr	r0, [pc, #276]	; (80194d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80193c4:	f001 fba8 	bl	801ab18 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80193c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ca:	68ba      	ldr	r2, [r7, #8]
 80193cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80193ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d0:	88db      	ldrh	r3, [r3, #6]
 80193d2:	b29a      	uxth	r2, r3
 80193d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193d6:	889b      	ldrh	r3, [r3, #4]
 80193d8:	b29b      	uxth	r3, r3
 80193da:	429a      	cmp	r2, r3
 80193dc:	d010      	beq.n	8019400 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80193de:	2300      	movs	r3, #0
 80193e0:	623b      	str	r3, [r7, #32]
 80193e2:	e00d      	b.n	8019400 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	685b      	ldr	r3, [r3, #4]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d006      	beq.n	80193fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80193ec:	4b38      	ldr	r3, [pc, #224]	; (80194d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80193ee:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80193f2:	493a      	ldr	r1, [pc, #232]	; (80194dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80193f4:	4838      	ldr	r0, [pc, #224]	; (80194d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80193f6:	f001 fb8f 	bl	801ab18 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	68ba      	ldr	r2, [r7, #8]
 80193fe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d105      	bne.n	8019412 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	7f9b      	ldrb	r3, [r3, #30]
 801940a:	f003 0301 	and.w	r3, r3, #1
 801940e:	2b00      	cmp	r3, #0
 8019410:	d059      	beq.n	80194c6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019412:	6a3b      	ldr	r3, [r7, #32]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d04f      	beq.n	80194b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	685b      	ldr	r3, [r3, #4]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d006      	beq.n	801942e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	685b      	ldr	r3, [r3, #4]
 8019424:	685b      	ldr	r3, [r3, #4]
 8019426:	889b      	ldrh	r3, [r3, #4]
 8019428:	b29b      	uxth	r3, r3
 801942a:	2b00      	cmp	r3, #0
 801942c:	d002      	beq.n	8019434 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801942e:	2300      	movs	r3, #0
 8019430:	623b      	str	r3, [r7, #32]
 8019432:	e041      	b.n	80194b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019436:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801943e:	e012      	b.n	8019466 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019442:	685b      	ldr	r3, [r3, #4]
 8019444:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019448:	88db      	ldrh	r3, [r3, #6]
 801944a:	b29a      	uxth	r2, r3
 801944c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801944e:	889b      	ldrh	r3, [r3, #4]
 8019450:	b29b      	uxth	r3, r3
 8019452:	429a      	cmp	r2, r3
 8019454:	d002      	beq.n	801945c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019456:	2300      	movs	r3, #0
 8019458:	623b      	str	r3, [r7, #32]
            break;
 801945a:	e007      	b.n	801946c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801945e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019468:	2b00      	cmp	r3, #0
 801946a:	d1e9      	bne.n	8019440 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801946c:	6a3b      	ldr	r3, [r7, #32]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d022      	beq.n	80194b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	685b      	ldr	r3, [r3, #4]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d106      	bne.n	8019488 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801947a:	4b15      	ldr	r3, [pc, #84]	; (80194d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801947c:	f240 12df 	movw	r2, #479	; 0x1df
 8019480:	4917      	ldr	r1, [pc, #92]	; (80194e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019482:	4815      	ldr	r0, [pc, #84]	; (80194d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019484:	f001 fb48 	bl	801ab18 <iprintf>
          LWIP_ASSERT("sanity check",
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	685b      	ldr	r3, [r3, #4]
 801948c:	685b      	ldr	r3, [r3, #4]
 801948e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019490:	429a      	cmp	r2, r3
 8019492:	d106      	bne.n	80194a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019494:	4b0e      	ldr	r3, [pc, #56]	; (80194d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019496:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801949a:	4911      	ldr	r1, [pc, #68]	; (80194e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801949c:	480e      	ldr	r0, [pc, #56]	; (80194d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801949e:	f001 fb3b 	bl	801ab18 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80194a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d006      	beq.n	80194b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80194aa:	4b09      	ldr	r3, [pc, #36]	; (80194d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80194ac:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80194b0:	490c      	ldr	r1, [pc, #48]	; (80194e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80194b2:	4809      	ldr	r0, [pc, #36]	; (80194d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80194b4:	f001 fb30 	bl	801ab18 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80194b8:	6a3b      	ldr	r3, [r7, #32]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	bf14      	ite	ne
 80194be:	2301      	movne	r3, #1
 80194c0:	2300      	moveq	r3, #0
 80194c2:	b2db      	uxtb	r3, r3
 80194c4:	e000      	b.n	80194c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80194c6:	2300      	movs	r3, #0
}
 80194c8:	4618      	mov	r0, r3
 80194ca:	3730      	adds	r7, #48	; 0x30
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bd80      	pop	{r7, pc}
 80194d0:	0801efe4 	.word	0x0801efe4
 80194d4:	0801f0c8 	.word	0x0801f0c8
 80194d8:	0801f02c 	.word	0x0801f02c
 80194dc:	0801f0e8 	.word	0x0801f0e8
 80194e0:	0801f120 	.word	0x0801f120
 80194e4:	0801f130 	.word	0x0801f130

080194e8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b08e      	sub	sp, #56	; 0x38
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	685b      	ldr	r3, [r3, #4]
 80194f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80194f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f8:	781b      	ldrb	r3, [r3, #0]
 80194fa:	f003 030f 	and.w	r3, r3, #15
 80194fe:	b2db      	uxtb	r3, r3
 8019500:	009b      	lsls	r3, r3, #2
 8019502:	b2db      	uxtb	r3, r3
 8019504:	2b14      	cmp	r3, #20
 8019506:	f040 8171 	bne.w	80197ec <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801950c:	88db      	ldrh	r3, [r3, #6]
 801950e:	b29b      	uxth	r3, r3
 8019510:	4618      	mov	r0, r3
 8019512:	f7f3 fff5 	bl	800d500 <lwip_htons>
 8019516:	4603      	mov	r3, r0
 8019518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801951c:	b29b      	uxth	r3, r3
 801951e:	00db      	lsls	r3, r3, #3
 8019520:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019524:	885b      	ldrh	r3, [r3, #2]
 8019526:	b29b      	uxth	r3, r3
 8019528:	4618      	mov	r0, r3
 801952a:	f7f3 ffe9 	bl	800d500 <lwip_htons>
 801952e:	4603      	mov	r3, r0
 8019530:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019534:	781b      	ldrb	r3, [r3, #0]
 8019536:	f003 030f 	and.w	r3, r3, #15
 801953a:	b2db      	uxtb	r3, r3
 801953c:	009b      	lsls	r3, r3, #2
 801953e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019546:	b29b      	uxth	r3, r3
 8019548:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801954a:	429a      	cmp	r2, r3
 801954c:	f0c0 8150 	bcc.w	80197f0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019554:	b29b      	uxth	r3, r3
 8019556:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019558:	1ad3      	subs	r3, r2, r3
 801955a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801955c:	6878      	ldr	r0, [r7, #4]
 801955e:	f7f5 fee1 	bl	800f324 <pbuf_clen>
 8019562:	4603      	mov	r3, r0
 8019564:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019566:	4b8c      	ldr	r3, [pc, #560]	; (8019798 <ip4_reass+0x2b0>)
 8019568:	881b      	ldrh	r3, [r3, #0]
 801956a:	461a      	mov	r2, r3
 801956c:	8c3b      	ldrh	r3, [r7, #32]
 801956e:	4413      	add	r3, r2
 8019570:	2b0a      	cmp	r3, #10
 8019572:	dd10      	ble.n	8019596 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019574:	8c3b      	ldrh	r3, [r7, #32]
 8019576:	4619      	mov	r1, r3
 8019578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801957a:	f7ff fd81 	bl	8019080 <ip_reass_remove_oldest_datagram>
 801957e:	4603      	mov	r3, r0
 8019580:	2b00      	cmp	r3, #0
 8019582:	f000 8137 	beq.w	80197f4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019586:	4b84      	ldr	r3, [pc, #528]	; (8019798 <ip4_reass+0x2b0>)
 8019588:	881b      	ldrh	r3, [r3, #0]
 801958a:	461a      	mov	r2, r3
 801958c:	8c3b      	ldrh	r3, [r7, #32]
 801958e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019590:	2b0a      	cmp	r3, #10
 8019592:	f300 812f 	bgt.w	80197f4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019596:	4b81      	ldr	r3, [pc, #516]	; (801979c <ip4_reass+0x2b4>)
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	633b      	str	r3, [r7, #48]	; 0x30
 801959c:	e015      	b.n	80195ca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195a0:	695a      	ldr	r2, [r3, #20]
 80195a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195a4:	68db      	ldr	r3, [r3, #12]
 80195a6:	429a      	cmp	r2, r3
 80195a8:	d10c      	bne.n	80195c4 <ip4_reass+0xdc>
 80195aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195ac:	699a      	ldr	r2, [r3, #24]
 80195ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b0:	691b      	ldr	r3, [r3, #16]
 80195b2:	429a      	cmp	r2, r3
 80195b4:	d106      	bne.n	80195c4 <ip4_reass+0xdc>
 80195b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195b8:	899a      	ldrh	r2, [r3, #12]
 80195ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195bc:	889b      	ldrh	r3, [r3, #4]
 80195be:	b29b      	uxth	r3, r3
 80195c0:	429a      	cmp	r2, r3
 80195c2:	d006      	beq.n	80195d2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80195c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	633b      	str	r3, [r7, #48]	; 0x30
 80195ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d1e6      	bne.n	801959e <ip4_reass+0xb6>
 80195d0:	e000      	b.n	80195d4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80195d2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80195d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d109      	bne.n	80195ee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80195da:	8c3b      	ldrh	r3, [r7, #32]
 80195dc:	4619      	mov	r1, r3
 80195de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80195e0:	f7ff fdb0 	bl	8019144 <ip_reass_enqueue_new_datagram>
 80195e4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80195e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d11c      	bne.n	8019626 <ip4_reass+0x13e>
      goto nullreturn;
 80195ec:	e105      	b.n	80197fa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80195ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195f0:	88db      	ldrh	r3, [r3, #6]
 80195f2:	b29b      	uxth	r3, r3
 80195f4:	4618      	mov	r0, r3
 80195f6:	f7f3 ff83 	bl	800d500 <lwip_htons>
 80195fa:	4603      	mov	r3, r0
 80195fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019600:	2b00      	cmp	r3, #0
 8019602:	d110      	bne.n	8019626 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019606:	89db      	ldrh	r3, [r3, #14]
 8019608:	4618      	mov	r0, r3
 801960a:	f7f3 ff79 	bl	800d500 <lwip_htons>
 801960e:	4603      	mov	r3, r0
 8019610:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019614:	2b00      	cmp	r3, #0
 8019616:	d006      	beq.n	8019626 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801961a:	3308      	adds	r3, #8
 801961c:	2214      	movs	r2, #20
 801961e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019620:	4618      	mov	r0, r3
 8019622:	f001 fbb0 	bl	801ad86 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019628:	88db      	ldrh	r3, [r3, #6]
 801962a:	b29b      	uxth	r3, r3
 801962c:	f003 0320 	and.w	r3, r3, #32
 8019630:	2b00      	cmp	r3, #0
 8019632:	bf0c      	ite	eq
 8019634:	2301      	moveq	r3, #1
 8019636:	2300      	movne	r3, #0
 8019638:	b2db      	uxtb	r3, r3
 801963a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801963c:	69fb      	ldr	r3, [r7, #28]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d00e      	beq.n	8019660 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019642:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019646:	4413      	add	r3, r2
 8019648:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801964a:	8b7a      	ldrh	r2, [r7, #26]
 801964c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801964e:	429a      	cmp	r2, r3
 8019650:	f0c0 80a0 	bcc.w	8019794 <ip4_reass+0x2ac>
 8019654:	8b7b      	ldrh	r3, [r7, #26]
 8019656:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801965a:	4293      	cmp	r3, r2
 801965c:	f200 809a 	bhi.w	8019794 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019660:	69fa      	ldr	r2, [r7, #28]
 8019662:	6879      	ldr	r1, [r7, #4]
 8019664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019666:	f7ff fdd5 	bl	8019214 <ip_reass_chain_frag_into_datagram_and_validate>
 801966a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019672:	f000 809b 	beq.w	80197ac <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019676:	4b48      	ldr	r3, [pc, #288]	; (8019798 <ip4_reass+0x2b0>)
 8019678:	881a      	ldrh	r2, [r3, #0]
 801967a:	8c3b      	ldrh	r3, [r7, #32]
 801967c:	4413      	add	r3, r2
 801967e:	b29a      	uxth	r2, r3
 8019680:	4b45      	ldr	r3, [pc, #276]	; (8019798 <ip4_reass+0x2b0>)
 8019682:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019684:	69fb      	ldr	r3, [r7, #28]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d00d      	beq.n	80196a6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801968a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801968c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801968e:	4413      	add	r3, r2
 8019690:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019694:	8a7a      	ldrh	r2, [r7, #18]
 8019696:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801969a:	7f9b      	ldrb	r3, [r3, #30]
 801969c:	f043 0301 	orr.w	r3, r3, #1
 80196a0:	b2da      	uxtb	r2, r3
 80196a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196a4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80196a6:	697b      	ldr	r3, [r7, #20]
 80196a8:	2b01      	cmp	r3, #1
 80196aa:	d171      	bne.n	8019790 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80196ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196ae:	8b9b      	ldrh	r3, [r3, #28]
 80196b0:	3314      	adds	r3, #20
 80196b2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80196b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	685b      	ldr	r3, [r3, #4]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80196be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196c0:	685b      	ldr	r3, [r3, #4]
 80196c2:	685b      	ldr	r3, [r3, #4]
 80196c4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80196c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196c8:	3308      	adds	r3, #8
 80196ca:	2214      	movs	r2, #20
 80196cc:	4619      	mov	r1, r3
 80196ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80196d0:	f001 fb59 	bl	801ad86 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80196d4:	8a3b      	ldrh	r3, [r7, #16]
 80196d6:	4618      	mov	r0, r3
 80196d8:	f7f3 ff12 	bl	800d500 <lwip_htons>
 80196dc:	4603      	mov	r3, r0
 80196de:	461a      	mov	r2, r3
 80196e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196e2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80196e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196e6:	2200      	movs	r2, #0
 80196e8:	719a      	strb	r2, [r3, #6]
 80196ea:	2200      	movs	r2, #0
 80196ec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80196ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196f0:	2200      	movs	r2, #0
 80196f2:	729a      	strb	r2, [r3, #10]
 80196f4:	2200      	movs	r2, #0
 80196f6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80196f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196fa:	685b      	ldr	r3, [r3, #4]
 80196fc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80196fe:	e00d      	b.n	801971c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019702:	685b      	ldr	r3, [r3, #4]
 8019704:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019706:	2114      	movs	r1, #20
 8019708:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801970a:	f7f5 fcf7 	bl	800f0fc <pbuf_remove_header>
      pbuf_cat(p, r);
 801970e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019710:	6878      	ldr	r0, [r7, #4]
 8019712:	f7f5 fe47 	bl	800f3a4 <pbuf_cat>
      r = iprh->next_pbuf;
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801971e:	2b00      	cmp	r3, #0
 8019720:	d1ee      	bne.n	8019700 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019722:	4b1e      	ldr	r3, [pc, #120]	; (801979c <ip4_reass+0x2b4>)
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019728:	429a      	cmp	r2, r3
 801972a:	d102      	bne.n	8019732 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801972c:	2300      	movs	r3, #0
 801972e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019730:	e010      	b.n	8019754 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019732:	4b1a      	ldr	r3, [pc, #104]	; (801979c <ip4_reass+0x2b4>)
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019738:	e007      	b.n	801974a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019740:	429a      	cmp	r2, r3
 8019742:	d006      	beq.n	8019752 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	62fb      	str	r3, [r7, #44]	; 0x2c
 801974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801974c:	2b00      	cmp	r3, #0
 801974e:	d1f4      	bne.n	801973a <ip4_reass+0x252>
 8019750:	e000      	b.n	8019754 <ip4_reass+0x26c>
          break;
 8019752:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019756:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019758:	f7ff fd2e 	bl	80191b8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801975c:	6878      	ldr	r0, [r7, #4]
 801975e:	f7f5 fde1 	bl	800f324 <pbuf_clen>
 8019762:	4603      	mov	r3, r0
 8019764:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019766:	4b0c      	ldr	r3, [pc, #48]	; (8019798 <ip4_reass+0x2b0>)
 8019768:	881b      	ldrh	r3, [r3, #0]
 801976a:	8c3a      	ldrh	r2, [r7, #32]
 801976c:	429a      	cmp	r2, r3
 801976e:	d906      	bls.n	801977e <ip4_reass+0x296>
 8019770:	4b0b      	ldr	r3, [pc, #44]	; (80197a0 <ip4_reass+0x2b8>)
 8019772:	f240 229b 	movw	r2, #667	; 0x29b
 8019776:	490b      	ldr	r1, [pc, #44]	; (80197a4 <ip4_reass+0x2bc>)
 8019778:	480b      	ldr	r0, [pc, #44]	; (80197a8 <ip4_reass+0x2c0>)
 801977a:	f001 f9cd 	bl	801ab18 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801977e:	4b06      	ldr	r3, [pc, #24]	; (8019798 <ip4_reass+0x2b0>)
 8019780:	881a      	ldrh	r2, [r3, #0]
 8019782:	8c3b      	ldrh	r3, [r7, #32]
 8019784:	1ad3      	subs	r3, r2, r3
 8019786:	b29a      	uxth	r2, r3
 8019788:	4b03      	ldr	r3, [pc, #12]	; (8019798 <ip4_reass+0x2b0>)
 801978a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	e038      	b.n	8019802 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019790:	2300      	movs	r3, #0
 8019792:	e036      	b.n	8019802 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8019794:	bf00      	nop
 8019796:	e00a      	b.n	80197ae <ip4_reass+0x2c6>
 8019798:	20012414 	.word	0x20012414
 801979c:	20012410 	.word	0x20012410
 80197a0:	0801efe4 	.word	0x0801efe4
 80197a4:	0801f154 	.word	0x0801f154
 80197a8:	0801f02c 	.word	0x0801f02c
    goto nullreturn_ipr;
 80197ac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80197ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d106      	bne.n	80197c2 <ip4_reass+0x2da>
 80197b4:	4b15      	ldr	r3, [pc, #84]	; (801980c <ip4_reass+0x324>)
 80197b6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80197ba:	4915      	ldr	r1, [pc, #84]	; (8019810 <ip4_reass+0x328>)
 80197bc:	4815      	ldr	r0, [pc, #84]	; (8019814 <ip4_reass+0x32c>)
 80197be:	f001 f9ab 	bl	801ab18 <iprintf>
  if (ipr->p == NULL) {
 80197c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197c4:	685b      	ldr	r3, [r3, #4]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d116      	bne.n	80197f8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80197ca:	4b13      	ldr	r3, [pc, #76]	; (8019818 <ip4_reass+0x330>)
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197d0:	429a      	cmp	r2, r3
 80197d2:	d006      	beq.n	80197e2 <ip4_reass+0x2fa>
 80197d4:	4b0d      	ldr	r3, [pc, #52]	; (801980c <ip4_reass+0x324>)
 80197d6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80197da:	4910      	ldr	r1, [pc, #64]	; (801981c <ip4_reass+0x334>)
 80197dc:	480d      	ldr	r0, [pc, #52]	; (8019814 <ip4_reass+0x32c>)
 80197de:	f001 f99b 	bl	801ab18 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80197e2:	2100      	movs	r1, #0
 80197e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80197e6:	f7ff fce7 	bl	80191b8 <ip_reass_dequeue_datagram>
 80197ea:	e006      	b.n	80197fa <ip4_reass+0x312>
    goto nullreturn;
 80197ec:	bf00      	nop
 80197ee:	e004      	b.n	80197fa <ip4_reass+0x312>
    goto nullreturn;
 80197f0:	bf00      	nop
 80197f2:	e002      	b.n	80197fa <ip4_reass+0x312>
      goto nullreturn;
 80197f4:	bf00      	nop
 80197f6:	e000      	b.n	80197fa <ip4_reass+0x312>
  }

nullreturn:
 80197f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80197fa:	6878      	ldr	r0, [r7, #4]
 80197fc:	f7f5 fd04 	bl	800f208 <pbuf_free>
  return NULL;
 8019800:	2300      	movs	r3, #0
}
 8019802:	4618      	mov	r0, r3
 8019804:	3738      	adds	r7, #56	; 0x38
 8019806:	46bd      	mov	sp, r7
 8019808:	bd80      	pop	{r7, pc}
 801980a:	bf00      	nop
 801980c:	0801efe4 	.word	0x0801efe4
 8019810:	0801f170 	.word	0x0801f170
 8019814:	0801f02c 	.word	0x0801f02c
 8019818:	20012410 	.word	0x20012410
 801981c:	0801f17c 	.word	0x0801f17c

08019820 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019820:	b580      	push	{r7, lr}
 8019822:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019824:	2005      	movs	r0, #5
 8019826:	f7f4 fe31 	bl	800e48c <memp_malloc>
 801982a:	4603      	mov	r3, r0
}
 801982c:	4618      	mov	r0, r3
 801982e:	bd80      	pop	{r7, pc}

08019830 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b082      	sub	sp, #8
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d106      	bne.n	801984c <ip_frag_free_pbuf_custom_ref+0x1c>
 801983e:	4b07      	ldr	r3, [pc, #28]	; (801985c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019840:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019844:	4906      	ldr	r1, [pc, #24]	; (8019860 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019846:	4807      	ldr	r0, [pc, #28]	; (8019864 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019848:	f001 f966 	bl	801ab18 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801984c:	6879      	ldr	r1, [r7, #4]
 801984e:	2005      	movs	r0, #5
 8019850:	f7f4 fe92 	bl	800e578 <memp_free>
}
 8019854:	bf00      	nop
 8019856:	3708      	adds	r7, #8
 8019858:	46bd      	mov	sp, r7
 801985a:	bd80      	pop	{r7, pc}
 801985c:	0801efe4 	.word	0x0801efe4
 8019860:	0801f19c 	.word	0x0801f19c
 8019864:	0801f02c 	.word	0x0801f02c

08019868 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b084      	sub	sp, #16
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d106      	bne.n	8019888 <ipfrag_free_pbuf_custom+0x20>
 801987a:	4b11      	ldr	r3, [pc, #68]	; (80198c0 <ipfrag_free_pbuf_custom+0x58>)
 801987c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019880:	4910      	ldr	r1, [pc, #64]	; (80198c4 <ipfrag_free_pbuf_custom+0x5c>)
 8019882:	4811      	ldr	r0, [pc, #68]	; (80198c8 <ipfrag_free_pbuf_custom+0x60>)
 8019884:	f001 f948 	bl	801ab18 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019888:	68fa      	ldr	r2, [r7, #12]
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	429a      	cmp	r2, r3
 801988e:	d006      	beq.n	801989e <ipfrag_free_pbuf_custom+0x36>
 8019890:	4b0b      	ldr	r3, [pc, #44]	; (80198c0 <ipfrag_free_pbuf_custom+0x58>)
 8019892:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019896:	490d      	ldr	r1, [pc, #52]	; (80198cc <ipfrag_free_pbuf_custom+0x64>)
 8019898:	480b      	ldr	r0, [pc, #44]	; (80198c8 <ipfrag_free_pbuf_custom+0x60>)
 801989a:	f001 f93d 	bl	801ab18 <iprintf>
  if (pcr->original != NULL) {
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	695b      	ldr	r3, [r3, #20]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d004      	beq.n	80198b0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	695b      	ldr	r3, [r3, #20]
 80198aa:	4618      	mov	r0, r3
 80198ac:	f7f5 fcac 	bl	800f208 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80198b0:	68f8      	ldr	r0, [r7, #12]
 80198b2:	f7ff ffbd 	bl	8019830 <ip_frag_free_pbuf_custom_ref>
}
 80198b6:	bf00      	nop
 80198b8:	3710      	adds	r7, #16
 80198ba:	46bd      	mov	sp, r7
 80198bc:	bd80      	pop	{r7, pc}
 80198be:	bf00      	nop
 80198c0:	0801efe4 	.word	0x0801efe4
 80198c4:	0801f1a8 	.word	0x0801f1a8
 80198c8:	0801f02c 	.word	0x0801f02c
 80198cc:	0801f1b4 	.word	0x0801f1b4

080198d0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b094      	sub	sp, #80	; 0x50
 80198d4:	af02      	add	r7, sp, #8
 80198d6:	60f8      	str	r0, [r7, #12]
 80198d8:	60b9      	str	r1, [r7, #8]
 80198da:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80198dc:	2300      	movs	r3, #0
 80198de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80198e2:	68bb      	ldr	r3, [r7, #8]
 80198e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198e6:	3b14      	subs	r3, #20
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	da00      	bge.n	80198ee <ip4_frag+0x1e>
 80198ec:	3307      	adds	r3, #7
 80198ee:	10db      	asrs	r3, r3, #3
 80198f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80198f2:	2314      	movs	r3, #20
 80198f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	685b      	ldr	r3, [r3, #4]
 80198fa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80198fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019902:	781b      	ldrb	r3, [r3, #0]
 8019904:	f003 030f 	and.w	r3, r3, #15
 8019908:	b2db      	uxtb	r3, r3
 801990a:	009b      	lsls	r3, r3, #2
 801990c:	b2db      	uxtb	r3, r3
 801990e:	2b14      	cmp	r3, #20
 8019910:	d002      	beq.n	8019918 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019912:	f06f 0305 	mvn.w	r3, #5
 8019916:	e110      	b.n	8019b3a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	895b      	ldrh	r3, [r3, #10]
 801991c:	2b13      	cmp	r3, #19
 801991e:	d809      	bhi.n	8019934 <ip4_frag+0x64>
 8019920:	4b88      	ldr	r3, [pc, #544]	; (8019b44 <ip4_frag+0x274>)
 8019922:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019926:	4988      	ldr	r1, [pc, #544]	; (8019b48 <ip4_frag+0x278>)
 8019928:	4888      	ldr	r0, [pc, #544]	; (8019b4c <ip4_frag+0x27c>)
 801992a:	f001 f8f5 	bl	801ab18 <iprintf>
 801992e:	f06f 0305 	mvn.w	r3, #5
 8019932:	e102      	b.n	8019b3a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019936:	88db      	ldrh	r3, [r3, #6]
 8019938:	b29b      	uxth	r3, r3
 801993a:	4618      	mov	r0, r3
 801993c:	f7f3 fde0 	bl	800d500 <lwip_htons>
 8019940:	4603      	mov	r3, r0
 8019942:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019944:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019946:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801994a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801994e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019954:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	891b      	ldrh	r3, [r3, #8]
 801995a:	3b14      	subs	r3, #20
 801995c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019960:	e0e1      	b.n	8019b26 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019962:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019964:	00db      	lsls	r3, r3, #3
 8019966:	b29b      	uxth	r3, r3
 8019968:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801996c:	4293      	cmp	r3, r2
 801996e:	bf28      	it	cs
 8019970:	4613      	movcs	r3, r2
 8019972:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019974:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019978:	2114      	movs	r1, #20
 801997a:	200e      	movs	r0, #14
 801997c:	f7f5 f960 	bl	800ec40 <pbuf_alloc>
 8019980:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019984:	2b00      	cmp	r3, #0
 8019986:	f000 80d5 	beq.w	8019b34 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801998c:	895b      	ldrh	r3, [r3, #10]
 801998e:	2b13      	cmp	r3, #19
 8019990:	d806      	bhi.n	80199a0 <ip4_frag+0xd0>
 8019992:	4b6c      	ldr	r3, [pc, #432]	; (8019b44 <ip4_frag+0x274>)
 8019994:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019998:	496d      	ldr	r1, [pc, #436]	; (8019b50 <ip4_frag+0x280>)
 801999a:	486c      	ldr	r0, [pc, #432]	; (8019b4c <ip4_frag+0x27c>)
 801999c:	f001 f8bc 	bl	801ab18 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80199a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199a2:	685b      	ldr	r3, [r3, #4]
 80199a4:	2214      	movs	r2, #20
 80199a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80199a8:	4618      	mov	r0, r3
 80199aa:	f001 f9ec 	bl	801ad86 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80199ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b0:	685b      	ldr	r3, [r3, #4]
 80199b2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80199b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80199b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80199ba:	e064      	b.n	8019a86 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	895a      	ldrh	r2, [r3, #10]
 80199c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80199c2:	1ad3      	subs	r3, r2, r3
 80199c4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	895b      	ldrh	r3, [r3, #10]
 80199ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80199cc:	429a      	cmp	r2, r3
 80199ce:	d906      	bls.n	80199de <ip4_frag+0x10e>
 80199d0:	4b5c      	ldr	r3, [pc, #368]	; (8019b44 <ip4_frag+0x274>)
 80199d2:	f240 322d 	movw	r2, #813	; 0x32d
 80199d6:	495f      	ldr	r1, [pc, #380]	; (8019b54 <ip4_frag+0x284>)
 80199d8:	485c      	ldr	r0, [pc, #368]	; (8019b4c <ip4_frag+0x27c>)
 80199da:	f001 f89d 	bl	801ab18 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80199de:	8bfa      	ldrh	r2, [r7, #30]
 80199e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80199e4:	4293      	cmp	r3, r2
 80199e6:	bf28      	it	cs
 80199e8:	4613      	movcs	r3, r2
 80199ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80199ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d105      	bne.n	8019a02 <ip4_frag+0x132>
        poff = 0;
 80199f6:	2300      	movs	r3, #0
 80199f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	60fb      	str	r3, [r7, #12]
        continue;
 8019a00:	e041      	b.n	8019a86 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019a02:	f7ff ff0d 	bl	8019820 <ip_frag_alloc_pbuf_custom_ref>
 8019a06:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019a08:	69bb      	ldr	r3, [r7, #24]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d103      	bne.n	8019a16 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a10:	f7f5 fbfa 	bl	800f208 <pbuf_free>
        goto memerr;
 8019a14:	e08f      	b.n	8019b36 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019a16:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019a1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019a1e:	4413      	add	r3, r2
 8019a20:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019a24:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019a28:	9201      	str	r2, [sp, #4]
 8019a2a:	9300      	str	r3, [sp, #0]
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	2241      	movs	r2, #65	; 0x41
 8019a30:	2000      	movs	r0, #0
 8019a32:	f7f5 fa2f 	bl	800ee94 <pbuf_alloced_custom>
 8019a36:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019a38:	697b      	ldr	r3, [r7, #20]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d106      	bne.n	8019a4c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019a3e:	69b8      	ldr	r0, [r7, #24]
 8019a40:	f7ff fef6 	bl	8019830 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a46:	f7f5 fbdf 	bl	800f208 <pbuf_free>
        goto memerr;
 8019a4a:	e074      	b.n	8019b36 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019a4c:	68f8      	ldr	r0, [r7, #12]
 8019a4e:	f7f5 fc81 	bl	800f354 <pbuf_ref>
      pcr->original = p;
 8019a52:	69bb      	ldr	r3, [r7, #24]
 8019a54:	68fa      	ldr	r2, [r7, #12]
 8019a56:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019a58:	69bb      	ldr	r3, [r7, #24]
 8019a5a:	4a3f      	ldr	r2, [pc, #252]	; (8019b58 <ip4_frag+0x288>)
 8019a5c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019a5e:	6979      	ldr	r1, [r7, #20]
 8019a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a62:	f7f5 fc9f 	bl	800f3a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019a66:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019a6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019a6e:	1ad3      	subs	r3, r2, r3
 8019a70:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019a74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d004      	beq.n	8019a86 <ip4_frag+0x1b6>
        poff = 0;
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019a86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d196      	bne.n	80199bc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019a8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019a90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019a94:	4413      	add	r3, r2
 8019a96:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019a9c:	f1a3 0213 	sub.w	r2, r3, #19
 8019aa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019aa4:	429a      	cmp	r2, r3
 8019aa6:	bfcc      	ite	gt
 8019aa8:	2301      	movgt	r3, #1
 8019aaa:	2300      	movle	r3, #0
 8019aac:	b2db      	uxtb	r3, r3
 8019aae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019ab0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ab8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019aba:	6a3b      	ldr	r3, [r7, #32]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d002      	beq.n	8019ac6 <ip4_frag+0x1f6>
 8019ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d003      	beq.n	8019ace <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019ac6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019ac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019acc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019ace:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f7f3 fd15 	bl	800d500 <lwip_htons>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	461a      	mov	r2, r3
 8019ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019adc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019ade:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019ae0:	3314      	adds	r3, #20
 8019ae2:	b29b      	uxth	r3, r3
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f7f3 fd0b 	bl	800d500 <lwip_htons>
 8019aea:	4603      	mov	r3, r0
 8019aec:	461a      	mov	r2, r3
 8019aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019af0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019af4:	2200      	movs	r2, #0
 8019af6:	729a      	strb	r2, [r3, #10]
 8019af8:	2200      	movs	r2, #0
 8019afa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019afc:	68bb      	ldr	r3, [r7, #8]
 8019afe:	695b      	ldr	r3, [r3, #20]
 8019b00:	687a      	ldr	r2, [r7, #4]
 8019b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b04:	68b8      	ldr	r0, [r7, #8]
 8019b06:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b0a:	f7f5 fb7d 	bl	800f208 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019b0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019b12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019b14:	1ad3      	subs	r3, r2, r3
 8019b16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019b1a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019b1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019b20:	4413      	add	r3, r2
 8019b22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019b26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	f47f af19 	bne.w	8019962 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019b30:	2300      	movs	r3, #0
 8019b32:	e002      	b.n	8019b3a <ip4_frag+0x26a>
      goto memerr;
 8019b34:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	3748      	adds	r7, #72	; 0x48
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
 8019b42:	bf00      	nop
 8019b44:	0801efe4 	.word	0x0801efe4
 8019b48:	0801f1c0 	.word	0x0801f1c0
 8019b4c:	0801f02c 	.word	0x0801f02c
 8019b50:	0801f1dc 	.word	0x0801f1dc
 8019b54:	0801f1fc 	.word	0x0801f1fc
 8019b58:	08019869 	.word	0x08019869

08019b5c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b086      	sub	sp, #24
 8019b60:	af00      	add	r7, sp, #0
 8019b62:	6078      	str	r0, [r7, #4]
 8019b64:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019b66:	230e      	movs	r3, #14
 8019b68:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	895b      	ldrh	r3, [r3, #10]
 8019b6e:	2b0e      	cmp	r3, #14
 8019b70:	d96e      	bls.n	8019c50 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	7bdb      	ldrb	r3, [r3, #15]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d106      	bne.n	8019b88 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019b7a:	683b      	ldr	r3, [r7, #0]
 8019b7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019b80:	3301      	adds	r3, #1
 8019b82:	b2da      	uxtb	r2, r3
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	685b      	ldr	r3, [r3, #4]
 8019b8c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019b8e:	693b      	ldr	r3, [r7, #16]
 8019b90:	7b1a      	ldrb	r2, [r3, #12]
 8019b92:	7b5b      	ldrb	r3, [r3, #13]
 8019b94:	021b      	lsls	r3, r3, #8
 8019b96:	4313      	orrs	r3, r2
 8019b98:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019b9a:	693b      	ldr	r3, [r7, #16]
 8019b9c:	781b      	ldrb	r3, [r3, #0]
 8019b9e:	f003 0301 	and.w	r3, r3, #1
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d023      	beq.n	8019bee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019ba6:	693b      	ldr	r3, [r7, #16]
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	2b01      	cmp	r3, #1
 8019bac:	d10f      	bne.n	8019bce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019bae:	693b      	ldr	r3, [r7, #16]
 8019bb0:	785b      	ldrb	r3, [r3, #1]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d11b      	bne.n	8019bee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019bb6:	693b      	ldr	r3, [r7, #16]
 8019bb8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019bba:	2b5e      	cmp	r3, #94	; 0x5e
 8019bbc:	d117      	bne.n	8019bee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	7b5b      	ldrb	r3, [r3, #13]
 8019bc2:	f043 0310 	orr.w	r3, r3, #16
 8019bc6:	b2da      	uxtb	r2, r3
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	735a      	strb	r2, [r3, #13]
 8019bcc:	e00f      	b.n	8019bee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019bce:	693b      	ldr	r3, [r7, #16]
 8019bd0:	2206      	movs	r2, #6
 8019bd2:	4928      	ldr	r1, [pc, #160]	; (8019c74 <ethernet_input+0x118>)
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f000 fff4 	bl	801abc2 <memcmp>
 8019bda:	4603      	mov	r3, r0
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d106      	bne.n	8019bee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	7b5b      	ldrb	r3, [r3, #13]
 8019be4:	f043 0308 	orr.w	r3, r3, #8
 8019be8:	b2da      	uxtb	r2, r3
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019bee:	89fb      	ldrh	r3, [r7, #14]
 8019bf0:	2b08      	cmp	r3, #8
 8019bf2:	d003      	beq.n	8019bfc <ethernet_input+0xa0>
 8019bf4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019bf8:	d014      	beq.n	8019c24 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019bfa:	e032      	b.n	8019c62 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019c02:	f003 0308 	and.w	r3, r3, #8
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d024      	beq.n	8019c54 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019c0a:	8afb      	ldrh	r3, [r7, #22]
 8019c0c:	4619      	mov	r1, r3
 8019c0e:	6878      	ldr	r0, [r7, #4]
 8019c10:	f7f5 fa74 	bl	800f0fc <pbuf_remove_header>
 8019c14:	4603      	mov	r3, r0
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d11e      	bne.n	8019c58 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019c1a:	6839      	ldr	r1, [r7, #0]
 8019c1c:	6878      	ldr	r0, [r7, #4]
 8019c1e:	f7fe ff03 	bl	8018a28 <ip4_input>
      break;
 8019c22:	e013      	b.n	8019c4c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019c24:	683b      	ldr	r3, [r7, #0]
 8019c26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019c2a:	f003 0308 	and.w	r3, r3, #8
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d014      	beq.n	8019c5c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019c32:	8afb      	ldrh	r3, [r7, #22]
 8019c34:	4619      	mov	r1, r3
 8019c36:	6878      	ldr	r0, [r7, #4]
 8019c38:	f7f5 fa60 	bl	800f0fc <pbuf_remove_header>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d10e      	bne.n	8019c60 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019c42:	6839      	ldr	r1, [r7, #0]
 8019c44:	6878      	ldr	r0, [r7, #4]
 8019c46:	f7fe f89f 	bl	8017d88 <etharp_input>
      break;
 8019c4a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	e00c      	b.n	8019c6a <ethernet_input+0x10e>
    goto free_and_return;
 8019c50:	bf00      	nop
 8019c52:	e006      	b.n	8019c62 <ethernet_input+0x106>
        goto free_and_return;
 8019c54:	bf00      	nop
 8019c56:	e004      	b.n	8019c62 <ethernet_input+0x106>
        goto free_and_return;
 8019c58:	bf00      	nop
 8019c5a:	e002      	b.n	8019c62 <ethernet_input+0x106>
        goto free_and_return;
 8019c5c:	bf00      	nop
 8019c5e:	e000      	b.n	8019c62 <ethernet_input+0x106>
        goto free_and_return;
 8019c60:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019c62:	6878      	ldr	r0, [r7, #4]
 8019c64:	f7f5 fad0 	bl	800f208 <pbuf_free>
  return ERR_OK;
 8019c68:	2300      	movs	r3, #0
}
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	3718      	adds	r7, #24
 8019c6e:	46bd      	mov	sp, r7
 8019c70:	bd80      	pop	{r7, pc}
 8019c72:	bf00      	nop
 8019c74:	0801f460 	.word	0x0801f460

08019c78 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b086      	sub	sp, #24
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	60f8      	str	r0, [r7, #12]
 8019c80:	60b9      	str	r1, [r7, #8]
 8019c82:	607a      	str	r2, [r7, #4]
 8019c84:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019c86:	8c3b      	ldrh	r3, [r7, #32]
 8019c88:	4618      	mov	r0, r3
 8019c8a:	f7f3 fc39 	bl	800d500 <lwip_htons>
 8019c8e:	4603      	mov	r3, r0
 8019c90:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019c92:	210e      	movs	r1, #14
 8019c94:	68b8      	ldr	r0, [r7, #8]
 8019c96:	f7f5 fa21 	bl	800f0dc <pbuf_add_header>
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d125      	bne.n	8019cec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	685b      	ldr	r3, [r3, #4]
 8019ca4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019ca6:	693b      	ldr	r3, [r7, #16]
 8019ca8:	8afa      	ldrh	r2, [r7, #22]
 8019caa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019cac:	693b      	ldr	r3, [r7, #16]
 8019cae:	2206      	movs	r2, #6
 8019cb0:	6839      	ldr	r1, [r7, #0]
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f001 f867 	bl	801ad86 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019cb8:	693b      	ldr	r3, [r7, #16]
 8019cba:	3306      	adds	r3, #6
 8019cbc:	2206      	movs	r2, #6
 8019cbe:	6879      	ldr	r1, [r7, #4]
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	f001 f860 	bl	801ad86 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019ccc:	2b06      	cmp	r3, #6
 8019cce:	d006      	beq.n	8019cde <ethernet_output+0x66>
 8019cd0:	4b0a      	ldr	r3, [pc, #40]	; (8019cfc <ethernet_output+0x84>)
 8019cd2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019cd6:	490a      	ldr	r1, [pc, #40]	; (8019d00 <ethernet_output+0x88>)
 8019cd8:	480a      	ldr	r0, [pc, #40]	; (8019d04 <ethernet_output+0x8c>)
 8019cda:	f000 ff1d 	bl	801ab18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	699b      	ldr	r3, [r3, #24]
 8019ce2:	68b9      	ldr	r1, [r7, #8]
 8019ce4:	68f8      	ldr	r0, [r7, #12]
 8019ce6:	4798      	blx	r3
 8019ce8:	4603      	mov	r3, r0
 8019cea:	e002      	b.n	8019cf2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019cec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019cee:	f06f 0301 	mvn.w	r3, #1
}
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3718      	adds	r7, #24
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd80      	pop	{r7, pc}
 8019cfa:	bf00      	nop
 8019cfc:	0801f20c 	.word	0x0801f20c
 8019d00:	0801f244 	.word	0x0801f244
 8019d04:	0801f278 	.word	0x0801f278

08019d08 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019d08:	b580      	push	{r7, lr}
 8019d0a:	b082      	sub	sp, #8
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	6078      	str	r0, [r7, #4]
 8019d10:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	2200      	movs	r2, #0
 8019d16:	2104      	movs	r1, #4
 8019d18:	4618      	mov	r0, r3
 8019d1a:	f7ef ff9f 	bl	8009c5c <osMessageQueueNew>
 8019d1e:	4602      	mov	r2, r0
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d102      	bne.n	8019d32 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d30:	e000      	b.n	8019d34 <sys_mbox_new+0x2c>

  return ERR_OK;
 8019d32:	2300      	movs	r3, #0
}
 8019d34:	4618      	mov	r0, r3
 8019d36:	3708      	adds	r7, #8
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}

08019d3c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	b084      	sub	sp, #16
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	6078      	str	r0, [r7, #4]
 8019d44:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	6818      	ldr	r0, [r3, #0]
 8019d4a:	4639      	mov	r1, r7
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	2200      	movs	r2, #0
 8019d50:	f7ef fff8 	bl	8009d44 <osMessageQueuePut>
 8019d54:	4603      	mov	r3, r0
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d102      	bne.n	8019d60 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	73fb      	strb	r3, [r7, #15]
 8019d5e:	e001      	b.n	8019d64 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019d60:	23ff      	movs	r3, #255	; 0xff
 8019d62:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019d68:	4618      	mov	r0, r3
 8019d6a:	3710      	adds	r7, #16
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}

08019d70 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b086      	sub	sp, #24
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	60f8      	str	r0, [r7, #12]
 8019d78:	60b9      	str	r1, [r7, #8]
 8019d7a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8019d7c:	f7ef fc7e 	bl	800967c <osKernelGetTickCount>
 8019d80:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d013      	beq.n	8019db0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	6818      	ldr	r0, [r3, #0]
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	2200      	movs	r2, #0
 8019d90:	68b9      	ldr	r1, [r7, #8]
 8019d92:	f7f0 f837 	bl	8009e04 <osMessageQueueGet>
 8019d96:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8019d98:	693b      	ldr	r3, [r7, #16]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d105      	bne.n	8019daa <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8019d9e:	f7ef fc6d 	bl	800967c <osKernelGetTickCount>
 8019da2:	4602      	mov	r2, r0
 8019da4:	697b      	ldr	r3, [r7, #20]
 8019da6:	1ad3      	subs	r3, r2, r3
 8019da8:	e00f      	b.n	8019dca <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019daa:	f04f 33ff 	mov.w	r3, #4294967295
 8019dae:	e00c      	b.n	8019dca <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	6818      	ldr	r0, [r3, #0]
 8019db4:	f04f 33ff 	mov.w	r3, #4294967295
 8019db8:	2200      	movs	r2, #0
 8019dba:	68b9      	ldr	r1, [r7, #8]
 8019dbc:	f7f0 f822 	bl	8009e04 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019dc0:	f7ef fc5c 	bl	800967c <osKernelGetTickCount>
 8019dc4:	4602      	mov	r2, r0
 8019dc6:	697b      	ldr	r3, [r7, #20]
 8019dc8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019dca:	4618      	mov	r0, r3
 8019dcc:	3718      	adds	r7, #24
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	bd80      	pop	{r7, pc}

08019dd2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019dd2:	b480      	push	{r7}
 8019dd4:	b083      	sub	sp, #12
 8019dd6:	af00      	add	r7, sp, #0
 8019dd8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d101      	bne.n	8019de6 <sys_mbox_valid+0x14>
    return 0;
 8019de2:	2300      	movs	r3, #0
 8019de4:	e000      	b.n	8019de8 <sys_mbox_valid+0x16>
  else
    return 1;
 8019de6:	2301      	movs	r3, #1
}
 8019de8:	4618      	mov	r0, r3
 8019dea:	370c      	adds	r7, #12
 8019dec:	46bd      	mov	sp, r7
 8019dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df2:	4770      	bx	lr

08019df4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019df8:	2000      	movs	r0, #0
 8019dfa:	f7ef fd01 	bl	8009800 <osMutexNew>
 8019dfe:	4603      	mov	r3, r0
 8019e00:	4a01      	ldr	r2, [pc, #4]	; (8019e08 <sys_init+0x14>)
 8019e02:	6013      	str	r3, [r2, #0]
#endif
}
 8019e04:	bf00      	nop
 8019e06:	bd80      	pop	{r7, pc}
 8019e08:	20012418 	.word	0x20012418

08019e0c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b082      	sub	sp, #8
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019e14:	2000      	movs	r0, #0
 8019e16:	f7ef fcf3 	bl	8009800 <osMutexNew>
 8019e1a:	4602      	mov	r2, r0
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d102      	bne.n	8019e2e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019e28:	f04f 33ff 	mov.w	r3, #4294967295
 8019e2c:	e000      	b.n	8019e30 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019e2e:	2300      	movs	r3, #0
}
 8019e30:	4618      	mov	r0, r3
 8019e32:	3708      	adds	r7, #8
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}

08019e38 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b082      	sub	sp, #8
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	f04f 31ff 	mov.w	r1, #4294967295
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7ef fd5f 	bl	800990c <osMutexAcquire>
#endif
}
 8019e4e:	bf00      	nop
 8019e50:	3708      	adds	r7, #8
 8019e52:	46bd      	mov	sp, r7
 8019e54:	bd80      	pop	{r7, pc}

08019e56 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019e56:	b580      	push	{r7, lr}
 8019e58:	b082      	sub	sp, #8
 8019e5a:	af00      	add	r7, sp, #0
 8019e5c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	4618      	mov	r0, r3
 8019e64:	f7ef fd9d 	bl	80099a2 <osMutexRelease>
}
 8019e68:	bf00      	nop
 8019e6a:	3708      	adds	r7, #8
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}

08019e70 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b08e      	sub	sp, #56	; 0x38
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	60f8      	str	r0, [r7, #12]
 8019e78:	60b9      	str	r1, [r7, #8]
 8019e7a:	607a      	str	r2, [r7, #4]
 8019e7c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8019e7e:	f107 0314 	add.w	r3, r7, #20
 8019e82:	2224      	movs	r2, #36	; 0x24
 8019e84:	2100      	movs	r1, #0
 8019e86:	4618      	mov	r0, r3
 8019e88:	f000 feab 	bl	801abe2 <memset>
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	617b      	str	r3, [r7, #20]
 8019e90:	683b      	ldr	r3, [r7, #0]
 8019e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8019e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e96:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019e98:	f107 0314 	add.w	r3, r7, #20
 8019e9c:	461a      	mov	r2, r3
 8019e9e:	6879      	ldr	r1, [r7, #4]
 8019ea0:	68b8      	ldr	r0, [r7, #8]
 8019ea2:	f7ef fc00 	bl	80096a6 <osThreadNew>
 8019ea6:	4603      	mov	r3, r0
#endif
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3738      	adds	r7, #56	; 0x38
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}

08019eb0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8019eb4:	4b04      	ldr	r3, [pc, #16]	; (8019ec8 <sys_arch_protect+0x18>)
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7ef fd25 	bl	800990c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8019ec2:	2301      	movs	r3, #1
}
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	bd80      	pop	{r7, pc}
 8019ec8:	20012418 	.word	0x20012418

08019ecc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	b082      	sub	sp, #8
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019ed4:	4b04      	ldr	r3, [pc, #16]	; (8019ee8 <sys_arch_unprotect+0x1c>)
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	4618      	mov	r0, r3
 8019eda:	f7ef fd62 	bl	80099a2 <osMutexRelease>
}
 8019ede:	bf00      	nop
 8019ee0:	3708      	adds	r7, #8
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	bd80      	pop	{r7, pc}
 8019ee6:	bf00      	nop
 8019ee8:	20012418 	.word	0x20012418

08019eec <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b082      	sub	sp, #8
 8019ef0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8019ef2:	4b26      	ldr	r3, [pc, #152]	; (8019f8c <_DoInit+0xa0>)
 8019ef4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8019ef6:	22a8      	movs	r2, #168	; 0xa8
 8019ef8:	2100      	movs	r1, #0
 8019efa:	6838      	ldr	r0, [r7, #0]
 8019efc:	f000 fe71 	bl	801abe2 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8019f00:	683b      	ldr	r3, [r7, #0]
 8019f02:	2203      	movs	r2, #3
 8019f04:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8019f06:	683b      	ldr	r3, [r7, #0]
 8019f08:	2203      	movs	r2, #3
 8019f0a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8019f0c:	683b      	ldr	r3, [r7, #0]
 8019f0e:	4a20      	ldr	r2, [pc, #128]	; (8019f90 <_DoInit+0xa4>)
 8019f10:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8019f12:	683b      	ldr	r3, [r7, #0]
 8019f14:	4a1f      	ldr	r2, [pc, #124]	; (8019f94 <_DoInit+0xa8>)
 8019f16:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019f1e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	2200      	movs	r2, #0
 8019f24:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8019f26:	683b      	ldr	r3, [r7, #0]
 8019f28:	2200      	movs	r2, #0
 8019f2a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	2200      	movs	r2, #0
 8019f30:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8019f32:	683b      	ldr	r3, [r7, #0]
 8019f34:	4a16      	ldr	r2, [pc, #88]	; (8019f90 <_DoInit+0xa4>)
 8019f36:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	4a17      	ldr	r2, [pc, #92]	; (8019f98 <_DoInit+0xac>)
 8019f3c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8019f3e:	683b      	ldr	r3, [r7, #0]
 8019f40:	2210      	movs	r2, #16
 8019f42:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8019f44:	683b      	ldr	r3, [r7, #0]
 8019f46:	2200      	movs	r2, #0
 8019f48:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8019f4a:	683b      	ldr	r3, [r7, #0]
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8019f50:	683b      	ldr	r3, [r7, #0]
 8019f52:	2200      	movs	r2, #0
 8019f54:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8019f56:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	607b      	str	r3, [r7, #4]
 8019f5e:	e00c      	b.n	8019f7a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	f1c3 030f 	rsb	r3, r3, #15
 8019f66:	4a0d      	ldr	r2, [pc, #52]	; (8019f9c <_DoInit+0xb0>)
 8019f68:	5cd1      	ldrb	r1, [r2, r3]
 8019f6a:	683a      	ldr	r2, [r7, #0]
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	4413      	add	r3, r2
 8019f70:	460a      	mov	r2, r1
 8019f72:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	3301      	adds	r3, #1
 8019f78:	607b      	str	r3, [r7, #4]
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2b0f      	cmp	r3, #15
 8019f7e:	d9ef      	bls.n	8019f60 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8019f80:	f3bf 8f5f 	dmb	sy
}
 8019f84:	bf00      	nop
 8019f86:	3708      	adds	r7, #8
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	bd80      	pop	{r7, pc}
 8019f8c:	2001241c 	.word	0x2001241c
 8019f90:	0801f2a0 	.word	0x0801f2a0
 8019f94:	200124c4 	.word	0x200124c4
 8019f98:	200128c4 	.word	0x200128c4
 8019f9c:	0801f470 	.word	0x0801f470

08019fa0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b08a      	sub	sp, #40	; 0x28
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	60f8      	str	r0, [r7, #12]
 8019fa8:	60b9      	str	r1, [r7, #8]
 8019faa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8019fac:	2300      	movs	r3, #0
 8019fae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	68db      	ldr	r3, [r3, #12]
 8019fb4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	691b      	ldr	r3, [r3, #16]
 8019fba:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8019fbc:	69ba      	ldr	r2, [r7, #24]
 8019fbe:	69fb      	ldr	r3, [r7, #28]
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d905      	bls.n	8019fd0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8019fc4:	69ba      	ldr	r2, [r7, #24]
 8019fc6:	69fb      	ldr	r3, [r7, #28]
 8019fc8:	1ad3      	subs	r3, r2, r3
 8019fca:	3b01      	subs	r3, #1
 8019fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8019fce:	e007      	b.n	8019fe0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	689a      	ldr	r2, [r3, #8]
 8019fd4:	69b9      	ldr	r1, [r7, #24]
 8019fd6:	69fb      	ldr	r3, [r7, #28]
 8019fd8:	1acb      	subs	r3, r1, r3
 8019fda:	4413      	add	r3, r2
 8019fdc:	3b01      	subs	r3, #1
 8019fde:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	689a      	ldr	r2, [r3, #8]
 8019fe4:	69fb      	ldr	r3, [r7, #28]
 8019fe6:	1ad3      	subs	r3, r2, r3
 8019fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fea:	4293      	cmp	r3, r2
 8019fec:	bf28      	it	cs
 8019fee:	4613      	movcs	r3, r2
 8019ff0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8019ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	4293      	cmp	r3, r2
 8019ff8:	bf28      	it	cs
 8019ffa:	4613      	movcs	r3, r2
 8019ffc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	685a      	ldr	r2, [r3, #4]
 801a002:	69fb      	ldr	r3, [r7, #28]
 801a004:	4413      	add	r3, r2
 801a006:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 801a008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a00a:	68b9      	ldr	r1, [r7, #8]
 801a00c:	6978      	ldr	r0, [r7, #20]
 801a00e:	f000 feba 	bl	801ad86 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 801a012:	6a3a      	ldr	r2, [r7, #32]
 801a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a016:	4413      	add	r3, r2
 801a018:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 801a01a:	68ba      	ldr	r2, [r7, #8]
 801a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a01e:	4413      	add	r3, r2
 801a020:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 801a022:	687a      	ldr	r2, [r7, #4]
 801a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a026:	1ad3      	subs	r3, r2, r3
 801a028:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 801a02a:	69fa      	ldr	r2, [r7, #28]
 801a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a02e:	4413      	add	r3, r2
 801a030:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	689b      	ldr	r3, [r3, #8]
 801a036:	69fa      	ldr	r2, [r7, #28]
 801a038:	429a      	cmp	r2, r3
 801a03a:	d101      	bne.n	801a040 <_WriteBlocking+0xa0>
      WrOff = 0u;
 801a03c:	2300      	movs	r3, #0
 801a03e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801a040:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	69fa      	ldr	r2, [r7, #28]
 801a048:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d1b2      	bne.n	8019fb6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 801a050:	6a3b      	ldr	r3, [r7, #32]
}
 801a052:	4618      	mov	r0, r3
 801a054:	3728      	adds	r7, #40	; 0x28
 801a056:	46bd      	mov	sp, r7
 801a058:	bd80      	pop	{r7, pc}

0801a05a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 801a05a:	b580      	push	{r7, lr}
 801a05c:	b088      	sub	sp, #32
 801a05e:	af00      	add	r7, sp, #0
 801a060:	60f8      	str	r0, [r7, #12]
 801a062:	60b9      	str	r1, [r7, #8]
 801a064:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	68db      	ldr	r3, [r3, #12]
 801a06a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	689a      	ldr	r2, [r3, #8]
 801a070:	69fb      	ldr	r3, [r7, #28]
 801a072:	1ad3      	subs	r3, r2, r3
 801a074:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 801a076:	69ba      	ldr	r2, [r7, #24]
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	429a      	cmp	r2, r3
 801a07c:	d911      	bls.n	801a0a2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	685a      	ldr	r2, [r3, #4]
 801a082:	69fb      	ldr	r3, [r7, #28]
 801a084:	4413      	add	r3, r2
 801a086:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 801a088:	687a      	ldr	r2, [r7, #4]
 801a08a:	68b9      	ldr	r1, [r7, #8]
 801a08c:	6938      	ldr	r0, [r7, #16]
 801a08e:	f000 fe7a 	bl	801ad86 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801a092:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 801a096:	69fa      	ldr	r2, [r7, #28]
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	441a      	add	r2, r3
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 801a0a0:	e01f      	b.n	801a0e2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 801a0a2:	69bb      	ldr	r3, [r7, #24]
 801a0a4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	685a      	ldr	r2, [r3, #4]
 801a0aa:	69fb      	ldr	r3, [r7, #28]
 801a0ac:	4413      	add	r3, r2
 801a0ae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 801a0b0:	697a      	ldr	r2, [r7, #20]
 801a0b2:	68b9      	ldr	r1, [r7, #8]
 801a0b4:	6938      	ldr	r0, [r7, #16]
 801a0b6:	f000 fe66 	bl	801ad86 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 801a0ba:	687a      	ldr	r2, [r7, #4]
 801a0bc:	69bb      	ldr	r3, [r7, #24]
 801a0be:	1ad3      	subs	r3, r2, r3
 801a0c0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	685b      	ldr	r3, [r3, #4]
 801a0c6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 801a0c8:	68ba      	ldr	r2, [r7, #8]
 801a0ca:	69bb      	ldr	r3, [r7, #24]
 801a0cc:	4413      	add	r3, r2
 801a0ce:	697a      	ldr	r2, [r7, #20]
 801a0d0:	4619      	mov	r1, r3
 801a0d2:	6938      	ldr	r0, [r7, #16]
 801a0d4:	f000 fe57 	bl	801ad86 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801a0d8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	697a      	ldr	r2, [r7, #20]
 801a0e0:	60da      	str	r2, [r3, #12]
}
 801a0e2:	bf00      	nop
 801a0e4:	3720      	adds	r7, #32
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bd80      	pop	{r7, pc}

0801a0ea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 801a0ea:	b480      	push	{r7}
 801a0ec:	b087      	sub	sp, #28
 801a0ee:	af00      	add	r7, sp, #0
 801a0f0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	691b      	ldr	r3, [r3, #16]
 801a0f6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	68db      	ldr	r3, [r3, #12]
 801a0fc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 801a0fe:	693a      	ldr	r2, [r7, #16]
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	429a      	cmp	r2, r3
 801a104:	d808      	bhi.n	801a118 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	689a      	ldr	r2, [r3, #8]
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	1ad2      	subs	r2, r2, r3
 801a10e:	693b      	ldr	r3, [r7, #16]
 801a110:	4413      	add	r3, r2
 801a112:	3b01      	subs	r3, #1
 801a114:	617b      	str	r3, [r7, #20]
 801a116:	e004      	b.n	801a122 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 801a118:	693a      	ldr	r2, [r7, #16]
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	1ad3      	subs	r3, r2, r3
 801a11e:	3b01      	subs	r3, #1
 801a120:	617b      	str	r3, [r7, #20]
  }
  return r;
 801a122:	697b      	ldr	r3, [r7, #20]
}
 801a124:	4618      	mov	r0, r3
 801a126:	371c      	adds	r7, #28
 801a128:	46bd      	mov	sp, r7
 801a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12e:	4770      	bx	lr

0801a130 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 801a130:	b580      	push	{r7, lr}
 801a132:	b088      	sub	sp, #32
 801a134:	af00      	add	r7, sp, #0
 801a136:	60f8      	str	r0, [r7, #12]
 801a138:	60b9      	str	r1, [r7, #8]
 801a13a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 801a13c:	68bb      	ldr	r3, [r7, #8]
 801a13e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	1c5a      	adds	r2, r3, #1
 801a144:	4613      	mov	r3, r2
 801a146:	005b      	lsls	r3, r3, #1
 801a148:	4413      	add	r3, r2
 801a14a:	00db      	lsls	r3, r3, #3
 801a14c:	4a1f      	ldr	r2, [pc, #124]	; (801a1cc <SEGGER_RTT_WriteNoLock+0x9c>)
 801a14e:	4413      	add	r3, r2
 801a150:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 801a152:	697b      	ldr	r3, [r7, #20]
 801a154:	695b      	ldr	r3, [r3, #20]
 801a156:	2b02      	cmp	r3, #2
 801a158:	d029      	beq.n	801a1ae <SEGGER_RTT_WriteNoLock+0x7e>
 801a15a:	2b02      	cmp	r3, #2
 801a15c:	d82e      	bhi.n	801a1bc <SEGGER_RTT_WriteNoLock+0x8c>
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d002      	beq.n	801a168 <SEGGER_RTT_WriteNoLock+0x38>
 801a162:	2b01      	cmp	r3, #1
 801a164:	d013      	beq.n	801a18e <SEGGER_RTT_WriteNoLock+0x5e>
 801a166:	e029      	b.n	801a1bc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 801a168:	6978      	ldr	r0, [r7, #20]
 801a16a:	f7ff ffbe 	bl	801a0ea <_GetAvailWriteSpace>
 801a16e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 801a170:	693a      	ldr	r2, [r7, #16]
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	429a      	cmp	r2, r3
 801a176:	d202      	bcs.n	801a17e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 801a178:	2300      	movs	r3, #0
 801a17a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 801a17c:	e021      	b.n	801a1c2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 801a182:	687a      	ldr	r2, [r7, #4]
 801a184:	69b9      	ldr	r1, [r7, #24]
 801a186:	6978      	ldr	r0, [r7, #20]
 801a188:	f7ff ff67 	bl	801a05a <_WriteNoCheck>
    break;
 801a18c:	e019      	b.n	801a1c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 801a18e:	6978      	ldr	r0, [r7, #20]
 801a190:	f7ff ffab 	bl	801a0ea <_GetAvailWriteSpace>
 801a194:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 801a196:	687a      	ldr	r2, [r7, #4]
 801a198:	693b      	ldr	r3, [r7, #16]
 801a19a:	4293      	cmp	r3, r2
 801a19c:	bf28      	it	cs
 801a19e:	4613      	movcs	r3, r2
 801a1a0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 801a1a2:	69fa      	ldr	r2, [r7, #28]
 801a1a4:	69b9      	ldr	r1, [r7, #24]
 801a1a6:	6978      	ldr	r0, [r7, #20]
 801a1a8:	f7ff ff57 	bl	801a05a <_WriteNoCheck>
    break;
 801a1ac:	e009      	b.n	801a1c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 801a1ae:	687a      	ldr	r2, [r7, #4]
 801a1b0:	69b9      	ldr	r1, [r7, #24]
 801a1b2:	6978      	ldr	r0, [r7, #20]
 801a1b4:	f7ff fef4 	bl	8019fa0 <_WriteBlocking>
 801a1b8:	61f8      	str	r0, [r7, #28]
    break;
 801a1ba:	e002      	b.n	801a1c2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 801a1bc:	2300      	movs	r3, #0
 801a1be:	61fb      	str	r3, [r7, #28]
    break;
 801a1c0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 801a1c2:	69fb      	ldr	r3, [r7, #28]
}
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	3720      	adds	r7, #32
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bd80      	pop	{r7, pc}
 801a1cc:	2001241c 	.word	0x2001241c

0801a1d0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	b088      	sub	sp, #32
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	60f8      	str	r0, [r7, #12]
 801a1d8:	60b9      	str	r1, [r7, #8]
 801a1da:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 801a1dc:	4b0e      	ldr	r3, [pc, #56]	; (801a218 <SEGGER_RTT_Write+0x48>)
 801a1de:	61fb      	str	r3, [r7, #28]
 801a1e0:	69fb      	ldr	r3, [r7, #28]
 801a1e2:	781b      	ldrb	r3, [r3, #0]
 801a1e4:	b2db      	uxtb	r3, r3
 801a1e6:	2b53      	cmp	r3, #83	; 0x53
 801a1e8:	d001      	beq.n	801a1ee <SEGGER_RTT_Write+0x1e>
 801a1ea:	f7ff fe7f 	bl	8019eec <_DoInit>
  SEGGER_RTT_LOCK();
 801a1ee:	f3ef 8311 	mrs	r3, BASEPRI
 801a1f2:	f04f 0120 	mov.w	r1, #32
 801a1f6:	f381 8811 	msr	BASEPRI, r1
 801a1fa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 801a1fc:	687a      	ldr	r2, [r7, #4]
 801a1fe:	68b9      	ldr	r1, [r7, #8]
 801a200:	68f8      	ldr	r0, [r7, #12]
 801a202:	f7ff ff95 	bl	801a130 <SEGGER_RTT_WriteNoLock>
 801a206:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 801a208:	69bb      	ldr	r3, [r7, #24]
 801a20a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 801a20e:	697b      	ldr	r3, [r7, #20]
}
 801a210:	4618      	mov	r0, r3
 801a212:	3720      	adds	r7, #32
 801a214:	46bd      	mov	sp, r7
 801a216:	bd80      	pop	{r7, pc}
 801a218:	2001241c 	.word	0x2001241c

0801a21c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b084      	sub	sp, #16
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
 801a224:	460b      	mov	r3, r1
 801a226:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	689b      	ldr	r3, [r3, #8]
 801a22c:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	1c5a      	adds	r2, r3, #1
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	685b      	ldr	r3, [r3, #4]
 801a236:	429a      	cmp	r2, r3
 801a238:	d80e      	bhi.n	801a258 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681a      	ldr	r2, [r3, #0]
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	4413      	add	r3, r2
 801a242:	78fa      	ldrb	r2, [r7, #3]
 801a244:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	1c5a      	adds	r2, r3, #1
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	68db      	ldr	r3, [r3, #12]
 801a252:	1c5a      	adds	r2, r3, #1
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	689a      	ldr	r2, [r3, #8]
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	685b      	ldr	r3, [r3, #4]
 801a260:	429a      	cmp	r2, r3
 801a262:	d115      	bne.n	801a290 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6918      	ldr	r0, [r3, #16]
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	6819      	ldr	r1, [r3, #0]
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	689b      	ldr	r3, [r3, #8]
 801a270:	461a      	mov	r2, r3
 801a272:	f7ff ffad 	bl	801a1d0 <SEGGER_RTT_Write>
 801a276:	4602      	mov	r2, r0
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	689b      	ldr	r3, [r3, #8]
 801a27c:	429a      	cmp	r2, r3
 801a27e:	d004      	beq.n	801a28a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	f04f 32ff 	mov.w	r2, #4294967295
 801a286:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 801a288:	e002      	b.n	801a290 <_StoreChar+0x74>
      p->Cnt = 0u;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	2200      	movs	r2, #0
 801a28e:	609a      	str	r2, [r3, #8]
}
 801a290:	bf00      	nop
 801a292:	3710      	adds	r7, #16
 801a294:	46bd      	mov	sp, r7
 801a296:	bd80      	pop	{r7, pc}

0801a298 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 801a298:	b580      	push	{r7, lr}
 801a29a:	b08a      	sub	sp, #40	; 0x28
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	60f8      	str	r0, [r7, #12]
 801a2a0:	60b9      	str	r1, [r7, #8]
 801a2a2:	607a      	str	r2, [r7, #4]
 801a2a4:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 801a2a6:	68bb      	ldr	r3, [r7, #8]
 801a2a8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 801a2aa:	2301      	movs	r3, #1
 801a2ac:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 801a2ae:	2301      	movs	r3, #1
 801a2b0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 801a2b2:	e007      	b.n	801a2c4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 801a2b4:	6a3a      	ldr	r2, [r7, #32]
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801a2bc:	623b      	str	r3, [r7, #32]
    Width++;
 801a2be:	69fb      	ldr	r3, [r7, #28]
 801a2c0:	3301      	adds	r3, #1
 801a2c2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 801a2c4:	6a3a      	ldr	r2, [r7, #32]
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	429a      	cmp	r2, r3
 801a2ca:	d2f3      	bcs.n	801a2b4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 801a2cc:	683a      	ldr	r2, [r7, #0]
 801a2ce:	69fb      	ldr	r3, [r7, #28]
 801a2d0:	429a      	cmp	r2, r3
 801a2d2:	d901      	bls.n	801a2d8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 801a2d4:	683b      	ldr	r3, [r7, #0]
 801a2d6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 801a2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2da:	f003 0301 	and.w	r3, r3, #1
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d125      	bne.n	801a32e <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 801a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d022      	beq.n	801a32e <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 801a2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2ea:	f003 0302 	and.w	r3, r3, #2
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d005      	beq.n	801a2fe <_PrintUnsigned+0x66>
 801a2f2:	683b      	ldr	r3, [r7, #0]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d102      	bne.n	801a2fe <_PrintUnsigned+0x66>
        c = '0';
 801a2f8:	2330      	movs	r3, #48	; 0x30
 801a2fa:	76fb      	strb	r3, [r7, #27]
 801a2fc:	e001      	b.n	801a302 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 801a2fe:	2320      	movs	r3, #32
 801a300:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801a302:	e00b      	b.n	801a31c <_PrintUnsigned+0x84>
        FieldWidth--;
 801a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a306:	3b01      	subs	r3, #1
 801a308:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 801a30a:	7efb      	ldrb	r3, [r7, #27]
 801a30c:	4619      	mov	r1, r3
 801a30e:	68f8      	ldr	r0, [r7, #12]
 801a310:	f7ff ff84 	bl	801a21c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	68db      	ldr	r3, [r3, #12]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	db07      	blt.n	801a32c <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d005      	beq.n	801a32e <_PrintUnsigned+0x96>
 801a322:	69fa      	ldr	r2, [r7, #28]
 801a324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a326:	429a      	cmp	r2, r3
 801a328:	d3ec      	bcc.n	801a304 <_PrintUnsigned+0x6c>
 801a32a:	e000      	b.n	801a32e <_PrintUnsigned+0x96>
          break;
 801a32c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	68db      	ldr	r3, [r3, #12]
 801a332:	2b00      	cmp	r3, #0
 801a334:	db55      	blt.n	801a3e2 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 801a336:	683b      	ldr	r3, [r7, #0]
 801a338:	2b01      	cmp	r3, #1
 801a33a:	d903      	bls.n	801a344 <_PrintUnsigned+0xac>
        NumDigits--;
 801a33c:	683b      	ldr	r3, [r7, #0]
 801a33e:	3b01      	subs	r3, #1
 801a340:	603b      	str	r3, [r7, #0]
 801a342:	e009      	b.n	801a358 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 801a344:	68ba      	ldr	r2, [r7, #8]
 801a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a348:	fbb2 f3f3 	udiv	r3, r2, r3
 801a34c:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 801a34e:	697a      	ldr	r2, [r7, #20]
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	429a      	cmp	r2, r3
 801a354:	d200      	bcs.n	801a358 <_PrintUnsigned+0xc0>
          break;
 801a356:	e005      	b.n	801a364 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 801a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a35a:	687a      	ldr	r2, [r7, #4]
 801a35c:	fb02 f303 	mul.w	r3, r2, r3
 801a360:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 801a362:	e7e8      	b.n	801a336 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 801a364:	68ba      	ldr	r2, [r7, #8]
 801a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a368:	fbb2 f3f3 	udiv	r3, r2, r3
 801a36c:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 801a36e:	697b      	ldr	r3, [r7, #20]
 801a370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a372:	fb02 f303 	mul.w	r3, r2, r3
 801a376:	68ba      	ldr	r2, [r7, #8]
 801a378:	1ad3      	subs	r3, r2, r3
 801a37a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 801a37c:	4a1b      	ldr	r2, [pc, #108]	; (801a3ec <_PrintUnsigned+0x154>)
 801a37e:	697b      	ldr	r3, [r7, #20]
 801a380:	4413      	add	r3, r2
 801a382:	781b      	ldrb	r3, [r3, #0]
 801a384:	4619      	mov	r1, r3
 801a386:	68f8      	ldr	r0, [r7, #12]
 801a388:	f7ff ff48 	bl	801a21c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	68db      	ldr	r3, [r3, #12]
 801a390:	2b00      	cmp	r3, #0
 801a392:	db08      	blt.n	801a3a6 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 801a394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	fbb2 f3f3 	udiv	r3, r2, r3
 801a39c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 801a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d1df      	bne.n	801a364 <_PrintUnsigned+0xcc>
 801a3a4:	e000      	b.n	801a3a8 <_PrintUnsigned+0x110>
        break;
 801a3a6:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 801a3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3aa:	f003 0301 	and.w	r3, r3, #1
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d017      	beq.n	801a3e2 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 801a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d014      	beq.n	801a3e2 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801a3b8:	e00a      	b.n	801a3d0 <_PrintUnsigned+0x138>
          FieldWidth--;
 801a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3bc:	3b01      	subs	r3, #1
 801a3be:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 801a3c0:	2120      	movs	r1, #32
 801a3c2:	68f8      	ldr	r0, [r7, #12]
 801a3c4:	f7ff ff2a 	bl	801a21c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	68db      	ldr	r3, [r3, #12]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	db07      	blt.n	801a3e0 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d005      	beq.n	801a3e2 <_PrintUnsigned+0x14a>
 801a3d6:	69fa      	ldr	r2, [r7, #28]
 801a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3da:	429a      	cmp	r2, r3
 801a3dc:	d3ed      	bcc.n	801a3ba <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 801a3de:	e000      	b.n	801a3e2 <_PrintUnsigned+0x14a>
            break;
 801a3e0:	bf00      	nop
}
 801a3e2:	bf00      	nop
 801a3e4:	3728      	adds	r7, #40	; 0x28
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	bd80      	pop	{r7, pc}
 801a3ea:	bf00      	nop
 801a3ec:	0801f484 	.word	0x0801f484

0801a3f0 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b088      	sub	sp, #32
 801a3f4:	af02      	add	r7, sp, #8
 801a3f6:	60f8      	str	r0, [r7, #12]
 801a3f8:	60b9      	str	r1, [r7, #8]
 801a3fa:	607a      	str	r2, [r7, #4]
 801a3fc:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 801a3fe:	68bb      	ldr	r3, [r7, #8]
 801a400:	2b00      	cmp	r3, #0
 801a402:	bfb8      	it	lt
 801a404:	425b      	neglt	r3, r3
 801a406:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 801a408:	2301      	movs	r3, #1
 801a40a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 801a40c:	e007      	b.n	801a41e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	693a      	ldr	r2, [r7, #16]
 801a412:	fb92 f3f3 	sdiv	r3, r2, r3
 801a416:	613b      	str	r3, [r7, #16]
    Width++;
 801a418:	697b      	ldr	r3, [r7, #20]
 801a41a:	3301      	adds	r3, #1
 801a41c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	693a      	ldr	r2, [r7, #16]
 801a422:	429a      	cmp	r2, r3
 801a424:	daf3      	bge.n	801a40e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 801a426:	683a      	ldr	r2, [r7, #0]
 801a428:	697b      	ldr	r3, [r7, #20]
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d901      	bls.n	801a432 <_PrintInt+0x42>
    Width = NumDigits;
 801a42e:	683b      	ldr	r3, [r7, #0]
 801a430:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 801a432:	6a3b      	ldr	r3, [r7, #32]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d00a      	beq.n	801a44e <_PrintInt+0x5e>
 801a438:	68bb      	ldr	r3, [r7, #8]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	db04      	blt.n	801a448 <_PrintInt+0x58>
 801a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a440:	f003 0304 	and.w	r3, r3, #4
 801a444:	2b00      	cmp	r3, #0
 801a446:	d002      	beq.n	801a44e <_PrintInt+0x5e>
    FieldWidth--;
 801a448:	6a3b      	ldr	r3, [r7, #32]
 801a44a:	3b01      	subs	r3, #1
 801a44c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 801a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a450:	f003 0302 	and.w	r3, r3, #2
 801a454:	2b00      	cmp	r3, #0
 801a456:	d002      	beq.n	801a45e <_PrintInt+0x6e>
 801a458:	683b      	ldr	r3, [r7, #0]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d01c      	beq.n	801a498 <_PrintInt+0xa8>
 801a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a460:	f003 0301 	and.w	r3, r3, #1
 801a464:	2b00      	cmp	r3, #0
 801a466:	d117      	bne.n	801a498 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 801a468:	6a3b      	ldr	r3, [r7, #32]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d014      	beq.n	801a498 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801a46e:	e00a      	b.n	801a486 <_PrintInt+0x96>
        FieldWidth--;
 801a470:	6a3b      	ldr	r3, [r7, #32]
 801a472:	3b01      	subs	r3, #1
 801a474:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 801a476:	2120      	movs	r1, #32
 801a478:	68f8      	ldr	r0, [r7, #12]
 801a47a:	f7ff fecf 	bl	801a21c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	68db      	ldr	r3, [r3, #12]
 801a482:	2b00      	cmp	r3, #0
 801a484:	db07      	blt.n	801a496 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801a486:	6a3b      	ldr	r3, [r7, #32]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d005      	beq.n	801a498 <_PrintInt+0xa8>
 801a48c:	697a      	ldr	r2, [r7, #20]
 801a48e:	6a3b      	ldr	r3, [r7, #32]
 801a490:	429a      	cmp	r2, r3
 801a492:	d3ed      	bcc.n	801a470 <_PrintInt+0x80>
 801a494:	e000      	b.n	801a498 <_PrintInt+0xa8>
          break;
 801a496:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	68db      	ldr	r3, [r3, #12]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	db4a      	blt.n	801a536 <_PrintInt+0x146>
    if (v < 0) {
 801a4a0:	68bb      	ldr	r3, [r7, #8]
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	da07      	bge.n	801a4b6 <_PrintInt+0xc6>
      v = -v;
 801a4a6:	68bb      	ldr	r3, [r7, #8]
 801a4a8:	425b      	negs	r3, r3
 801a4aa:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 801a4ac:	212d      	movs	r1, #45	; 0x2d
 801a4ae:	68f8      	ldr	r0, [r7, #12]
 801a4b0:	f7ff feb4 	bl	801a21c <_StoreChar>
 801a4b4:	e008      	b.n	801a4c8 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 801a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4b8:	f003 0304 	and.w	r3, r3, #4
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d003      	beq.n	801a4c8 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 801a4c0:	212b      	movs	r1, #43	; 0x2b
 801a4c2:	68f8      	ldr	r0, [r7, #12]
 801a4c4:	f7ff feaa 	bl	801a21c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	68db      	ldr	r3, [r3, #12]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	db32      	blt.n	801a536 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 801a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d2:	f003 0302 	and.w	r3, r3, #2
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d01f      	beq.n	801a51a <_PrintInt+0x12a>
 801a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4dc:	f003 0301 	and.w	r3, r3, #1
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d11a      	bne.n	801a51a <_PrintInt+0x12a>
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d117      	bne.n	801a51a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 801a4ea:	6a3b      	ldr	r3, [r7, #32]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d014      	beq.n	801a51a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801a4f0:	e00a      	b.n	801a508 <_PrintInt+0x118>
            FieldWidth--;
 801a4f2:	6a3b      	ldr	r3, [r7, #32]
 801a4f4:	3b01      	subs	r3, #1
 801a4f6:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 801a4f8:	2130      	movs	r1, #48	; 0x30
 801a4fa:	68f8      	ldr	r0, [r7, #12]
 801a4fc:	f7ff fe8e 	bl	801a21c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	68db      	ldr	r3, [r3, #12]
 801a504:	2b00      	cmp	r3, #0
 801a506:	db07      	blt.n	801a518 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801a508:	6a3b      	ldr	r3, [r7, #32]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d005      	beq.n	801a51a <_PrintInt+0x12a>
 801a50e:	697a      	ldr	r2, [r7, #20]
 801a510:	6a3b      	ldr	r3, [r7, #32]
 801a512:	429a      	cmp	r2, r3
 801a514:	d3ed      	bcc.n	801a4f2 <_PrintInt+0x102>
 801a516:	e000      	b.n	801a51a <_PrintInt+0x12a>
              break;
 801a518:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	68db      	ldr	r3, [r3, #12]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	db09      	blt.n	801a536 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 801a522:	68b9      	ldr	r1, [r7, #8]
 801a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a526:	9301      	str	r3, [sp, #4]
 801a528:	6a3b      	ldr	r3, [r7, #32]
 801a52a:	9300      	str	r3, [sp, #0]
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	687a      	ldr	r2, [r7, #4]
 801a530:	68f8      	ldr	r0, [r7, #12]
 801a532:	f7ff feb1 	bl	801a298 <_PrintUnsigned>
      }
    }
  }
}
 801a536:	bf00      	nop
 801a538:	3718      	adds	r7, #24
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bd80      	pop	{r7, pc}
	...

0801a540 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 801a540:	b580      	push	{r7, lr}
 801a542:	b0a2      	sub	sp, #136	; 0x88
 801a544:	af02      	add	r7, sp, #8
 801a546:	60f8      	str	r0, [r7, #12]
 801a548:	60b9      	str	r1, [r7, #8]
 801a54a:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 801a54c:	f107 0310 	add.w	r3, r7, #16
 801a550:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 801a552:	2340      	movs	r3, #64	; 0x40
 801a554:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 801a556:	2300      	movs	r3, #0
 801a558:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 801a55e:	2300      	movs	r3, #0
 801a560:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 801a562:	68bb      	ldr	r3, [r7, #8]
 801a564:	781b      	ldrb	r3, [r3, #0]
 801a566:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 801a56a:	68bb      	ldr	r3, [r7, #8]
 801a56c:	3301      	adds	r3, #1
 801a56e:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 801a570:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a574:	2b00      	cmp	r3, #0
 801a576:	f000 819f 	beq.w	801a8b8 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 801a57a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a57e:	2b25      	cmp	r3, #37	; 0x25
 801a580:	f040 818d 	bne.w	801a89e <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 801a584:	2300      	movs	r3, #0
 801a586:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 801a588:	2301      	movs	r3, #1
 801a58a:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 801a58c:	68bb      	ldr	r3, [r7, #8]
 801a58e:	781b      	ldrb	r3, [r3, #0]
 801a590:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 801a594:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a598:	3b23      	subs	r3, #35	; 0x23
 801a59a:	2b0d      	cmp	r3, #13
 801a59c:	d83e      	bhi.n	801a61c <SEGGER_RTT_vprintf+0xdc>
 801a59e:	a201      	add	r2, pc, #4	; (adr r2, 801a5a4 <SEGGER_RTT_vprintf+0x64>)
 801a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5a4:	0801a60d 	.word	0x0801a60d
 801a5a8:	0801a61d 	.word	0x0801a61d
 801a5ac:	0801a61d 	.word	0x0801a61d
 801a5b0:	0801a61d 	.word	0x0801a61d
 801a5b4:	0801a61d 	.word	0x0801a61d
 801a5b8:	0801a61d 	.word	0x0801a61d
 801a5bc:	0801a61d 	.word	0x0801a61d
 801a5c0:	0801a61d 	.word	0x0801a61d
 801a5c4:	0801a5fd 	.word	0x0801a5fd
 801a5c8:	0801a61d 	.word	0x0801a61d
 801a5cc:	0801a5dd 	.word	0x0801a5dd
 801a5d0:	0801a61d 	.word	0x0801a61d
 801a5d4:	0801a61d 	.word	0x0801a61d
 801a5d8:	0801a5ed 	.word	0x0801a5ed
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 801a5dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a5de:	f043 0301 	orr.w	r3, r3, #1
 801a5e2:	673b      	str	r3, [r7, #112]	; 0x70
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	3301      	adds	r3, #1
 801a5e8:	60bb      	str	r3, [r7, #8]
 801a5ea:	e01a      	b.n	801a622 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 801a5ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a5ee:	f043 0302 	orr.w	r3, r3, #2
 801a5f2:	673b      	str	r3, [r7, #112]	; 0x70
 801a5f4:	68bb      	ldr	r3, [r7, #8]
 801a5f6:	3301      	adds	r3, #1
 801a5f8:	60bb      	str	r3, [r7, #8]
 801a5fa:	e012      	b.n	801a622 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 801a5fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a5fe:	f043 0304 	orr.w	r3, r3, #4
 801a602:	673b      	str	r3, [r7, #112]	; 0x70
 801a604:	68bb      	ldr	r3, [r7, #8]
 801a606:	3301      	adds	r3, #1
 801a608:	60bb      	str	r3, [r7, #8]
 801a60a:	e00a      	b.n	801a622 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 801a60c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a60e:	f043 0308 	orr.w	r3, r3, #8
 801a612:	673b      	str	r3, [r7, #112]	; 0x70
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	3301      	adds	r3, #1
 801a618:	60bb      	str	r3, [r7, #8]
 801a61a:	e002      	b.n	801a622 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 801a61c:	2300      	movs	r3, #0
 801a61e:	67bb      	str	r3, [r7, #120]	; 0x78
 801a620:	bf00      	nop
        }
      } while (v);
 801a622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a624:	2b00      	cmp	r3, #0
 801a626:	d1b1      	bne.n	801a58c <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 801a628:	2300      	movs	r3, #0
 801a62a:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 801a62c:	68bb      	ldr	r3, [r7, #8]
 801a62e:	781b      	ldrb	r3, [r3, #0]
 801a630:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 801a634:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a638:	2b2f      	cmp	r3, #47	; 0x2f
 801a63a:	d912      	bls.n	801a662 <SEGGER_RTT_vprintf+0x122>
 801a63c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a640:	2b39      	cmp	r3, #57	; 0x39
 801a642:	d80e      	bhi.n	801a662 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 801a644:	68bb      	ldr	r3, [r7, #8]
 801a646:	3301      	adds	r3, #1
 801a648:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 801a64a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a64c:	4613      	mov	r3, r2
 801a64e:	009b      	lsls	r3, r3, #2
 801a650:	4413      	add	r3, r2
 801a652:	005b      	lsls	r3, r3, #1
 801a654:	461a      	mov	r2, r3
 801a656:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a65a:	4413      	add	r3, r2
 801a65c:	3b30      	subs	r3, #48	; 0x30
 801a65e:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 801a660:	e7e4      	b.n	801a62c <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 801a662:	2300      	movs	r3, #0
 801a664:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	781b      	ldrb	r3, [r3, #0]
 801a66a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 801a66e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a672:	2b2e      	cmp	r3, #46	; 0x2e
 801a674:	d11d      	bne.n	801a6b2 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 801a676:	68bb      	ldr	r3, [r7, #8]
 801a678:	3301      	adds	r3, #1
 801a67a:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 801a67c:	68bb      	ldr	r3, [r7, #8]
 801a67e:	781b      	ldrb	r3, [r3, #0]
 801a680:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 801a684:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a688:	2b2f      	cmp	r3, #47	; 0x2f
 801a68a:	d912      	bls.n	801a6b2 <SEGGER_RTT_vprintf+0x172>
 801a68c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a690:	2b39      	cmp	r3, #57	; 0x39
 801a692:	d80e      	bhi.n	801a6b2 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 801a694:	68bb      	ldr	r3, [r7, #8]
 801a696:	3301      	adds	r3, #1
 801a698:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 801a69a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801a69c:	4613      	mov	r3, r2
 801a69e:	009b      	lsls	r3, r3, #2
 801a6a0:	4413      	add	r3, r2
 801a6a2:	005b      	lsls	r3, r3, #1
 801a6a4:	461a      	mov	r2, r3
 801a6a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a6aa:	4413      	add	r3, r2
 801a6ac:	3b30      	subs	r3, #48	; 0x30
 801a6ae:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 801a6b0:	e7e4      	b.n	801a67c <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 801a6b2:	68bb      	ldr	r3, [r7, #8]
 801a6b4:	781b      	ldrb	r3, [r3, #0]
 801a6b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 801a6ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a6be:	2b6c      	cmp	r3, #108	; 0x6c
 801a6c0:	d003      	beq.n	801a6ca <SEGGER_RTT_vprintf+0x18a>
 801a6c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a6c6:	2b68      	cmp	r3, #104	; 0x68
 801a6c8:	d107      	bne.n	801a6da <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 801a6ca:	68bb      	ldr	r3, [r7, #8]
 801a6cc:	3301      	adds	r3, #1
 801a6ce:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 801a6d0:	68bb      	ldr	r3, [r7, #8]
 801a6d2:	781b      	ldrb	r3, [r3, #0]
 801a6d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 801a6d8:	e7ef      	b.n	801a6ba <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 801a6da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a6de:	2b25      	cmp	r3, #37	; 0x25
 801a6e0:	f000 80d1 	beq.w	801a886 <SEGGER_RTT_vprintf+0x346>
 801a6e4:	2b25      	cmp	r3, #37	; 0x25
 801a6e6:	f2c0 80d5 	blt.w	801a894 <SEGGER_RTT_vprintf+0x354>
 801a6ea:	2b78      	cmp	r3, #120	; 0x78
 801a6ec:	f300 80d2 	bgt.w	801a894 <SEGGER_RTT_vprintf+0x354>
 801a6f0:	2b58      	cmp	r3, #88	; 0x58
 801a6f2:	f2c0 80cf 	blt.w	801a894 <SEGGER_RTT_vprintf+0x354>
 801a6f6:	3b58      	subs	r3, #88	; 0x58
 801a6f8:	2b20      	cmp	r3, #32
 801a6fa:	f200 80cb 	bhi.w	801a894 <SEGGER_RTT_vprintf+0x354>
 801a6fe:	a201      	add	r2, pc, #4	; (adr r2, 801a704 <SEGGER_RTT_vprintf+0x1c4>)
 801a700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a704:	0801a7fb 	.word	0x0801a7fb
 801a708:	0801a895 	.word	0x0801a895
 801a70c:	0801a895 	.word	0x0801a895
 801a710:	0801a895 	.word	0x0801a895
 801a714:	0801a895 	.word	0x0801a895
 801a718:	0801a895 	.word	0x0801a895
 801a71c:	0801a895 	.word	0x0801a895
 801a720:	0801a895 	.word	0x0801a895
 801a724:	0801a895 	.word	0x0801a895
 801a728:	0801a895 	.word	0x0801a895
 801a72c:	0801a895 	.word	0x0801a895
 801a730:	0801a789 	.word	0x0801a789
 801a734:	0801a7af 	.word	0x0801a7af
 801a738:	0801a895 	.word	0x0801a895
 801a73c:	0801a895 	.word	0x0801a895
 801a740:	0801a895 	.word	0x0801a895
 801a744:	0801a895 	.word	0x0801a895
 801a748:	0801a895 	.word	0x0801a895
 801a74c:	0801a895 	.word	0x0801a895
 801a750:	0801a895 	.word	0x0801a895
 801a754:	0801a895 	.word	0x0801a895
 801a758:	0801a895 	.word	0x0801a895
 801a75c:	0801a895 	.word	0x0801a895
 801a760:	0801a895 	.word	0x0801a895
 801a764:	0801a861 	.word	0x0801a861
 801a768:	0801a895 	.word	0x0801a895
 801a76c:	0801a895 	.word	0x0801a895
 801a770:	0801a821 	.word	0x0801a821
 801a774:	0801a895 	.word	0x0801a895
 801a778:	0801a7d5 	.word	0x0801a7d5
 801a77c:	0801a895 	.word	0x0801a895
 801a780:	0801a895 	.word	0x0801a895
 801a784:	0801a7fb 	.word	0x0801a7fb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	1d19      	adds	r1, r3, #4
 801a78e:	687a      	ldr	r2, [r7, #4]
 801a790:	6011      	str	r1, [r2, #0]
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 801a796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a798:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 801a79c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 801a7a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a7a4:	4611      	mov	r1, r2
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	f7ff fd38 	bl	801a21c <_StoreChar>
        break;
 801a7ac:	e073      	b.n	801a896 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	1d19      	adds	r1, r3, #4
 801a7b4:	687a      	ldr	r2, [r7, #4]
 801a7b6:	6011      	str	r1, [r2, #0]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 801a7bc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801a7c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a7c2:	9301      	str	r3, [sp, #4]
 801a7c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a7c6:	9300      	str	r3, [sp, #0]
 801a7c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a7ca:	220a      	movs	r2, #10
 801a7cc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a7ce:	f7ff fe0f 	bl	801a3f0 <_PrintInt>
        break;
 801a7d2:	e060      	b.n	801a896 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	1d19      	adds	r1, r3, #4
 801a7da:	687a      	ldr	r2, [r7, #4]
 801a7dc:	6011      	str	r1, [r2, #0]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 801a7e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a7e4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801a7e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a7ea:	9301      	str	r3, [sp, #4]
 801a7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a7ee:	9300      	str	r3, [sp, #0]
 801a7f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a7f2:	220a      	movs	r2, #10
 801a7f4:	f7ff fd50 	bl	801a298 <_PrintUnsigned>
        break;
 801a7f8:	e04d      	b.n	801a896 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	1d19      	adds	r1, r3, #4
 801a800:	687a      	ldr	r2, [r7, #4]
 801a802:	6011      	str	r1, [r2, #0]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 801a808:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a80a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801a80e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a810:	9301      	str	r3, [sp, #4]
 801a812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a814:	9300      	str	r3, [sp, #0]
 801a816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a818:	2210      	movs	r2, #16
 801a81a:	f7ff fd3d 	bl	801a298 <_PrintUnsigned>
        break;
 801a81e:	e03a      	b.n	801a896 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	1d19      	adds	r1, r3, #4
 801a826:	687a      	ldr	r2, [r7, #4]
 801a828:	6011      	str	r1, [r2, #0]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 801a82e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a830:	781b      	ldrb	r3, [r3, #0]
 801a832:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 801a836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a838:	3301      	adds	r3, #1
 801a83a:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 801a83c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801a840:	2b00      	cmp	r3, #0
 801a842:	d00b      	beq.n	801a85c <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 801a844:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 801a848:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a84c:	4611      	mov	r1, r2
 801a84e:	4618      	mov	r0, r3
 801a850:	f7ff fce4 	bl	801a21c <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 801a854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a856:	2b00      	cmp	r3, #0
 801a858:	dae9      	bge.n	801a82e <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 801a85a:	e01c      	b.n	801a896 <SEGGER_RTT_vprintf+0x356>
              break;
 801a85c:	bf00      	nop
        break;
 801a85e:	e01a      	b.n	801a896 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	1d19      	adds	r1, r3, #4
 801a866:	687a      	ldr	r2, [r7, #4]
 801a868:	6011      	str	r1, [r2, #0]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 801a86e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a870:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801a874:	2300      	movs	r3, #0
 801a876:	9301      	str	r3, [sp, #4]
 801a878:	2308      	movs	r3, #8
 801a87a:	9300      	str	r3, [sp, #0]
 801a87c:	2308      	movs	r3, #8
 801a87e:	2210      	movs	r2, #16
 801a880:	f7ff fd0a 	bl	801a298 <_PrintUnsigned>
        break;
 801a884:	e007      	b.n	801a896 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 801a886:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a88a:	2125      	movs	r1, #37	; 0x25
 801a88c:	4618      	mov	r0, r3
 801a88e:	f7ff fcc5 	bl	801a21c <_StoreChar>
        break;
 801a892:	e000      	b.n	801a896 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 801a894:	bf00      	nop
      }
      sFormat++;
 801a896:	68bb      	ldr	r3, [r7, #8]
 801a898:	3301      	adds	r3, #1
 801a89a:	60bb      	str	r3, [r7, #8]
 801a89c:	e007      	b.n	801a8ae <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 801a89e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 801a8a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a8a6:	4611      	mov	r1, r2
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f7ff fcb7 	bl	801a21c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 801a8ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	f6bf ae56 	bge.w	801a562 <SEGGER_RTT_vprintf+0x22>
 801a8b6:	e000      	b.n	801a8ba <SEGGER_RTT_vprintf+0x37a>
      break;
 801a8b8:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 801a8ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	dd0d      	ble.n	801a8dc <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 801a8c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d006      	beq.n	801a8d4 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 801a8c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a8c8:	f107 0310 	add.w	r3, r7, #16
 801a8cc:	4619      	mov	r1, r3
 801a8ce:	68f8      	ldr	r0, [r7, #12]
 801a8d0:	f7ff fc7e 	bl	801a1d0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 801a8d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a8d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a8d8:	4413      	add	r3, r2
 801a8da:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 801a8dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 801a8de:	4618      	mov	r0, r3
 801a8e0:	3780      	adds	r7, #128	; 0x80
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}
 801a8e6:	bf00      	nop

0801a8e8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 801a8e8:	b40e      	push	{r1, r2, r3}
 801a8ea:	b580      	push	{r7, lr}
 801a8ec:	b085      	sub	sp, #20
 801a8ee:	af00      	add	r7, sp, #0
 801a8f0:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 801a8f2:	f107 0320 	add.w	r3, r7, #32
 801a8f6:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 801a8f8:	f107 0308 	add.w	r3, r7, #8
 801a8fc:	461a      	mov	r2, r3
 801a8fe:	69f9      	ldr	r1, [r7, #28]
 801a900:	6878      	ldr	r0, [r7, #4]
 801a902:	f7ff fe1d 	bl	801a540 <SEGGER_RTT_vprintf>
 801a906:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 801a908:	68fb      	ldr	r3, [r7, #12]
}
 801a90a:	4618      	mov	r0, r3
 801a90c:	3714      	adds	r7, #20
 801a90e:	46bd      	mov	sp, r7
 801a910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a914:	b003      	add	sp, #12
 801a916:	4770      	bx	lr

0801a918 <rand>:
 801a918:	4b16      	ldr	r3, [pc, #88]	; (801a974 <rand+0x5c>)
 801a91a:	b510      	push	{r4, lr}
 801a91c:	681c      	ldr	r4, [r3, #0]
 801a91e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a920:	b9b3      	cbnz	r3, 801a950 <rand+0x38>
 801a922:	2018      	movs	r0, #24
 801a924:	f000 faa8 	bl	801ae78 <malloc>
 801a928:	4602      	mov	r2, r0
 801a92a:	6320      	str	r0, [r4, #48]	; 0x30
 801a92c:	b920      	cbnz	r0, 801a938 <rand+0x20>
 801a92e:	4b12      	ldr	r3, [pc, #72]	; (801a978 <rand+0x60>)
 801a930:	4812      	ldr	r0, [pc, #72]	; (801a97c <rand+0x64>)
 801a932:	2152      	movs	r1, #82	; 0x52
 801a934:	f000 fa36 	bl	801ada4 <__assert_func>
 801a938:	4911      	ldr	r1, [pc, #68]	; (801a980 <rand+0x68>)
 801a93a:	4b12      	ldr	r3, [pc, #72]	; (801a984 <rand+0x6c>)
 801a93c:	e9c0 1300 	strd	r1, r3, [r0]
 801a940:	4b11      	ldr	r3, [pc, #68]	; (801a988 <rand+0x70>)
 801a942:	6083      	str	r3, [r0, #8]
 801a944:	230b      	movs	r3, #11
 801a946:	8183      	strh	r3, [r0, #12]
 801a948:	2100      	movs	r1, #0
 801a94a:	2001      	movs	r0, #1
 801a94c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a950:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a952:	480e      	ldr	r0, [pc, #56]	; (801a98c <rand+0x74>)
 801a954:	690b      	ldr	r3, [r1, #16]
 801a956:	694c      	ldr	r4, [r1, #20]
 801a958:	4a0d      	ldr	r2, [pc, #52]	; (801a990 <rand+0x78>)
 801a95a:	4358      	muls	r0, r3
 801a95c:	fb02 0004 	mla	r0, r2, r4, r0
 801a960:	fba3 3202 	umull	r3, r2, r3, r2
 801a964:	3301      	adds	r3, #1
 801a966:	eb40 0002 	adc.w	r0, r0, r2
 801a96a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a96e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a972:	bd10      	pop	{r4, pc}
 801a974:	200000a4 	.word	0x200000a4
 801a978:	0801f494 	.word	0x0801f494
 801a97c:	0801f4ab 	.word	0x0801f4ab
 801a980:	abcd330e 	.word	0xabcd330e
 801a984:	e66d1234 	.word	0xe66d1234
 801a988:	0005deec 	.word	0x0005deec
 801a98c:	5851f42d 	.word	0x5851f42d
 801a990:	4c957f2d 	.word	0x4c957f2d

0801a994 <std>:
 801a994:	2300      	movs	r3, #0
 801a996:	b510      	push	{r4, lr}
 801a998:	4604      	mov	r4, r0
 801a99a:	e9c0 3300 	strd	r3, r3, [r0]
 801a99e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a9a2:	6083      	str	r3, [r0, #8]
 801a9a4:	8181      	strh	r1, [r0, #12]
 801a9a6:	6643      	str	r3, [r0, #100]	; 0x64
 801a9a8:	81c2      	strh	r2, [r0, #14]
 801a9aa:	6183      	str	r3, [r0, #24]
 801a9ac:	4619      	mov	r1, r3
 801a9ae:	2208      	movs	r2, #8
 801a9b0:	305c      	adds	r0, #92	; 0x5c
 801a9b2:	f000 f916 	bl	801abe2 <memset>
 801a9b6:	4b0d      	ldr	r3, [pc, #52]	; (801a9ec <std+0x58>)
 801a9b8:	6263      	str	r3, [r4, #36]	; 0x24
 801a9ba:	4b0d      	ldr	r3, [pc, #52]	; (801a9f0 <std+0x5c>)
 801a9bc:	62a3      	str	r3, [r4, #40]	; 0x28
 801a9be:	4b0d      	ldr	r3, [pc, #52]	; (801a9f4 <std+0x60>)
 801a9c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a9c2:	4b0d      	ldr	r3, [pc, #52]	; (801a9f8 <std+0x64>)
 801a9c4:	6323      	str	r3, [r4, #48]	; 0x30
 801a9c6:	4b0d      	ldr	r3, [pc, #52]	; (801a9fc <std+0x68>)
 801a9c8:	6224      	str	r4, [r4, #32]
 801a9ca:	429c      	cmp	r4, r3
 801a9cc:	d006      	beq.n	801a9dc <std+0x48>
 801a9ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801a9d2:	4294      	cmp	r4, r2
 801a9d4:	d002      	beq.n	801a9dc <std+0x48>
 801a9d6:	33d0      	adds	r3, #208	; 0xd0
 801a9d8:	429c      	cmp	r4, r3
 801a9da:	d105      	bne.n	801a9e8 <std+0x54>
 801a9dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9e4:	f000 b9cc 	b.w	801ad80 <__retarget_lock_init_recursive>
 801a9e8:	bd10      	pop	{r4, pc}
 801a9ea:	bf00      	nop
 801a9ec:	0801ab3d 	.word	0x0801ab3d
 801a9f0:	0801ab5f 	.word	0x0801ab5f
 801a9f4:	0801ab97 	.word	0x0801ab97
 801a9f8:	0801abbb 	.word	0x0801abbb
 801a9fc:	200128d4 	.word	0x200128d4

0801aa00 <stdio_exit_handler>:
 801aa00:	4a02      	ldr	r2, [pc, #8]	; (801aa0c <stdio_exit_handler+0xc>)
 801aa02:	4903      	ldr	r1, [pc, #12]	; (801aa10 <stdio_exit_handler+0x10>)
 801aa04:	4803      	ldr	r0, [pc, #12]	; (801aa14 <stdio_exit_handler+0x14>)
 801aa06:	f000 b869 	b.w	801aadc <_fwalk_sglue>
 801aa0a:	bf00      	nop
 801aa0c:	2000004c 	.word	0x2000004c
 801aa10:	0801b695 	.word	0x0801b695
 801aa14:	20000058 	.word	0x20000058

0801aa18 <cleanup_stdio>:
 801aa18:	6841      	ldr	r1, [r0, #4]
 801aa1a:	4b0c      	ldr	r3, [pc, #48]	; (801aa4c <cleanup_stdio+0x34>)
 801aa1c:	4299      	cmp	r1, r3
 801aa1e:	b510      	push	{r4, lr}
 801aa20:	4604      	mov	r4, r0
 801aa22:	d001      	beq.n	801aa28 <cleanup_stdio+0x10>
 801aa24:	f000 fe36 	bl	801b694 <_fflush_r>
 801aa28:	68a1      	ldr	r1, [r4, #8]
 801aa2a:	4b09      	ldr	r3, [pc, #36]	; (801aa50 <cleanup_stdio+0x38>)
 801aa2c:	4299      	cmp	r1, r3
 801aa2e:	d002      	beq.n	801aa36 <cleanup_stdio+0x1e>
 801aa30:	4620      	mov	r0, r4
 801aa32:	f000 fe2f 	bl	801b694 <_fflush_r>
 801aa36:	68e1      	ldr	r1, [r4, #12]
 801aa38:	4b06      	ldr	r3, [pc, #24]	; (801aa54 <cleanup_stdio+0x3c>)
 801aa3a:	4299      	cmp	r1, r3
 801aa3c:	d004      	beq.n	801aa48 <cleanup_stdio+0x30>
 801aa3e:	4620      	mov	r0, r4
 801aa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa44:	f000 be26 	b.w	801b694 <_fflush_r>
 801aa48:	bd10      	pop	{r4, pc}
 801aa4a:	bf00      	nop
 801aa4c:	200128d4 	.word	0x200128d4
 801aa50:	2001293c 	.word	0x2001293c
 801aa54:	200129a4 	.word	0x200129a4

0801aa58 <global_stdio_init.part.0>:
 801aa58:	b510      	push	{r4, lr}
 801aa5a:	4b0b      	ldr	r3, [pc, #44]	; (801aa88 <global_stdio_init.part.0+0x30>)
 801aa5c:	4c0b      	ldr	r4, [pc, #44]	; (801aa8c <global_stdio_init.part.0+0x34>)
 801aa5e:	4a0c      	ldr	r2, [pc, #48]	; (801aa90 <global_stdio_init.part.0+0x38>)
 801aa60:	601a      	str	r2, [r3, #0]
 801aa62:	4620      	mov	r0, r4
 801aa64:	2200      	movs	r2, #0
 801aa66:	2104      	movs	r1, #4
 801aa68:	f7ff ff94 	bl	801a994 <std>
 801aa6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801aa70:	2201      	movs	r2, #1
 801aa72:	2109      	movs	r1, #9
 801aa74:	f7ff ff8e 	bl	801a994 <std>
 801aa78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801aa7c:	2202      	movs	r2, #2
 801aa7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa82:	2112      	movs	r1, #18
 801aa84:	f7ff bf86 	b.w	801a994 <std>
 801aa88:	20012a0c 	.word	0x20012a0c
 801aa8c:	200128d4 	.word	0x200128d4
 801aa90:	0801aa01 	.word	0x0801aa01

0801aa94 <__sfp_lock_acquire>:
 801aa94:	4801      	ldr	r0, [pc, #4]	; (801aa9c <__sfp_lock_acquire+0x8>)
 801aa96:	f000 b974 	b.w	801ad82 <__retarget_lock_acquire_recursive>
 801aa9a:	bf00      	nop
 801aa9c:	20012a15 	.word	0x20012a15

0801aaa0 <__sfp_lock_release>:
 801aaa0:	4801      	ldr	r0, [pc, #4]	; (801aaa8 <__sfp_lock_release+0x8>)
 801aaa2:	f000 b96f 	b.w	801ad84 <__retarget_lock_release_recursive>
 801aaa6:	bf00      	nop
 801aaa8:	20012a15 	.word	0x20012a15

0801aaac <__sinit>:
 801aaac:	b510      	push	{r4, lr}
 801aaae:	4604      	mov	r4, r0
 801aab0:	f7ff fff0 	bl	801aa94 <__sfp_lock_acquire>
 801aab4:	6a23      	ldr	r3, [r4, #32]
 801aab6:	b11b      	cbz	r3, 801aac0 <__sinit+0x14>
 801aab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aabc:	f7ff bff0 	b.w	801aaa0 <__sfp_lock_release>
 801aac0:	4b04      	ldr	r3, [pc, #16]	; (801aad4 <__sinit+0x28>)
 801aac2:	6223      	str	r3, [r4, #32]
 801aac4:	4b04      	ldr	r3, [pc, #16]	; (801aad8 <__sinit+0x2c>)
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d1f5      	bne.n	801aab8 <__sinit+0xc>
 801aacc:	f7ff ffc4 	bl	801aa58 <global_stdio_init.part.0>
 801aad0:	e7f2      	b.n	801aab8 <__sinit+0xc>
 801aad2:	bf00      	nop
 801aad4:	0801aa19 	.word	0x0801aa19
 801aad8:	20012a0c 	.word	0x20012a0c

0801aadc <_fwalk_sglue>:
 801aadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aae0:	4607      	mov	r7, r0
 801aae2:	4688      	mov	r8, r1
 801aae4:	4614      	mov	r4, r2
 801aae6:	2600      	movs	r6, #0
 801aae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aaec:	f1b9 0901 	subs.w	r9, r9, #1
 801aaf0:	d505      	bpl.n	801aafe <_fwalk_sglue+0x22>
 801aaf2:	6824      	ldr	r4, [r4, #0]
 801aaf4:	2c00      	cmp	r4, #0
 801aaf6:	d1f7      	bne.n	801aae8 <_fwalk_sglue+0xc>
 801aaf8:	4630      	mov	r0, r6
 801aafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aafe:	89ab      	ldrh	r3, [r5, #12]
 801ab00:	2b01      	cmp	r3, #1
 801ab02:	d907      	bls.n	801ab14 <_fwalk_sglue+0x38>
 801ab04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ab08:	3301      	adds	r3, #1
 801ab0a:	d003      	beq.n	801ab14 <_fwalk_sglue+0x38>
 801ab0c:	4629      	mov	r1, r5
 801ab0e:	4638      	mov	r0, r7
 801ab10:	47c0      	blx	r8
 801ab12:	4306      	orrs	r6, r0
 801ab14:	3568      	adds	r5, #104	; 0x68
 801ab16:	e7e9      	b.n	801aaec <_fwalk_sglue+0x10>

0801ab18 <iprintf>:
 801ab18:	b40f      	push	{r0, r1, r2, r3}
 801ab1a:	b507      	push	{r0, r1, r2, lr}
 801ab1c:	4906      	ldr	r1, [pc, #24]	; (801ab38 <iprintf+0x20>)
 801ab1e:	ab04      	add	r3, sp, #16
 801ab20:	6808      	ldr	r0, [r1, #0]
 801ab22:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab26:	6881      	ldr	r1, [r0, #8]
 801ab28:	9301      	str	r3, [sp, #4]
 801ab2a:	f000 fa83 	bl	801b034 <_vfiprintf_r>
 801ab2e:	b003      	add	sp, #12
 801ab30:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab34:	b004      	add	sp, #16
 801ab36:	4770      	bx	lr
 801ab38:	200000a4 	.word	0x200000a4

0801ab3c <__sread>:
 801ab3c:	b510      	push	{r4, lr}
 801ab3e:	460c      	mov	r4, r1
 801ab40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab44:	f000 f8ce 	bl	801ace4 <_read_r>
 801ab48:	2800      	cmp	r0, #0
 801ab4a:	bfab      	itete	ge
 801ab4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ab4e:	89a3      	ldrhlt	r3, [r4, #12]
 801ab50:	181b      	addge	r3, r3, r0
 801ab52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ab56:	bfac      	ite	ge
 801ab58:	6563      	strge	r3, [r4, #84]	; 0x54
 801ab5a:	81a3      	strhlt	r3, [r4, #12]
 801ab5c:	bd10      	pop	{r4, pc}

0801ab5e <__swrite>:
 801ab5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab62:	461f      	mov	r7, r3
 801ab64:	898b      	ldrh	r3, [r1, #12]
 801ab66:	05db      	lsls	r3, r3, #23
 801ab68:	4605      	mov	r5, r0
 801ab6a:	460c      	mov	r4, r1
 801ab6c:	4616      	mov	r6, r2
 801ab6e:	d505      	bpl.n	801ab7c <__swrite+0x1e>
 801ab70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab74:	2302      	movs	r3, #2
 801ab76:	2200      	movs	r2, #0
 801ab78:	f000 f8a2 	bl	801acc0 <_lseek_r>
 801ab7c:	89a3      	ldrh	r3, [r4, #12]
 801ab7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ab86:	81a3      	strh	r3, [r4, #12]
 801ab88:	4632      	mov	r2, r6
 801ab8a:	463b      	mov	r3, r7
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab92:	f000 b8b9 	b.w	801ad08 <_write_r>

0801ab96 <__sseek>:
 801ab96:	b510      	push	{r4, lr}
 801ab98:	460c      	mov	r4, r1
 801ab9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab9e:	f000 f88f 	bl	801acc0 <_lseek_r>
 801aba2:	1c43      	adds	r3, r0, #1
 801aba4:	89a3      	ldrh	r3, [r4, #12]
 801aba6:	bf15      	itete	ne
 801aba8:	6560      	strne	r0, [r4, #84]	; 0x54
 801abaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801abae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801abb2:	81a3      	strheq	r3, [r4, #12]
 801abb4:	bf18      	it	ne
 801abb6:	81a3      	strhne	r3, [r4, #12]
 801abb8:	bd10      	pop	{r4, pc}

0801abba <__sclose>:
 801abba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abbe:	f000 b819 	b.w	801abf4 <_close_r>

0801abc2 <memcmp>:
 801abc2:	b510      	push	{r4, lr}
 801abc4:	3901      	subs	r1, #1
 801abc6:	4402      	add	r2, r0
 801abc8:	4290      	cmp	r0, r2
 801abca:	d101      	bne.n	801abd0 <memcmp+0xe>
 801abcc:	2000      	movs	r0, #0
 801abce:	e005      	b.n	801abdc <memcmp+0x1a>
 801abd0:	7803      	ldrb	r3, [r0, #0]
 801abd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801abd6:	42a3      	cmp	r3, r4
 801abd8:	d001      	beq.n	801abde <memcmp+0x1c>
 801abda:	1b18      	subs	r0, r3, r4
 801abdc:	bd10      	pop	{r4, pc}
 801abde:	3001      	adds	r0, #1
 801abe0:	e7f2      	b.n	801abc8 <memcmp+0x6>

0801abe2 <memset>:
 801abe2:	4402      	add	r2, r0
 801abe4:	4603      	mov	r3, r0
 801abe6:	4293      	cmp	r3, r2
 801abe8:	d100      	bne.n	801abec <memset+0xa>
 801abea:	4770      	bx	lr
 801abec:	f803 1b01 	strb.w	r1, [r3], #1
 801abf0:	e7f9      	b.n	801abe6 <memset+0x4>
	...

0801abf4 <_close_r>:
 801abf4:	b538      	push	{r3, r4, r5, lr}
 801abf6:	4d06      	ldr	r5, [pc, #24]	; (801ac10 <_close_r+0x1c>)
 801abf8:	2300      	movs	r3, #0
 801abfa:	4604      	mov	r4, r0
 801abfc:	4608      	mov	r0, r1
 801abfe:	602b      	str	r3, [r5, #0]
 801ac00:	f7e7 f8a9 	bl	8001d56 <_close>
 801ac04:	1c43      	adds	r3, r0, #1
 801ac06:	d102      	bne.n	801ac0e <_close_r+0x1a>
 801ac08:	682b      	ldr	r3, [r5, #0]
 801ac0a:	b103      	cbz	r3, 801ac0e <_close_r+0x1a>
 801ac0c:	6023      	str	r3, [r4, #0]
 801ac0e:	bd38      	pop	{r3, r4, r5, pc}
 801ac10:	20012a10 	.word	0x20012a10

0801ac14 <_reclaim_reent>:
 801ac14:	4b29      	ldr	r3, [pc, #164]	; (801acbc <_reclaim_reent+0xa8>)
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	4283      	cmp	r3, r0
 801ac1a:	b570      	push	{r4, r5, r6, lr}
 801ac1c:	4604      	mov	r4, r0
 801ac1e:	d04b      	beq.n	801acb8 <_reclaim_reent+0xa4>
 801ac20:	69c3      	ldr	r3, [r0, #28]
 801ac22:	b143      	cbz	r3, 801ac36 <_reclaim_reent+0x22>
 801ac24:	68db      	ldr	r3, [r3, #12]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d144      	bne.n	801acb4 <_reclaim_reent+0xa0>
 801ac2a:	69e3      	ldr	r3, [r4, #28]
 801ac2c:	6819      	ldr	r1, [r3, #0]
 801ac2e:	b111      	cbz	r1, 801ac36 <_reclaim_reent+0x22>
 801ac30:	4620      	mov	r0, r4
 801ac32:	f000 f8d5 	bl	801ade0 <_free_r>
 801ac36:	6961      	ldr	r1, [r4, #20]
 801ac38:	b111      	cbz	r1, 801ac40 <_reclaim_reent+0x2c>
 801ac3a:	4620      	mov	r0, r4
 801ac3c:	f000 f8d0 	bl	801ade0 <_free_r>
 801ac40:	69e1      	ldr	r1, [r4, #28]
 801ac42:	b111      	cbz	r1, 801ac4a <_reclaim_reent+0x36>
 801ac44:	4620      	mov	r0, r4
 801ac46:	f000 f8cb 	bl	801ade0 <_free_r>
 801ac4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ac4c:	b111      	cbz	r1, 801ac54 <_reclaim_reent+0x40>
 801ac4e:	4620      	mov	r0, r4
 801ac50:	f000 f8c6 	bl	801ade0 <_free_r>
 801ac54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac56:	b111      	cbz	r1, 801ac5e <_reclaim_reent+0x4a>
 801ac58:	4620      	mov	r0, r4
 801ac5a:	f000 f8c1 	bl	801ade0 <_free_r>
 801ac5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ac60:	b111      	cbz	r1, 801ac68 <_reclaim_reent+0x54>
 801ac62:	4620      	mov	r0, r4
 801ac64:	f000 f8bc 	bl	801ade0 <_free_r>
 801ac68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ac6a:	b111      	cbz	r1, 801ac72 <_reclaim_reent+0x5e>
 801ac6c:	4620      	mov	r0, r4
 801ac6e:	f000 f8b7 	bl	801ade0 <_free_r>
 801ac72:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801ac74:	b111      	cbz	r1, 801ac7c <_reclaim_reent+0x68>
 801ac76:	4620      	mov	r0, r4
 801ac78:	f000 f8b2 	bl	801ade0 <_free_r>
 801ac7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801ac7e:	b111      	cbz	r1, 801ac86 <_reclaim_reent+0x72>
 801ac80:	4620      	mov	r0, r4
 801ac82:	f000 f8ad 	bl	801ade0 <_free_r>
 801ac86:	6a23      	ldr	r3, [r4, #32]
 801ac88:	b1b3      	cbz	r3, 801acb8 <_reclaim_reent+0xa4>
 801ac8a:	4620      	mov	r0, r4
 801ac8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac90:	4718      	bx	r3
 801ac92:	5949      	ldr	r1, [r1, r5]
 801ac94:	b941      	cbnz	r1, 801aca8 <_reclaim_reent+0x94>
 801ac96:	3504      	adds	r5, #4
 801ac98:	69e3      	ldr	r3, [r4, #28]
 801ac9a:	2d80      	cmp	r5, #128	; 0x80
 801ac9c:	68d9      	ldr	r1, [r3, #12]
 801ac9e:	d1f8      	bne.n	801ac92 <_reclaim_reent+0x7e>
 801aca0:	4620      	mov	r0, r4
 801aca2:	f000 f89d 	bl	801ade0 <_free_r>
 801aca6:	e7c0      	b.n	801ac2a <_reclaim_reent+0x16>
 801aca8:	680e      	ldr	r6, [r1, #0]
 801acaa:	4620      	mov	r0, r4
 801acac:	f000 f898 	bl	801ade0 <_free_r>
 801acb0:	4631      	mov	r1, r6
 801acb2:	e7ef      	b.n	801ac94 <_reclaim_reent+0x80>
 801acb4:	2500      	movs	r5, #0
 801acb6:	e7ef      	b.n	801ac98 <_reclaim_reent+0x84>
 801acb8:	bd70      	pop	{r4, r5, r6, pc}
 801acba:	bf00      	nop
 801acbc:	200000a4 	.word	0x200000a4

0801acc0 <_lseek_r>:
 801acc0:	b538      	push	{r3, r4, r5, lr}
 801acc2:	4d07      	ldr	r5, [pc, #28]	; (801ace0 <_lseek_r+0x20>)
 801acc4:	4604      	mov	r4, r0
 801acc6:	4608      	mov	r0, r1
 801acc8:	4611      	mov	r1, r2
 801acca:	2200      	movs	r2, #0
 801accc:	602a      	str	r2, [r5, #0]
 801acce:	461a      	mov	r2, r3
 801acd0:	f7e7 f868 	bl	8001da4 <_lseek>
 801acd4:	1c43      	adds	r3, r0, #1
 801acd6:	d102      	bne.n	801acde <_lseek_r+0x1e>
 801acd8:	682b      	ldr	r3, [r5, #0]
 801acda:	b103      	cbz	r3, 801acde <_lseek_r+0x1e>
 801acdc:	6023      	str	r3, [r4, #0]
 801acde:	bd38      	pop	{r3, r4, r5, pc}
 801ace0:	20012a10 	.word	0x20012a10

0801ace4 <_read_r>:
 801ace4:	b538      	push	{r3, r4, r5, lr}
 801ace6:	4d07      	ldr	r5, [pc, #28]	; (801ad04 <_read_r+0x20>)
 801ace8:	4604      	mov	r4, r0
 801acea:	4608      	mov	r0, r1
 801acec:	4611      	mov	r1, r2
 801acee:	2200      	movs	r2, #0
 801acf0:	602a      	str	r2, [r5, #0]
 801acf2:	461a      	mov	r2, r3
 801acf4:	f7e6 fff6 	bl	8001ce4 <_read>
 801acf8:	1c43      	adds	r3, r0, #1
 801acfa:	d102      	bne.n	801ad02 <_read_r+0x1e>
 801acfc:	682b      	ldr	r3, [r5, #0]
 801acfe:	b103      	cbz	r3, 801ad02 <_read_r+0x1e>
 801ad00:	6023      	str	r3, [r4, #0]
 801ad02:	bd38      	pop	{r3, r4, r5, pc}
 801ad04:	20012a10 	.word	0x20012a10

0801ad08 <_write_r>:
 801ad08:	b538      	push	{r3, r4, r5, lr}
 801ad0a:	4d07      	ldr	r5, [pc, #28]	; (801ad28 <_write_r+0x20>)
 801ad0c:	4604      	mov	r4, r0
 801ad0e:	4608      	mov	r0, r1
 801ad10:	4611      	mov	r1, r2
 801ad12:	2200      	movs	r2, #0
 801ad14:	602a      	str	r2, [r5, #0]
 801ad16:	461a      	mov	r2, r3
 801ad18:	f7e7 f801 	bl	8001d1e <_write>
 801ad1c:	1c43      	adds	r3, r0, #1
 801ad1e:	d102      	bne.n	801ad26 <_write_r+0x1e>
 801ad20:	682b      	ldr	r3, [r5, #0]
 801ad22:	b103      	cbz	r3, 801ad26 <_write_r+0x1e>
 801ad24:	6023      	str	r3, [r4, #0]
 801ad26:	bd38      	pop	{r3, r4, r5, pc}
 801ad28:	20012a10 	.word	0x20012a10

0801ad2c <__errno>:
 801ad2c:	4b01      	ldr	r3, [pc, #4]	; (801ad34 <__errno+0x8>)
 801ad2e:	6818      	ldr	r0, [r3, #0]
 801ad30:	4770      	bx	lr
 801ad32:	bf00      	nop
 801ad34:	200000a4 	.word	0x200000a4

0801ad38 <__libc_init_array>:
 801ad38:	b570      	push	{r4, r5, r6, lr}
 801ad3a:	4d0d      	ldr	r5, [pc, #52]	; (801ad70 <__libc_init_array+0x38>)
 801ad3c:	4c0d      	ldr	r4, [pc, #52]	; (801ad74 <__libc_init_array+0x3c>)
 801ad3e:	1b64      	subs	r4, r4, r5
 801ad40:	10a4      	asrs	r4, r4, #2
 801ad42:	2600      	movs	r6, #0
 801ad44:	42a6      	cmp	r6, r4
 801ad46:	d109      	bne.n	801ad5c <__libc_init_array+0x24>
 801ad48:	4d0b      	ldr	r5, [pc, #44]	; (801ad78 <__libc_init_array+0x40>)
 801ad4a:	4c0c      	ldr	r4, [pc, #48]	; (801ad7c <__libc_init_array+0x44>)
 801ad4c:	f000 fe52 	bl	801b9f4 <_init>
 801ad50:	1b64      	subs	r4, r4, r5
 801ad52:	10a4      	asrs	r4, r4, #2
 801ad54:	2600      	movs	r6, #0
 801ad56:	42a6      	cmp	r6, r4
 801ad58:	d105      	bne.n	801ad66 <__libc_init_array+0x2e>
 801ad5a:	bd70      	pop	{r4, r5, r6, pc}
 801ad5c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ad60:	4798      	blx	r3
 801ad62:	3601      	adds	r6, #1
 801ad64:	e7ee      	b.n	801ad44 <__libc_init_array+0xc>
 801ad66:	f855 3b04 	ldr.w	r3, [r5], #4
 801ad6a:	4798      	blx	r3
 801ad6c:	3601      	adds	r6, #1
 801ad6e:	e7f2      	b.n	801ad56 <__libc_init_array+0x1e>
 801ad70:	0801f57c 	.word	0x0801f57c
 801ad74:	0801f57c 	.word	0x0801f57c
 801ad78:	0801f57c 	.word	0x0801f57c
 801ad7c:	0801f580 	.word	0x0801f580

0801ad80 <__retarget_lock_init_recursive>:
 801ad80:	4770      	bx	lr

0801ad82 <__retarget_lock_acquire_recursive>:
 801ad82:	4770      	bx	lr

0801ad84 <__retarget_lock_release_recursive>:
 801ad84:	4770      	bx	lr

0801ad86 <memcpy>:
 801ad86:	440a      	add	r2, r1
 801ad88:	4291      	cmp	r1, r2
 801ad8a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ad8e:	d100      	bne.n	801ad92 <memcpy+0xc>
 801ad90:	4770      	bx	lr
 801ad92:	b510      	push	{r4, lr}
 801ad94:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ad98:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ad9c:	4291      	cmp	r1, r2
 801ad9e:	d1f9      	bne.n	801ad94 <memcpy+0xe>
 801ada0:	bd10      	pop	{r4, pc}
	...

0801ada4 <__assert_func>:
 801ada4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ada6:	4614      	mov	r4, r2
 801ada8:	461a      	mov	r2, r3
 801adaa:	4b09      	ldr	r3, [pc, #36]	; (801add0 <__assert_func+0x2c>)
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	4605      	mov	r5, r0
 801adb0:	68d8      	ldr	r0, [r3, #12]
 801adb2:	b14c      	cbz	r4, 801adc8 <__assert_func+0x24>
 801adb4:	4b07      	ldr	r3, [pc, #28]	; (801add4 <__assert_func+0x30>)
 801adb6:	9100      	str	r1, [sp, #0]
 801adb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801adbc:	4906      	ldr	r1, [pc, #24]	; (801add8 <__assert_func+0x34>)
 801adbe:	462b      	mov	r3, r5
 801adc0:	f000 fc90 	bl	801b6e4 <fiprintf>
 801adc4:	f000 fd46 	bl	801b854 <abort>
 801adc8:	4b04      	ldr	r3, [pc, #16]	; (801addc <__assert_func+0x38>)
 801adca:	461c      	mov	r4, r3
 801adcc:	e7f3      	b.n	801adb6 <__assert_func+0x12>
 801adce:	bf00      	nop
 801add0:	200000a4 	.word	0x200000a4
 801add4:	0801f503 	.word	0x0801f503
 801add8:	0801f510 	.word	0x0801f510
 801addc:	0801f53e 	.word	0x0801f53e

0801ade0 <_free_r>:
 801ade0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ade2:	2900      	cmp	r1, #0
 801ade4:	d044      	beq.n	801ae70 <_free_r+0x90>
 801ade6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adea:	9001      	str	r0, [sp, #4]
 801adec:	2b00      	cmp	r3, #0
 801adee:	f1a1 0404 	sub.w	r4, r1, #4
 801adf2:	bfb8      	it	lt
 801adf4:	18e4      	addlt	r4, r4, r3
 801adf6:	f000 f8e7 	bl	801afc8 <__malloc_lock>
 801adfa:	4a1e      	ldr	r2, [pc, #120]	; (801ae74 <_free_r+0x94>)
 801adfc:	9801      	ldr	r0, [sp, #4]
 801adfe:	6813      	ldr	r3, [r2, #0]
 801ae00:	b933      	cbnz	r3, 801ae10 <_free_r+0x30>
 801ae02:	6063      	str	r3, [r4, #4]
 801ae04:	6014      	str	r4, [r2, #0]
 801ae06:	b003      	add	sp, #12
 801ae08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae0c:	f000 b8e2 	b.w	801afd4 <__malloc_unlock>
 801ae10:	42a3      	cmp	r3, r4
 801ae12:	d908      	bls.n	801ae26 <_free_r+0x46>
 801ae14:	6825      	ldr	r5, [r4, #0]
 801ae16:	1961      	adds	r1, r4, r5
 801ae18:	428b      	cmp	r3, r1
 801ae1a:	bf01      	itttt	eq
 801ae1c:	6819      	ldreq	r1, [r3, #0]
 801ae1e:	685b      	ldreq	r3, [r3, #4]
 801ae20:	1949      	addeq	r1, r1, r5
 801ae22:	6021      	streq	r1, [r4, #0]
 801ae24:	e7ed      	b.n	801ae02 <_free_r+0x22>
 801ae26:	461a      	mov	r2, r3
 801ae28:	685b      	ldr	r3, [r3, #4]
 801ae2a:	b10b      	cbz	r3, 801ae30 <_free_r+0x50>
 801ae2c:	42a3      	cmp	r3, r4
 801ae2e:	d9fa      	bls.n	801ae26 <_free_r+0x46>
 801ae30:	6811      	ldr	r1, [r2, #0]
 801ae32:	1855      	adds	r5, r2, r1
 801ae34:	42a5      	cmp	r5, r4
 801ae36:	d10b      	bne.n	801ae50 <_free_r+0x70>
 801ae38:	6824      	ldr	r4, [r4, #0]
 801ae3a:	4421      	add	r1, r4
 801ae3c:	1854      	adds	r4, r2, r1
 801ae3e:	42a3      	cmp	r3, r4
 801ae40:	6011      	str	r1, [r2, #0]
 801ae42:	d1e0      	bne.n	801ae06 <_free_r+0x26>
 801ae44:	681c      	ldr	r4, [r3, #0]
 801ae46:	685b      	ldr	r3, [r3, #4]
 801ae48:	6053      	str	r3, [r2, #4]
 801ae4a:	440c      	add	r4, r1
 801ae4c:	6014      	str	r4, [r2, #0]
 801ae4e:	e7da      	b.n	801ae06 <_free_r+0x26>
 801ae50:	d902      	bls.n	801ae58 <_free_r+0x78>
 801ae52:	230c      	movs	r3, #12
 801ae54:	6003      	str	r3, [r0, #0]
 801ae56:	e7d6      	b.n	801ae06 <_free_r+0x26>
 801ae58:	6825      	ldr	r5, [r4, #0]
 801ae5a:	1961      	adds	r1, r4, r5
 801ae5c:	428b      	cmp	r3, r1
 801ae5e:	bf04      	itt	eq
 801ae60:	6819      	ldreq	r1, [r3, #0]
 801ae62:	685b      	ldreq	r3, [r3, #4]
 801ae64:	6063      	str	r3, [r4, #4]
 801ae66:	bf04      	itt	eq
 801ae68:	1949      	addeq	r1, r1, r5
 801ae6a:	6021      	streq	r1, [r4, #0]
 801ae6c:	6054      	str	r4, [r2, #4]
 801ae6e:	e7ca      	b.n	801ae06 <_free_r+0x26>
 801ae70:	b003      	add	sp, #12
 801ae72:	bd30      	pop	{r4, r5, pc}
 801ae74:	20012a18 	.word	0x20012a18

0801ae78 <malloc>:
 801ae78:	4b02      	ldr	r3, [pc, #8]	; (801ae84 <malloc+0xc>)
 801ae7a:	4601      	mov	r1, r0
 801ae7c:	6818      	ldr	r0, [r3, #0]
 801ae7e:	f000 b823 	b.w	801aec8 <_malloc_r>
 801ae82:	bf00      	nop
 801ae84:	200000a4 	.word	0x200000a4

0801ae88 <sbrk_aligned>:
 801ae88:	b570      	push	{r4, r5, r6, lr}
 801ae8a:	4e0e      	ldr	r6, [pc, #56]	; (801aec4 <sbrk_aligned+0x3c>)
 801ae8c:	460c      	mov	r4, r1
 801ae8e:	6831      	ldr	r1, [r6, #0]
 801ae90:	4605      	mov	r5, r0
 801ae92:	b911      	cbnz	r1, 801ae9a <sbrk_aligned+0x12>
 801ae94:	f000 fcce 	bl	801b834 <_sbrk_r>
 801ae98:	6030      	str	r0, [r6, #0]
 801ae9a:	4621      	mov	r1, r4
 801ae9c:	4628      	mov	r0, r5
 801ae9e:	f000 fcc9 	bl	801b834 <_sbrk_r>
 801aea2:	1c43      	adds	r3, r0, #1
 801aea4:	d00a      	beq.n	801aebc <sbrk_aligned+0x34>
 801aea6:	1cc4      	adds	r4, r0, #3
 801aea8:	f024 0403 	bic.w	r4, r4, #3
 801aeac:	42a0      	cmp	r0, r4
 801aeae:	d007      	beq.n	801aec0 <sbrk_aligned+0x38>
 801aeb0:	1a21      	subs	r1, r4, r0
 801aeb2:	4628      	mov	r0, r5
 801aeb4:	f000 fcbe 	bl	801b834 <_sbrk_r>
 801aeb8:	3001      	adds	r0, #1
 801aeba:	d101      	bne.n	801aec0 <sbrk_aligned+0x38>
 801aebc:	f04f 34ff 	mov.w	r4, #4294967295
 801aec0:	4620      	mov	r0, r4
 801aec2:	bd70      	pop	{r4, r5, r6, pc}
 801aec4:	20012a1c 	.word	0x20012a1c

0801aec8 <_malloc_r>:
 801aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aecc:	1ccd      	adds	r5, r1, #3
 801aece:	f025 0503 	bic.w	r5, r5, #3
 801aed2:	3508      	adds	r5, #8
 801aed4:	2d0c      	cmp	r5, #12
 801aed6:	bf38      	it	cc
 801aed8:	250c      	movcc	r5, #12
 801aeda:	2d00      	cmp	r5, #0
 801aedc:	4607      	mov	r7, r0
 801aede:	db01      	blt.n	801aee4 <_malloc_r+0x1c>
 801aee0:	42a9      	cmp	r1, r5
 801aee2:	d905      	bls.n	801aef0 <_malloc_r+0x28>
 801aee4:	230c      	movs	r3, #12
 801aee6:	603b      	str	r3, [r7, #0]
 801aee8:	2600      	movs	r6, #0
 801aeea:	4630      	mov	r0, r6
 801aeec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aef0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801afc4 <_malloc_r+0xfc>
 801aef4:	f000 f868 	bl	801afc8 <__malloc_lock>
 801aef8:	f8d8 3000 	ldr.w	r3, [r8]
 801aefc:	461c      	mov	r4, r3
 801aefe:	bb5c      	cbnz	r4, 801af58 <_malloc_r+0x90>
 801af00:	4629      	mov	r1, r5
 801af02:	4638      	mov	r0, r7
 801af04:	f7ff ffc0 	bl	801ae88 <sbrk_aligned>
 801af08:	1c43      	adds	r3, r0, #1
 801af0a:	4604      	mov	r4, r0
 801af0c:	d155      	bne.n	801afba <_malloc_r+0xf2>
 801af0e:	f8d8 4000 	ldr.w	r4, [r8]
 801af12:	4626      	mov	r6, r4
 801af14:	2e00      	cmp	r6, #0
 801af16:	d145      	bne.n	801afa4 <_malloc_r+0xdc>
 801af18:	2c00      	cmp	r4, #0
 801af1a:	d048      	beq.n	801afae <_malloc_r+0xe6>
 801af1c:	6823      	ldr	r3, [r4, #0]
 801af1e:	4631      	mov	r1, r6
 801af20:	4638      	mov	r0, r7
 801af22:	eb04 0903 	add.w	r9, r4, r3
 801af26:	f000 fc85 	bl	801b834 <_sbrk_r>
 801af2a:	4581      	cmp	r9, r0
 801af2c:	d13f      	bne.n	801afae <_malloc_r+0xe6>
 801af2e:	6821      	ldr	r1, [r4, #0]
 801af30:	1a6d      	subs	r5, r5, r1
 801af32:	4629      	mov	r1, r5
 801af34:	4638      	mov	r0, r7
 801af36:	f7ff ffa7 	bl	801ae88 <sbrk_aligned>
 801af3a:	3001      	adds	r0, #1
 801af3c:	d037      	beq.n	801afae <_malloc_r+0xe6>
 801af3e:	6823      	ldr	r3, [r4, #0]
 801af40:	442b      	add	r3, r5
 801af42:	6023      	str	r3, [r4, #0]
 801af44:	f8d8 3000 	ldr.w	r3, [r8]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d038      	beq.n	801afbe <_malloc_r+0xf6>
 801af4c:	685a      	ldr	r2, [r3, #4]
 801af4e:	42a2      	cmp	r2, r4
 801af50:	d12b      	bne.n	801afaa <_malloc_r+0xe2>
 801af52:	2200      	movs	r2, #0
 801af54:	605a      	str	r2, [r3, #4]
 801af56:	e00f      	b.n	801af78 <_malloc_r+0xb0>
 801af58:	6822      	ldr	r2, [r4, #0]
 801af5a:	1b52      	subs	r2, r2, r5
 801af5c:	d41f      	bmi.n	801af9e <_malloc_r+0xd6>
 801af5e:	2a0b      	cmp	r2, #11
 801af60:	d917      	bls.n	801af92 <_malloc_r+0xca>
 801af62:	1961      	adds	r1, r4, r5
 801af64:	42a3      	cmp	r3, r4
 801af66:	6025      	str	r5, [r4, #0]
 801af68:	bf18      	it	ne
 801af6a:	6059      	strne	r1, [r3, #4]
 801af6c:	6863      	ldr	r3, [r4, #4]
 801af6e:	bf08      	it	eq
 801af70:	f8c8 1000 	streq.w	r1, [r8]
 801af74:	5162      	str	r2, [r4, r5]
 801af76:	604b      	str	r3, [r1, #4]
 801af78:	4638      	mov	r0, r7
 801af7a:	f104 060b 	add.w	r6, r4, #11
 801af7e:	f000 f829 	bl	801afd4 <__malloc_unlock>
 801af82:	f026 0607 	bic.w	r6, r6, #7
 801af86:	1d23      	adds	r3, r4, #4
 801af88:	1af2      	subs	r2, r6, r3
 801af8a:	d0ae      	beq.n	801aeea <_malloc_r+0x22>
 801af8c:	1b9b      	subs	r3, r3, r6
 801af8e:	50a3      	str	r3, [r4, r2]
 801af90:	e7ab      	b.n	801aeea <_malloc_r+0x22>
 801af92:	42a3      	cmp	r3, r4
 801af94:	6862      	ldr	r2, [r4, #4]
 801af96:	d1dd      	bne.n	801af54 <_malloc_r+0x8c>
 801af98:	f8c8 2000 	str.w	r2, [r8]
 801af9c:	e7ec      	b.n	801af78 <_malloc_r+0xb0>
 801af9e:	4623      	mov	r3, r4
 801afa0:	6864      	ldr	r4, [r4, #4]
 801afa2:	e7ac      	b.n	801aefe <_malloc_r+0x36>
 801afa4:	4634      	mov	r4, r6
 801afa6:	6876      	ldr	r6, [r6, #4]
 801afa8:	e7b4      	b.n	801af14 <_malloc_r+0x4c>
 801afaa:	4613      	mov	r3, r2
 801afac:	e7cc      	b.n	801af48 <_malloc_r+0x80>
 801afae:	230c      	movs	r3, #12
 801afb0:	603b      	str	r3, [r7, #0]
 801afb2:	4638      	mov	r0, r7
 801afb4:	f000 f80e 	bl	801afd4 <__malloc_unlock>
 801afb8:	e797      	b.n	801aeea <_malloc_r+0x22>
 801afba:	6025      	str	r5, [r4, #0]
 801afbc:	e7dc      	b.n	801af78 <_malloc_r+0xb0>
 801afbe:	605b      	str	r3, [r3, #4]
 801afc0:	deff      	udf	#255	; 0xff
 801afc2:	bf00      	nop
 801afc4:	20012a18 	.word	0x20012a18

0801afc8 <__malloc_lock>:
 801afc8:	4801      	ldr	r0, [pc, #4]	; (801afd0 <__malloc_lock+0x8>)
 801afca:	f7ff beda 	b.w	801ad82 <__retarget_lock_acquire_recursive>
 801afce:	bf00      	nop
 801afd0:	20012a14 	.word	0x20012a14

0801afd4 <__malloc_unlock>:
 801afd4:	4801      	ldr	r0, [pc, #4]	; (801afdc <__malloc_unlock+0x8>)
 801afd6:	f7ff bed5 	b.w	801ad84 <__retarget_lock_release_recursive>
 801afda:	bf00      	nop
 801afdc:	20012a14 	.word	0x20012a14

0801afe0 <__sfputc_r>:
 801afe0:	6893      	ldr	r3, [r2, #8]
 801afe2:	3b01      	subs	r3, #1
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	b410      	push	{r4}
 801afe8:	6093      	str	r3, [r2, #8]
 801afea:	da08      	bge.n	801affe <__sfputc_r+0x1e>
 801afec:	6994      	ldr	r4, [r2, #24]
 801afee:	42a3      	cmp	r3, r4
 801aff0:	db01      	blt.n	801aff6 <__sfputc_r+0x16>
 801aff2:	290a      	cmp	r1, #10
 801aff4:	d103      	bne.n	801affe <__sfputc_r+0x1e>
 801aff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801affa:	f000 bb85 	b.w	801b708 <__swbuf_r>
 801affe:	6813      	ldr	r3, [r2, #0]
 801b000:	1c58      	adds	r0, r3, #1
 801b002:	6010      	str	r0, [r2, #0]
 801b004:	7019      	strb	r1, [r3, #0]
 801b006:	4608      	mov	r0, r1
 801b008:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b00c:	4770      	bx	lr

0801b00e <__sfputs_r>:
 801b00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b010:	4606      	mov	r6, r0
 801b012:	460f      	mov	r7, r1
 801b014:	4614      	mov	r4, r2
 801b016:	18d5      	adds	r5, r2, r3
 801b018:	42ac      	cmp	r4, r5
 801b01a:	d101      	bne.n	801b020 <__sfputs_r+0x12>
 801b01c:	2000      	movs	r0, #0
 801b01e:	e007      	b.n	801b030 <__sfputs_r+0x22>
 801b020:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b024:	463a      	mov	r2, r7
 801b026:	4630      	mov	r0, r6
 801b028:	f7ff ffda 	bl	801afe0 <__sfputc_r>
 801b02c:	1c43      	adds	r3, r0, #1
 801b02e:	d1f3      	bne.n	801b018 <__sfputs_r+0xa>
 801b030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b034 <_vfiprintf_r>:
 801b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b038:	460d      	mov	r5, r1
 801b03a:	b09d      	sub	sp, #116	; 0x74
 801b03c:	4614      	mov	r4, r2
 801b03e:	4698      	mov	r8, r3
 801b040:	4606      	mov	r6, r0
 801b042:	b118      	cbz	r0, 801b04c <_vfiprintf_r+0x18>
 801b044:	6a03      	ldr	r3, [r0, #32]
 801b046:	b90b      	cbnz	r3, 801b04c <_vfiprintf_r+0x18>
 801b048:	f7ff fd30 	bl	801aaac <__sinit>
 801b04c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b04e:	07d9      	lsls	r1, r3, #31
 801b050:	d405      	bmi.n	801b05e <_vfiprintf_r+0x2a>
 801b052:	89ab      	ldrh	r3, [r5, #12]
 801b054:	059a      	lsls	r2, r3, #22
 801b056:	d402      	bmi.n	801b05e <_vfiprintf_r+0x2a>
 801b058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b05a:	f7ff fe92 	bl	801ad82 <__retarget_lock_acquire_recursive>
 801b05e:	89ab      	ldrh	r3, [r5, #12]
 801b060:	071b      	lsls	r3, r3, #28
 801b062:	d501      	bpl.n	801b068 <_vfiprintf_r+0x34>
 801b064:	692b      	ldr	r3, [r5, #16]
 801b066:	b99b      	cbnz	r3, 801b090 <_vfiprintf_r+0x5c>
 801b068:	4629      	mov	r1, r5
 801b06a:	4630      	mov	r0, r6
 801b06c:	f000 fb8a 	bl	801b784 <__swsetup_r>
 801b070:	b170      	cbz	r0, 801b090 <_vfiprintf_r+0x5c>
 801b072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b074:	07dc      	lsls	r4, r3, #31
 801b076:	d504      	bpl.n	801b082 <_vfiprintf_r+0x4e>
 801b078:	f04f 30ff 	mov.w	r0, #4294967295
 801b07c:	b01d      	add	sp, #116	; 0x74
 801b07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b082:	89ab      	ldrh	r3, [r5, #12]
 801b084:	0598      	lsls	r0, r3, #22
 801b086:	d4f7      	bmi.n	801b078 <_vfiprintf_r+0x44>
 801b088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b08a:	f7ff fe7b 	bl	801ad84 <__retarget_lock_release_recursive>
 801b08e:	e7f3      	b.n	801b078 <_vfiprintf_r+0x44>
 801b090:	2300      	movs	r3, #0
 801b092:	9309      	str	r3, [sp, #36]	; 0x24
 801b094:	2320      	movs	r3, #32
 801b096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b09a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b09e:	2330      	movs	r3, #48	; 0x30
 801b0a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b254 <_vfiprintf_r+0x220>
 801b0a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b0a8:	f04f 0901 	mov.w	r9, #1
 801b0ac:	4623      	mov	r3, r4
 801b0ae:	469a      	mov	sl, r3
 801b0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b0b4:	b10a      	cbz	r2, 801b0ba <_vfiprintf_r+0x86>
 801b0b6:	2a25      	cmp	r2, #37	; 0x25
 801b0b8:	d1f9      	bne.n	801b0ae <_vfiprintf_r+0x7a>
 801b0ba:	ebba 0b04 	subs.w	fp, sl, r4
 801b0be:	d00b      	beq.n	801b0d8 <_vfiprintf_r+0xa4>
 801b0c0:	465b      	mov	r3, fp
 801b0c2:	4622      	mov	r2, r4
 801b0c4:	4629      	mov	r1, r5
 801b0c6:	4630      	mov	r0, r6
 801b0c8:	f7ff ffa1 	bl	801b00e <__sfputs_r>
 801b0cc:	3001      	adds	r0, #1
 801b0ce:	f000 80a9 	beq.w	801b224 <_vfiprintf_r+0x1f0>
 801b0d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b0d4:	445a      	add	r2, fp
 801b0d6:	9209      	str	r2, [sp, #36]	; 0x24
 801b0d8:	f89a 3000 	ldrb.w	r3, [sl]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	f000 80a1 	beq.w	801b224 <_vfiprintf_r+0x1f0>
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	f04f 32ff 	mov.w	r2, #4294967295
 801b0e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b0ec:	f10a 0a01 	add.w	sl, sl, #1
 801b0f0:	9304      	str	r3, [sp, #16]
 801b0f2:	9307      	str	r3, [sp, #28]
 801b0f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b0f8:	931a      	str	r3, [sp, #104]	; 0x68
 801b0fa:	4654      	mov	r4, sl
 801b0fc:	2205      	movs	r2, #5
 801b0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b102:	4854      	ldr	r0, [pc, #336]	; (801b254 <_vfiprintf_r+0x220>)
 801b104:	f7e5 f87c 	bl	8000200 <memchr>
 801b108:	9a04      	ldr	r2, [sp, #16]
 801b10a:	b9d8      	cbnz	r0, 801b144 <_vfiprintf_r+0x110>
 801b10c:	06d1      	lsls	r1, r2, #27
 801b10e:	bf44      	itt	mi
 801b110:	2320      	movmi	r3, #32
 801b112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b116:	0713      	lsls	r3, r2, #28
 801b118:	bf44      	itt	mi
 801b11a:	232b      	movmi	r3, #43	; 0x2b
 801b11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b120:	f89a 3000 	ldrb.w	r3, [sl]
 801b124:	2b2a      	cmp	r3, #42	; 0x2a
 801b126:	d015      	beq.n	801b154 <_vfiprintf_r+0x120>
 801b128:	9a07      	ldr	r2, [sp, #28]
 801b12a:	4654      	mov	r4, sl
 801b12c:	2000      	movs	r0, #0
 801b12e:	f04f 0c0a 	mov.w	ip, #10
 801b132:	4621      	mov	r1, r4
 801b134:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b138:	3b30      	subs	r3, #48	; 0x30
 801b13a:	2b09      	cmp	r3, #9
 801b13c:	d94d      	bls.n	801b1da <_vfiprintf_r+0x1a6>
 801b13e:	b1b0      	cbz	r0, 801b16e <_vfiprintf_r+0x13a>
 801b140:	9207      	str	r2, [sp, #28]
 801b142:	e014      	b.n	801b16e <_vfiprintf_r+0x13a>
 801b144:	eba0 0308 	sub.w	r3, r0, r8
 801b148:	fa09 f303 	lsl.w	r3, r9, r3
 801b14c:	4313      	orrs	r3, r2
 801b14e:	9304      	str	r3, [sp, #16]
 801b150:	46a2      	mov	sl, r4
 801b152:	e7d2      	b.n	801b0fa <_vfiprintf_r+0xc6>
 801b154:	9b03      	ldr	r3, [sp, #12]
 801b156:	1d19      	adds	r1, r3, #4
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	9103      	str	r1, [sp, #12]
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	bfbb      	ittet	lt
 801b160:	425b      	neglt	r3, r3
 801b162:	f042 0202 	orrlt.w	r2, r2, #2
 801b166:	9307      	strge	r3, [sp, #28]
 801b168:	9307      	strlt	r3, [sp, #28]
 801b16a:	bfb8      	it	lt
 801b16c:	9204      	strlt	r2, [sp, #16]
 801b16e:	7823      	ldrb	r3, [r4, #0]
 801b170:	2b2e      	cmp	r3, #46	; 0x2e
 801b172:	d10c      	bne.n	801b18e <_vfiprintf_r+0x15a>
 801b174:	7863      	ldrb	r3, [r4, #1]
 801b176:	2b2a      	cmp	r3, #42	; 0x2a
 801b178:	d134      	bne.n	801b1e4 <_vfiprintf_r+0x1b0>
 801b17a:	9b03      	ldr	r3, [sp, #12]
 801b17c:	1d1a      	adds	r2, r3, #4
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	9203      	str	r2, [sp, #12]
 801b182:	2b00      	cmp	r3, #0
 801b184:	bfb8      	it	lt
 801b186:	f04f 33ff 	movlt.w	r3, #4294967295
 801b18a:	3402      	adds	r4, #2
 801b18c:	9305      	str	r3, [sp, #20]
 801b18e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b264 <_vfiprintf_r+0x230>
 801b192:	7821      	ldrb	r1, [r4, #0]
 801b194:	2203      	movs	r2, #3
 801b196:	4650      	mov	r0, sl
 801b198:	f7e5 f832 	bl	8000200 <memchr>
 801b19c:	b138      	cbz	r0, 801b1ae <_vfiprintf_r+0x17a>
 801b19e:	9b04      	ldr	r3, [sp, #16]
 801b1a0:	eba0 000a 	sub.w	r0, r0, sl
 801b1a4:	2240      	movs	r2, #64	; 0x40
 801b1a6:	4082      	lsls	r2, r0
 801b1a8:	4313      	orrs	r3, r2
 801b1aa:	3401      	adds	r4, #1
 801b1ac:	9304      	str	r3, [sp, #16]
 801b1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1b2:	4829      	ldr	r0, [pc, #164]	; (801b258 <_vfiprintf_r+0x224>)
 801b1b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b1b8:	2206      	movs	r2, #6
 801b1ba:	f7e5 f821 	bl	8000200 <memchr>
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	d03f      	beq.n	801b242 <_vfiprintf_r+0x20e>
 801b1c2:	4b26      	ldr	r3, [pc, #152]	; (801b25c <_vfiprintf_r+0x228>)
 801b1c4:	bb1b      	cbnz	r3, 801b20e <_vfiprintf_r+0x1da>
 801b1c6:	9b03      	ldr	r3, [sp, #12]
 801b1c8:	3307      	adds	r3, #7
 801b1ca:	f023 0307 	bic.w	r3, r3, #7
 801b1ce:	3308      	adds	r3, #8
 801b1d0:	9303      	str	r3, [sp, #12]
 801b1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1d4:	443b      	add	r3, r7
 801b1d6:	9309      	str	r3, [sp, #36]	; 0x24
 801b1d8:	e768      	b.n	801b0ac <_vfiprintf_r+0x78>
 801b1da:	fb0c 3202 	mla	r2, ip, r2, r3
 801b1de:	460c      	mov	r4, r1
 801b1e0:	2001      	movs	r0, #1
 801b1e2:	e7a6      	b.n	801b132 <_vfiprintf_r+0xfe>
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	3401      	adds	r4, #1
 801b1e8:	9305      	str	r3, [sp, #20]
 801b1ea:	4619      	mov	r1, r3
 801b1ec:	f04f 0c0a 	mov.w	ip, #10
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b1f6:	3a30      	subs	r2, #48	; 0x30
 801b1f8:	2a09      	cmp	r2, #9
 801b1fa:	d903      	bls.n	801b204 <_vfiprintf_r+0x1d0>
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d0c6      	beq.n	801b18e <_vfiprintf_r+0x15a>
 801b200:	9105      	str	r1, [sp, #20]
 801b202:	e7c4      	b.n	801b18e <_vfiprintf_r+0x15a>
 801b204:	fb0c 2101 	mla	r1, ip, r1, r2
 801b208:	4604      	mov	r4, r0
 801b20a:	2301      	movs	r3, #1
 801b20c:	e7f0      	b.n	801b1f0 <_vfiprintf_r+0x1bc>
 801b20e:	ab03      	add	r3, sp, #12
 801b210:	9300      	str	r3, [sp, #0]
 801b212:	462a      	mov	r2, r5
 801b214:	4b12      	ldr	r3, [pc, #72]	; (801b260 <_vfiprintf_r+0x22c>)
 801b216:	a904      	add	r1, sp, #16
 801b218:	4630      	mov	r0, r6
 801b21a:	f3af 8000 	nop.w
 801b21e:	4607      	mov	r7, r0
 801b220:	1c78      	adds	r0, r7, #1
 801b222:	d1d6      	bne.n	801b1d2 <_vfiprintf_r+0x19e>
 801b224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b226:	07d9      	lsls	r1, r3, #31
 801b228:	d405      	bmi.n	801b236 <_vfiprintf_r+0x202>
 801b22a:	89ab      	ldrh	r3, [r5, #12]
 801b22c:	059a      	lsls	r2, r3, #22
 801b22e:	d402      	bmi.n	801b236 <_vfiprintf_r+0x202>
 801b230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b232:	f7ff fda7 	bl	801ad84 <__retarget_lock_release_recursive>
 801b236:	89ab      	ldrh	r3, [r5, #12]
 801b238:	065b      	lsls	r3, r3, #25
 801b23a:	f53f af1d 	bmi.w	801b078 <_vfiprintf_r+0x44>
 801b23e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b240:	e71c      	b.n	801b07c <_vfiprintf_r+0x48>
 801b242:	ab03      	add	r3, sp, #12
 801b244:	9300      	str	r3, [sp, #0]
 801b246:	462a      	mov	r2, r5
 801b248:	4b05      	ldr	r3, [pc, #20]	; (801b260 <_vfiprintf_r+0x22c>)
 801b24a:	a904      	add	r1, sp, #16
 801b24c:	4630      	mov	r0, r6
 801b24e:	f000 f879 	bl	801b344 <_printf_i>
 801b252:	e7e4      	b.n	801b21e <_vfiprintf_r+0x1ea>
 801b254:	0801f53f 	.word	0x0801f53f
 801b258:	0801f549 	.word	0x0801f549
 801b25c:	00000000 	.word	0x00000000
 801b260:	0801b00f 	.word	0x0801b00f
 801b264:	0801f545 	.word	0x0801f545

0801b268 <_printf_common>:
 801b268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b26c:	4616      	mov	r6, r2
 801b26e:	4699      	mov	r9, r3
 801b270:	688a      	ldr	r2, [r1, #8]
 801b272:	690b      	ldr	r3, [r1, #16]
 801b274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b278:	4293      	cmp	r3, r2
 801b27a:	bfb8      	it	lt
 801b27c:	4613      	movlt	r3, r2
 801b27e:	6033      	str	r3, [r6, #0]
 801b280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b284:	4607      	mov	r7, r0
 801b286:	460c      	mov	r4, r1
 801b288:	b10a      	cbz	r2, 801b28e <_printf_common+0x26>
 801b28a:	3301      	adds	r3, #1
 801b28c:	6033      	str	r3, [r6, #0]
 801b28e:	6823      	ldr	r3, [r4, #0]
 801b290:	0699      	lsls	r1, r3, #26
 801b292:	bf42      	ittt	mi
 801b294:	6833      	ldrmi	r3, [r6, #0]
 801b296:	3302      	addmi	r3, #2
 801b298:	6033      	strmi	r3, [r6, #0]
 801b29a:	6825      	ldr	r5, [r4, #0]
 801b29c:	f015 0506 	ands.w	r5, r5, #6
 801b2a0:	d106      	bne.n	801b2b0 <_printf_common+0x48>
 801b2a2:	f104 0a19 	add.w	sl, r4, #25
 801b2a6:	68e3      	ldr	r3, [r4, #12]
 801b2a8:	6832      	ldr	r2, [r6, #0]
 801b2aa:	1a9b      	subs	r3, r3, r2
 801b2ac:	42ab      	cmp	r3, r5
 801b2ae:	dc26      	bgt.n	801b2fe <_printf_common+0x96>
 801b2b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b2b4:	1e13      	subs	r3, r2, #0
 801b2b6:	6822      	ldr	r2, [r4, #0]
 801b2b8:	bf18      	it	ne
 801b2ba:	2301      	movne	r3, #1
 801b2bc:	0692      	lsls	r2, r2, #26
 801b2be:	d42b      	bmi.n	801b318 <_printf_common+0xb0>
 801b2c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b2c4:	4649      	mov	r1, r9
 801b2c6:	4638      	mov	r0, r7
 801b2c8:	47c0      	blx	r8
 801b2ca:	3001      	adds	r0, #1
 801b2cc:	d01e      	beq.n	801b30c <_printf_common+0xa4>
 801b2ce:	6823      	ldr	r3, [r4, #0]
 801b2d0:	6922      	ldr	r2, [r4, #16]
 801b2d2:	f003 0306 	and.w	r3, r3, #6
 801b2d6:	2b04      	cmp	r3, #4
 801b2d8:	bf02      	ittt	eq
 801b2da:	68e5      	ldreq	r5, [r4, #12]
 801b2dc:	6833      	ldreq	r3, [r6, #0]
 801b2de:	1aed      	subeq	r5, r5, r3
 801b2e0:	68a3      	ldr	r3, [r4, #8]
 801b2e2:	bf0c      	ite	eq
 801b2e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b2e8:	2500      	movne	r5, #0
 801b2ea:	4293      	cmp	r3, r2
 801b2ec:	bfc4      	itt	gt
 801b2ee:	1a9b      	subgt	r3, r3, r2
 801b2f0:	18ed      	addgt	r5, r5, r3
 801b2f2:	2600      	movs	r6, #0
 801b2f4:	341a      	adds	r4, #26
 801b2f6:	42b5      	cmp	r5, r6
 801b2f8:	d11a      	bne.n	801b330 <_printf_common+0xc8>
 801b2fa:	2000      	movs	r0, #0
 801b2fc:	e008      	b.n	801b310 <_printf_common+0xa8>
 801b2fe:	2301      	movs	r3, #1
 801b300:	4652      	mov	r2, sl
 801b302:	4649      	mov	r1, r9
 801b304:	4638      	mov	r0, r7
 801b306:	47c0      	blx	r8
 801b308:	3001      	adds	r0, #1
 801b30a:	d103      	bne.n	801b314 <_printf_common+0xac>
 801b30c:	f04f 30ff 	mov.w	r0, #4294967295
 801b310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b314:	3501      	adds	r5, #1
 801b316:	e7c6      	b.n	801b2a6 <_printf_common+0x3e>
 801b318:	18e1      	adds	r1, r4, r3
 801b31a:	1c5a      	adds	r2, r3, #1
 801b31c:	2030      	movs	r0, #48	; 0x30
 801b31e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b322:	4422      	add	r2, r4
 801b324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b32c:	3302      	adds	r3, #2
 801b32e:	e7c7      	b.n	801b2c0 <_printf_common+0x58>
 801b330:	2301      	movs	r3, #1
 801b332:	4622      	mov	r2, r4
 801b334:	4649      	mov	r1, r9
 801b336:	4638      	mov	r0, r7
 801b338:	47c0      	blx	r8
 801b33a:	3001      	adds	r0, #1
 801b33c:	d0e6      	beq.n	801b30c <_printf_common+0xa4>
 801b33e:	3601      	adds	r6, #1
 801b340:	e7d9      	b.n	801b2f6 <_printf_common+0x8e>
	...

0801b344 <_printf_i>:
 801b344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b348:	7e0f      	ldrb	r7, [r1, #24]
 801b34a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b34c:	2f78      	cmp	r7, #120	; 0x78
 801b34e:	4691      	mov	r9, r2
 801b350:	4680      	mov	r8, r0
 801b352:	460c      	mov	r4, r1
 801b354:	469a      	mov	sl, r3
 801b356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b35a:	d807      	bhi.n	801b36c <_printf_i+0x28>
 801b35c:	2f62      	cmp	r7, #98	; 0x62
 801b35e:	d80a      	bhi.n	801b376 <_printf_i+0x32>
 801b360:	2f00      	cmp	r7, #0
 801b362:	f000 80d4 	beq.w	801b50e <_printf_i+0x1ca>
 801b366:	2f58      	cmp	r7, #88	; 0x58
 801b368:	f000 80c0 	beq.w	801b4ec <_printf_i+0x1a8>
 801b36c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b374:	e03a      	b.n	801b3ec <_printf_i+0xa8>
 801b376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b37a:	2b15      	cmp	r3, #21
 801b37c:	d8f6      	bhi.n	801b36c <_printf_i+0x28>
 801b37e:	a101      	add	r1, pc, #4	; (adr r1, 801b384 <_printf_i+0x40>)
 801b380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b384:	0801b3dd 	.word	0x0801b3dd
 801b388:	0801b3f1 	.word	0x0801b3f1
 801b38c:	0801b36d 	.word	0x0801b36d
 801b390:	0801b36d 	.word	0x0801b36d
 801b394:	0801b36d 	.word	0x0801b36d
 801b398:	0801b36d 	.word	0x0801b36d
 801b39c:	0801b3f1 	.word	0x0801b3f1
 801b3a0:	0801b36d 	.word	0x0801b36d
 801b3a4:	0801b36d 	.word	0x0801b36d
 801b3a8:	0801b36d 	.word	0x0801b36d
 801b3ac:	0801b36d 	.word	0x0801b36d
 801b3b0:	0801b4f5 	.word	0x0801b4f5
 801b3b4:	0801b41d 	.word	0x0801b41d
 801b3b8:	0801b4af 	.word	0x0801b4af
 801b3bc:	0801b36d 	.word	0x0801b36d
 801b3c0:	0801b36d 	.word	0x0801b36d
 801b3c4:	0801b517 	.word	0x0801b517
 801b3c8:	0801b36d 	.word	0x0801b36d
 801b3cc:	0801b41d 	.word	0x0801b41d
 801b3d0:	0801b36d 	.word	0x0801b36d
 801b3d4:	0801b36d 	.word	0x0801b36d
 801b3d8:	0801b4b7 	.word	0x0801b4b7
 801b3dc:	682b      	ldr	r3, [r5, #0]
 801b3de:	1d1a      	adds	r2, r3, #4
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	602a      	str	r2, [r5, #0]
 801b3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b3e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b3ec:	2301      	movs	r3, #1
 801b3ee:	e09f      	b.n	801b530 <_printf_i+0x1ec>
 801b3f0:	6820      	ldr	r0, [r4, #0]
 801b3f2:	682b      	ldr	r3, [r5, #0]
 801b3f4:	0607      	lsls	r7, r0, #24
 801b3f6:	f103 0104 	add.w	r1, r3, #4
 801b3fa:	6029      	str	r1, [r5, #0]
 801b3fc:	d501      	bpl.n	801b402 <_printf_i+0xbe>
 801b3fe:	681e      	ldr	r6, [r3, #0]
 801b400:	e003      	b.n	801b40a <_printf_i+0xc6>
 801b402:	0646      	lsls	r6, r0, #25
 801b404:	d5fb      	bpl.n	801b3fe <_printf_i+0xba>
 801b406:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b40a:	2e00      	cmp	r6, #0
 801b40c:	da03      	bge.n	801b416 <_printf_i+0xd2>
 801b40e:	232d      	movs	r3, #45	; 0x2d
 801b410:	4276      	negs	r6, r6
 801b412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b416:	485a      	ldr	r0, [pc, #360]	; (801b580 <_printf_i+0x23c>)
 801b418:	230a      	movs	r3, #10
 801b41a:	e012      	b.n	801b442 <_printf_i+0xfe>
 801b41c:	682b      	ldr	r3, [r5, #0]
 801b41e:	6820      	ldr	r0, [r4, #0]
 801b420:	1d19      	adds	r1, r3, #4
 801b422:	6029      	str	r1, [r5, #0]
 801b424:	0605      	lsls	r5, r0, #24
 801b426:	d501      	bpl.n	801b42c <_printf_i+0xe8>
 801b428:	681e      	ldr	r6, [r3, #0]
 801b42a:	e002      	b.n	801b432 <_printf_i+0xee>
 801b42c:	0641      	lsls	r1, r0, #25
 801b42e:	d5fb      	bpl.n	801b428 <_printf_i+0xe4>
 801b430:	881e      	ldrh	r6, [r3, #0]
 801b432:	4853      	ldr	r0, [pc, #332]	; (801b580 <_printf_i+0x23c>)
 801b434:	2f6f      	cmp	r7, #111	; 0x6f
 801b436:	bf0c      	ite	eq
 801b438:	2308      	moveq	r3, #8
 801b43a:	230a      	movne	r3, #10
 801b43c:	2100      	movs	r1, #0
 801b43e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b442:	6865      	ldr	r5, [r4, #4]
 801b444:	60a5      	str	r5, [r4, #8]
 801b446:	2d00      	cmp	r5, #0
 801b448:	bfa2      	ittt	ge
 801b44a:	6821      	ldrge	r1, [r4, #0]
 801b44c:	f021 0104 	bicge.w	r1, r1, #4
 801b450:	6021      	strge	r1, [r4, #0]
 801b452:	b90e      	cbnz	r6, 801b458 <_printf_i+0x114>
 801b454:	2d00      	cmp	r5, #0
 801b456:	d04b      	beq.n	801b4f0 <_printf_i+0x1ac>
 801b458:	4615      	mov	r5, r2
 801b45a:	fbb6 f1f3 	udiv	r1, r6, r3
 801b45e:	fb03 6711 	mls	r7, r3, r1, r6
 801b462:	5dc7      	ldrb	r7, [r0, r7]
 801b464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b468:	4637      	mov	r7, r6
 801b46a:	42bb      	cmp	r3, r7
 801b46c:	460e      	mov	r6, r1
 801b46e:	d9f4      	bls.n	801b45a <_printf_i+0x116>
 801b470:	2b08      	cmp	r3, #8
 801b472:	d10b      	bne.n	801b48c <_printf_i+0x148>
 801b474:	6823      	ldr	r3, [r4, #0]
 801b476:	07de      	lsls	r6, r3, #31
 801b478:	d508      	bpl.n	801b48c <_printf_i+0x148>
 801b47a:	6923      	ldr	r3, [r4, #16]
 801b47c:	6861      	ldr	r1, [r4, #4]
 801b47e:	4299      	cmp	r1, r3
 801b480:	bfde      	ittt	le
 801b482:	2330      	movle	r3, #48	; 0x30
 801b484:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b488:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b48c:	1b52      	subs	r2, r2, r5
 801b48e:	6122      	str	r2, [r4, #16]
 801b490:	f8cd a000 	str.w	sl, [sp]
 801b494:	464b      	mov	r3, r9
 801b496:	aa03      	add	r2, sp, #12
 801b498:	4621      	mov	r1, r4
 801b49a:	4640      	mov	r0, r8
 801b49c:	f7ff fee4 	bl	801b268 <_printf_common>
 801b4a0:	3001      	adds	r0, #1
 801b4a2:	d14a      	bne.n	801b53a <_printf_i+0x1f6>
 801b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 801b4a8:	b004      	add	sp, #16
 801b4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4ae:	6823      	ldr	r3, [r4, #0]
 801b4b0:	f043 0320 	orr.w	r3, r3, #32
 801b4b4:	6023      	str	r3, [r4, #0]
 801b4b6:	4833      	ldr	r0, [pc, #204]	; (801b584 <_printf_i+0x240>)
 801b4b8:	2778      	movs	r7, #120	; 0x78
 801b4ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b4be:	6823      	ldr	r3, [r4, #0]
 801b4c0:	6829      	ldr	r1, [r5, #0]
 801b4c2:	061f      	lsls	r7, r3, #24
 801b4c4:	f851 6b04 	ldr.w	r6, [r1], #4
 801b4c8:	d402      	bmi.n	801b4d0 <_printf_i+0x18c>
 801b4ca:	065f      	lsls	r7, r3, #25
 801b4cc:	bf48      	it	mi
 801b4ce:	b2b6      	uxthmi	r6, r6
 801b4d0:	07df      	lsls	r7, r3, #31
 801b4d2:	bf48      	it	mi
 801b4d4:	f043 0320 	orrmi.w	r3, r3, #32
 801b4d8:	6029      	str	r1, [r5, #0]
 801b4da:	bf48      	it	mi
 801b4dc:	6023      	strmi	r3, [r4, #0]
 801b4de:	b91e      	cbnz	r6, 801b4e8 <_printf_i+0x1a4>
 801b4e0:	6823      	ldr	r3, [r4, #0]
 801b4e2:	f023 0320 	bic.w	r3, r3, #32
 801b4e6:	6023      	str	r3, [r4, #0]
 801b4e8:	2310      	movs	r3, #16
 801b4ea:	e7a7      	b.n	801b43c <_printf_i+0xf8>
 801b4ec:	4824      	ldr	r0, [pc, #144]	; (801b580 <_printf_i+0x23c>)
 801b4ee:	e7e4      	b.n	801b4ba <_printf_i+0x176>
 801b4f0:	4615      	mov	r5, r2
 801b4f2:	e7bd      	b.n	801b470 <_printf_i+0x12c>
 801b4f4:	682b      	ldr	r3, [r5, #0]
 801b4f6:	6826      	ldr	r6, [r4, #0]
 801b4f8:	6961      	ldr	r1, [r4, #20]
 801b4fa:	1d18      	adds	r0, r3, #4
 801b4fc:	6028      	str	r0, [r5, #0]
 801b4fe:	0635      	lsls	r5, r6, #24
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	d501      	bpl.n	801b508 <_printf_i+0x1c4>
 801b504:	6019      	str	r1, [r3, #0]
 801b506:	e002      	b.n	801b50e <_printf_i+0x1ca>
 801b508:	0670      	lsls	r0, r6, #25
 801b50a:	d5fb      	bpl.n	801b504 <_printf_i+0x1c0>
 801b50c:	8019      	strh	r1, [r3, #0]
 801b50e:	2300      	movs	r3, #0
 801b510:	6123      	str	r3, [r4, #16]
 801b512:	4615      	mov	r5, r2
 801b514:	e7bc      	b.n	801b490 <_printf_i+0x14c>
 801b516:	682b      	ldr	r3, [r5, #0]
 801b518:	1d1a      	adds	r2, r3, #4
 801b51a:	602a      	str	r2, [r5, #0]
 801b51c:	681d      	ldr	r5, [r3, #0]
 801b51e:	6862      	ldr	r2, [r4, #4]
 801b520:	2100      	movs	r1, #0
 801b522:	4628      	mov	r0, r5
 801b524:	f7e4 fe6c 	bl	8000200 <memchr>
 801b528:	b108      	cbz	r0, 801b52e <_printf_i+0x1ea>
 801b52a:	1b40      	subs	r0, r0, r5
 801b52c:	6060      	str	r0, [r4, #4]
 801b52e:	6863      	ldr	r3, [r4, #4]
 801b530:	6123      	str	r3, [r4, #16]
 801b532:	2300      	movs	r3, #0
 801b534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b538:	e7aa      	b.n	801b490 <_printf_i+0x14c>
 801b53a:	6923      	ldr	r3, [r4, #16]
 801b53c:	462a      	mov	r2, r5
 801b53e:	4649      	mov	r1, r9
 801b540:	4640      	mov	r0, r8
 801b542:	47d0      	blx	sl
 801b544:	3001      	adds	r0, #1
 801b546:	d0ad      	beq.n	801b4a4 <_printf_i+0x160>
 801b548:	6823      	ldr	r3, [r4, #0]
 801b54a:	079b      	lsls	r3, r3, #30
 801b54c:	d413      	bmi.n	801b576 <_printf_i+0x232>
 801b54e:	68e0      	ldr	r0, [r4, #12]
 801b550:	9b03      	ldr	r3, [sp, #12]
 801b552:	4298      	cmp	r0, r3
 801b554:	bfb8      	it	lt
 801b556:	4618      	movlt	r0, r3
 801b558:	e7a6      	b.n	801b4a8 <_printf_i+0x164>
 801b55a:	2301      	movs	r3, #1
 801b55c:	4632      	mov	r2, r6
 801b55e:	4649      	mov	r1, r9
 801b560:	4640      	mov	r0, r8
 801b562:	47d0      	blx	sl
 801b564:	3001      	adds	r0, #1
 801b566:	d09d      	beq.n	801b4a4 <_printf_i+0x160>
 801b568:	3501      	adds	r5, #1
 801b56a:	68e3      	ldr	r3, [r4, #12]
 801b56c:	9903      	ldr	r1, [sp, #12]
 801b56e:	1a5b      	subs	r3, r3, r1
 801b570:	42ab      	cmp	r3, r5
 801b572:	dcf2      	bgt.n	801b55a <_printf_i+0x216>
 801b574:	e7eb      	b.n	801b54e <_printf_i+0x20a>
 801b576:	2500      	movs	r5, #0
 801b578:	f104 0619 	add.w	r6, r4, #25
 801b57c:	e7f5      	b.n	801b56a <_printf_i+0x226>
 801b57e:	bf00      	nop
 801b580:	0801f550 	.word	0x0801f550
 801b584:	0801f561 	.word	0x0801f561

0801b588 <__sflush_r>:
 801b588:	898a      	ldrh	r2, [r1, #12]
 801b58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b58e:	4605      	mov	r5, r0
 801b590:	0710      	lsls	r0, r2, #28
 801b592:	460c      	mov	r4, r1
 801b594:	d458      	bmi.n	801b648 <__sflush_r+0xc0>
 801b596:	684b      	ldr	r3, [r1, #4]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	dc05      	bgt.n	801b5a8 <__sflush_r+0x20>
 801b59c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	dc02      	bgt.n	801b5a8 <__sflush_r+0x20>
 801b5a2:	2000      	movs	r0, #0
 801b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b5aa:	2e00      	cmp	r6, #0
 801b5ac:	d0f9      	beq.n	801b5a2 <__sflush_r+0x1a>
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b5b4:	682f      	ldr	r7, [r5, #0]
 801b5b6:	6a21      	ldr	r1, [r4, #32]
 801b5b8:	602b      	str	r3, [r5, #0]
 801b5ba:	d032      	beq.n	801b622 <__sflush_r+0x9a>
 801b5bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b5be:	89a3      	ldrh	r3, [r4, #12]
 801b5c0:	075a      	lsls	r2, r3, #29
 801b5c2:	d505      	bpl.n	801b5d0 <__sflush_r+0x48>
 801b5c4:	6863      	ldr	r3, [r4, #4]
 801b5c6:	1ac0      	subs	r0, r0, r3
 801b5c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b5ca:	b10b      	cbz	r3, 801b5d0 <__sflush_r+0x48>
 801b5cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b5ce:	1ac0      	subs	r0, r0, r3
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	4602      	mov	r2, r0
 801b5d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b5d6:	6a21      	ldr	r1, [r4, #32]
 801b5d8:	4628      	mov	r0, r5
 801b5da:	47b0      	blx	r6
 801b5dc:	1c43      	adds	r3, r0, #1
 801b5de:	89a3      	ldrh	r3, [r4, #12]
 801b5e0:	d106      	bne.n	801b5f0 <__sflush_r+0x68>
 801b5e2:	6829      	ldr	r1, [r5, #0]
 801b5e4:	291d      	cmp	r1, #29
 801b5e6:	d82b      	bhi.n	801b640 <__sflush_r+0xb8>
 801b5e8:	4a29      	ldr	r2, [pc, #164]	; (801b690 <__sflush_r+0x108>)
 801b5ea:	410a      	asrs	r2, r1
 801b5ec:	07d6      	lsls	r6, r2, #31
 801b5ee:	d427      	bmi.n	801b640 <__sflush_r+0xb8>
 801b5f0:	2200      	movs	r2, #0
 801b5f2:	6062      	str	r2, [r4, #4]
 801b5f4:	04d9      	lsls	r1, r3, #19
 801b5f6:	6922      	ldr	r2, [r4, #16]
 801b5f8:	6022      	str	r2, [r4, #0]
 801b5fa:	d504      	bpl.n	801b606 <__sflush_r+0x7e>
 801b5fc:	1c42      	adds	r2, r0, #1
 801b5fe:	d101      	bne.n	801b604 <__sflush_r+0x7c>
 801b600:	682b      	ldr	r3, [r5, #0]
 801b602:	b903      	cbnz	r3, 801b606 <__sflush_r+0x7e>
 801b604:	6560      	str	r0, [r4, #84]	; 0x54
 801b606:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b608:	602f      	str	r7, [r5, #0]
 801b60a:	2900      	cmp	r1, #0
 801b60c:	d0c9      	beq.n	801b5a2 <__sflush_r+0x1a>
 801b60e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b612:	4299      	cmp	r1, r3
 801b614:	d002      	beq.n	801b61c <__sflush_r+0x94>
 801b616:	4628      	mov	r0, r5
 801b618:	f7ff fbe2 	bl	801ade0 <_free_r>
 801b61c:	2000      	movs	r0, #0
 801b61e:	6360      	str	r0, [r4, #52]	; 0x34
 801b620:	e7c0      	b.n	801b5a4 <__sflush_r+0x1c>
 801b622:	2301      	movs	r3, #1
 801b624:	4628      	mov	r0, r5
 801b626:	47b0      	blx	r6
 801b628:	1c41      	adds	r1, r0, #1
 801b62a:	d1c8      	bne.n	801b5be <__sflush_r+0x36>
 801b62c:	682b      	ldr	r3, [r5, #0]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d0c5      	beq.n	801b5be <__sflush_r+0x36>
 801b632:	2b1d      	cmp	r3, #29
 801b634:	d001      	beq.n	801b63a <__sflush_r+0xb2>
 801b636:	2b16      	cmp	r3, #22
 801b638:	d101      	bne.n	801b63e <__sflush_r+0xb6>
 801b63a:	602f      	str	r7, [r5, #0]
 801b63c:	e7b1      	b.n	801b5a2 <__sflush_r+0x1a>
 801b63e:	89a3      	ldrh	r3, [r4, #12]
 801b640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b644:	81a3      	strh	r3, [r4, #12]
 801b646:	e7ad      	b.n	801b5a4 <__sflush_r+0x1c>
 801b648:	690f      	ldr	r7, [r1, #16]
 801b64a:	2f00      	cmp	r7, #0
 801b64c:	d0a9      	beq.n	801b5a2 <__sflush_r+0x1a>
 801b64e:	0793      	lsls	r3, r2, #30
 801b650:	680e      	ldr	r6, [r1, #0]
 801b652:	bf08      	it	eq
 801b654:	694b      	ldreq	r3, [r1, #20]
 801b656:	600f      	str	r7, [r1, #0]
 801b658:	bf18      	it	ne
 801b65a:	2300      	movne	r3, #0
 801b65c:	eba6 0807 	sub.w	r8, r6, r7
 801b660:	608b      	str	r3, [r1, #8]
 801b662:	f1b8 0f00 	cmp.w	r8, #0
 801b666:	dd9c      	ble.n	801b5a2 <__sflush_r+0x1a>
 801b668:	6a21      	ldr	r1, [r4, #32]
 801b66a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b66c:	4643      	mov	r3, r8
 801b66e:	463a      	mov	r2, r7
 801b670:	4628      	mov	r0, r5
 801b672:	47b0      	blx	r6
 801b674:	2800      	cmp	r0, #0
 801b676:	dc06      	bgt.n	801b686 <__sflush_r+0xfe>
 801b678:	89a3      	ldrh	r3, [r4, #12]
 801b67a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b67e:	81a3      	strh	r3, [r4, #12]
 801b680:	f04f 30ff 	mov.w	r0, #4294967295
 801b684:	e78e      	b.n	801b5a4 <__sflush_r+0x1c>
 801b686:	4407      	add	r7, r0
 801b688:	eba8 0800 	sub.w	r8, r8, r0
 801b68c:	e7e9      	b.n	801b662 <__sflush_r+0xda>
 801b68e:	bf00      	nop
 801b690:	dfbffffe 	.word	0xdfbffffe

0801b694 <_fflush_r>:
 801b694:	b538      	push	{r3, r4, r5, lr}
 801b696:	690b      	ldr	r3, [r1, #16]
 801b698:	4605      	mov	r5, r0
 801b69a:	460c      	mov	r4, r1
 801b69c:	b913      	cbnz	r3, 801b6a4 <_fflush_r+0x10>
 801b69e:	2500      	movs	r5, #0
 801b6a0:	4628      	mov	r0, r5
 801b6a2:	bd38      	pop	{r3, r4, r5, pc}
 801b6a4:	b118      	cbz	r0, 801b6ae <_fflush_r+0x1a>
 801b6a6:	6a03      	ldr	r3, [r0, #32]
 801b6a8:	b90b      	cbnz	r3, 801b6ae <_fflush_r+0x1a>
 801b6aa:	f7ff f9ff 	bl	801aaac <__sinit>
 801b6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	d0f3      	beq.n	801b69e <_fflush_r+0xa>
 801b6b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b6b8:	07d0      	lsls	r0, r2, #31
 801b6ba:	d404      	bmi.n	801b6c6 <_fflush_r+0x32>
 801b6bc:	0599      	lsls	r1, r3, #22
 801b6be:	d402      	bmi.n	801b6c6 <_fflush_r+0x32>
 801b6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b6c2:	f7ff fb5e 	bl	801ad82 <__retarget_lock_acquire_recursive>
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	4621      	mov	r1, r4
 801b6ca:	f7ff ff5d 	bl	801b588 <__sflush_r>
 801b6ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b6d0:	07da      	lsls	r2, r3, #31
 801b6d2:	4605      	mov	r5, r0
 801b6d4:	d4e4      	bmi.n	801b6a0 <_fflush_r+0xc>
 801b6d6:	89a3      	ldrh	r3, [r4, #12]
 801b6d8:	059b      	lsls	r3, r3, #22
 801b6da:	d4e1      	bmi.n	801b6a0 <_fflush_r+0xc>
 801b6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b6de:	f7ff fb51 	bl	801ad84 <__retarget_lock_release_recursive>
 801b6e2:	e7dd      	b.n	801b6a0 <_fflush_r+0xc>

0801b6e4 <fiprintf>:
 801b6e4:	b40e      	push	{r1, r2, r3}
 801b6e6:	b503      	push	{r0, r1, lr}
 801b6e8:	4601      	mov	r1, r0
 801b6ea:	ab03      	add	r3, sp, #12
 801b6ec:	4805      	ldr	r0, [pc, #20]	; (801b704 <fiprintf+0x20>)
 801b6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801b6f2:	6800      	ldr	r0, [r0, #0]
 801b6f4:	9301      	str	r3, [sp, #4]
 801b6f6:	f7ff fc9d 	bl	801b034 <_vfiprintf_r>
 801b6fa:	b002      	add	sp, #8
 801b6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b700:	b003      	add	sp, #12
 801b702:	4770      	bx	lr
 801b704:	200000a4 	.word	0x200000a4

0801b708 <__swbuf_r>:
 801b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b70a:	460e      	mov	r6, r1
 801b70c:	4614      	mov	r4, r2
 801b70e:	4605      	mov	r5, r0
 801b710:	b118      	cbz	r0, 801b71a <__swbuf_r+0x12>
 801b712:	6a03      	ldr	r3, [r0, #32]
 801b714:	b90b      	cbnz	r3, 801b71a <__swbuf_r+0x12>
 801b716:	f7ff f9c9 	bl	801aaac <__sinit>
 801b71a:	69a3      	ldr	r3, [r4, #24]
 801b71c:	60a3      	str	r3, [r4, #8]
 801b71e:	89a3      	ldrh	r3, [r4, #12]
 801b720:	071a      	lsls	r2, r3, #28
 801b722:	d525      	bpl.n	801b770 <__swbuf_r+0x68>
 801b724:	6923      	ldr	r3, [r4, #16]
 801b726:	b31b      	cbz	r3, 801b770 <__swbuf_r+0x68>
 801b728:	6823      	ldr	r3, [r4, #0]
 801b72a:	6922      	ldr	r2, [r4, #16]
 801b72c:	1a98      	subs	r0, r3, r2
 801b72e:	6963      	ldr	r3, [r4, #20]
 801b730:	b2f6      	uxtb	r6, r6
 801b732:	4283      	cmp	r3, r0
 801b734:	4637      	mov	r7, r6
 801b736:	dc04      	bgt.n	801b742 <__swbuf_r+0x3a>
 801b738:	4621      	mov	r1, r4
 801b73a:	4628      	mov	r0, r5
 801b73c:	f7ff ffaa 	bl	801b694 <_fflush_r>
 801b740:	b9e0      	cbnz	r0, 801b77c <__swbuf_r+0x74>
 801b742:	68a3      	ldr	r3, [r4, #8]
 801b744:	3b01      	subs	r3, #1
 801b746:	60a3      	str	r3, [r4, #8]
 801b748:	6823      	ldr	r3, [r4, #0]
 801b74a:	1c5a      	adds	r2, r3, #1
 801b74c:	6022      	str	r2, [r4, #0]
 801b74e:	701e      	strb	r6, [r3, #0]
 801b750:	6962      	ldr	r2, [r4, #20]
 801b752:	1c43      	adds	r3, r0, #1
 801b754:	429a      	cmp	r2, r3
 801b756:	d004      	beq.n	801b762 <__swbuf_r+0x5a>
 801b758:	89a3      	ldrh	r3, [r4, #12]
 801b75a:	07db      	lsls	r3, r3, #31
 801b75c:	d506      	bpl.n	801b76c <__swbuf_r+0x64>
 801b75e:	2e0a      	cmp	r6, #10
 801b760:	d104      	bne.n	801b76c <__swbuf_r+0x64>
 801b762:	4621      	mov	r1, r4
 801b764:	4628      	mov	r0, r5
 801b766:	f7ff ff95 	bl	801b694 <_fflush_r>
 801b76a:	b938      	cbnz	r0, 801b77c <__swbuf_r+0x74>
 801b76c:	4638      	mov	r0, r7
 801b76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b770:	4621      	mov	r1, r4
 801b772:	4628      	mov	r0, r5
 801b774:	f000 f806 	bl	801b784 <__swsetup_r>
 801b778:	2800      	cmp	r0, #0
 801b77a:	d0d5      	beq.n	801b728 <__swbuf_r+0x20>
 801b77c:	f04f 37ff 	mov.w	r7, #4294967295
 801b780:	e7f4      	b.n	801b76c <__swbuf_r+0x64>
	...

0801b784 <__swsetup_r>:
 801b784:	b538      	push	{r3, r4, r5, lr}
 801b786:	4b2a      	ldr	r3, [pc, #168]	; (801b830 <__swsetup_r+0xac>)
 801b788:	4605      	mov	r5, r0
 801b78a:	6818      	ldr	r0, [r3, #0]
 801b78c:	460c      	mov	r4, r1
 801b78e:	b118      	cbz	r0, 801b798 <__swsetup_r+0x14>
 801b790:	6a03      	ldr	r3, [r0, #32]
 801b792:	b90b      	cbnz	r3, 801b798 <__swsetup_r+0x14>
 801b794:	f7ff f98a 	bl	801aaac <__sinit>
 801b798:	89a3      	ldrh	r3, [r4, #12]
 801b79a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b79e:	0718      	lsls	r0, r3, #28
 801b7a0:	d422      	bmi.n	801b7e8 <__swsetup_r+0x64>
 801b7a2:	06d9      	lsls	r1, r3, #27
 801b7a4:	d407      	bmi.n	801b7b6 <__swsetup_r+0x32>
 801b7a6:	2309      	movs	r3, #9
 801b7a8:	602b      	str	r3, [r5, #0]
 801b7aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b7ae:	81a3      	strh	r3, [r4, #12]
 801b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 801b7b4:	e034      	b.n	801b820 <__swsetup_r+0x9c>
 801b7b6:	0758      	lsls	r0, r3, #29
 801b7b8:	d512      	bpl.n	801b7e0 <__swsetup_r+0x5c>
 801b7ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b7bc:	b141      	cbz	r1, 801b7d0 <__swsetup_r+0x4c>
 801b7be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b7c2:	4299      	cmp	r1, r3
 801b7c4:	d002      	beq.n	801b7cc <__swsetup_r+0x48>
 801b7c6:	4628      	mov	r0, r5
 801b7c8:	f7ff fb0a 	bl	801ade0 <_free_r>
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	6363      	str	r3, [r4, #52]	; 0x34
 801b7d0:	89a3      	ldrh	r3, [r4, #12]
 801b7d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b7d6:	81a3      	strh	r3, [r4, #12]
 801b7d8:	2300      	movs	r3, #0
 801b7da:	6063      	str	r3, [r4, #4]
 801b7dc:	6923      	ldr	r3, [r4, #16]
 801b7de:	6023      	str	r3, [r4, #0]
 801b7e0:	89a3      	ldrh	r3, [r4, #12]
 801b7e2:	f043 0308 	orr.w	r3, r3, #8
 801b7e6:	81a3      	strh	r3, [r4, #12]
 801b7e8:	6923      	ldr	r3, [r4, #16]
 801b7ea:	b94b      	cbnz	r3, 801b800 <__swsetup_r+0x7c>
 801b7ec:	89a3      	ldrh	r3, [r4, #12]
 801b7ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b7f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b7f6:	d003      	beq.n	801b800 <__swsetup_r+0x7c>
 801b7f8:	4621      	mov	r1, r4
 801b7fa:	4628      	mov	r0, r5
 801b7fc:	f000 f857 	bl	801b8ae <__smakebuf_r>
 801b800:	89a0      	ldrh	r0, [r4, #12]
 801b802:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b806:	f010 0301 	ands.w	r3, r0, #1
 801b80a:	d00a      	beq.n	801b822 <__swsetup_r+0x9e>
 801b80c:	2300      	movs	r3, #0
 801b80e:	60a3      	str	r3, [r4, #8]
 801b810:	6963      	ldr	r3, [r4, #20]
 801b812:	425b      	negs	r3, r3
 801b814:	61a3      	str	r3, [r4, #24]
 801b816:	6923      	ldr	r3, [r4, #16]
 801b818:	b943      	cbnz	r3, 801b82c <__swsetup_r+0xa8>
 801b81a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b81e:	d1c4      	bne.n	801b7aa <__swsetup_r+0x26>
 801b820:	bd38      	pop	{r3, r4, r5, pc}
 801b822:	0781      	lsls	r1, r0, #30
 801b824:	bf58      	it	pl
 801b826:	6963      	ldrpl	r3, [r4, #20]
 801b828:	60a3      	str	r3, [r4, #8]
 801b82a:	e7f4      	b.n	801b816 <__swsetup_r+0x92>
 801b82c:	2000      	movs	r0, #0
 801b82e:	e7f7      	b.n	801b820 <__swsetup_r+0x9c>
 801b830:	200000a4 	.word	0x200000a4

0801b834 <_sbrk_r>:
 801b834:	b538      	push	{r3, r4, r5, lr}
 801b836:	4d06      	ldr	r5, [pc, #24]	; (801b850 <_sbrk_r+0x1c>)
 801b838:	2300      	movs	r3, #0
 801b83a:	4604      	mov	r4, r0
 801b83c:	4608      	mov	r0, r1
 801b83e:	602b      	str	r3, [r5, #0]
 801b840:	f7e6 fabe 	bl	8001dc0 <_sbrk>
 801b844:	1c43      	adds	r3, r0, #1
 801b846:	d102      	bne.n	801b84e <_sbrk_r+0x1a>
 801b848:	682b      	ldr	r3, [r5, #0]
 801b84a:	b103      	cbz	r3, 801b84e <_sbrk_r+0x1a>
 801b84c:	6023      	str	r3, [r4, #0]
 801b84e:	bd38      	pop	{r3, r4, r5, pc}
 801b850:	20012a10 	.word	0x20012a10

0801b854 <abort>:
 801b854:	b508      	push	{r3, lr}
 801b856:	2006      	movs	r0, #6
 801b858:	f000 f88e 	bl	801b978 <raise>
 801b85c:	2001      	movs	r0, #1
 801b85e:	f7e6 fa37 	bl	8001cd0 <_exit>

0801b862 <__swhatbuf_r>:
 801b862:	b570      	push	{r4, r5, r6, lr}
 801b864:	460c      	mov	r4, r1
 801b866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b86a:	2900      	cmp	r1, #0
 801b86c:	b096      	sub	sp, #88	; 0x58
 801b86e:	4615      	mov	r5, r2
 801b870:	461e      	mov	r6, r3
 801b872:	da0d      	bge.n	801b890 <__swhatbuf_r+0x2e>
 801b874:	89a3      	ldrh	r3, [r4, #12]
 801b876:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b87a:	f04f 0100 	mov.w	r1, #0
 801b87e:	bf0c      	ite	eq
 801b880:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b884:	2340      	movne	r3, #64	; 0x40
 801b886:	2000      	movs	r0, #0
 801b888:	6031      	str	r1, [r6, #0]
 801b88a:	602b      	str	r3, [r5, #0]
 801b88c:	b016      	add	sp, #88	; 0x58
 801b88e:	bd70      	pop	{r4, r5, r6, pc}
 801b890:	466a      	mov	r2, sp
 801b892:	f000 f879 	bl	801b988 <_fstat_r>
 801b896:	2800      	cmp	r0, #0
 801b898:	dbec      	blt.n	801b874 <__swhatbuf_r+0x12>
 801b89a:	9901      	ldr	r1, [sp, #4]
 801b89c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b8a0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b8a4:	4259      	negs	r1, r3
 801b8a6:	4159      	adcs	r1, r3
 801b8a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b8ac:	e7eb      	b.n	801b886 <__swhatbuf_r+0x24>

0801b8ae <__smakebuf_r>:
 801b8ae:	898b      	ldrh	r3, [r1, #12]
 801b8b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b8b2:	079d      	lsls	r5, r3, #30
 801b8b4:	4606      	mov	r6, r0
 801b8b6:	460c      	mov	r4, r1
 801b8b8:	d507      	bpl.n	801b8ca <__smakebuf_r+0x1c>
 801b8ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b8be:	6023      	str	r3, [r4, #0]
 801b8c0:	6123      	str	r3, [r4, #16]
 801b8c2:	2301      	movs	r3, #1
 801b8c4:	6163      	str	r3, [r4, #20]
 801b8c6:	b002      	add	sp, #8
 801b8c8:	bd70      	pop	{r4, r5, r6, pc}
 801b8ca:	ab01      	add	r3, sp, #4
 801b8cc:	466a      	mov	r2, sp
 801b8ce:	f7ff ffc8 	bl	801b862 <__swhatbuf_r>
 801b8d2:	9900      	ldr	r1, [sp, #0]
 801b8d4:	4605      	mov	r5, r0
 801b8d6:	4630      	mov	r0, r6
 801b8d8:	f7ff faf6 	bl	801aec8 <_malloc_r>
 801b8dc:	b948      	cbnz	r0, 801b8f2 <__smakebuf_r+0x44>
 801b8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b8e2:	059a      	lsls	r2, r3, #22
 801b8e4:	d4ef      	bmi.n	801b8c6 <__smakebuf_r+0x18>
 801b8e6:	f023 0303 	bic.w	r3, r3, #3
 801b8ea:	f043 0302 	orr.w	r3, r3, #2
 801b8ee:	81a3      	strh	r3, [r4, #12]
 801b8f0:	e7e3      	b.n	801b8ba <__smakebuf_r+0xc>
 801b8f2:	89a3      	ldrh	r3, [r4, #12]
 801b8f4:	6020      	str	r0, [r4, #0]
 801b8f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b8fa:	81a3      	strh	r3, [r4, #12]
 801b8fc:	9b00      	ldr	r3, [sp, #0]
 801b8fe:	6163      	str	r3, [r4, #20]
 801b900:	9b01      	ldr	r3, [sp, #4]
 801b902:	6120      	str	r0, [r4, #16]
 801b904:	b15b      	cbz	r3, 801b91e <__smakebuf_r+0x70>
 801b906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b90a:	4630      	mov	r0, r6
 801b90c:	f000 f84e 	bl	801b9ac <_isatty_r>
 801b910:	b128      	cbz	r0, 801b91e <__smakebuf_r+0x70>
 801b912:	89a3      	ldrh	r3, [r4, #12]
 801b914:	f023 0303 	bic.w	r3, r3, #3
 801b918:	f043 0301 	orr.w	r3, r3, #1
 801b91c:	81a3      	strh	r3, [r4, #12]
 801b91e:	89a3      	ldrh	r3, [r4, #12]
 801b920:	431d      	orrs	r5, r3
 801b922:	81a5      	strh	r5, [r4, #12]
 801b924:	e7cf      	b.n	801b8c6 <__smakebuf_r+0x18>

0801b926 <_raise_r>:
 801b926:	291f      	cmp	r1, #31
 801b928:	b538      	push	{r3, r4, r5, lr}
 801b92a:	4604      	mov	r4, r0
 801b92c:	460d      	mov	r5, r1
 801b92e:	d904      	bls.n	801b93a <_raise_r+0x14>
 801b930:	2316      	movs	r3, #22
 801b932:	6003      	str	r3, [r0, #0]
 801b934:	f04f 30ff 	mov.w	r0, #4294967295
 801b938:	bd38      	pop	{r3, r4, r5, pc}
 801b93a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b93c:	b112      	cbz	r2, 801b944 <_raise_r+0x1e>
 801b93e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b942:	b94b      	cbnz	r3, 801b958 <_raise_r+0x32>
 801b944:	4620      	mov	r0, r4
 801b946:	f000 f853 	bl	801b9f0 <_getpid_r>
 801b94a:	462a      	mov	r2, r5
 801b94c:	4601      	mov	r1, r0
 801b94e:	4620      	mov	r0, r4
 801b950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b954:	f000 b83a 	b.w	801b9cc <_kill_r>
 801b958:	2b01      	cmp	r3, #1
 801b95a:	d00a      	beq.n	801b972 <_raise_r+0x4c>
 801b95c:	1c59      	adds	r1, r3, #1
 801b95e:	d103      	bne.n	801b968 <_raise_r+0x42>
 801b960:	2316      	movs	r3, #22
 801b962:	6003      	str	r3, [r0, #0]
 801b964:	2001      	movs	r0, #1
 801b966:	e7e7      	b.n	801b938 <_raise_r+0x12>
 801b968:	2400      	movs	r4, #0
 801b96a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b96e:	4628      	mov	r0, r5
 801b970:	4798      	blx	r3
 801b972:	2000      	movs	r0, #0
 801b974:	e7e0      	b.n	801b938 <_raise_r+0x12>
	...

0801b978 <raise>:
 801b978:	4b02      	ldr	r3, [pc, #8]	; (801b984 <raise+0xc>)
 801b97a:	4601      	mov	r1, r0
 801b97c:	6818      	ldr	r0, [r3, #0]
 801b97e:	f7ff bfd2 	b.w	801b926 <_raise_r>
 801b982:	bf00      	nop
 801b984:	200000a4 	.word	0x200000a4

0801b988 <_fstat_r>:
 801b988:	b538      	push	{r3, r4, r5, lr}
 801b98a:	4d07      	ldr	r5, [pc, #28]	; (801b9a8 <_fstat_r+0x20>)
 801b98c:	2300      	movs	r3, #0
 801b98e:	4604      	mov	r4, r0
 801b990:	4608      	mov	r0, r1
 801b992:	4611      	mov	r1, r2
 801b994:	602b      	str	r3, [r5, #0]
 801b996:	f7e6 f9ea 	bl	8001d6e <_fstat>
 801b99a:	1c43      	adds	r3, r0, #1
 801b99c:	d102      	bne.n	801b9a4 <_fstat_r+0x1c>
 801b99e:	682b      	ldr	r3, [r5, #0]
 801b9a0:	b103      	cbz	r3, 801b9a4 <_fstat_r+0x1c>
 801b9a2:	6023      	str	r3, [r4, #0]
 801b9a4:	bd38      	pop	{r3, r4, r5, pc}
 801b9a6:	bf00      	nop
 801b9a8:	20012a10 	.word	0x20012a10

0801b9ac <_isatty_r>:
 801b9ac:	b538      	push	{r3, r4, r5, lr}
 801b9ae:	4d06      	ldr	r5, [pc, #24]	; (801b9c8 <_isatty_r+0x1c>)
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	4604      	mov	r4, r0
 801b9b4:	4608      	mov	r0, r1
 801b9b6:	602b      	str	r3, [r5, #0]
 801b9b8:	f7e6 f9e9 	bl	8001d8e <_isatty>
 801b9bc:	1c43      	adds	r3, r0, #1
 801b9be:	d102      	bne.n	801b9c6 <_isatty_r+0x1a>
 801b9c0:	682b      	ldr	r3, [r5, #0]
 801b9c2:	b103      	cbz	r3, 801b9c6 <_isatty_r+0x1a>
 801b9c4:	6023      	str	r3, [r4, #0]
 801b9c6:	bd38      	pop	{r3, r4, r5, pc}
 801b9c8:	20012a10 	.word	0x20012a10

0801b9cc <_kill_r>:
 801b9cc:	b538      	push	{r3, r4, r5, lr}
 801b9ce:	4d07      	ldr	r5, [pc, #28]	; (801b9ec <_kill_r+0x20>)
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	4604      	mov	r4, r0
 801b9d4:	4608      	mov	r0, r1
 801b9d6:	4611      	mov	r1, r2
 801b9d8:	602b      	str	r3, [r5, #0]
 801b9da:	f7e6 f969 	bl	8001cb0 <_kill>
 801b9de:	1c43      	adds	r3, r0, #1
 801b9e0:	d102      	bne.n	801b9e8 <_kill_r+0x1c>
 801b9e2:	682b      	ldr	r3, [r5, #0]
 801b9e4:	b103      	cbz	r3, 801b9e8 <_kill_r+0x1c>
 801b9e6:	6023      	str	r3, [r4, #0]
 801b9e8:	bd38      	pop	{r3, r4, r5, pc}
 801b9ea:	bf00      	nop
 801b9ec:	20012a10 	.word	0x20012a10

0801b9f0 <_getpid_r>:
 801b9f0:	f7e6 b956 	b.w	8001ca0 <_getpid>

0801b9f4 <_init>:
 801b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9f6:	bf00      	nop
 801b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9fa:	bc08      	pop	{r3}
 801b9fc:	469e      	mov	lr, r3
 801b9fe:	4770      	bx	lr

0801ba00 <_fini>:
 801ba00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba02:	bf00      	nop
 801ba04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba06:	bc08      	pop	{r3}
 801ba08:	469e      	mov	lr, r3
 801ba0a:	4770      	bx	lr
