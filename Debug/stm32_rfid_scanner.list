
stm32_rfid_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002410  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002628  08002628  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002630  08002630  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000c7c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c90  20000c90  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a71d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001702  00000000  00000000  0002a761  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000668  00000000  00000000  0002be68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005c8  00000000  00000000  0002c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000241ea  00000000  00000000  0002ca98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00006178  00000000  00000000  00050c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d99e7  00000000  00000000  00056dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001307e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001860  00000000  00000000  0013085c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080025a4 	.word	0x080025a4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080025a4 	.word	0x080025a4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SEGGER_RTT_printf(0, "Application start\r\n");
 80004f2:	4942      	ldr	r1, [pc, #264]	; (80005fc <main+0x110>)
 80004f4:	2000      	movs	r0, #0
 80004f6:	f001 ff07 	bl	8002308 <SEGGER_RTT_printf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fa77 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f88b 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8f3 	bl	80006ec <MX_GPIO_Init>

  ledInit(&ledYellow,
 8000506:	2300      	movs	r3, #0
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2301      	movs	r3, #1
 800050c:	2201      	movs	r2, #1
 800050e:	493c      	ldr	r1, [pc, #240]	; (8000600 <main+0x114>)
 8000510:	483c      	ldr	r0, [pc, #240]	; (8000604 <main+0x118>)
 8000512:	f001 ff32 	bl	800237a <ledInit>
		  GPIOB,
		  LD1_Pin,
		  GPIO_PIN_SET,
		  Off);
  ledInit(&ledRed,
 8000516:	2300      	movs	r3, #0
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000520:	4937      	ldr	r1, [pc, #220]	; (8000600 <main+0x114>)
 8000522:	4839      	ldr	r0, [pc, #228]	; (8000608 <main+0x11c>)
 8000524:	f001 ff29 	bl	800237a <ledInit>
		  GPIOB,
		  LD3_Pin,
		  GPIO_PIN_SET,
		  Off);
  ledInit(&ledBlue,
 8000528:	2300      	movs	r3, #0
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2301      	movs	r3, #1
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	4933      	ldr	r1, [pc, #204]	; (8000600 <main+0x114>)
 8000532:	4836      	ldr	r0, [pc, #216]	; (800060c <main+0x120>)
 8000534:	f001 ff21 	bl	800237a <ledInit>
		  GPIOB,
		  LD2_Pin,
		  GPIO_PIN_SET,
		  Off);

  ledOn(&ledRed);
 8000538:	4833      	ldr	r0, [pc, #204]	; (8000608 <main+0x11c>)
 800053a:	f001 ff5c 	bl	80023f6 <ledOn>
  ledOn(&ledYellow);
 800053e:	4831      	ldr	r0, [pc, #196]	; (8000604 <main+0x118>)
 8000540:	f001 ff59 	bl	80023f6 <ledOn>
  ledOn(&ledBlue);
 8000544:	4831      	ldr	r0, [pc, #196]	; (800060c <main+0x120>)
 8000546:	f001 ff56 	bl	80023f6 <ledOn>
  HAL_Delay(5000);
 800054a:	f241 3088 	movw	r0, #5000	; 0x1388
 800054e:	f000 fabf 	bl	8000ad0 <HAL_Delay>


  ledBlink(&ledRed, 10, 200, 200, 0, 0);
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2300      	movs	r3, #0
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	23c8      	movs	r3, #200	; 0xc8
 800055c:	22c8      	movs	r2, #200	; 0xc8
 800055e:	210a      	movs	r1, #10
 8000560:	4829      	ldr	r0, [pc, #164]	; (8000608 <main+0x11c>)
 8000562:	f001 ff73 	bl	800244c <ledBlink>
  ledBlink(&ledYellow, 10, 200, 200, 0, 0);
 8000566:	2300      	movs	r3, #0
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2300      	movs	r3, #0
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	23c8      	movs	r3, #200	; 0xc8
 8000570:	22c8      	movs	r2, #200	; 0xc8
 8000572:	210a      	movs	r1, #10
 8000574:	4823      	ldr	r0, [pc, #140]	; (8000604 <main+0x118>)
 8000576:	f001 ff69 	bl	800244c <ledBlink>
  ledBlink(&ledBlue, 10, 200, 200, 0, 0);
 800057a:	2300      	movs	r3, #0
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2300      	movs	r3, #0
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	23c8      	movs	r3, #200	; 0xc8
 8000584:	22c8      	movs	r2, #200	; 0xc8
 8000586:	210a      	movs	r1, #10
 8000588:	4820      	ldr	r0, [pc, #128]	; (800060c <main+0x120>)
 800058a:	f001 ff5f 	bl	800244c <ledBlink>


  ledOff(&ledRed);
 800058e:	481e      	ldr	r0, [pc, #120]	; (8000608 <main+0x11c>)
 8000590:	f001 ff3d 	bl	800240e <ledOff>
  ledOff(&ledYellow);
 8000594:	481b      	ldr	r0, [pc, #108]	; (8000604 <main+0x118>)
 8000596:	f001 ff3a 	bl	800240e <ledOff>
  ledOff(&ledBlue);
 800059a:	481c      	ldr	r0, [pc, #112]	; (800060c <main+0x120>)
 800059c:	f001 ff37 	bl	800240e <ledOff>

  for(int i = 0; i < 10; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	e00f      	b.n	80005c6 <main+0xda>
  {
	  ledToggle(&ledRed);
 80005a6:	4818      	ldr	r0, [pc, #96]	; (8000608 <main+0x11c>)
 80005a8:	f001 ff3d 	bl	8002426 <ledToggle>
	  ledToggle(&ledYellow);
 80005ac:	4815      	ldr	r0, [pc, #84]	; (8000604 <main+0x118>)
 80005ae:	f001 ff3a 	bl	8002426 <ledToggle>
	  ledToggle(&ledBlue);
 80005b2:	4816      	ldr	r0, [pc, #88]	; (800060c <main+0x120>)
 80005b4:	f001 ff37 	bl	8002426 <ledToggle>

	  HAL_Delay(500);
 80005b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005bc:	f000 fa88 	bl	8000ad0 <HAL_Delay>
  for(int i = 0; i < 10; i++)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b09      	cmp	r3, #9
 80005ca:	ddec      	ble.n	80005a6 <main+0xba>
  }

  while(1)
  {
	  if(isButtonPressed == 1){
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0x124>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d1fb      	bne.n	80005cc <main+0xe0>
		  SEGGER_RTT_printf(0, "isButtonPressed %d\r\n", isButtonPressed);
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <main+0x124>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	490e      	ldr	r1, [pc, #56]	; (8000614 <main+0x128>)
 80005dc:	2000      	movs	r0, #0
 80005de:	f001 fe93 	bl	8002308 <SEGGER_RTT_printf>
		  isButtonPressed = 0;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <main+0x124>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
		  ledToggle(&ledRed);
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <main+0x11c>)
 80005ea:	f001 ff1c 	bl	8002426 <ledToggle>
		  ledToggle(&ledYellow);
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <main+0x118>)
 80005f0:	f001 ff19 	bl	8002426 <ledToggle>
		  ledToggle(&ledBlue);
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <main+0x120>)
 80005f6:	f001 ff16 	bl	8002426 <ledToggle>
	  if(isButtonPressed == 1){
 80005fa:	e7e7      	b.n	80005cc <main+0xe0>
 80005fc:	080025bc 	.word	0x080025bc
 8000600:	40020400 	.word	0x40020400
 8000604:	20000a44 	.word	0x20000a44
 8000608:	20000af0 	.word	0x20000af0
 800060c:	20000448 	.word	0x20000448
 8000610:	20000000 	.word	0x20000000
 8000614:	080025d0 	.word	0x080025d0

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f001 ffb3 	bl	8002592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800068c:	23a8      	movs	r3, #168	; 0xa8
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fd3f 	bl	8001120 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f906 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 ffa0 	bl	8001610 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 f8ef 	bl	80008b8 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	4b45      	ldr	r3, [pc, #276]	; (800081c <MX_GPIO_Init+0x130>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a44      	ldr	r2, [pc, #272]	; (800081c <MX_GPIO_Init+0x130>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b42      	ldr	r3, [pc, #264]	; (800081c <MX_GPIO_Init+0x130>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	4b3e      	ldr	r3, [pc, #248]	; (800081c <MX_GPIO_Init+0x130>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a3d      	ldr	r2, [pc, #244]	; (800081c <MX_GPIO_Init+0x130>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b3b      	ldr	r3, [pc, #236]	; (800081c <MX_GPIO_Init+0x130>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <MX_GPIO_Init+0x130>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a36      	ldr	r2, [pc, #216]	; (800081c <MX_GPIO_Init+0x130>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b34      	ldr	r3, [pc, #208]	; (800081c <MX_GPIO_Init+0x130>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b30      	ldr	r3, [pc, #192]	; (800081c <MX_GPIO_Init+0x130>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2f      	ldr	r2, [pc, #188]	; (800081c <MX_GPIO_Init+0x130>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_GPIO_Init+0x130>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_GPIO_Init+0x130>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a28      	ldr	r2, [pc, #160]	; (800081c <MX_GPIO_Init+0x130>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_GPIO_Init+0x130>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_GPIO_Init+0x130>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a21      	ldr	r2, [pc, #132]	; (800081c <MX_GPIO_Init+0x130>)
 8000798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0x130>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2140      	movs	r1, #64	; 0x40
 80007ae:	481c      	ldr	r0, [pc, #112]	; (8000820 <MX_GPIO_Init+0x134>)
 80007b0:	f000 fc84 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4816      	ldr	r0, [pc, #88]	; (8000824 <MX_GPIO_Init+0x138>)
 80007cc:	f000 fab4 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <MX_GPIO_Init+0x134>)
 80007e8:	f000 faa6 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4808      	ldr	r0, [pc, #32]	; (8000820 <MX_GPIO_Init+0x134>)
 8000800:	f000 fa9a 	bl	8000d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2028      	movs	r0, #40	; 0x28
 800080a:	f000 fa5e 	bl	8000cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800080e:	2028      	movs	r0, #40	; 0x28
 8000810:	f000 fa77 	bl	8000d02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000814:	bf00      	nop
 8000816:	3730      	adds	r7, #48	; 0x30
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40021800 	.word	0x40021800
 8000824:	40020800 	.word	0x40020800

08000828 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if(_pressed == 0 && HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET)
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d115      	bne.n	8000866 <HAL_GPIO_EXTI_Callback+0x3e>
 800083a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083e:	481a      	ldr	r0, [pc, #104]	; (80008a8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000840:	f000 fc24 	bl	800108c <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10d      	bne.n	8000866 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		_pressed = 1;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
		_startTick = HAL_GetTick();
 8000850:	f000 f932 	bl	8000ab8 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_GPIO_EXTI_Callback+0x84>)
 8000858:	601a      	str	r2, [r3, #0]
		_tick = HAL_GetTick();
 800085a:	f000 f92d 	bl	8000ab8 <HAL_GetTick>
 800085e:	4602      	mov	r2, r0
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	e004      	b.n	8000870 <HAL_GPIO_EXTI_Callback+0x48>
	}else{
		_tick = HAL_GetTick();
 8000866:	f000 f927 	bl	8000ab8 <HAL_GetTick>
 800086a:	4602      	mov	r2, r0
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x88>)
 800086e:	601a      	str	r2, [r3, #0]
	}

	if(_tick - _startTick > 100 && HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET)
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_GPIO_EXTI_Callback+0x84>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	2b64      	cmp	r3, #100	; 0x64
 800087c:	d90d      	bls.n	800089a <HAL_GPIO_EXTI_Callback+0x72>
 800087e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000884:	f000 fc02 	bl	800108c <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d105      	bne.n	800089a <HAL_GPIO_EXTI_Callback+0x72>
	{
		isButtonPressed = 1;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
		_pressed = 0;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
	}
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000004 	.word	0x20000004
 80008a8:	40020800 	.word	0x40020800
 80008ac:	20000034 	.word	0x20000034
 80008b0:	20000030 	.word	0x20000030
 80008b4:	20000000 	.word	0x20000000

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008be:	e7fe      	b.n	80008be <Error_Handler+0x6>

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f898 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000968:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800096c:	f000 fbc0 	bl	80010f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099e:	490e      	ldr	r1, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b4:	4c0b      	ldr	r4, [pc, #44]	; (80009e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009c2:	f7ff ffd7 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f001 fdb5 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fd8f 	bl	80004ec <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009dc:	08002638 	.word	0x08002638
  ldr r2, =_sbss
 80009e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009e4:	20000c90 	.word	0x20000c90

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <HAL_Init+0x40>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_Init+0x40>)
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x40>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f94d 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff ff4e 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f965 	bl	8000d1e <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f92d 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000010 	.word	0x20000010
 8000a8c:	2000000c 	.word	0x2000000c

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000010 	.word	0x20000010
 8000ab4:	20000be4 	.word	0x20000be4

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000be4 	.word	0x20000be4

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_Delay+0x40>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000010 	.word	0x20000010

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff29 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff3e 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff8e 	bl	8000c08 <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff31 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffa2 	bl	8000c70 <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	e177      	b.n	8001044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d54:	2201      	movs	r2, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f040 8166 	bne.w	800103e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d005      	beq.n	8000d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d130      	bne.n	8000dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	091b      	lsrs	r3, r3, #4
 8000dd6:	f003 0201 	and.w	r2, r3, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d017      	beq.n	8000e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d123      	bne.n	8000e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	69b9      	ldr	r1, [r7, #24]
 8000e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0203 	and.w	r2, r3, #3
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80c0 	beq.w	800103e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b65      	ldr	r3, [pc, #404]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a64      	ldr	r2, [pc, #400]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b62      	ldr	r3, [pc, #392]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eda:	4a60      	ldr	r2, [pc, #384]	; (800105c <HAL_GPIO_Init+0x324>)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a57      	ldr	r2, [pc, #348]	; (8001060 <HAL_GPIO_Init+0x328>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d037      	beq.n	8000f76 <HAL_GPIO_Init+0x23e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a56      	ldr	r2, [pc, #344]	; (8001064 <HAL_GPIO_Init+0x32c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d031      	beq.n	8000f72 <HAL_GPIO_Init+0x23a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a55      	ldr	r2, [pc, #340]	; (8001068 <HAL_GPIO_Init+0x330>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d02b      	beq.n	8000f6e <HAL_GPIO_Init+0x236>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a54      	ldr	r2, [pc, #336]	; (800106c <HAL_GPIO_Init+0x334>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d025      	beq.n	8000f6a <HAL_GPIO_Init+0x232>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a53      	ldr	r2, [pc, #332]	; (8001070 <HAL_GPIO_Init+0x338>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d01f      	beq.n	8000f66 <HAL_GPIO_Init+0x22e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a52      	ldr	r2, [pc, #328]	; (8001074 <HAL_GPIO_Init+0x33c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0x22a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a51      	ldr	r2, [pc, #324]	; (8001078 <HAL_GPIO_Init+0x340>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a50      	ldr	r2, [pc, #320]	; (800107c <HAL_GPIO_Init+0x344>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x222>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4f      	ldr	r2, [pc, #316]	; (8001080 <HAL_GPIO_Init+0x348>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x21e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <HAL_GPIO_Init+0x34c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x21a>
 8000f4e:	2309      	movs	r3, #9
 8000f50:	e012      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f52:	230a      	movs	r3, #10
 8000f54:	e010      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f56:	2308      	movs	r3, #8
 8000f58:	e00e      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00c      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f5e:	2306      	movs	r3, #6
 8000f60:	e00a      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f62:	2305      	movs	r3, #5
 8000f64:	e008      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x240>
 8000f76:	2300      	movs	r3, #0
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	f002 0203 	and.w	r2, r2, #3
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f88:	4934      	ldr	r1, [pc, #208]	; (800105c <HAL_GPIO_Init+0x324>)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <HAL_GPIO_Init+0x350>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fba:	4a33      	ldr	r2, [pc, #204]	; (8001088 <HAL_GPIO_Init+0x350>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <HAL_GPIO_Init+0x350>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe4:	4a28      	ldr	r2, [pc, #160]	; (8001088 <HAL_GPIO_Init+0x350>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_GPIO_Init+0x350>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <HAL_GPIO_Init+0x350>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_GPIO_Init+0x350>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_GPIO_Init+0x350>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	f67f ae84 	bls.w	8000d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800104c:	bf00      	nop
 800104e:	3724      	adds	r7, #36	; 0x24
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40023800 	.word	0x40023800
 800105c:	40013800 	.word	0x40013800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40021c00 	.word	0x40021c00
 8001080:	40022000 	.word	0x40022000
 8001084:	40022400 	.word	0x40022400
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e001      	b.n	80010ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d8:	e003      	b.n	80010e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	041a      	lsls	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fb8a 	bl	8000828 <HAL_GPIO_EXTI_Callback>
  }
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e264      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d075      	beq.n	800122a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b04      	cmp	r3, #4
 8001148:	d00c      	beq.n	8001164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114a:	4ba0      	ldr	r3, [pc, #640]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001152:	2b08      	cmp	r3, #8
 8001154:	d112      	bne.n	800117c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001156:	4b9d      	ldr	r3, [pc, #628]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001162:	d10b      	bne.n	800117c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	4b99      	ldr	r3, [pc, #612]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d05b      	beq.n	8001228 <HAL_RCC_OscConfig+0x108>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d157      	bne.n	8001228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e23f      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001184:	d106      	bne.n	8001194 <HAL_RCC_OscConfig+0x74>
 8001186:	4b91      	ldr	r3, [pc, #580]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a90      	ldr	r2, [pc, #576]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e01d      	b.n	80011d0 <HAL_RCC_OscConfig+0xb0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x98>
 800119e:	4b8b      	ldr	r3, [pc, #556]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a8a      	ldr	r2, [pc, #552]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a87      	ldr	r2, [pc, #540]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e00b      	b.n	80011d0 <HAL_RCC_OscConfig+0xb0>
 80011b8:	4b84      	ldr	r3, [pc, #528]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a83      	ldr	r2, [pc, #524]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80011be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b81      	ldr	r3, [pc, #516]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a80      	ldr	r2, [pc, #512]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d013      	beq.n	8001200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc6e 	bl	8000ab8 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fc6a 	bl	8000ab8 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e204      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b76      	ldr	r3, [pc, #472]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0xc0>
 80011fe:	e014      	b.n	800122a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fc5a 	bl	8000ab8 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fc56 	bl	8000ab8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e1f0      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	4b6c      	ldr	r3, [pc, #432]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0xe8>
 8001226:	e000      	b.n	800122a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d063      	beq.n	80012fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001236:	4b65      	ldr	r3, [pc, #404]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001242:	4b62      	ldr	r3, [pc, #392]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124a:	2b08      	cmp	r3, #8
 800124c:	d11c      	bne.n	8001288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124e:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d116      	bne.n	8001288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	4b5c      	ldr	r3, [pc, #368]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_RCC_OscConfig+0x152>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e1c4      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001272:	4b56      	ldr	r3, [pc, #344]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4952      	ldr	r1, [pc, #328]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	e03a      	b.n	80012fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001290:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <HAL_RCC_OscConfig+0x2b0>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001296:	f7ff fc0f 	bl	8000ab8 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fc0b 	bl	8000ab8 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e1a5      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4940      	ldr	r1, [pc, #256]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
 80012d0:	e015      	b.n	80012fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d2:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <HAL_RCC_OscConfig+0x2b0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fbee 	bl	8000ab8 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e0:	f7ff fbea 	bl	8000ab8 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e184      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d030      	beq.n	800136c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d016      	beq.n	8001340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_RCC_OscConfig+0x2b4>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff fbce 	bl	8000ab8 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fbca 	bl	8000ab8 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e164      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x200>
 800133e:	e015      	b.n	800136c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_RCC_OscConfig+0x2b4>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fbb7 	bl	8000ab8 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff fbb3 	bl	8000ab8 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e14d      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80a0 	beq.w	80014ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_RCC_OscConfig+0x2ac>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_OscConfig+0x2b8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d121      	bne.n	80013fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_RCC_OscConfig+0x2b8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_RCC_OscConfig+0x2b8>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb79 	bl	8000ab8 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	e011      	b.n	80013ee <HAL_RCC_OscConfig+0x2ce>
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	42470000 	.word	0x42470000
 80013d4:	42470e80 	.word	0x42470e80
 80013d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013dc:	f7ff fb6c 	bl	8000ab8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e106      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b85      	ldr	r3, [pc, #532]	; (8001604 <HAL_RCC_OscConfig+0x4e4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x2f0>
 8001402:	4b81      	ldr	r3, [pc, #516]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a80      	ldr	r2, [pc, #512]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	e01c      	b.n	800144a <HAL_RCC_OscConfig+0x32a>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d10c      	bne.n	8001432 <HAL_RCC_OscConfig+0x312>
 8001418:	4b7b      	ldr	r3, [pc, #492]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	4a7a      	ldr	r2, [pc, #488]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6713      	str	r3, [r2, #112]	; 0x70
 8001424:	4b78      	ldr	r3, [pc, #480]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	4a77      	ldr	r2, [pc, #476]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
 8001430:	e00b      	b.n	800144a <HAL_RCC_OscConfig+0x32a>
 8001432:	4b75      	ldr	r3, [pc, #468]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	4a74      	ldr	r2, [pc, #464]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6713      	str	r3, [r2, #112]	; 0x70
 800143e:	4b72      	ldr	r3, [pc, #456]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	4a71      	ldr	r2, [pc, #452]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d015      	beq.n	800147e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001452:	f7ff fb31 	bl	8000ab8 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fb2d 	bl	8000ab8 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e0c5      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001470:	4b65      	ldr	r3, [pc, #404]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ee      	beq.n	800145a <HAL_RCC_OscConfig+0x33a>
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff fb1b 	bl	8000ab8 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001484:	e00a      	b.n	800149c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff fb17 	bl	8000ab8 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	f241 3288 	movw	r2, #5000	; 0x1388
 8001494:	4293      	cmp	r3, r2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e0af      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149c:	4b5a      	ldr	r3, [pc, #360]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ee      	bne.n	8001486 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d105      	bne.n	80014ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ae:	4b56      	ldr	r3, [pc, #344]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a55      	ldr	r2, [pc, #340]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 809b 	beq.w	80015fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c4:	4b50      	ldr	r3, [pc, #320]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d05c      	beq.n	800158a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d141      	bne.n	800155c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_RCC_OscConfig+0x4ec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff faeb 	bl	8000ab8 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff fae7 	bl	8000ab8 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e081      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69da      	ldr	r2, [r3, #28]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	019b      	lsls	r3, r3, #6
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	085b      	lsrs	r3, r3, #1
 800151c:	3b01      	subs	r3, #1
 800151e:	041b      	lsls	r3, r3, #16
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	061b      	lsls	r3, r3, #24
 8001528:	4937      	ldr	r1, [pc, #220]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152e:	4b37      	ldr	r3, [pc, #220]	; (800160c <HAL_RCC_OscConfig+0x4ec>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fac0 	bl	8000ab8 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fabc 	bl	8000ab8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e056      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x41c>
 800155a:	e04e      	b.n	80015fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b2b      	ldr	r3, [pc, #172]	; (800160c <HAL_RCC_OscConfig+0x4ec>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff faa9 	bl	8000ab8 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff faa5 	bl	8000ab8 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e03f      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x44a>
 8001588:	e037      	b.n	80015fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e032      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_RCC_OscConfig+0x4e8>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d028      	beq.n	80015f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d121      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d11a      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015c6:	4013      	ands	r3, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d111      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	3b01      	subs	r3, #1
 80015e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40007000 	.word	0x40007000
 8001608:	40023800 	.word	0x40023800
 800160c:	42470060 	.word	0x42470060

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0cc      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d90c      	bls.n	800164c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0b8      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d020      	beq.n	800169a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001664:	4b59      	ldr	r3, [pc, #356]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a58      	ldr	r2, [pc, #352]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800166e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a52      	ldr	r2, [pc, #328]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001688:	4b50      	ldr	r3, [pc, #320]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	494d      	ldr	r1, [pc, #308]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d044      	beq.n	8001730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d119      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e07f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e067      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4934      	ldr	r1, [pc, #208]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff f9da 	bl	8000ab8 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7ff f9d6 	bl	8000ab8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e04f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d20c      	bcs.n	8001758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e032      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4916      	ldr	r1, [pc, #88]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	490e      	ldr	r1, [pc, #56]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001796:	f000 f821 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 800179a:	4601      	mov	r1, r0
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	fa21 f303 	lsr.w	r3, r1, r3
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff f93a 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	080025f4 	.word	0x080025f4
 80017d4:	20000008 	.word	0x20000008
 80017d8:	2000000c 	.word	0x2000000c

080017dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f2:	4b63      	ldr	r3, [pc, #396]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d007      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x32>
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d008      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x38>
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 80b4 	bne.w	8001970 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800180a:	60bb      	str	r3, [r7, #8]
       break;
 800180c:	e0b3      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180e:	4b5e      	ldr	r3, [pc, #376]	; (8001988 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001810:	60bb      	str	r3, [r7, #8]
      break;
 8001812:	e0b0      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001814:	4b5a      	ldr	r3, [pc, #360]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800181c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181e:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d04a      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182a:	4b55      	ldr	r3, [pc, #340]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	099b      	lsrs	r3, r3, #6
 8001830:	f04f 0400 	mov.w	r4, #0
 8001834:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	ea03 0501 	and.w	r5, r3, r1
 8001840:	ea04 0602 	and.w	r6, r4, r2
 8001844:	4629      	mov	r1, r5
 8001846:	4632      	mov	r2, r6
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	f04f 0400 	mov.w	r4, #0
 8001850:	0154      	lsls	r4, r2, #5
 8001852:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001856:	014b      	lsls	r3, r1, #5
 8001858:	4619      	mov	r1, r3
 800185a:	4622      	mov	r2, r4
 800185c:	1b49      	subs	r1, r1, r5
 800185e:	eb62 0206 	sbc.w	r2, r2, r6
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	f04f 0400 	mov.w	r4, #0
 800186a:	0194      	lsls	r4, r2, #6
 800186c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001870:	018b      	lsls	r3, r1, #6
 8001872:	1a5b      	subs	r3, r3, r1
 8001874:	eb64 0402 	sbc.w	r4, r4, r2
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	00e2      	lsls	r2, r4, #3
 8001882:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001886:	00d9      	lsls	r1, r3, #3
 8001888:	460b      	mov	r3, r1
 800188a:	4614      	mov	r4, r2
 800188c:	195b      	adds	r3, r3, r5
 800188e:	eb44 0406 	adc.w	r4, r4, r6
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	0262      	lsls	r2, r4, #9
 800189c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018a0:	0259      	lsls	r1, r3, #9
 80018a2:	460b      	mov	r3, r1
 80018a4:	4614      	mov	r4, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	4621      	mov	r1, r4
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f04f 0400 	mov.w	r4, #0
 80018b0:	461a      	mov	r2, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	f7fe fc9a 	bl	80001ec <__aeabi_uldivmod>
 80018b8:	4603      	mov	r3, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e049      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	f04f 0400 	mov.w	r4, #0
 80018ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	ea03 0501 	and.w	r5, r3, r1
 80018d6:	ea04 0602 	and.w	r6, r4, r2
 80018da:	4629      	mov	r1, r5
 80018dc:	4632      	mov	r2, r6
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	f04f 0400 	mov.w	r4, #0
 80018e6:	0154      	lsls	r4, r2, #5
 80018e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ec:	014b      	lsls	r3, r1, #5
 80018ee:	4619      	mov	r1, r3
 80018f0:	4622      	mov	r2, r4
 80018f2:	1b49      	subs	r1, r1, r5
 80018f4:	eb62 0206 	sbc.w	r2, r2, r6
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	f04f 0400 	mov.w	r4, #0
 8001900:	0194      	lsls	r4, r2, #6
 8001902:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001906:	018b      	lsls	r3, r1, #6
 8001908:	1a5b      	subs	r3, r3, r1
 800190a:	eb64 0402 	sbc.w	r4, r4, r2
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	00e2      	lsls	r2, r4, #3
 8001918:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800191c:	00d9      	lsls	r1, r3, #3
 800191e:	460b      	mov	r3, r1
 8001920:	4614      	mov	r4, r2
 8001922:	195b      	adds	r3, r3, r5
 8001924:	eb44 0406 	adc.w	r4, r4, r6
 8001928:	f04f 0100 	mov.w	r1, #0
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	02a2      	lsls	r2, r4, #10
 8001932:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001936:	0299      	lsls	r1, r3, #10
 8001938:	460b      	mov	r3, r1
 800193a:	4614      	mov	r4, r2
 800193c:	4618      	mov	r0, r3
 800193e:	4621      	mov	r1, r4
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f04f 0400 	mov.w	r4, #0
 8001946:	461a      	mov	r2, r3
 8001948:	4623      	mov	r3, r4
 800194a:	f7fe fc4f 	bl	80001ec <__aeabi_uldivmod>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	0c1b      	lsrs	r3, r3, #16
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	3301      	adds	r3, #1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	fbb2 f3f3 	udiv	r3, r2, r3
 800196c:	60bb      	str	r3, [r7, #8]
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001972:	60bb      	str	r3, [r7, #8]
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	68bb      	ldr	r3, [r7, #8]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	00f42400 	.word	0x00f42400
 8001988:	007a1200 	.word	0x007a1200

0800198c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <_DoInit+0xa0>)
 8001994:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8001996:	22a8      	movs	r2, #168	; 0xa8
 8001998:	2100      	movs	r1, #0
 800199a:	6838      	ldr	r0, [r7, #0]
 800199c:	f000 fdf9 	bl	8002592 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2203      	movs	r2, #3
 80019a4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2203      	movs	r2, #3
 80019aa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <_DoInit+0xa4>)
 80019b0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <_DoInit+0xa8>)
 80019b6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019be:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <_DoInit+0xa4>)
 80019d6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <_DoInit+0xac>)
 80019dc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2210      	movs	r2, #16
 80019e2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80019f6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	e00c      	b.n	8001a1a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f1c3 030f 	rsb	r3, r3, #15
 8001a06:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <_DoInit+0xb0>)
 8001a08:	5cd1      	ldrb	r1, [r2, r3]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	460a      	mov	r2, r1
 8001a12:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3301      	adds	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d9ef      	bls.n	8001a00 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001a20:	f3bf 8f5f 	dmb	sy
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000be8 	.word	0x20000be8
 8001a30:	080025e8 	.word	0x080025e8
 8001a34:	20000038 	.word	0x20000038
 8001a38:	20000438 	.word	0x20000438
 8001a3c:	08002604 	.word	0x08002604

08001a40 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d905      	bls.n	8001a70 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	e007      	b.n	8001a80 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69b9      	ldr	r1, [r7, #24]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	1acb      	subs	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	bf28      	it	cs
 8001a8e:	4613      	movcs	r3, r2
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4293      	cmp	r3, r2
 8001a98:	bf28      	it	cs
 8001a9a:	4613      	movcs	r3, r2
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	6978      	ldr	r0, [r7, #20]
 8001aae:	f000 fd65 	bl	800257c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001ab2:	6a3a      	ldr	r2, [r7, #32]
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	4413      	add	r3, r2
 8001ab8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	4413      	add	r3, r2
 8001ac0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	4413      	add	r3, r2
 8001ad0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d101      	bne.n	8001ae0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001ae0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1b2      	bne.n	8001a56 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001af0:	6a3b      	ldr	r3, [r7, #32]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b088      	sub	sp, #32
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d911      	bls.n	8001b42 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	6938      	ldr	r0, [r7, #16]
 8001b2e:	f000 fd25 	bl	800257c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001b32:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	441a      	add	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001b40:	e01f      	b.n	8001b82 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	6938      	ldr	r0, [r7, #16]
 8001b56:	f000 fd11 	bl	800257c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4619      	mov	r1, r3
 8001b72:	6938      	ldr	r0, [r7, #16]
 8001b74:	f000 fd02 	bl	800257c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001b78:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	60da      	str	r2, [r3, #12]
}
 8001b82:	bf00      	nop
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001b8a:	b480      	push	{r7}
 8001b8c:	b087      	sub	sp, #28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d808      	bhi.n	8001bb8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad2      	subs	r2, r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e004      	b.n	8001bc2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001bc2:	697b      	ldr	r3, [r7, #20]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <SEGGER_RTT_WriteNoLock+0x98>)
 8001bee:	4413      	add	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d017      	beq.n	8001c2a <SEGGER_RTT_WriteNoLock+0x5a>
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d302      	bcc.n	8001c04 <SEGGER_RTT_WriteNoLock+0x34>
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d023      	beq.n	8001c4a <SEGGER_RTT_WriteNoLock+0x7a>
 8001c02:	e029      	b.n	8001c58 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7ff ffc0 	bl	8001b8a <_GetAvailWriteSpace>
 8001c0a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d202      	bcs.n	8001c1a <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8001c18:	e021      	b.n	8001c5e <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	69b9      	ldr	r1, [r7, #24]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff69 	bl	8001afa <_WriteNoCheck>
    break;
 8001c28:	e019      	b.n	8001c5e <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ffad 	bl	8001b8a <_GetAvailWriteSpace>
 8001c30:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4293      	cmp	r3, r2
 8001c38:	bf28      	it	cs
 8001c3a:	4613      	movcs	r3, r2
 8001c3c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	69b9      	ldr	r1, [r7, #24]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7ff ff59 	bl	8001afa <_WriteNoCheck>
    break;
 8001c48:	e009      	b.n	8001c5e <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	69b9      	ldr	r1, [r7, #24]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff fef6 	bl	8001a40 <_WriteBlocking>
 8001c54:	61f8      	str	r0, [r7, #28]
    break;
 8001c56:	e002      	b.n	8001c5e <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    break;
 8001c5c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000be8 	.word	0x20000be8

08001c6c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <SEGGER_RTT_Write+0x48>)
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b53      	cmp	r3, #83	; 0x53
 8001c84:	d001      	beq.n	8001c8a <SEGGER_RTT_Write+0x1e>
 8001c86:	f7ff fe81 	bl	800198c <_DoInit>
  SEGGER_RTT_LOCK();
 8001c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8001c8e:	f04f 0120 	mov.w	r1, #32
 8001c92:	f381 8811 	msr	BASEPRI, r1
 8001c96:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff ff97 	bl	8001bd0 <SEGGER_RTT_WriteNoLock>
 8001ca2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8001caa:	697b      	ldr	r3, [r7, #20]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000be8 	.word	0x20000be8

08001cb8 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d80e      	bhi.n	8001cf4 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d115      	bne.n	8001d2c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6918      	ldr	r0, [r3, #16]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6819      	ldr	r1, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f7ff ffad 	bl	8001c6c <SEGGER_RTT_Write>
 8001d12:	4602      	mov	r2, r0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d004      	beq.n	8001d26 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d22:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8001d24:	e002      	b.n	8001d2c <_StoreChar+0x74>
      p->Cnt = 0u;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8001d46:	2301      	movs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8001d4e:	e007      	b.n	8001d60 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	623b      	str	r3, [r7, #32]
    Width++;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8001d60:	6a3a      	ldr	r2, [r7, #32]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d2f3      	bcs.n	8001d50 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d901      	bls.n	8001d74 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8001d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d125      	bne.n	8001dca <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d022      	beq.n	8001dca <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8001d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <_PrintUnsigned+0x66>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_PrintUnsigned+0x66>
        c = '0';
 8001d94:	2330      	movs	r3, #48	; 0x30
 8001d96:	76fb      	strb	r3, [r7, #27]
 8001d98:	e001      	b.n	8001d9e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001d9e:	e00b      	b.n	8001db8 <_PrintUnsigned+0x84>
        FieldWidth--;
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	3b01      	subs	r3, #1
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8001da6:	7efb      	ldrb	r3, [r7, #27]
 8001da8:	4619      	mov	r1, r3
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff ff84 	bl	8001cb8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db07      	blt.n	8001dc8 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <_PrintUnsigned+0x96>
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3ec      	bcc.n	8001da0 <_PrintUnsigned+0x6c>
 8001dc6:	e000      	b.n	8001dca <_PrintUnsigned+0x96>
          break;
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db55      	blt.n	8001e7e <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d903      	bls.n	8001de0 <_PrintUnsigned+0xac>
        NumDigits--;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	e009      	b.n	8001df4 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d200      	bcs.n	8001df4 <_PrintUnsigned+0xc0>
          break;
 8001df2:	e005      	b.n	8001e00 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8001dfe:	e7e8      	b.n	8001dd2 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <_PrintUnsigned+0x154>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff ff48 	bl	8001cb8 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db08      	blt.n	8001e42 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8001e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1df      	bne.n	8001e00 <_PrintUnsigned+0xcc>
 8001e40:	e000      	b.n	8001e44 <_PrintUnsigned+0x110>
        break;
 8001e42:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d017      	beq.n	8001e7e <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d014      	beq.n	8001e7e <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001e54:	e00a      	b.n	8001e6c <_PrintUnsigned+0x138>
          FieldWidth--;
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ff2a 	bl	8001cb8 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db07      	blt.n	8001e7c <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <_PrintUnsigned+0x14a>
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3ed      	bcc.n	8001e56 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8001e7a:	e000      	b.n	8001e7e <_PrintUnsigned+0x14a>
            break;
 8001e7c:	bf00      	nop
}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08002618 	.word	0x08002618

08001e8c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bfb8      	it	lt
 8001ea0:	425b      	neglt	r3, r3
 8001ea2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8001ea8:	e007      	b.n	8001eba <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8001eb2:	613b      	str	r3, [r7, #16]
    Width++;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	daf3      	bge.n	8001eaa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d901      	bls.n	8001ece <_PrintInt+0x42>
    Width = NumDigits;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00a      	beq.n	8001eea <_PrintInt+0x5e>
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db04      	blt.n	8001ee4 <_PrintInt+0x58>
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <_PrintInt+0x5e>
    FieldWidth--;
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <_PrintInt+0x6e>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01c      	beq.n	8001f34 <_PrintInt+0xa8>
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d117      	bne.n	8001f34 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d014      	beq.n	8001f34 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001f0a:	e00a      	b.n	8001f22 <_PrintInt+0x96>
        FieldWidth--;
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8001f12:	2120      	movs	r1, #32
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff fecf 	bl	8001cb8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db07      	blt.n	8001f32 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <_PrintInt+0xa8>
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3ed      	bcc.n	8001f0c <_PrintInt+0x80>
 8001f30:	e000      	b.n	8001f34 <_PrintInt+0xa8>
          break;
 8001f32:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db4a      	blt.n	8001fd2 <_PrintInt+0x146>
    if (v < 0) {
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da07      	bge.n	8001f52 <_PrintInt+0xc6>
      v = -v;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	425b      	negs	r3, r3
 8001f46:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8001f48:	212d      	movs	r1, #45	; 0x2d
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff feb4 	bl	8001cb8 <_StoreChar>
 8001f50:	e008      	b.n	8001f64 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8001f5c:	212b      	movs	r1, #43	; 0x2b
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f7ff feaa 	bl	8001cb8 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db32      	blt.n	8001fd2 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01f      	beq.n	8001fb6 <_PrintInt+0x12a>
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d11a      	bne.n	8001fb6 <_PrintInt+0x12a>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d117      	bne.n	8001fb6 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d014      	beq.n	8001fb6 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001f8c:	e00a      	b.n	8001fa4 <_PrintInt+0x118>
            FieldWidth--;
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8001f94:	2130      	movs	r1, #48	; 0x30
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7ff fe8e 	bl	8001cb8 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db07      	blt.n	8001fb4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <_PrintInt+0x12a>
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3ed      	bcc.n	8001f8e <_PrintInt+0x102>
 8001fb2:	e000      	b.n	8001fb6 <_PrintInt+0x12a>
              break;
 8001fb4:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db09      	blt.n	8001fd2 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff feb1 	bl	8001d34 <_PrintUnsigned>
      }
    }
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0a2      	sub	sp, #136	; 0x88
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8001fee:	2340      	movs	r3, #64	; 0x40
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3301      	adds	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 800200c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8161 	beq.w	80022d8 <SEGGER_RTT_vprintf+0x2fc>
      break;
    }
    if (c == '%') {
 8002016:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800201a:	2b25      	cmp	r3, #37	; 0x25
 800201c:	f040 814f 	bne.w	80022be <SEGGER_RTT_vprintf+0x2e2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002020:	2300      	movs	r3, #0
 8002022:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8002024:	2301      	movs	r3, #1
 8002026:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8002030:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002034:	3b23      	subs	r3, #35	; 0x23
 8002036:	2b0d      	cmp	r3, #13
 8002038:	d83e      	bhi.n	80020b8 <SEGGER_RTT_vprintf+0xdc>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <SEGGER_RTT_vprintf+0x64>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	080020a9 	.word	0x080020a9
 8002044:	080020b9 	.word	0x080020b9
 8002048:	080020b9 	.word	0x080020b9
 800204c:	080020b9 	.word	0x080020b9
 8002050:	080020b9 	.word	0x080020b9
 8002054:	080020b9 	.word	0x080020b9
 8002058:	080020b9 	.word	0x080020b9
 800205c:	080020b9 	.word	0x080020b9
 8002060:	08002099 	.word	0x08002099
 8002064:	080020b9 	.word	0x080020b9
 8002068:	08002079 	.word	0x08002079
 800206c:	080020b9 	.word	0x080020b9
 8002070:	080020b9 	.word	0x080020b9
 8002074:	08002089 	.word	0x08002089
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8002078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	673b      	str	r3, [r7, #112]	; 0x70
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	3301      	adds	r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	e01a      	b.n	80020be <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	673b      	str	r3, [r7, #112]	; 0x70
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3301      	adds	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	e012      	b.n	80020be <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8002098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	673b      	str	r3, [r7, #112]	; 0x70
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3301      	adds	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	e00a      	b.n	80020be <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80020a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	673b      	str	r3, [r7, #112]	; 0x70
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	e002      	b.n	80020be <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 80020b8:	2300      	movs	r3, #0
 80020ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80020bc:	bf00      	nop
        }
      } while (v);
 80020be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1b1      	bne.n	8002028 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80020c4:	2300      	movs	r3, #0
 80020c6:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 80020d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80020d4:	2b2f      	cmp	r3, #47	; 0x2f
 80020d6:	d912      	bls.n	80020fe <SEGGER_RTT_vprintf+0x122>
 80020d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80020dc:	2b39      	cmp	r3, #57	; 0x39
 80020de:	d80e      	bhi.n	80020fe <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3301      	adds	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80020e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	461a      	mov	r2, r3
 80020f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80020f6:	4413      	add	r3, r2
 80020f8:	3b30      	subs	r3, #48	; 0x30
 80020fa:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 80020fc:	e7e4      	b.n	80020c8 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80020fe:	2300      	movs	r3, #0
 8002100:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 800210a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800210e:	2b2e      	cmp	r3, #46	; 0x2e
 8002110:	d11d      	bne.n	800214e <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8002120:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002124:	2b2f      	cmp	r3, #47	; 0x2f
 8002126:	d912      	bls.n	800214e <SEGGER_RTT_vprintf+0x172>
 8002128:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800212c:	2b39      	cmp	r3, #57	; 0x39
 800212e:	d80e      	bhi.n	800214e <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8002136:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	461a      	mov	r2, r3
 8002142:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002146:	4413      	add	r3, r2
 8002148:	3b30      	subs	r3, #48	; 0x30
 800214a:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 800214c:	e7e4      	b.n	8002118 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8002156:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800215a:	2b6c      	cmp	r3, #108	; 0x6c
 800215c:	d003      	beq.n	8002166 <SEGGER_RTT_vprintf+0x18a>
 800215e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002162:	2b68      	cmp	r3, #104	; 0x68
 8002164:	d107      	bne.n	8002176 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	3301      	adds	r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8002174:	e7ef      	b.n	8002156 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8002176:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d028      	beq.n	80021d0 <SEGGER_RTT_vprintf+0x1f4>
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	dc07      	bgt.n	8002192 <SEGGER_RTT_vprintf+0x1b6>
 8002182:	2b58      	cmp	r3, #88	; 0x58
 8002184:	d04a      	beq.n	800221c <SEGGER_RTT_vprintf+0x240>
 8002186:	2b63      	cmp	r3, #99	; 0x63
 8002188:	d00f      	beq.n	80021aa <SEGGER_RTT_vprintf+0x1ce>
 800218a:	2b25      	cmp	r3, #37	; 0x25
 800218c:	f000 808c 	beq.w	80022a8 <SEGGER_RTT_vprintf+0x2cc>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8002190:	e091      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8002192:	2b73      	cmp	r3, #115	; 0x73
 8002194:	d055      	beq.n	8002242 <SEGGER_RTT_vprintf+0x266>
 8002196:	2b73      	cmp	r3, #115	; 0x73
 8002198:	dc02      	bgt.n	80021a0 <SEGGER_RTT_vprintf+0x1c4>
 800219a:	2b70      	cmp	r3, #112	; 0x70
 800219c:	d071      	beq.n	8002282 <SEGGER_RTT_vprintf+0x2a6>
        break;
 800219e:	e08a      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 80021a0:	2b75      	cmp	r3, #117	; 0x75
 80021a2:	d028      	beq.n	80021f6 <SEGGER_RTT_vprintf+0x21a>
 80021a4:	2b78      	cmp	r3, #120	; 0x78
 80021a6:	d039      	beq.n	800221c <SEGGER_RTT_vprintf+0x240>
        break;
 80021a8:	e085      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1d19      	adds	r1, r3, #4
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6011      	str	r1, [r2, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 80021b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 80021be:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80021c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fd75 	bl	8001cb8 <_StoreChar>
        break;
 80021ce:	e072      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1d19      	adds	r1, r3, #4
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6011      	str	r1, [r2, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80021de:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80021e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ec:	220a      	movs	r2, #10
 80021ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80021f0:	f7ff fe4c 	bl	8001e8c <_PrintInt>
        break;
 80021f4:	e05f      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1d19      	adds	r1, r3, #4
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6011      	str	r1, [r2, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8002204:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002206:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800220a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002214:	220a      	movs	r2, #10
 8002216:	f7ff fd8d 	bl	8001d34 <_PrintUnsigned>
        break;
 800221a:	e04c      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1d19      	adds	r1, r3, #4
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6011      	str	r1, [r2, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800222a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800222c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223a:	2210      	movs	r2, #16
 800223c:	f7ff fd7a 	bl	8001d34 <_PrintUnsigned>
        break;
 8002240:	e039      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
          const char * s = va_arg(*pParamList, const char *);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1d19      	adds	r1, r3, #4
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6011      	str	r1, [r2, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	66bb      	str	r3, [r7, #104]	; 0x68
            c = *s;
 8002250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8002258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800225a:	3301      	adds	r3, #1
 800225c:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 800225e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <SEGGER_RTT_vprintf+0x2a2>
           _StoreChar(&BufferDesc, c);
 8002266:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800226a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fd21 	bl	8001cb8 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8002276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002278:	2b00      	cmp	r3, #0
 800227a:	dae9      	bge.n	8002250 <SEGGER_RTT_vprintf+0x274>
        break;
 800227c:	e01b      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
              break;
 800227e:	bf00      	nop
        break;
 8002280:	e019      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	1d19      	adds	r1, r3, #4
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6011      	str	r1, [r2, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8002290:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002292:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002296:	2300      	movs	r3, #0
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	2308      	movs	r3, #8
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2308      	movs	r3, #8
 80022a0:	2210      	movs	r2, #16
 80022a2:	f7ff fd47 	bl	8001d34 <_PrintUnsigned>
        break;
 80022a6:	e006      	b.n	80022b6 <SEGGER_RTT_vprintf+0x2da>
        _StoreChar(&BufferDesc, '%');
 80022a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022ac:	2125      	movs	r1, #37	; 0x25
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fd02 	bl	8001cb8 <_StoreChar>
        break;
 80022b4:	bf00      	nop
      }
      sFormat++;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3301      	adds	r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	e007      	b.n	80022ce <SEGGER_RTT_vprintf+0x2f2>
    } else {
      _StoreChar(&BufferDesc, c);
 80022be:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80022c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fcf5 	bl	8001cb8 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 80022ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f6bf ae94 	bge.w	8001ffe <SEGGER_RTT_vprintf+0x22>
 80022d6:	e000      	b.n	80022da <SEGGER_RTT_vprintf+0x2fe>
      break;
 80022d8:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80022da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	dd0d      	ble.n	80022fc <SEGGER_RTT_vprintf+0x320>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80022e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <SEGGER_RTT_vprintf+0x318>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80022e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	4619      	mov	r1, r3
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff fcbc 	bl	8001c6c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80022f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022f8:	4413      	add	r3, r2
 80022fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 80022fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3780      	adds	r7, #128	; 0x80
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop

08002308 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8002308:	b40e      	push	{r1, r2, r3}
 800230a:	b580      	push	{r7, lr}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	461a      	mov	r2, r3
 800231e:	69f9      	ldr	r1, [r7, #28]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fe5b 	bl	8001fdc <SEGGER_RTT_vprintf>
 8002326:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002334:	b003      	add	sp, #12
 8002336:	4770      	bx	lr

08002338 <ledGPIOInit>:

#include "led.h"


static void ledGPIOInit(ledDev_st *_dev)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = _dev->pin;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	2301      	movs	r3, #1
 8002358:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(_dev->port, &GPIO_InitStruct);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f107 020c 	add.w	r2, r7, #12
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fce3 	bl	8000d38 <HAL_GPIO_Init>
}
 8002372:	bf00      	nop
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <ledInit>:

void ledInit(ledDev_st *_dev, GPIO_TypeDef* _port, uint16_t _pin, ledActiveLevel_e _activeLevel, ledState_e _initState)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	4611      	mov	r1, r2
 8002386:	461a      	mov	r2, r3
 8002388:	460b      	mov	r3, r1
 800238a:	80fb      	strh	r3, [r7, #6]
 800238c:	4613      	mov	r3, r2
 800238e:	717b      	strb	r3, [r7, #5]
	if(_dev == NULL || _port == NULL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d017      	beq.n	80023c6 <ledInit+0x4c>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d014      	beq.n	80023c6 <ledInit+0x4c>
	{
		return;
	}
	_dev->pin = _pin;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	801a      	strh	r2, [r3, #0]
	_dev->port = _port;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	609a      	str	r2, [r3, #8]
	_dev->initialState =  _initState;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	7e3a      	ldrb	r2, [r7, #24]
 80023ac:	70da      	strb	r2, [r3, #3]
	_dev->activeLevel = _activeLevel;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	797a      	ldrb	r2, [r7, #5]
 80023b2:	709a      	strb	r2, [r3, #2]

	ledForceState(_dev, _initState);
 80023b4:	7e3b      	ldrb	r3, [r7, #24]
 80023b6:	4619      	mov	r1, r3
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f895 	bl	80024e8 <ledForceState>
	ledGPIOInit(_dev);
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff ffba 	bl	8002338 <ledGPIOInit>
 80023c4:	e000      	b.n	80023c8 <ledInit+0x4e>
		return;
 80023c6:	bf00      	nop
}
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <ledSetState>:
    return _dev->state;
} 


void ledSetState(ledDev_st *_dev, ledState_e state)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	70fb      	strb	r3, [r7, #3]
    // Only set state if specified state is different from current state_.
    if (_dev->state != state)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	791b      	ldrb	r3, [r3, #4]
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d004      	beq.n	80023ee <ledSetState+0x20>
    {
    	ledForceState(_dev, state);
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	4619      	mov	r1, r3
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f87d 	bl	80024e8 <ledForceState>
    }
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ledOn>:
    return _dev->initialState;
}


void ledOn(ledDev_st *_dev)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
    ledSetState(_dev, On);
 80023fe:	2101      	movs	r1, #1
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ffe4 	bl	80023ce <ledSetState>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <ledOff>:


void ledOff(ledDev_st *_dev)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
	ledSetState(_dev, Off);
 8002416:	2100      	movs	r1, #0
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffd8 	bl	80023ce <ledSetState>
}    
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <ledToggle>:
	ledSetState(_dev, _dev->initialState);
}    


void ledToggle(ledDev_st *_dev)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
	ledSetState(_dev, _dev->state == On ? Off : On);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	791b      	ldrb	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	bf14      	ite	ne
 8002436:	2301      	movne	r3, #1
 8002438:	2300      	moveq	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffc5 	bl	80023ce <ledSetState>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <ledBlink>:
    uint8_t count,
    uint16_t onTimeMs,
    uint16_t offTimeMs,
    uint16_t leadOffTimeMs,
    uint16_t trailOffTimeMs)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	72fb      	strb	r3, [r7, #11]
 800245e:	460b      	mov	r3, r1
 8002460:	813b      	strh	r3, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]
    // Simple flash implementation.
    // Synchronous, caller has to wait for completion.
    // leadOffTimeMs and trailOffTimeMs are only
    // used if LED is currently on.
    
	ledState_e savedState = _dev->state;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	791b      	ldrb	r3, [r3, #4]
 800246a:	75bb      	strb	r3, [r7, #22]

    if (savedState == On)
 800246c:	7dbb      	ldrb	r3, [r7, #22]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d107      	bne.n	8002482 <ledBlink+0x36>
    {
    	ledSetState(_dev, Off);
 8002472:	2100      	movs	r1, #0
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7ff ffaa 	bl	80023ce <ledSetState>
        HAL_Delay(leadOffTimeMs);
 800247a:	8c3b      	ldrh	r3, [r7, #32]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fb27 	bl	8000ad0 <HAL_Delay>
    }

    for (uint8_t flash = 0; flash < count; ++flash)
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
 8002486:	e017      	b.n	80024b8 <ledBlink+0x6c>
    {
    	ledSetState(_dev, On);
 8002488:	2101      	movs	r1, #1
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff ff9f 	bl	80023ce <ledSetState>
    	HAL_Delay(onTimeMs);
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fb1c 	bl	8000ad0 <HAL_Delay>

        if (flash < count - 1)
 8002498:	7dfa      	ldrb	r2, [r7, #23]
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	3b01      	subs	r3, #1
 800249e:	429a      	cmp	r2, r3
 80024a0:	da07      	bge.n	80024b2 <ledBlink+0x66>
        {
        	ledSetState(_dev, Off);
 80024a2:	2100      	movs	r1, #0
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff ff92 	bl	80023ce <ledSetState>
        	HAL_Delay(offTimeMs);
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fb0f 	bl	8000ad0 <HAL_Delay>
    for (uint8_t flash = 0; flash < count; ++flash)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	3301      	adds	r3, #1
 80024b6:	75fb      	strb	r3, [r7, #23]
 80024b8:	7dfa      	ldrb	r2, [r7, #23]
 80024ba:	7afb      	ldrb	r3, [r7, #11]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3e3      	bcc.n	8002488 <ledBlink+0x3c>
        }
    }

    if (savedState == On)
 80024c0:	7dbb      	ldrb	r3, [r7, #22]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <ledBlink+0x8a>
    {
    	ledSetState(_dev, Off);
 80024c6:	2100      	movs	r1, #0
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff ff80 	bl	80023ce <ledSetState>
    	HAL_Delay(trailOffTimeMs);
 80024ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fafd 	bl	8000ad0 <HAL_Delay>
    }
    ledSetState(_dev, savedState);
 80024d6:	7dbb      	ldrb	r3, [r7, #22]
 80024d8:	4619      	mov	r1, r3
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f7ff ff77 	bl	80023ce <ledSetState>
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <ledForceState>:




void ledForceState(ledDev_st *_dev, ledState_e state)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
    if (state == On){
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d109      	bne.n	800250e <ledForceState+0x26>
    	HAL_GPIO_WritePin(_dev->port, _dev->pin, _dev->activeLevel);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6898      	ldr	r0, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8819      	ldrh	r1, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	789b      	ldrb	r3, [r3, #2]
 8002506:	461a      	mov	r2, r3
 8002508:	f7fe fdd8 	bl	80010bc <HAL_GPIO_WritePin>
 800250c:	e00b      	b.n	8002526 <ledForceState+0x3e>
    }
    else{
    	HAL_GPIO_WritePin(_dev->port, _dev->pin, _dev->activeLevel ^ 1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6898      	ldr	r0, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8819      	ldrh	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	789b      	ldrb	r3, [r3, #2]
 800251a:	f083 0301 	eor.w	r3, r3, #1
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	f7fe fdcb 	bl	80010bc <HAL_GPIO_WritePin>
    }
    _dev->state = state;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	711a      	strb	r2, [r3, #4]
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4e0d      	ldr	r6, [pc, #52]	; (800256c <__libc_init_array+0x38>)
 8002538:	4c0d      	ldr	r4, [pc, #52]	; (8002570 <__libc_init_array+0x3c>)
 800253a:	1ba4      	subs	r4, r4, r6
 800253c:	10a4      	asrs	r4, r4, #2
 800253e:	2500      	movs	r5, #0
 8002540:	42a5      	cmp	r5, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	4e0b      	ldr	r6, [pc, #44]	; (8002574 <__libc_init_array+0x40>)
 8002546:	4c0c      	ldr	r4, [pc, #48]	; (8002578 <__libc_init_array+0x44>)
 8002548:	f000 f82c 	bl	80025a4 <_init>
 800254c:	1ba4      	subs	r4, r4, r6
 800254e:	10a4      	asrs	r4, r4, #2
 8002550:	2500      	movs	r5, #0
 8002552:	42a5      	cmp	r5, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800255c:	4798      	blx	r3
 800255e:	3501      	adds	r5, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002566:	4798      	blx	r3
 8002568:	3501      	adds	r5, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	08002630 	.word	0x08002630
 8002570:	08002630 	.word	0x08002630
 8002574:	08002630 	.word	0x08002630
 8002578:	08002634 	.word	0x08002634

0800257c <memcpy>:
 800257c:	b510      	push	{r4, lr}
 800257e:	1e43      	subs	r3, r0, #1
 8002580:	440a      	add	r2, r1
 8002582:	4291      	cmp	r1, r2
 8002584:	d100      	bne.n	8002588 <memcpy+0xc>
 8002586:	bd10      	pop	{r4, pc}
 8002588:	f811 4b01 	ldrb.w	r4, [r1], #1
 800258c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002590:	e7f7      	b.n	8002582 <memcpy+0x6>

08002592 <memset>:
 8002592:	4402      	add	r2, r0
 8002594:	4603      	mov	r3, r0
 8002596:	4293      	cmp	r3, r2
 8002598:	d100      	bne.n	800259c <memset+0xa>
 800259a:	4770      	bx	lr
 800259c:	f803 1b01 	strb.w	r1, [r3], #1
 80025a0:	e7f9      	b.n	8002596 <memset+0x4>
	...

080025a4 <_init>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	bf00      	nop
 80025a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025aa:	bc08      	pop	{r3}
 80025ac:	469e      	mov	lr, r3
 80025ae:	4770      	bx	lr

080025b0 <_fini>:
 80025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b2:	bf00      	nop
 80025b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b6:	bc08      	pop	{r3}
 80025b8:	469e      	mov	lr, r3
 80025ba:	4770      	bx	lr
